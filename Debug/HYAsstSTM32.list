
HYAsstSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a308  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000808  0800a4a8  0800a4a8  0001a4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb0  0800acb0  0002031c  2**0
                  CONTENTS
  4 .ARM          00000008  0800acb0  0800acb0  0001acb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acb8  0800acb8  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acb8  0800acb8  0001acb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acbc  0800acbc  0001acbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  0800acc0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000868c  20000320  0800afdc  00020320  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200089ac  0800afdc  000289ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152f6  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e0c  00000000  00000000  00035642  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  00038450  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  00039110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018ae0  00000000  00000000  00039c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d861  00000000  00000000  00052770  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a3ed  00000000  00000000  0005ffd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ea3be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043f4  00000000  00000000  000ea43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000320 	.word	0x20000320
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a490 	.word	0x0800a490

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000324 	.word	0x20000324
 80001dc:	0800a490 	.word	0x0800a490

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b9ac 	b.w	8000f48 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f840 	bl	8000c7c <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2lz>:
 8000c08:	b538      	push	{r3, r4, r5, lr}
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	4604      	mov	r4, r0
 8000c10:	460d      	mov	r5, r1
 8000c12:	f7ff ff7b 	bl	8000b0c <__aeabi_dcmplt>
 8000c16:	b928      	cbnz	r0, 8000c24 <__aeabi_d2lz+0x1c>
 8000c18:	4620      	mov	r0, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c20:	f000 b80a 	b.w	8000c38 <__aeabi_d2ulz>
 8000c24:	4620      	mov	r0, r4
 8000c26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c2a:	f000 f805 	bl	8000c38 <__aeabi_d2ulz>
 8000c2e:	4240      	negs	r0, r0
 8000c30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c34:	bd38      	pop	{r3, r4, r5, pc}
 8000c36:	bf00      	nop

08000c38 <__aeabi_d2ulz>:
 8000c38:	b5d0      	push	{r4, r6, r7, lr}
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <__aeabi_d2ulz+0x3c>)
 8000c3e:	4606      	mov	r6, r0
 8000c40:	460f      	mov	r7, r1
 8000c42:	f7ff fcf1 	bl	8000628 <__aeabi_dmul>
 8000c46:	f000 f981 	bl	8000f4c <__aeabi_d2uiz>
 8000c4a:	4604      	mov	r4, r0
 8000c4c:	f7ff fc72 	bl	8000534 <__aeabi_ui2d>
 8000c50:	2200      	movs	r2, #0
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <__aeabi_d2ulz+0x40>)
 8000c54:	f7ff fce8 	bl	8000628 <__aeabi_dmul>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	460b      	mov	r3, r1
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	4639      	mov	r1, r7
 8000c60:	f7ff fb2a 	bl	80002b8 <__aeabi_dsub>
 8000c64:	f000 f972 	bl	8000f4c <__aeabi_d2uiz>
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4623      	mov	r3, r4
 8000c6c:	4310      	orrs	r0, r2
 8000c6e:	4619      	mov	r1, r3
 8000c70:	bdd0      	pop	{r4, r6, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	3df00000 	.word	0x3df00000
 8000c78:	41f00000 	.word	0x41f00000

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	4688      	mov	r8, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14b      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8a:	428a      	cmp	r2, r1
 8000c8c:	4615      	mov	r5, r2
 8000c8e:	d967      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b14a      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c96:	f1c2 0720 	rsb	r7, r2, #32
 8000c9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000ca2:	4095      	lsls	r5, r2
 8000ca4:	ea47 0803 	orr.w	r8, r7, r3
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb4:	fa1f fc85 	uxth.w	ip, r5
 8000cb8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cc0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18eb      	adds	r3, r5, r3
 8000cca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cce:	f080 811b 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8118 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000cd8:	3f02      	subs	r7, #2
 8000cda:	442b      	add	r3, r5
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cf0:	45a4      	cmp	ip, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	192c      	adds	r4, r5, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000d04:	3802      	subs	r0, #2
 8000d06:	442c      	add	r4, r5
 8000d08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d0c:	eba4 040c 	sub.w	r4, r4, ip
 8000d10:	2700      	movs	r7, #0
 8000d12:	b11e      	cbz	r6, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xbe>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80eb 	beq.w	8000f02 <__udivmoddi4+0x286>
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d32:	4638      	mov	r0, r7
 8000d34:	4639      	mov	r1, r7
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f783 	clz	r7, r3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d147      	bne.n	8000dd2 <__udivmoddi4+0x156>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd0>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2c4>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	4698      	mov	r8, r3
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000d5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xe8>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 808f 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6e:	1b49      	subs	r1, r1, r5
 8000d70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d74:	fa1f f885 	uxth.w	r8, r5
 8000d78:	2701      	movs	r7, #1
 8000d7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7e:	0c23      	lsrs	r3, r4, #16
 8000d80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb08 f10c 	mul.w	r1, r8, ip
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d90:	18eb      	adds	r3, r5, r3
 8000d92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d9e:	4684      	mov	ip, r0
 8000da0:	1a59      	subs	r1, r3, r1
 8000da2:	b2a3      	uxth	r3, r4
 8000da4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000db0:	fb08 f800 	mul.w	r8, r8, r0
 8000db4:	45a0      	cmp	r8, r4
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x14c>
 8000db8:	192c      	adds	r4, r5, r4
 8000dba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x14a>
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	f200 80b6 	bhi.w	8000f32 <__udivmoddi4+0x2b6>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	eba4 0408 	sub.w	r4, r4, r8
 8000dcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dd0:	e79f      	b.n	8000d12 <__udivmoddi4+0x96>
 8000dd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd6:	40bb      	lsls	r3, r7
 8000dd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ddc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000de0:	fa01 f407 	lsl.w	r4, r1, r7
 8000de4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000df0:	4325      	orrs	r5, r4
 8000df2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df6:	0c2c      	lsrs	r4, r5, #16
 8000df8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dfc:	fa1f fa8e 	uxth.w	sl, lr
 8000e00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e04:	fb09 f40a 	mul.w	r4, r9, sl
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1e 0303 	adds.w	r3, lr, r3
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	f080 8087 	bcs.w	8000f2e <__udivmoddi4+0x2b2>
 8000e20:	429c      	cmp	r4, r3
 8000e22:	f240 8084 	bls.w	8000f2e <__udivmoddi4+0x2b2>
 8000e26:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2a:	4473      	add	r3, lr
 8000e2c:	1b1b      	subs	r3, r3, r4
 8000e2e:	b2ad      	uxth	r5, r5
 8000e30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e34:	fb08 3310 	mls	r3, r8, r0, r3
 8000e38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e40:	45a2      	cmp	sl, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1e 0404 	adds.w	r4, lr, r4
 8000e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4c:	d26b      	bcs.n	8000f26 <__udivmoddi4+0x2aa>
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d969      	bls.n	8000f26 <__udivmoddi4+0x2aa>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4474      	add	r4, lr
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	eba4 040a 	sub.w	r4, r4, sl
 8000e62:	454c      	cmp	r4, r9
 8000e64:	46c2      	mov	sl, r8
 8000e66:	464b      	mov	r3, r9
 8000e68:	d354      	bcc.n	8000f14 <__udivmoddi4+0x298>
 8000e6a:	d051      	beq.n	8000f10 <__udivmoddi4+0x294>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d069      	beq.n	8000f44 <__udivmoddi4+0x2c8>
 8000e70:	ebb1 050a 	subs.w	r5, r1, sl
 8000e74:	eb64 0403 	sbc.w	r4, r4, r3
 8000e78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e7c:	40fd      	lsrs	r5, r7
 8000e7e:	40fc      	lsrs	r4, r7
 8000e80:	ea4c 0505 	orr.w	r5, ip, r5
 8000e84:	e9c6 5400 	strd	r5, r4, [r6]
 8000e88:	2700      	movs	r7, #0
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f703 	lsr.w	r7, r0, r3
 8000e94:	4095      	lsls	r5, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ea2:	4338      	orrs	r0, r7
 8000ea4:	0c01      	lsrs	r1, r0, #16
 8000ea6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eaa:	fa1f f885 	uxth.w	r8, r5
 8000eae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb6:	fb07 f308 	mul.w	r3, r7, r8
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x256>
 8000ec2:	1869      	adds	r1, r5, r1
 8000ec4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec8:	d22f      	bcs.n	8000f2a <__udivmoddi4+0x2ae>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d92d      	bls.n	8000f2a <__udivmoddi4+0x2ae>
 8000ece:	3f02      	subs	r7, #2
 8000ed0:	4429      	add	r1, r5
 8000ed2:	1acb      	subs	r3, r1, r3
 8000ed4:	b281      	uxth	r1, r0
 8000ed6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb00 f308 	mul.w	r3, r0, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x27e>
 8000eea:	1869      	adds	r1, r5, r1
 8000eec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef0:	d217      	bcs.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d915      	bls.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	4429      	add	r1, r5
 8000efa:	1ac9      	subs	r1, r1, r3
 8000efc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f00:	e73b      	b.n	8000d7a <__udivmoddi4+0xfe>
 8000f02:	4637      	mov	r7, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e709      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f08:	4607      	mov	r7, r0
 8000f0a:	e6e7      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f10:	4541      	cmp	r1, r8
 8000f12:	d2ab      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f18:	eb69 020e 	sbc.w	r2, r9, lr
 8000f1c:	3801      	subs	r0, #1
 8000f1e:	4613      	mov	r3, r2
 8000f20:	e7a4      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f22:	4660      	mov	r0, ip
 8000f24:	e7e9      	b.n	8000efa <__udivmoddi4+0x27e>
 8000f26:	4618      	mov	r0, r3
 8000f28:	e795      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2a:	4667      	mov	r7, ip
 8000f2c:	e7d1      	b.n	8000ed2 <__udivmoddi4+0x256>
 8000f2e:	4681      	mov	r9, r0
 8000f30:	e77c      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f32:	3802      	subs	r0, #2
 8000f34:	442c      	add	r4, r5
 8000f36:	e747      	b.n	8000dc8 <__udivmoddi4+0x14c>
 8000f38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f3c:	442b      	add	r3, r5
 8000f3e:	e72f      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f40:	4638      	mov	r0, r7
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xda>
 8000f44:	4637      	mov	r7, r6
 8000f46:	e6e9      	b.n	8000d1c <__udivmoddi4+0xa0>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <__aeabi_d2uiz>:
 8000f4c:	004a      	lsls	r2, r1, #1
 8000f4e:	d211      	bcs.n	8000f74 <__aeabi_d2uiz+0x28>
 8000f50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000f54:	d211      	bcs.n	8000f7a <__aeabi_d2uiz+0x2e>
 8000f56:	d50d      	bpl.n	8000f74 <__aeabi_d2uiz+0x28>
 8000f58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000f5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f60:	d40e      	bmi.n	8000f80 <__aeabi_d2uiz+0x34>
 8000f62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f72:	4770      	bx	lr
 8000f74:	f04f 0000 	mov.w	r0, #0
 8000f78:	4770      	bx	lr
 8000f7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f7e:	d102      	bne.n	8000f86 <__aeabi_d2uiz+0x3a>
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <NMEA_Comma_Pos>:

typedef uint8_t   u8;
typedef uint16_t  u16;
typedef uint32_t  u32;

u8  NMEA_Comma_Pos (u8 *buf, u8 cx) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
	u8 *p = buf;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	60fb      	str	r3, [r7, #12]
	while (cx) {
 8000f9c:	e017      	b.n	8000fce <NMEA_Comma_Pos+0x42>
		if (*buf=='*' || *buf<' ' || *buf>'z') return 0xFF;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8000fa4:	d007      	beq.n	8000fb6 <NMEA_Comma_Pos+0x2a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b1f      	cmp	r3, #31
 8000fac:	d903      	bls.n	8000fb6 <NMEA_Comma_Pos+0x2a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b7a      	cmp	r3, #122	; 0x7a
 8000fb4:	d901      	bls.n	8000fba <NMEA_Comma_Pos+0x2e>
 8000fb6:	23ff      	movs	r3, #255	; 0xff
 8000fb8:	e010      	b.n	8000fdc <NMEA_Comma_Pos+0x50>
		if (*buf==',') {-- cx;} buf ++;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b2c      	cmp	r3, #44	; 0x2c
 8000fc0:	d102      	bne.n	8000fc8 <NMEA_Comma_Pos+0x3c>
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	70fb      	strb	r3, [r7, #3]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	607b      	str	r3, [r7, #4]
	while (cx) {
 8000fce:	78fb      	ldrb	r3, [r7, #3]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e4      	bne.n	8000f9e <NMEA_Comma_Pos+0x12>
	} return buf - p;
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	b2db      	uxtb	r3, r3
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <NMEA_Pow>:

u32 NMEA_Pow (u32 a, u8 n) {
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
	u32 ret = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	60fb      	str	r3, [r7, #12]
	while (n) {
 8000ff8:	e011      	b.n	800101e <NMEA_Pow+0x36>
		if(n&1) ret *= a;
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <NMEA_Pow+0x26>
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	fb02 f303 	mul.w	r3, r2, r3
 800100c:	60fb      	str	r3, [r7, #12]
		a *= a, n >>= 1;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	fb02 f303 	mul.w	r3, r2, r3
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	78fb      	ldrb	r3, [r7, #3]
 800101a:	085b      	lsrs	r3, r3, #1
 800101c:	70fb      	strb	r3, [r7, #3]
	while (n) {
 800101e:	78fb      	ldrb	r3, [r7, #3]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1ea      	bne.n	8000ffa <NMEA_Pow+0x12>
	} return ret;
 8001024:	68fb      	ldr	r3, [r7, #12]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <NMEA_StrToNum>:

int NMEA_StrToNum (u8 *buf, u8*dx) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b088      	sub	sp, #32
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
 800103a:	6039      	str	r1, [r7, #0]
	u8  *p = buf;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	61fb      	str	r3, [r7, #28]
	u32 ires = 0, fres = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	61bb      	str	r3, [r7, #24]
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
	u8  ilen = 0, flen = 0, flag = 0, i;
 8001048:	2300      	movs	r3, #0
 800104a:	74fb      	strb	r3, [r7, #19]
 800104c:	2300      	movs	r3, #0
 800104e:	74bb      	strb	r3, [r7, #18]
 8001050:	2300      	movs	r3, #0
 8001052:	747b      	strb	r3, [r7, #17]
	int ret;

	while (1) {
		if (*p=='-') {flag |= 0x02; p ++;}
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b2d      	cmp	r3, #45	; 0x2d
 800105a:	d106      	bne.n	800106a <NMEA_StrToNum+0x38>
 800105c:	7c7b      	ldrb	r3, [r7, #17]
 800105e:	f043 0302 	orr.w	r3, r3, #2
 8001062:	747b      	strb	r3, [r7, #17]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	3301      	adds	r3, #1
 8001068:	61fb      	str	r3, [r7, #28]
		if (*p==',' || *p=='*') {break;}
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b2c      	cmp	r3, #44	; 0x2c
 8001070:	d02c      	beq.n	80010cc <NMEA_StrToNum+0x9a>
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b2a      	cmp	r3, #42	; 0x2a
 8001078:	d028      	beq.n	80010cc <NMEA_StrToNum+0x9a>
		if (*p=='.') {flag |= 0x01; p ++;}
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b2e      	cmp	r3, #46	; 0x2e
 8001080:	d107      	bne.n	8001092 <NMEA_StrToNum+0x60>
 8001082:	7c7b      	ldrb	r3, [r7, #17]
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	747b      	strb	r3, [r7, #17]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3301      	adds	r3, #1
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e00c      	b.n	80010ac <NMEA_StrToNum+0x7a>
		else if (*p<'0' || *p>'9') {
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b2f      	cmp	r3, #47	; 0x2f
 8001098:	d903      	bls.n	80010a2 <NMEA_StrToNum+0x70>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b39      	cmp	r3, #57	; 0x39
 80010a0:	d904      	bls.n	80010ac <NMEA_StrToNum+0x7a>
			ilen = 0; flen = 0; break;
 80010a2:	2300      	movs	r3, #0
 80010a4:	74fb      	strb	r3, [r7, #19]
 80010a6:	2300      	movs	r3, #0
 80010a8:	74bb      	strb	r3, [r7, #18]
 80010aa:	e00f      	b.n	80010cc <NMEA_StrToNum+0x9a>
		} if (flag&0x01) {++ flen;}
 80010ac:	7c7b      	ldrb	r3, [r7, #17]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <NMEA_StrToNum+0x8c>
 80010b6:	7cbb      	ldrb	r3, [r7, #18]
 80010b8:	3301      	adds	r3, #1
 80010ba:	74bb      	strb	r3, [r7, #18]
 80010bc:	e002      	b.n	80010c4 <NMEA_StrToNum+0x92>
		else {++ ilen;} p ++;
 80010be:	7cfb      	ldrb	r3, [r7, #19]
 80010c0:	3301      	adds	r3, #1
 80010c2:	74fb      	strb	r3, [r7, #19]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	3301      	adds	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
		if (*p=='-') {flag |= 0x02; p ++;}
 80010ca:	e7c3      	b.n	8001054 <NMEA_StrToNum+0x22>
	} if (flag&0x02) {buf ++;}
 80010cc:	7c7b      	ldrb	r3, [r7, #17]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <NMEA_StrToNum+0xaa>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3301      	adds	r3, #1
 80010da:	607b      	str	r3, [r7, #4]

	for (i=0; i<ilen; ++ i) {
 80010dc:	2300      	movs	r3, #0
 80010de:	743b      	strb	r3, [r7, #16]
 80010e0:	e019      	b.n	8001116 <NMEA_StrToNum+0xe4>
		ires += NMEA_Pow(10, ilen-i-1)*(buf[i]^'0');
 80010e2:	7cfa      	ldrb	r2, [r7, #19]
 80010e4:	7c3b      	ldrb	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	3b01      	subs	r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	4619      	mov	r1, r3
 80010f0:	200a      	movs	r0, #10
 80010f2:	f7ff ff79 	bl	8000fe8 <NMEA_Pow>
 80010f6:	4601      	mov	r1, r0
 80010f8:	7c3b      	ldrb	r3, [r7, #16]
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001104:	b2db      	uxtb	r3, r3
 8001106:	fb03 f301 	mul.w	r3, r3, r1
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4413      	add	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
	for (i=0; i<ilen; ++ i) {
 8001110:	7c3b      	ldrb	r3, [r7, #16]
 8001112:	3301      	adds	r3, #1
 8001114:	743b      	strb	r3, [r7, #16]
 8001116:	7c3a      	ldrb	r2, [r7, #16]
 8001118:	7cfb      	ldrb	r3, [r7, #19]
 800111a:	429a      	cmp	r2, r3
 800111c:	d3e1      	bcc.n	80010e2 <NMEA_StrToNum+0xb0>
	} if (flen>5) {flen = 5;} *dx = flen;
 800111e:	7cbb      	ldrb	r3, [r7, #18]
 8001120:	2b05      	cmp	r3, #5
 8001122:	d901      	bls.n	8001128 <NMEA_StrToNum+0xf6>
 8001124:	2305      	movs	r3, #5
 8001126:	74bb      	strb	r3, [r7, #18]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	7cba      	ldrb	r2, [r7, #18]
 800112c:	701a      	strb	r2, [r3, #0]

	for (i=0; i<flen; ++ i) {
 800112e:	2300      	movs	r3, #0
 8001130:	743b      	strb	r3, [r7, #16]
 8001132:	e01c      	b.n	800116e <NMEA_StrToNum+0x13c>
		fres += NMEA_Pow(10, flen-i-1)*(buf[ilen+i+1]^'0');
 8001134:	7cba      	ldrb	r2, [r7, #18]
 8001136:	7c3b      	ldrb	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	3b01      	subs	r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	4619      	mov	r1, r3
 8001142:	200a      	movs	r0, #10
 8001144:	f7ff ff50 	bl	8000fe8 <NMEA_Pow>
 8001148:	4601      	mov	r1, r0
 800114a:	7cfa      	ldrb	r2, [r7, #19]
 800114c:	7c3b      	ldrb	r3, [r7, #16]
 800114e:	4413      	add	r3, r2
 8001150:	3301      	adds	r3, #1
 8001152:	687a      	ldr	r2, [r7, #4]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800115c:	b2db      	uxtb	r3, r3
 800115e:	fb03 f301 	mul.w	r3, r3, r1
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4413      	add	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
	for (i=0; i<flen; ++ i) {
 8001168:	7c3b      	ldrb	r3, [r7, #16]
 800116a:	3301      	adds	r3, #1
 800116c:	743b      	strb	r3, [r7, #16]
 800116e:	7c3a      	ldrb	r2, [r7, #16]
 8001170:	7cbb      	ldrb	r3, [r7, #18]
 8001172:	429a      	cmp	r2, r3
 8001174:	d3de      	bcc.n	8001134 <NMEA_StrToNum+0x102>
	} ret = ires * NMEA_Pow(10, flen) + fres;
 8001176:	7cbb      	ldrb	r3, [r7, #18]
 8001178:	4619      	mov	r1, r3
 800117a:	200a      	movs	r0, #10
 800117c:	f7ff ff34 	bl	8000fe8 <NMEA_Pow>
 8001180:	4602      	mov	r2, r0
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	fb03 f202 	mul.w	r2, r3, r2
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	4413      	add	r3, r2
 800118c:	60fb      	str	r3, [r7, #12]
	return (flag&0x02)? -ret:ret;
 800118e:	7c7b      	ldrb	r3, [r7, #17]
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <NMEA_StrToNum+0x16c>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	425b      	negs	r3, r3
 800119c:	e000      	b.n	80011a0 <NMEA_StrToNum+0x16e>
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3720      	adds	r7, #32
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <NMEA_GPVTG_Analysis>:
			++ slx;
		} p = p1+1;
	}
}

void NMEA_GPVTG_Analysis(nmea_msg *gpsx,u8 *buf) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	u8 *p1, dx; u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPVTG");
 80011b2:	491b      	ldr	r1, [pc, #108]	; (8001220 <NMEA_GPVTG_Analysis+0x78>)
 80011b4:	6838      	ldr	r0, [r7, #0]
 80011b6:	f007 f902 	bl	80083be <strstr>
 80011ba:	60f8      	str	r0, [r7, #12]
	posx = NMEA_Comma_Pos(p1, 7);
 80011bc:	2107      	movs	r1, #7
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f7ff fee4 	bl	8000f8c <NMEA_Comma_Pos>
 80011c4:	4603      	mov	r3, r0
 80011c6:	72fb      	strb	r3, [r7, #11]
	if(posx^0XFF) {
 80011c8:	7afb      	ldrb	r3, [r7, #11]
 80011ca:	2bff      	cmp	r3, #255	; 0xff
 80011cc:	d024      	beq.n	8001218 <NMEA_GPVTG_Analysis+0x70>
		gpsx->speed = NMEA_StrToNum(p1+posx, &dx);
 80011ce:	7afb      	ldrb	r3, [r7, #11]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	4413      	add	r3, r2
 80011d4:	f107 020a 	add.w	r2, r7, #10
 80011d8:	4611      	mov	r1, r2
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ff29 	bl	8001032 <NMEA_StrToNum>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f8a3 2067 	strh.w	r2, [r3, #103]	; 0x67
		if (dx < 3) gpsx->speed *= NMEA_Pow(10, 3-dx);
 80011ea:	7abb      	ldrb	r3, [r7, #10]
 80011ec:	2b02      	cmp	r3, #2
 80011ee:	d813      	bhi.n	8001218 <NMEA_GPVTG_Analysis+0x70>
 80011f0:	7abb      	ldrb	r3, [r7, #10]
 80011f2:	f1c3 0303 	rsb	r3, r3, #3
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4619      	mov	r1, r3
 80011fa:	200a      	movs	r0, #10
 80011fc:	f7ff fef4 	bl	8000fe8 <NMEA_Pow>
 8001200:	4601      	mov	r1, r0
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8b3 3067 	ldrh.w	r3, [r3, #103]	; 0x67
 8001208:	b29a      	uxth	r2, r3
 800120a:	b28b      	uxth	r3, r1
 800120c:	fb12 f303 	smulbb	r3, r2, r3
 8001210:	b29a      	uxth	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f8a3 2067 	strh.w	r2, [r3, #103]	; 0x67
	}
}
 8001218:	bf00      	nop
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0800a4b0 	.word	0x0800a4b0

08001224 <NMEA_GPGGA_Analysis>:

void NMEA_GPGGA_Analysis (nmea_msg *gpsx,u8 *buf) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPGGA");
 800122e:	4910      	ldr	r1, [pc, #64]	; (8001270 <NMEA_GPGGA_Analysis+0x4c>)
 8001230:	6838      	ldr	r0, [r7, #0]
 8001232:	f007 f8c4 	bl	80083be <strstr>
 8001236:	60f8      	str	r0, [r7, #12]
	posx = NMEA_Comma_Pos(p1, 6);
 8001238:	2106      	movs	r1, #6
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f7ff fea6 	bl	8000f8c <NMEA_Comma_Pos>
 8001240:	4603      	mov	r3, r0
 8001242:	72fb      	strb	r3, [r7, #11]
	if (posx^0XFF) gpsx->gpssta = NMEA_StrToNum(p1+posx, &dx);
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	2bff      	cmp	r3, #255	; 0xff
 8001248:	d00d      	beq.n	8001266 <NMEA_GPGGA_Analysis+0x42>
 800124a:	7afb      	ldrb	r3, [r7, #11]
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	f107 020a 	add.w	r2, r7, #10
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff feeb 	bl	8001032 <NMEA_StrToNum>
 800125c:	4603      	mov	r3, r0
 800125e:	b2da      	uxtb	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
//	posx = NMEA_Comma_Pos(p1, 7);
//	if (posx^0XFF) gpsx->posslnum = NMEA_StrToNum(p1+posx, &dx);
//	posx = NMEA_Comma_Pos(p1, 9);
//	if (posx^0XFF) gpsx->altitude = NMEA_StrToNum(p1+posx, &dx);
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	0800a4b8 	.word	0x0800a4b8

08001274 <NMEA_GPGSA_Analysis>:

void NMEA_GPGSA_Analysis (nmea_msg *gpsx, u8 *buf) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPGSA");
 800127e:	4910      	ldr	r1, [pc, #64]	; (80012c0 <NMEA_GPGSA_Analysis+0x4c>)
 8001280:	6838      	ldr	r0, [r7, #0]
 8001282:	f007 f89c 	bl	80083be <strstr>
 8001286:	60f8      	str	r0, [r7, #12]
//	for (i=0; i<12; ++ i) {
//		posx = NMEA_Comma_Pos(p1, 3+i);
//		if (posx^0XFF) gpsx->possl[i] = NMEA_StrToNum(p1+posx, &dx);
//		else break;
//	}
	posx = NMEA_Comma_Pos(p1, 15);
 8001288:	210f      	movs	r1, #15
 800128a:	68f8      	ldr	r0, [r7, #12]
 800128c:	f7ff fe7e 	bl	8000f8c <NMEA_Comma_Pos>
 8001290:	4603      	mov	r3, r0
 8001292:	72fb      	strb	r3, [r7, #11]
	if (posx^0XFF) gpsx->pdop = NMEA_StrToNum(p1+posx, &dx);
 8001294:	7afb      	ldrb	r3, [r7, #11]
 8001296:	2bff      	cmp	r3, #255	; 0xff
 8001298:	d00d      	beq.n	80012b6 <NMEA_GPGSA_Analysis+0x42>
 800129a:	7afb      	ldrb	r3, [r7, #11]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	4413      	add	r3, r2
 80012a0:	f107 020a 	add.w	r2, r7, #10
 80012a4:	4611      	mov	r1, r2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fec3 	bl	8001032 <NMEA_StrToNum>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f8a3 205d 	strh.w	r2, [r3, #93]	; 0x5d
//	posx = NMEA_Comma_Pos(p1, 16);
//	if (posx^0XFF) gpsx->hdop = NMEA_StrToNum(p1+posx, &dx);
//	posx = NMEA_Comma_Pos(p1, 17);
//	if (posx^0XFF) gpsx->vdop = NMEA_StrToNum(p1+posx, &dx);
}
 80012b6:	bf00      	nop
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800a4c0 	.word	0x0800a4c0

080012c4 <NMEA_GPRMC_Analysis>:

void NMEA_GPRMC_Analysis (nmea_msg *gpsx, u8 *buf) {
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	ed2d 8b02 	vpush	{d8}
 80012ca:	b089      	sub	sp, #36	; 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	u32 temp;
	float rs;
	p1 = (u8*)strstr((const char *)buf, "$GPRMC");
 80012d2:	499e      	ldr	r1, [pc, #632]	; (800154c <NMEA_GPRMC_Analysis+0x288>)
 80012d4:	6838      	ldr	r0, [r7, #0]
 80012d6:	f007 f872 	bl	80083be <strstr>
 80012da:	61f8      	str	r0, [r7, #28]
	posx = NMEA_Comma_Pos(p1, 1);
 80012dc:	2101      	movs	r1, #1
 80012de:	69f8      	ldr	r0, [r7, #28]
 80012e0:	f7ff fe54 	bl	8000f8c <NMEA_Comma_Pos>
 80012e4:	4603      	mov	r3, r0
 80012e6:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 80012e8:	7efb      	ldrb	r3, [r7, #27]
 80012ea:	2bff      	cmp	r3, #255	; 0xff
 80012ec:	d03a      	beq.n	8001364 <NMEA_GPRMC_Analysis+0xa0>
		temp = NMEA_StrToNum(p1+posx, &dx) / NMEA_Pow(10, dx);
 80012ee:	7efb      	ldrb	r3, [r7, #27]
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	f107 020f 	add.w	r2, r7, #15
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe99 	bl	8001032 <NMEA_StrToNum>
 8001300:	4603      	mov	r3, r0
 8001302:	461c      	mov	r4, r3
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	4619      	mov	r1, r3
 8001308:	200a      	movs	r0, #10
 800130a:	f7ff fe6d 	bl	8000fe8 <NMEA_Pow>
 800130e:	4603      	mov	r3, r0
 8001310:	fbb4 f3f3 	udiv	r3, r4, r3
 8001314:	617b      	str	r3, [r7, #20]
		gpsx->utc.hour = temp/10000;
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4a8d      	ldr	r2, [pc, #564]	; (8001550 <NMEA_GPRMC_Analysis+0x28c>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	0b5b      	lsrs	r3, r3, #13
 8001320:	b2da      	uxtb	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		gpsx->utc.min  = (temp/100)%100;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	4a8a      	ldr	r2, [pc, #552]	; (8001554 <NMEA_GPRMC_Analysis+0x290>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	095a      	lsrs	r2, r3, #5
 8001332:	4b88      	ldr	r3, [pc, #544]	; (8001554 <NMEA_GPRMC_Analysis+0x290>)
 8001334:	fba3 1302 	umull	r1, r3, r3, r2
 8001338:	095b      	lsrs	r3, r3, #5
 800133a:	2164      	movs	r1, #100	; 0x64
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		gpsx->utc.sec  = temp%100;
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	4b81      	ldr	r3, [pc, #516]	; (8001554 <NMEA_GPRMC_Analysis+0x290>)
 800134e:	fba3 1302 	umull	r1, r3, r3, r2
 8001352:	095b      	lsrs	r3, r3, #5
 8001354:	2164      	movs	r1, #100	; 0x64
 8001356:	fb01 f303 	mul.w	r3, r1, r3
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	b2da      	uxtb	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	}
	posx = NMEA_Comma_Pos(p1, 3);
 8001364:	2103      	movs	r1, #3
 8001366:	69f8      	ldr	r0, [r7, #28]
 8001368:	f7ff fe10 	bl	8000f8c <NMEA_Comma_Pos>
 800136c:	4603      	mov	r3, r0
 800136e:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 8001370:	7efb      	ldrb	r3, [r7, #27]
 8001372:	2bff      	cmp	r3, #255	; 0xff
 8001374:	d050      	beq.n	8001418 <NMEA_GPRMC_Analysis+0x154>
		temp = NMEA_StrToNum(p1+posx, &dx);
 8001376:	7efb      	ldrb	r3, [r7, #27]
 8001378:	69fa      	ldr	r2, [r7, #28]
 800137a:	4413      	add	r3, r2
 800137c:	f107 020f 	add.w	r2, r7, #15
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe55 	bl	8001032 <NMEA_StrToNum>
 8001388:	4603      	mov	r3, r0
 800138a:	617b      	str	r3, [r7, #20]
		gpsx->latitude = temp/NMEA_Pow(10, dx+2);
 800138c:	7bfb      	ldrb	r3, [r7, #15]
 800138e:	3302      	adds	r3, #2
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4619      	mov	r1, r3
 8001394:	200a      	movs	r0, #10
 8001396:	f7ff fe27 	bl	8000fe8 <NMEA_Pow>
 800139a:	4602      	mov	r2, r0
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fbb3 f2f2 	udiv	r2, r3, r2
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
		rs = temp%NMEA_Pow(10, dx+2);
 80013a6:	7bfb      	ldrb	r3, [r7, #15]
 80013a8:	3302      	adds	r3, #2
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	4619      	mov	r1, r3
 80013ae:	200a      	movs	r0, #10
 80013b0:	f7ff fe1a 	bl	8000fe8 <NMEA_Pow>
 80013b4:	4602      	mov	r2, r0
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	fbb3 f1f2 	udiv	r1, r3, r2
 80013bc:	fb02 f201 	mul.w	r2, r2, r1
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ca:	edc7 7a04 	vstr	s15, [r7, #16]
		gpsx->latitude = gpsx->latitude*100000+(rs*NMEA_Pow(10, 5-dx))/60;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	4a61      	ldr	r2, [pc, #388]	; (8001558 <NMEA_GPRMC_Analysis+0x294>)
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	f1c3 0305 	rsb	r3, r3, #5
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	200a      	movs	r0, #10
 80013ec:	f7ff fdfc 	bl	8000fe8 <NMEA_Pow>
 80013f0:	ee07 0a90 	vmov	s15, r0
 80013f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80013fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001400:	eddf 6a56 	vldr	s13, [pc, #344]	; 800155c <NMEA_GPRMC_Analysis+0x298>
 8001404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001408:	ee78 7a27 	vadd.f32	s15, s16, s15
 800140c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001410:	ee17 2a90 	vmov	r2, s15
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	645a      	str	r2, [r3, #68]	; 0x44
	}
	posx = NMEA_Comma_Pos(p1, 4);
 8001418:	2104      	movs	r1, #4
 800141a:	69f8      	ldr	r0, [r7, #28]
 800141c:	f7ff fdb6 	bl	8000f8c <NMEA_Comma_Pos>
 8001420:	4603      	mov	r3, r0
 8001422:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) gpsx->nshemi = *(p1+posx);
 8001424:	7efb      	ldrb	r3, [r7, #27]
 8001426:	2bff      	cmp	r3, #255	; 0xff
 8001428:	d006      	beq.n	8001438 <NMEA_GPRMC_Analysis+0x174>
 800142a:	7efb      	ldrb	r3, [r7, #27]
 800142c:	69fa      	ldr	r2, [r7, #28]
 800142e:	4413      	add	r3, r2
 8001430:	781a      	ldrb	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (gpsx->nshemi ^ 'N') gpsx->latitude *= -1;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800143e:	2b4e      	cmp	r3, #78	; 0x4e
 8001440:	d004      	beq.n	800144c <NMEA_GPRMC_Analysis+0x188>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	425a      	negs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	645a      	str	r2, [r3, #68]	; 0x44
	posx = NMEA_Comma_Pos(p1,5);
 800144c:	2105      	movs	r1, #5
 800144e:	69f8      	ldr	r0, [r7, #28]
 8001450:	f7ff fd9c 	bl	8000f8c <NMEA_Comma_Pos>
 8001454:	4603      	mov	r3, r0
 8001456:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 8001458:	7efb      	ldrb	r3, [r7, #27]
 800145a:	2bff      	cmp	r3, #255	; 0xff
 800145c:	d053      	beq.n	8001506 <NMEA_GPRMC_Analysis+0x242>
		temp = NMEA_StrToNum(p1+posx, &dx);
 800145e:	7efb      	ldrb	r3, [r7, #27]
 8001460:	69fa      	ldr	r2, [r7, #28]
 8001462:	4413      	add	r3, r2
 8001464:	f107 020f 	add.w	r2, r7, #15
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fde1 	bl	8001032 <NMEA_StrToNum>
 8001470:	4603      	mov	r3, r0
 8001472:	617b      	str	r3, [r7, #20]
		gpsx->longitude = temp/NMEA_Pow(10, dx+2);
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	3302      	adds	r3, #2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	4619      	mov	r1, r3
 800147c:	200a      	movs	r0, #10
 800147e:	f7ff fdb3 	bl	8000fe8 <NMEA_Pow>
 8001482:	4602      	mov	r2, r0
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fbb3 f2f2 	udiv	r2, r3, r2
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
		rs = temp%NMEA_Pow(10, dx+2);
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	3302      	adds	r3, #2
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	200a      	movs	r0, #10
 800149a:	f7ff fda5 	bl	8000fe8 <NMEA_Pow>
 800149e:	4602      	mov	r2, r0
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80014a6:	fb02 f201 	mul.w	r2, r2, r1
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	ee07 3a90 	vmov	s15, r3
 80014b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014b4:	edc7 7a04 	vstr	s15, [r7, #16]
		gpsx->longitude = gpsx->longitude*100000+(rs*NMEA_Pow(10, 5-dx))/60;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 80014be:	4a26      	ldr	r2, [pc, #152]	; (8001558 <NMEA_GPRMC_Analysis+0x294>)
 80014c0:	fb02 f303 	mul.w	r3, r2, r3
 80014c4:	ee07 3a90 	vmov	s15, r3
 80014c8:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	f1c3 0305 	rsb	r3, r3, #5
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4619      	mov	r1, r3
 80014d6:	200a      	movs	r0, #10
 80014d8:	f7ff fd86 	bl	8000fe8 <NMEA_Pow>
 80014dc:	ee07 0a90 	vmov	s15, r0
 80014e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80014e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014ec:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800155c <NMEA_GPRMC_Analysis+0x298>
 80014f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014f4:	ee78 7a27 	vadd.f32	s15, s16, s15
 80014f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014fc:	ee17 2a90 	vmov	r2, s15
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
	}
	posx = NMEA_Comma_Pos(p1, 6);
 8001506:	2106      	movs	r1, #6
 8001508:	69f8      	ldr	r0, [r7, #28]
 800150a:	f7ff fd3f 	bl	8000f8c <NMEA_Comma_Pos>
 800150e:	4603      	mov	r3, r0
 8001510:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) gpsx->ewhemi = *(p1+posx);
 8001512:	7efb      	ldrb	r3, [r7, #27]
 8001514:	2bff      	cmp	r3, #255	; 0xff
 8001516:	d006      	beq.n	8001526 <NMEA_GPRMC_Analysis+0x262>
 8001518:	7efb      	ldrb	r3, [r7, #27]
 800151a:	69fa      	ldr	r2, [r7, #28]
 800151c:	4413      	add	r3, r2
 800151e:	781a      	ldrb	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	if (gpsx->ewhemi ^ 'E') gpsx->longitude *= -1;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800152c:	2b45      	cmp	r3, #69	; 0x45
 800152e:	d006      	beq.n	800153e <NMEA_GPRMC_Analysis+0x27a>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8001536:	425a      	negs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
//		temp = NMEA_StrToNum(p1+posx, &dx);
//		gpsx->utc.date  = temp/10000;
//		gpsx->utc.month = (temp/100)%100;
//		gpsx->utc.year  = 2000+temp%100;
//	}
}
 800153e:	bf00      	nop
 8001540:	3724      	adds	r7, #36	; 0x24
 8001542:	46bd      	mov	sp, r7
 8001544:	ecbd 8b02 	vpop	{d8}
 8001548:	bd90      	pop	{r4, r7, pc}
 800154a:	bf00      	nop
 800154c:	0800a4c8 	.word	0x0800a4c8
 8001550:	d1b71759 	.word	0xd1b71759
 8001554:	51eb851f 	.word	0x51eb851f
 8001558:	000186a0 	.word	0x000186a0
 800155c:	42700000 	.word	0x42700000

08001560 <NMEA_GPS_DATA_PHRASE>:

void NMEA_GPS_DATA_PHRASE (nmea_msg *gpsx, gps_data *gpst) {
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
	gpst->latitude  = (float)gpsx->latitude /100000;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	ee07 3a90 	vmov	s15, r3
 8001572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001576:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80015f0 <NMEA_GPS_DATA_PHRASE+0x90>
 800157a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	ee16 2a90 	vmov	r2, s13
 8001584:	601a      	str	r2, [r3, #0]
	gpst->longitude = (float)gpsx->longitude/100000;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001594:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80015f0 <NMEA_GPS_DATA_PHRASE+0x90>
 8001598:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	ee16 2a90 	vmov	r2, s13
 80015a2:	605a      	str	r2, [r3, #4]
	gpst->speed     = (float)gpsx->speed/1000;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f8b3 3067 	ldrh.w	r3, [r3, #103]	; 0x67
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015f4 <NMEA_GPS_DATA_PHRASE+0x94>
 80015b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	ee16 2a90 	vmov	r2, s13
 80015c2:	609a      	str	r2, [r3, #8]
	gpst->pdop      = (float)gpsx->pdop/10;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f8b3 305d 	ldrh.w	r3, [r3, #93]	; 0x5d
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	ee07 3a90 	vmov	s15, r3
 80015d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80015d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	ee16 2a90 	vmov	r2, s13
 80015e2:	60da      	str	r2, [r3, #12]
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	47c35000 	.word	0x47c35000
 80015f4:	447a0000 	.word	0x447a0000

080015f8 <LED_PC13_INIT>:
  */

#include "LED_Functions/LED_OUTPUT.h"
#include "main.h"

inline void LED_PC13_INIT () {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4b11      	ldr	r3, [pc, #68]	; (8001658 <LED_PC13_INIT+0x60>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	4a10      	ldr	r2, [pc, #64]	; (8001658 <LED_PC13_INIT+0x60>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6313      	str	r3, [r2, #48]	; 0x30
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <LED_PC13_INIT+0x60>)
 800161e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	603b      	str	r3, [r7, #0]
 8001626:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800162e:	480b      	ldr	r0, [pc, #44]	; (800165c <LED_PC13_INIT+0x64>)
 8001630:	f003 fa7c 	bl	8004b2c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001638:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2301      	movs	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001642:	2302      	movs	r3, #2
 8001644:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	4619      	mov	r1, r3
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <LED_PC13_INIT+0x64>)
 800164c:	f003 f8ec 	bl	8004828 <HAL_GPIO_Init>
}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800

08001660 <LED_PC13_BLINK>:

inline void LED_PC13_BLINK (register int delayTime) {
 8001660:	b598      	push	{r3, r4, r7, lr}
 8001662:	af00      	add	r7, sp, #0
 8001664:	4604      	mov	r4, r0
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <LED_PC13_BLINK+0x30>)
 800166c:	f003 fa77 	bl	8004b5e <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 8001670:	4623      	mov	r3, r4
 8001672:	4618      	mov	r0, r3
 8001674:	f002 ff82 	bl	800457c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167c:	4804      	ldr	r0, [pc, #16]	; (8001690 <LED_PC13_BLINK+0x30>)
 800167e:	f003 fa6e 	bl	8004b5e <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 8001682:	4623      	mov	r3, r4
 8001684:	4618      	mov	r0, r3
 8001686:	f002 ff79 	bl	800457c <HAL_Delay>
}
 800168a:	bf00      	nop
 800168c:	bd98      	pop	{r3, r4, r7, pc}
 800168e:	bf00      	nop
 8001690:	40020800 	.word	0x40020800

08001694 <LED_OUTPUT_INIT>:
			LED_TEST_OFF(); HAL_Delay(4);
		}
	}
}

inline void LED_OUTPUT_INIT () {
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016a8:	2300      	movs	r3, #0
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <LED_OUTPUT_INIT+0xc4>)
 80016ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b0:	4a29      	ldr	r2, [pc, #164]	; (8001758 <LED_OUTPUT_INIT+0xc4>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6313      	str	r3, [r2, #48]	; 0x30
 80016b8:	4b27      	ldr	r3, [pc, #156]	; (8001758 <LED_OUTPUT_INIT+0xc4>)
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80016c4:	2201      	movs	r2, #1
 80016c6:	2180      	movs	r1, #128	; 0x80
 80016c8:	4824      	ldr	r0, [pc, #144]	; (800175c <LED_OUTPUT_INIT+0xc8>)
 80016ca:	f003 fa2f 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2140      	movs	r1, #64	; 0x40
 80016d2:	4822      	ldr	r0, [pc, #136]	; (800175c <LED_OUTPUT_INIT+0xc8>)
 80016d4:	f003 fa2a 	bl	8004b2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	481f      	ldr	r0, [pc, #124]	; (800175c <LED_OUTPUT_INIT+0xc8>)
 80016de:	f003 fa25 	bl	8004b2c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ee:	2302      	movs	r3, #2
 80016f0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4819      	ldr	r0, [pc, #100]	; (800175c <LED_OUTPUT_INIT+0xc8>)
 80016f8:	f003 f896 	bl	8004828 <HAL_GPIO_Init>
	LED_GPSRFS_OFF();
 80016fc:	2200      	movs	r2, #0
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	4816      	ldr	r0, [pc, #88]	; (800175c <LED_OUTPUT_INIT+0xc8>)
 8001702:	f003 fa13 	bl	8004b2c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001706:	2340      	movs	r3, #64	; 0x40
 8001708:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170a:	2301      	movs	r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001712:	2302      	movs	r3, #2
 8001714:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	4619      	mov	r1, r3
 800171a:	4810      	ldr	r0, [pc, #64]	; (800175c <LED_OUTPUT_INIT+0xc8>)
 800171c:	f003 f884 	bl	8004828 <HAL_GPIO_Init>
	LED_DATUPD_OFF();
 8001720:	2200      	movs	r2, #0
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	480d      	ldr	r0, [pc, #52]	; (800175c <LED_OUTPUT_INIT+0xc8>)
 8001726:	f003 fa01 	bl	8004b2c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800172a:	2320      	movs	r3, #32
 800172c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800172e:	2301      	movs	r3, #1
 8001730:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001736:	2302      	movs	r3, #2
 8001738:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4619      	mov	r1, r3
 800173e:	4807      	ldr	r0, [pc, #28]	; (800175c <LED_OUTPUT_INIT+0xc8>)
 8001740:	f003 f872 	bl	8004828 <HAL_GPIO_Init>
	LED_ALERT_OFF();
 8001744:	2200      	movs	r2, #0
 8001746:	2120      	movs	r1, #32
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <LED_OUTPUT_INIT+0xc8>)
 800174a:	f003 f9ef 	bl	8004b2c <HAL_GPIO_WritePin>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000

08001760 <LED_OUTPUT_TEST>:

inline void LED_OUTPUT_TEST () {
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8001764:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001768:	f002 ff08 	bl	800457c <HAL_Delay>

	LED_GPSRFS_ON ();
 800176c:	2201      	movs	r2, #1
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	4812      	ldr	r0, [pc, #72]	; (80017bc <LED_OUTPUT_TEST+0x5c>)
 8001772:	f003 f9db 	bl	8004b2c <HAL_GPIO_WritePin>
	LED_DATUPD_ON ();
 8001776:	2201      	movs	r2, #1
 8001778:	2140      	movs	r1, #64	; 0x40
 800177a:	4810      	ldr	r0, [pc, #64]	; (80017bc <LED_OUTPUT_TEST+0x5c>)
 800177c:	f003 f9d6 	bl	8004b2c <HAL_GPIO_WritePin>
	LED_ALERT_ON  ();
 8001780:	2201      	movs	r2, #1
 8001782:	2120      	movs	r1, #32
 8001784:	480d      	ldr	r0, [pc, #52]	; (80017bc <LED_OUTPUT_TEST+0x5c>)
 8001786:	f003 f9d1 	bl	8004b2c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 800178a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800178e:	f002 fef5 	bl	800457c <HAL_Delay>

	LED_GPSRFS_OFF();
 8001792:	2200      	movs	r2, #0
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	4809      	ldr	r0, [pc, #36]	; (80017bc <LED_OUTPUT_TEST+0x5c>)
 8001798:	f003 f9c8 	bl	8004b2c <HAL_GPIO_WritePin>
	LED_DATUPD_OFF();
 800179c:	2200      	movs	r2, #0
 800179e:	2140      	movs	r1, #64	; 0x40
 80017a0:	4806      	ldr	r0, [pc, #24]	; (80017bc <LED_OUTPUT_TEST+0x5c>)
 80017a2:	f003 f9c3 	bl	8004b2c <HAL_GPIO_WritePin>
	LED_ALERT_OFF ();
 80017a6:	2200      	movs	r2, #0
 80017a8:	2120      	movs	r1, #32
 80017aa:	4804      	ldr	r0, [pc, #16]	; (80017bc <LED_OUTPUT_TEST+0x5c>)
 80017ac:	f003 f9be 	bl	8004b2c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 80017b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017b4:	f002 fee2 	bl	800457c <HAL_Delay>
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40020000 	.word	0x40020000

080017c0 <accidentMonitorSetup>:

#define ACCIDENT_ACCE            2          //Minimal acceleration to trigger accident report
#define ACCIDENT_ANGLE          90       	//Minimal dip angle to trigger accident report
#define ACCIDENT_ALERT_SPEED	25

void accidentMonitorSetup (void) {MPU_Init();}
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	f001 f9b2 	bl	8002b2c <MPU_Init>
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}

080017cc <Abs>:

double Abs (double a) {return a<0? -a:a;}
 80017cc:	b5b0      	push	{r4, r5, r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	ed87 0b00 	vstr	d0, [r7]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	f04f 0300 	mov.w	r3, #0
 80017de:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017e2:	f7ff f993 	bl	8000b0c <__aeabi_dcmplt>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d004      	beq.n	80017f6 <Abs+0x2a>
 80017ec:	683c      	ldr	r4, [r7, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80017f4:	e001      	b.n	80017fa <Abs+0x2e>
 80017f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017fa:	ec45 4b17 	vmov	d7, r4, r5
 80017fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001802:	eef0 0a67 	vmov.f32	s1, s15
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bdb0      	pop	{r4, r5, r7, pc}

0800180c <accidentJudge>:
double tmpAgx[durVal], tmpAgy[durVal], tmpAgz[durVal];
int pos, totx, toty, totz;
long long timer = 0;
double avgx, avgy, avgz, prespd;

int accidentJudge (gps_data *GPSdata) {
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	//timer = HAL_GetTick();
	getAccelgyroData(&agx, &agy, &agz, &acc);
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <accidentJudge+0x84>)
 8001816:	4a1f      	ldr	r2, [pc, #124]	; (8001894 <accidentJudge+0x88>)
 8001818:	491f      	ldr	r1, [pc, #124]	; (8001898 <accidentJudge+0x8c>)
 800181a:	4820      	ldr	r0, [pc, #128]	; (800189c <accidentJudge+0x90>)
 800181c:	f000 f9d4 	bl	8001bc8 <getAccelgyroData>
	register int flag = (acc>ACCIDENT_ACCE) && ((GPSdata->speed - prespd)/(double)HAL_GetTick()>ACCIDENT_ACCE);
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <accidentJudge+0x84>)
 8001822:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800182e:	f7ff f98b 	bl	8000b48 <__aeabi_dcmpgt>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d035      	beq.n	80018a4 <accidentJudge+0x98>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	4618      	mov	r0, r3
 800183e:	f7fe fe9b 	bl	8000578 <__aeabi_f2d>
 8001842:	4b17      	ldr	r3, [pc, #92]	; (80018a0 <accidentJudge+0x94>)
 8001844:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001848:	461a      	mov	r2, r3
 800184a:	4623      	mov	r3, r4
 800184c:	f7fe fd34 	bl	80002b8 <__aeabi_dsub>
 8001850:	4603      	mov	r3, r0
 8001852:	460c      	mov	r4, r1
 8001854:	4625      	mov	r5, r4
 8001856:	461c      	mov	r4, r3
 8001858:	f002 fe84 	bl	8004564 <HAL_GetTick>
 800185c:	4603      	mov	r3, r0
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe68 	bl	8000534 <__aeabi_ui2d>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	4620      	mov	r0, r4
 800186a:	4629      	mov	r1, r5
 800186c:	f7ff f806 	bl	800087c <__aeabi_ddiv>
 8001870:	4603      	mov	r3, r0
 8001872:	460c      	mov	r4, r1
 8001874:	4618      	mov	r0, r3
 8001876:	4621      	mov	r1, r4
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001880:	f7ff f962 	bl	8000b48 <__aeabi_dcmpgt>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d00c      	beq.n	80018a4 <accidentJudge+0x98>
 800188a:	2301      	movs	r3, #1
 800188c:	e00b      	b.n	80018a6 <accidentJudge+0x9a>
 800188e:	bf00      	nop
 8001890:	20000668 	.word	0x20000668
 8001894:	20000378 	.word	0x20000378
 8001898:	20000370 	.word	0x20000370
 800189c:	20000368 	.word	0x20000368
 80018a0:	200025d0 	.word	0x200025d0
 80018a4:	2300      	movs	r3, #0
 80018a6:	461d      	mov	r5, r3
	timer = HAL_GetTick(); prespd = GPSdata->speed;
 80018a8:	f002 fe5c 	bl	8004564 <HAL_GetTick>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f04f 0400 	mov.w	r4, #0
 80018b2:	4ab2      	ldr	r2, [pc, #712]	; (8001b7c <accidentJudge+0x370>)
 80018b4:	e9c2 3400 	strd	r3, r4, [r2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe5b 	bl	8000578 <__aeabi_f2d>
 80018c2:	4603      	mov	r3, r0
 80018c4:	460c      	mov	r4, r1
 80018c6:	4aae      	ldr	r2, [pc, #696]	; (8001b80 <accidentJudge+0x374>)
 80018c8:	e9c2 3400 	strd	r3, r4, [r2]
	if (Abs(agx-avgx)>ACCIDENT_ANGLE || Abs(agy-avgy)>ACCIDENT_ANGLE || Abs(agz-avgz)>ACCIDENT_ANGLE) flag = 1;
 80018cc:	4bad      	ldr	r3, [pc, #692]	; (8001b84 <accidentJudge+0x378>)
 80018ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018d2:	4bad      	ldr	r3, [pc, #692]	; (8001b88 <accidentJudge+0x37c>)
 80018d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	f7fe fcec 	bl	80002b8 <__aeabi_dsub>
 80018e0:	4603      	mov	r3, r0
 80018e2:	460c      	mov	r4, r1
 80018e4:	ec44 3b17 	vmov	d7, r3, r4
 80018e8:	eeb0 0a47 	vmov.f32	s0, s14
 80018ec:	eef0 0a67 	vmov.f32	s1, s15
 80018f0:	f7ff ff6c 	bl	80017cc <Abs>
 80018f4:	ec51 0b10 	vmov	r0, r1, d0
 80018f8:	f04f 0200 	mov.w	r2, #0
 80018fc:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <accidentJudge+0x380>)
 80018fe:	f7ff f923 	bl	8000b48 <__aeabi_dcmpgt>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d13b      	bne.n	8001980 <accidentJudge+0x174>
 8001908:	4ba1      	ldr	r3, [pc, #644]	; (8001b90 <accidentJudge+0x384>)
 800190a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800190e:	4ba1      	ldr	r3, [pc, #644]	; (8001b94 <accidentJudge+0x388>)
 8001910:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001914:	461a      	mov	r2, r3
 8001916:	4623      	mov	r3, r4
 8001918:	f7fe fcce 	bl	80002b8 <__aeabi_dsub>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	ec44 3b17 	vmov	d7, r3, r4
 8001924:	eeb0 0a47 	vmov.f32	s0, s14
 8001928:	eef0 0a67 	vmov.f32	s1, s15
 800192c:	f7ff ff4e 	bl	80017cc <Abs>
 8001930:	ec51 0b10 	vmov	r0, r1, d0
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b94      	ldr	r3, [pc, #592]	; (8001b8c <accidentJudge+0x380>)
 800193a:	f7ff f905 	bl	8000b48 <__aeabi_dcmpgt>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d11d      	bne.n	8001980 <accidentJudge+0x174>
 8001944:	4b94      	ldr	r3, [pc, #592]	; (8001b98 <accidentJudge+0x38c>)
 8001946:	e9d3 0100 	ldrd	r0, r1, [r3]
 800194a:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <accidentJudge+0x390>)
 800194c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001950:	461a      	mov	r2, r3
 8001952:	4623      	mov	r3, r4
 8001954:	f7fe fcb0 	bl	80002b8 <__aeabi_dsub>
 8001958:	4603      	mov	r3, r0
 800195a:	460c      	mov	r4, r1
 800195c:	ec44 3b17 	vmov	d7, r3, r4
 8001960:	eeb0 0a47 	vmov.f32	s0, s14
 8001964:	eef0 0a67 	vmov.f32	s1, s15
 8001968:	f7ff ff30 	bl	80017cc <Abs>
 800196c:	ec51 0b10 	vmov	r0, r1, d0
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <accidentJudge+0x380>)
 8001976:	f7ff f8e7 	bl	8000b48 <__aeabi_dcmpgt>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d000      	beq.n	8001982 <accidentJudge+0x176>
 8001980:	2501      	movs	r5, #1
	totx -= tmpAgx[pos], toty -= tmpAgy[pos], totz -= tmpAgz[pos];
 8001982:	4b87      	ldr	r3, [pc, #540]	; (8001ba0 <accidentJudge+0x394>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fde4 	bl	8000554 <__aeabi_i2d>
 800198c:	4b85      	ldr	r3, [pc, #532]	; (8001ba4 <accidentJudge+0x398>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a85      	ldr	r2, [pc, #532]	; (8001ba8 <accidentJudge+0x39c>)
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	e9d3 3400 	ldrd	r3, r4, [r3]
 800199a:	461a      	mov	r2, r3
 800199c:	4623      	mov	r3, r4
 800199e:	f7fe fc8b 	bl	80002b8 <__aeabi_dsub>
 80019a2:	4603      	mov	r3, r0
 80019a4:	460c      	mov	r4, r1
 80019a6:	4618      	mov	r0, r3
 80019a8:	4621      	mov	r1, r4
 80019aa:	f7ff f8ed 	bl	8000b88 <__aeabi_d2iz>
 80019ae:	4602      	mov	r2, r0
 80019b0:	4b7b      	ldr	r3, [pc, #492]	; (8001ba0 <accidentJudge+0x394>)
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b7d      	ldr	r3, [pc, #500]	; (8001bac <accidentJudge+0x3a0>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fdcb 	bl	8000554 <__aeabi_i2d>
 80019be:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <accidentJudge+0x398>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a7b      	ldr	r2, [pc, #492]	; (8001bb0 <accidentJudge+0x3a4>)
 80019c4:	00db      	lsls	r3, r3, #3
 80019c6:	4413      	add	r3, r2
 80019c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4623      	mov	r3, r4
 80019d0:	f7fe fc72 	bl	80002b8 <__aeabi_dsub>
 80019d4:	4603      	mov	r3, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	4618      	mov	r0, r3
 80019da:	4621      	mov	r1, r4
 80019dc:	f7ff f8d4 	bl	8000b88 <__aeabi_d2iz>
 80019e0:	4602      	mov	r2, r0
 80019e2:	4b72      	ldr	r3, [pc, #456]	; (8001bac <accidentJudge+0x3a0>)
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	4b73      	ldr	r3, [pc, #460]	; (8001bb4 <accidentJudge+0x3a8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdb2 	bl	8000554 <__aeabi_i2d>
 80019f0:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <accidentJudge+0x398>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a70      	ldr	r2, [pc, #448]	; (8001bb8 <accidentJudge+0x3ac>)
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4623      	mov	r3, r4
 8001a02:	f7fe fc59 	bl	80002b8 <__aeabi_dsub>
 8001a06:	4603      	mov	r3, r0
 8001a08:	460c      	mov	r4, r1
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4621      	mov	r1, r4
 8001a0e:	f7ff f8bb 	bl	8000b88 <__aeabi_d2iz>
 8001a12:	4602      	mov	r2, r0
 8001a14:	4b67      	ldr	r3, [pc, #412]	; (8001bb4 <accidentJudge+0x3a8>)
 8001a16:	601a      	str	r2, [r3, #0]
	tmpAgx[pos] = agx, tmpAgy[pos]= agy, tmpAgz[pos] = agz;
 8001a18:	4b62      	ldr	r3, [pc, #392]	; (8001ba4 <accidentJudge+0x398>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b59      	ldr	r3, [pc, #356]	; (8001b84 <accidentJudge+0x378>)
 8001a1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a22:	4961      	ldr	r1, [pc, #388]	; (8001ba8 <accidentJudge+0x39c>)
 8001a24:	00d2      	lsls	r2, r2, #3
 8001a26:	440a      	add	r2, r1
 8001a28:	e9c2 3400 	strd	r3, r4, [r2]
 8001a2c:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <accidentJudge+0x398>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <accidentJudge+0x384>)
 8001a32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a36:	495e      	ldr	r1, [pc, #376]	; (8001bb0 <accidentJudge+0x3a4>)
 8001a38:	00d2      	lsls	r2, r2, #3
 8001a3a:	440a      	add	r2, r1
 8001a3c:	e9c2 3400 	strd	r3, r4, [r2]
 8001a40:	4b58      	ldr	r3, [pc, #352]	; (8001ba4 <accidentJudge+0x398>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b54      	ldr	r3, [pc, #336]	; (8001b98 <accidentJudge+0x38c>)
 8001a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a4a:	495b      	ldr	r1, [pc, #364]	; (8001bb8 <accidentJudge+0x3ac>)
 8001a4c:	00d2      	lsls	r2, r2, #3
 8001a4e:	440a      	add	r2, r1
 8001a50:	e9c2 3400 	strd	r3, r4, [r2]
	totx += agx, toty += agy, totz += agz;
 8001a54:	4b52      	ldr	r3, [pc, #328]	; (8001ba0 <accidentJudge+0x394>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7fe fd7b 	bl	8000554 <__aeabi_i2d>
 8001a5e:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <accidentJudge+0x378>)
 8001a60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4623      	mov	r3, r4
 8001a68:	f7fe fc28 	bl	80002bc <__adddf3>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	460c      	mov	r4, r1
 8001a70:	4618      	mov	r0, r3
 8001a72:	4621      	mov	r1, r4
 8001a74:	f7ff f888 	bl	8000b88 <__aeabi_d2iz>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	4b49      	ldr	r3, [pc, #292]	; (8001ba0 <accidentJudge+0x394>)
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <accidentJudge+0x3a0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fd66 	bl	8000554 <__aeabi_i2d>
 8001a88:	4b41      	ldr	r3, [pc, #260]	; (8001b90 <accidentJudge+0x384>)
 8001a8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4623      	mov	r3, r4
 8001a92:	f7fe fc13 	bl	80002bc <__adddf3>
 8001a96:	4603      	mov	r3, r0
 8001a98:	460c      	mov	r4, r1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	f7ff f873 	bl	8000b88 <__aeabi_d2iz>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b41      	ldr	r3, [pc, #260]	; (8001bac <accidentJudge+0x3a0>)
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	4b42      	ldr	r3, [pc, #264]	; (8001bb4 <accidentJudge+0x3a8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd51 	bl	8000554 <__aeabi_i2d>
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <accidentJudge+0x38c>)
 8001ab4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4623      	mov	r3, r4
 8001abc:	f7fe fbfe 	bl	80002bc <__adddf3>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	f7ff f85e 	bl	8000b88 <__aeabi_d2iz>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b39      	ldr	r3, [pc, #228]	; (8001bb4 <accidentJudge+0x3a8>)
 8001ad0:	601a      	str	r2, [r3, #0]
	avgx = (double)totx/(1.0*durVal), avgy = (double)toty/(1.0*durVal), avgz = (double)totz/(1.0*durVal);
 8001ad2:	4b33      	ldr	r3, [pc, #204]	; (8001ba0 <accidentJudge+0x394>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fd3c 	bl	8000554 <__aeabi_i2d>
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <accidentJudge+0x3b0>)
 8001ae2:	f7fe fecb 	bl	800087c <__aeabi_ddiv>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460c      	mov	r4, r1
 8001aea:	4a27      	ldr	r2, [pc, #156]	; (8001b88 <accidentJudge+0x37c>)
 8001aec:	e9c2 3400 	strd	r3, r4, [r2]
 8001af0:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <accidentJudge+0x3a0>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7fe fd2d 	bl	8000554 <__aeabi_i2d>
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	4b2f      	ldr	r3, [pc, #188]	; (8001bbc <accidentJudge+0x3b0>)
 8001b00:	f7fe febc 	bl	800087c <__aeabi_ddiv>
 8001b04:	4603      	mov	r3, r0
 8001b06:	460c      	mov	r4, r1
 8001b08:	4a22      	ldr	r2, [pc, #136]	; (8001b94 <accidentJudge+0x388>)
 8001b0a:	e9c2 3400 	strd	r3, r4, [r2]
 8001b0e:	4b29      	ldr	r3, [pc, #164]	; (8001bb4 <accidentJudge+0x3a8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fd1e 	bl	8000554 <__aeabi_i2d>
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <accidentJudge+0x3b0>)
 8001b1e:	f7fe fead 	bl	800087c <__aeabi_ddiv>
 8001b22:	4603      	mov	r3, r0
 8001b24:	460c      	mov	r4, r1
 8001b26:	4a1d      	ldr	r2, [pc, #116]	; (8001b9c <accidentJudge+0x390>)
 8001b28:	e9c2 3400 	strd	r3, r4, [r2]
	pos = (pos+1)%(durVal); if (GPSdata->speed <= ACCIDENT_ALERT_SPEED) flag = 0;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <accidentJudge+0x398>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <accidentJudge+0x3b4>)
 8001b34:	fb83 1302 	smull	r1, r3, r3, r2
 8001b38:	1159      	asrs	r1, r3, #5
 8001b3a:	17d3      	asrs	r3, r2, #31
 8001b3c:	1acb      	subs	r3, r1, r3
 8001b3e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b42:	fb01 f303 	mul.w	r3, r1, r3
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <accidentJudge+0x398>)
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 8001b54:	ee07 3a10 	vmov	s14, r3
 8001b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	d800      	bhi.n	8001b64 <accidentJudge+0x358>
 8001b62:	2500      	movs	r5, #0
	if (flag) LED_ALERT_ON();
 8001b64:	2d00      	cmp	r5, #0
 8001b66:	d004      	beq.n	8001b72 <accidentJudge+0x366>
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2120      	movs	r1, #32
 8001b6c:	4815      	ldr	r0, [pc, #84]	; (8001bc4 <accidentJudge+0x3b8>)
 8001b6e:	f002 ffdd 	bl	8004b2c <HAL_GPIO_WritePin>
	return flag;
 8001b72:	462b      	mov	r3, r5
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7c:	20000340 	.word	0x20000340
 8001b80:	200025d0 	.word	0x200025d0
 8001b84:	20000368 	.word	0x20000368
 8001b88:	20000678 	.word	0x20000678
 8001b8c:	40568000 	.word	0x40568000
 8001b90:	20000370 	.word	0x20000370
 8001b94:	20001620 	.word	0x20001620
 8001b98:	20000378 	.word	0x20000378
 8001b9c:	20003578 	.word	0x20003578
 8001ba0:	20000670 	.word	0x20000670
 8001ba4:	20000674 	.word	0x20000674
 8001ba8:	20001630 	.word	0x20001630
 8001bac:	20001628 	.word	0x20001628
 8001bb0:	200025d8 	.word	0x200025d8
 8001bb4:	2000162c 	.word	0x2000162c
 8001bb8:	20000680 	.word	0x20000680
 8001bbc:	407f4000 	.word	0x407f4000
 8001bc0:	10624dd3 	.word	0x10624dd3
 8001bc4:	40020000 	.word	0x40020000

08001bc8 <getAccelgyroData>:
double a_x[10]={0}, a_y[10]={0}, a_z[10]={0}, g_x[10]={0}, g_y[10]={0}, g_z[10]={0};
double Px=1, Rx, Kx, Sx, Vx, Qx, Py=1, Ry, Ky, Sy, Vy, Qy, Pz=1, Rz, Kz, Sz, Vz, Qz;

#define sq(x) ((x)*(x))

void getAccelgyroData(double *tagX, double *tagY, double *tagZ, double *Acc) {
 8001bc8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8001bcc:	b08c      	sub	sp, #48	; 0x30
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	603b      	str	r3, [r7, #0]
	unsigned long now = HAL_GetTick();
 8001bd8:	f002 fcc4 	bl	8004564 <HAL_GetTick>
 8001bdc:	62b8      	str	r0, [r7, #40]	; 0x28
	dt = (now - lastTime) / 1000.0;
 8001bde:	4b98      	ldr	r3, [pc, #608]	; (8001e40 <getAccelgyroData+0x278>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fca4 	bl	8000534 <__aeabi_ui2d>
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b94      	ldr	r3, [pc, #592]	; (8001e44 <getAccelgyroData+0x27c>)
 8001bf2:	f7fe fe43 	bl	800087c <__aeabi_ddiv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	4a93      	ldr	r2, [pc, #588]	; (8001e48 <getAccelgyroData+0x280>)
 8001bfc:	e9c2 3400 	strd	r3, r4, [r2]
	lastTime = now;
 8001c00:	4a8f      	ldr	r2, [pc, #572]	; (8001e40 <getAccelgyroData+0x278>)
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	6013      	str	r3, [r2, #0]

	MPU_Get_Gyroscope(&gx, &gy, &gz);
 8001c06:	4a91      	ldr	r2, [pc, #580]	; (8001e4c <getAccelgyroData+0x284>)
 8001c08:	4991      	ldr	r1, [pc, #580]	; (8001e50 <getAccelgyroData+0x288>)
 8001c0a:	4892      	ldr	r0, [pc, #584]	; (8001e54 <getAccelgyroData+0x28c>)
 8001c0c:	f001 f850 	bl	8002cb0 <MPU_Get_Gyroscope>
	MPU_Get_Accelerometer(&ax, &ay, &az);
 8001c10:	4a91      	ldr	r2, [pc, #580]	; (8001e58 <getAccelgyroData+0x290>)
 8001c12:	4992      	ldr	r1, [pc, #584]	; (8001e5c <getAccelgyroData+0x294>)
 8001c14:	4892      	ldr	r0, [pc, #584]	; (8001e60 <getAccelgyroData+0x298>)
 8001c16:	f001 f87d 	bl	8002d14 <MPU_Get_Accelerometer>

	accx = ax / AcceRatio, accy = ay / AcceRatio, accz = az / AcceRatio;
 8001c1a:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <getAccelgyroData+0x298>)
 8001c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fc97 	bl	8000554 <__aeabi_i2d>
 8001c26:	4b8f      	ldr	r3, [pc, #572]	; (8001e64 <getAccelgyroData+0x29c>)
 8001c28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4623      	mov	r3, r4
 8001c30:	f7fe fe24 	bl	800087c <__aeabi_ddiv>
 8001c34:	4603      	mov	r3, r0
 8001c36:	460c      	mov	r4, r1
 8001c38:	4a8b      	ldr	r2, [pc, #556]	; (8001e68 <getAccelgyroData+0x2a0>)
 8001c3a:	e9c2 3400 	strd	r3, r4, [r2]
 8001c3e:	4b87      	ldr	r3, [pc, #540]	; (8001e5c <getAccelgyroData+0x294>)
 8001c40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fc85 	bl	8000554 <__aeabi_i2d>
 8001c4a:	4b86      	ldr	r3, [pc, #536]	; (8001e64 <getAccelgyroData+0x29c>)
 8001c4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4623      	mov	r3, r4
 8001c54:	f7fe fe12 	bl	800087c <__aeabi_ddiv>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	4a83      	ldr	r2, [pc, #524]	; (8001e6c <getAccelgyroData+0x2a4>)
 8001c5e:	e9c2 3400 	strd	r3, r4, [r2]
 8001c62:	4b7d      	ldr	r3, [pc, #500]	; (8001e58 <getAccelgyroData+0x290>)
 8001c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7fe fc73 	bl	8000554 <__aeabi_i2d>
 8001c6e:	4b7d      	ldr	r3, [pc, #500]	; (8001e64 <getAccelgyroData+0x29c>)
 8001c70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4623      	mov	r3, r4
 8001c78:	f7fe fe00 	bl	800087c <__aeabi_ddiv>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	4a7b      	ldr	r2, [pc, #492]	; (8001e70 <getAccelgyroData+0x2a8>)
 8001c82:	e9c2 3400 	strd	r3, r4, [r2]

	*Acc = sqrt(sq(accx) + sq(accy) + sq(accz));
 8001c86:	4b78      	ldr	r3, [pc, #480]	; (8001e68 <getAccelgyroData+0x2a0>)
 8001c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c8c:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <getAccelgyroData+0x2a0>)
 8001c8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c92:	461a      	mov	r2, r3
 8001c94:	4623      	mov	r3, r4
 8001c96:	f7fe fcc7 	bl	8000628 <__aeabi_dmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	460c      	mov	r4, r1
 8001c9e:	461d      	mov	r5, r3
 8001ca0:	4626      	mov	r6, r4
 8001ca2:	4b72      	ldr	r3, [pc, #456]	; (8001e6c <getAccelgyroData+0x2a4>)
 8001ca4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ca8:	4b70      	ldr	r3, [pc, #448]	; (8001e6c <getAccelgyroData+0x2a4>)
 8001caa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4623      	mov	r3, r4
 8001cb2:	f7fe fcb9 	bl	8000628 <__aeabi_dmul>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	460c      	mov	r4, r1
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	4628      	mov	r0, r5
 8001cc0:	4631      	mov	r1, r6
 8001cc2:	f7fe fafb 	bl	80002bc <__adddf3>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	460c      	mov	r4, r1
 8001cca:	461d      	mov	r5, r3
 8001ccc:	4626      	mov	r6, r4
 8001cce:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <getAccelgyroData+0x2a8>)
 8001cd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cd4:	4b66      	ldr	r3, [pc, #408]	; (8001e70 <getAccelgyroData+0x2a8>)
 8001cd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4623      	mov	r3, r4
 8001cde:	f7fe fca3 	bl	8000628 <__aeabi_dmul>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	460c      	mov	r4, r1
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	4623      	mov	r3, r4
 8001cea:	4628      	mov	r0, r5
 8001cec:	4631      	mov	r1, r6
 8001cee:	f7fe fae5 	bl	80002bc <__adddf3>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	ec44 3b17 	vmov	d7, r3, r4
 8001cfa:	eeb0 0a47 	vmov.f32	s0, s14
 8001cfe:	eef0 0a67 	vmov.f32	s1, s15
 8001d02:	f005 fd0f 	bl	8007724 <sqrt>
 8001d06:	eeb0 7a40 	vmov.f32	s14, s0
 8001d0a:	eef0 7a60 	vmov.f32	s15, s1
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	ed83 7b00 	vstr	d7, [r3]

	aax = atan(accy / accz) * (-180) / pi;
 8001d14:	4b55      	ldr	r3, [pc, #340]	; (8001e6c <getAccelgyroData+0x2a4>)
 8001d16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d1a:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <getAccelgyroData+0x2a8>)
 8001d1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	f7fe fdaa 	bl	800087c <__aeabi_ddiv>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	460c      	mov	r4, r1
 8001d2c:	ec44 3b17 	vmov	d7, r3, r4
 8001d30:	eeb0 0a47 	vmov.f32	s0, s14
 8001d34:	eef0 0a67 	vmov.f32	s1, s15
 8001d38:	f005 fb4a 	bl	80073d0 <atan>
 8001d3c:	ec51 0b10 	vmov	r0, r1, d0
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	4b4b      	ldr	r3, [pc, #300]	; (8001e74 <getAccelgyroData+0x2ac>)
 8001d46:	f7fe fc6f 	bl	8000628 <__aeabi_dmul>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	460c      	mov	r4, r1
 8001d4e:	4618      	mov	r0, r3
 8001d50:	4621      	mov	r1, r4
 8001d52:	4b49      	ldr	r3, [pc, #292]	; (8001e78 <getAccelgyroData+0x2b0>)
 8001d54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4623      	mov	r3, r4
 8001d5c:	f7fe fd8e 	bl	800087c <__aeabi_ddiv>
 8001d60:	4603      	mov	r3, r0
 8001d62:	460c      	mov	r4, r1
 8001d64:	4a45      	ldr	r2, [pc, #276]	; (8001e7c <getAccelgyroData+0x2b4>)
 8001d66:	e9c2 3400 	strd	r3, r4, [r2]
	aay = atan(accx / accz) * 180 / pi;
 8001d6a:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <getAccelgyroData+0x2a0>)
 8001d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d70:	4b3f      	ldr	r3, [pc, #252]	; (8001e70 <getAccelgyroData+0x2a8>)
 8001d72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4623      	mov	r3, r4
 8001d7a:	f7fe fd7f 	bl	800087c <__aeabi_ddiv>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	460c      	mov	r4, r1
 8001d82:	ec44 3b17 	vmov	d7, r3, r4
 8001d86:	eeb0 0a47 	vmov.f32	s0, s14
 8001d8a:	eef0 0a67 	vmov.f32	s1, s15
 8001d8e:	f005 fb1f 	bl	80073d0 <atan>
 8001d92:	ec51 0b10 	vmov	r0, r1, d0
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b39      	ldr	r3, [pc, #228]	; (8001e80 <getAccelgyroData+0x2b8>)
 8001d9c:	f7fe fc44 	bl	8000628 <__aeabi_dmul>
 8001da0:	4603      	mov	r3, r0
 8001da2:	460c      	mov	r4, r1
 8001da4:	4618      	mov	r0, r3
 8001da6:	4621      	mov	r1, r4
 8001da8:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <getAccelgyroData+0x2b0>)
 8001daa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dae:	461a      	mov	r2, r3
 8001db0:	4623      	mov	r3, r4
 8001db2:	f7fe fd63 	bl	800087c <__aeabi_ddiv>
 8001db6:	4603      	mov	r3, r0
 8001db8:	460c      	mov	r4, r1
 8001dba:	4a32      	ldr	r2, [pc, #200]	; (8001e84 <getAccelgyroData+0x2bc>)
 8001dbc:	e9c2 3400 	strd	r3, r4, [r2]
	aaz = atan(accz / accy) * 180 / pi;
 8001dc0:	4b2b      	ldr	r3, [pc, #172]	; (8001e70 <getAccelgyroData+0x2a8>)
 8001dc2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <getAccelgyroData+0x2a4>)
 8001dc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4623      	mov	r3, r4
 8001dd0:	f7fe fd54 	bl	800087c <__aeabi_ddiv>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	ec44 3b17 	vmov	d7, r3, r4
 8001ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8001de0:	eef0 0a67 	vmov.f32	s1, s15
 8001de4:	f005 faf4 	bl	80073d0 <atan>
 8001de8:	ec51 0b10 	vmov	r0, r1, d0
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <getAccelgyroData+0x2b8>)
 8001df2:	f7fe fc19 	bl	8000628 <__aeabi_dmul>
 8001df6:	4603      	mov	r3, r0
 8001df8:	460c      	mov	r4, r1
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <getAccelgyroData+0x2b0>)
 8001e00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4623      	mov	r3, r4
 8001e08:	f7fe fd38 	bl	800087c <__aeabi_ddiv>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	460c      	mov	r4, r1
 8001e10:	4a1d      	ldr	r2, [pc, #116]	; (8001e88 <getAccelgyroData+0x2c0>)
 8001e12:	e9c2 3400 	strd	r3, r4, [r2]

	aax_sum = aay_sum = aaz_sum = 0;
 8001e16:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <getAccelgyroData+0x2c4>)
 8001e18:	f04f 0300 	mov.w	r3, #0
 8001e1c:	f04f 0400 	mov.w	r4, #0
 8001e20:	e9c2 3400 	strd	r3, r4, [r2]
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <getAccelgyroData+0x2c4>)
 8001e26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e2a:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <getAccelgyroData+0x2c8>)
 8001e2c:	e9c2 3400 	strd	r3, r4, [r2]
 8001e30:	4b17      	ldr	r3, [pc, #92]	; (8001e90 <getAccelgyroData+0x2c8>)
 8001e32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <getAccelgyroData+0x2cc>)
 8001e38:	e9c2 3400 	strd	r3, r4, [r2]

	for (register int i=1; i ^ n_sample; ++ i) {
 8001e3c:	2401      	movs	r4, #1
 8001e3e:	e0c5      	b.n	8001fcc <getAccelgyroData+0x404>
 8001e40:	20000348 	.word	0x20000348
 8001e44:	408f4000 	.word	0x408f4000
 8001e48:	20003630 	.word	0x20003630
 8001e4c:	20003618 	.word	0x20003618
 8001e50:	200035c0 	.word	0x200035c0
 8001e54:	20003648 	.word	0x20003648
 8001e58:	200035c2 	.word	0x200035c2
 8001e5c:	2000364a 	.word	0x2000364a
 8001e60:	200035e8 	.word	0x200035e8
 8001e64:	20000008 	.word	0x20000008
 8001e68:	20003650 	.word	0x20003650
 8001e6c:	200035d8 	.word	0x200035d8
 8001e70:	20003628 	.word	0x20003628
 8001e74:	c0668000 	.word	0xc0668000
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000350 	.word	0x20000350
 8001e80:	40668000 	.word	0x40668000
 8001e84:	20000358 	.word	0x20000358
 8001e88:	20000360 	.word	0x20000360
 8001e8c:	200035a0 	.word	0x200035a0
 8001e90:	20003580 	.word	0x20003580
 8001e94:	20003598 	.word	0x20003598
		aaxs[i-1] = aaxs[i], aax_sum += aaxs[i] * i;
 8001e98:	1e61      	subs	r1, r4, #1
 8001e9a:	4ac7      	ldr	r2, [pc, #796]	; (80021b8 <getAccelgyroData+0x5f0>)
 8001e9c:	00e3      	lsls	r3, r4, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	48c4      	ldr	r0, [pc, #784]	; (80021b8 <getAccelgyroData+0x5f0>)
 8001ea6:	00c9      	lsls	r1, r1, #3
 8001ea8:	4401      	add	r1, r0
 8001eaa:	e9c1 2300 	strd	r2, r3, [r1]
 8001eae:	4bc3      	ldr	r3, [pc, #780]	; (80021bc <getAccelgyroData+0x5f4>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	4610      	mov	r0, r2
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	f7fe fb88 	bl	80005cc <__aeabi_l2d>
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	4689      	mov	r9, r1
 8001ec0:	4abd      	ldr	r2, [pc, #756]	; (80021b8 <getAccelgyroData+0x5f0>)
 8001ec2:	00e3      	lsls	r3, r4, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001eca:	4620      	mov	r0, r4
 8001ecc:	f7fe fb42 	bl	8000554 <__aeabi_i2d>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4628      	mov	r0, r5
 8001ed6:	4631      	mov	r1, r6
 8001ed8:	f7fe fba6 	bl	8000628 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4640      	mov	r0, r8
 8001ee2:	4649      	mov	r1, r9
 8001ee4:	f7fe f9ea 	bl	80002bc <__adddf3>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4610      	mov	r0, r2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f7fe fe8a 	bl	8000c08 <__aeabi_d2lz>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	49b0      	ldr	r1, [pc, #704]	; (80021bc <getAccelgyroData+0x5f4>)
 8001efa:	e9c1 2300 	strd	r2, r3, [r1]
		aays[i-1] = aays[i], aay_sum += aays[i] * i;
 8001efe:	1e61      	subs	r1, r4, #1
 8001f00:	4aaf      	ldr	r2, [pc, #700]	; (80021c0 <getAccelgyroData+0x5f8>)
 8001f02:	00e3      	lsls	r3, r4, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	48ad      	ldr	r0, [pc, #692]	; (80021c0 <getAccelgyroData+0x5f8>)
 8001f0c:	00c9      	lsls	r1, r1, #3
 8001f0e:	4401      	add	r1, r0
 8001f10:	e9c1 2300 	strd	r2, r3, [r1]
 8001f14:	4bab      	ldr	r3, [pc, #684]	; (80021c4 <getAccelgyroData+0x5fc>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f7fe fb55 	bl	80005cc <__aeabi_l2d>
 8001f22:	4680      	mov	r8, r0
 8001f24:	4689      	mov	r9, r1
 8001f26:	4aa6      	ldr	r2, [pc, #664]	; (80021c0 <getAccelgyroData+0x5f8>)
 8001f28:	00e3      	lsls	r3, r4, #3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7fe fb0f 	bl	8000554 <__aeabi_i2d>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	4631      	mov	r1, r6
 8001f3e:	f7fe fb73 	bl	8000628 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4640      	mov	r0, r8
 8001f48:	4649      	mov	r1, r9
 8001f4a:	f7fe f9b7 	bl	80002bc <__adddf3>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	f7fe fe57 	bl	8000c08 <__aeabi_d2lz>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4999      	ldr	r1, [pc, #612]	; (80021c4 <getAccelgyroData+0x5fc>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
		aazs[i-1] = aazs[i], aaz_sum += aazs[i] * i;
 8001f64:	1e61      	subs	r1, r4, #1
 8001f66:	4a98      	ldr	r2, [pc, #608]	; (80021c8 <getAccelgyroData+0x600>)
 8001f68:	00e3      	lsls	r3, r4, #3
 8001f6a:	4413      	add	r3, r2
 8001f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f70:	4895      	ldr	r0, [pc, #596]	; (80021c8 <getAccelgyroData+0x600>)
 8001f72:	00c9      	lsls	r1, r1, #3
 8001f74:	4401      	add	r1, r0
 8001f76:	e9c1 2300 	strd	r2, r3, [r1]
 8001f7a:	4b94      	ldr	r3, [pc, #592]	; (80021cc <getAccelgyroData+0x604>)
 8001f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f7fe fb22 	bl	80005cc <__aeabi_l2d>
 8001f88:	4680      	mov	r8, r0
 8001f8a:	4689      	mov	r9, r1
 8001f8c:	4a8e      	ldr	r2, [pc, #568]	; (80021c8 <getAccelgyroData+0x600>)
 8001f8e:	00e3      	lsls	r3, r4, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001f96:	4620      	mov	r0, r4
 8001f98:	f7fe fadc 	bl	8000554 <__aeabi_i2d>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	4631      	mov	r1, r6
 8001fa4:	f7fe fb40 	bl	8000628 <__aeabi_dmul>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4640      	mov	r0, r8
 8001fae:	4649      	mov	r1, r9
 8001fb0:	f7fe f984 	bl	80002bc <__adddf3>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4619      	mov	r1, r3
 8001fbc:	f7fe fe24 	bl	8000c08 <__aeabi_d2lz>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4981      	ldr	r1, [pc, #516]	; (80021cc <getAccelgyroData+0x604>)
 8001fc6:	e9c1 2300 	strd	r2, r3, [r1]
	for (register int i=1; i ^ n_sample; ++ i) {
 8001fca:	3401      	adds	r4, #1
 8001fcc:	4620      	mov	r0, r4
 8001fce:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001fd2:	4b7f      	ldr	r3, [pc, #508]	; (80021d0 <getAccelgyroData+0x608>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	4299      	cmp	r1, r3
 8001fda:	bf08      	it	eq
 8001fdc:	4290      	cmpeq	r0, r2
 8001fde:	f47f af5b 	bne.w	8001e98 <getAccelgyroData+0x2d0>
	}

	aaxs[n_sample-1] = aax, aax_sum += aax * n_sample, aax = (aax_sum / (11 * n_sample / 2.0)) * 9 / 7.0;
 8001fe2:	4b7b      	ldr	r3, [pc, #492]	; (80021d0 <getAccelgyroData+0x608>)
 8001fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fe8:	f113 31ff 	adds.w	r1, r3, #4294967295
 8001fec:	f144 32ff 	adc.w	r2, r4, #4294967295
 8001ff0:	4b78      	ldr	r3, [pc, #480]	; (80021d4 <getAccelgyroData+0x60c>)
 8001ff2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ff6:	4870      	ldr	r0, [pc, #448]	; (80021b8 <getAccelgyroData+0x5f0>)
 8001ff8:	460a      	mov	r2, r1
 8001ffa:	00d2      	lsls	r2, r2, #3
 8001ffc:	4402      	add	r2, r0
 8001ffe:	e9c2 3400 	strd	r3, r4, [r2]
 8002002:	4b6e      	ldr	r3, [pc, #440]	; (80021bc <getAccelgyroData+0x5f4>)
 8002004:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002008:	4618      	mov	r0, r3
 800200a:	4621      	mov	r1, r4
 800200c:	f7fe fade 	bl	80005cc <__aeabi_l2d>
 8002010:	4605      	mov	r5, r0
 8002012:	460e      	mov	r6, r1
 8002014:	4b6e      	ldr	r3, [pc, #440]	; (80021d0 <getAccelgyroData+0x608>)
 8002016:	e9d3 3400 	ldrd	r3, r4, [r3]
 800201a:	4618      	mov	r0, r3
 800201c:	4621      	mov	r1, r4
 800201e:	f7fe fad5 	bl	80005cc <__aeabi_l2d>
 8002022:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <getAccelgyroData+0x60c>)
 8002024:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002028:	461a      	mov	r2, r3
 800202a:	4623      	mov	r3, r4
 800202c:	f7fe fafc 	bl	8000628 <__aeabi_dmul>
 8002030:	4603      	mov	r3, r0
 8002032:	460c      	mov	r4, r1
 8002034:	461a      	mov	r2, r3
 8002036:	4623      	mov	r3, r4
 8002038:	4628      	mov	r0, r5
 800203a:	4631      	mov	r1, r6
 800203c:	f7fe f93e 	bl	80002bc <__adddf3>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	4618      	mov	r0, r3
 8002046:	4621      	mov	r1, r4
 8002048:	f7fe fdde 	bl	8000c08 <__aeabi_d2lz>
 800204c:	4603      	mov	r3, r0
 800204e:	460c      	mov	r4, r1
 8002050:	4a5a      	ldr	r2, [pc, #360]	; (80021bc <getAccelgyroData+0x5f4>)
 8002052:	e9c2 3400 	strd	r3, r4, [r2]
 8002056:	4b59      	ldr	r3, [pc, #356]	; (80021bc <getAccelgyroData+0x5f4>)
 8002058:	e9d3 3400 	ldrd	r3, r4, [r3]
 800205c:	4618      	mov	r0, r3
 800205e:	4621      	mov	r1, r4
 8002060:	f7fe fab4 	bl	80005cc <__aeabi_l2d>
 8002064:	4680      	mov	r8, r0
 8002066:	4689      	mov	r9, r1
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <getAccelgyroData+0x608>)
 800206a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800206e:	46ab      	mov	fp, r5
 8002070:	46b4      	mov	ip, r6
 8002072:	eb1b 030b 	adds.w	r3, fp, fp
 8002076:	eb4c 040c 	adc.w	r4, ip, ip
 800207a:	469b      	mov	fp, r3
 800207c:	46a4      	mov	ip, r4
 800207e:	eb1b 0b05 	adds.w	fp, fp, r5
 8002082:	eb4c 0c06 	adc.w	ip, ip, r6
 8002086:	f04f 0100 	mov.w	r1, #0
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	ea4f 028c 	mov.w	r2, ip, lsl #2
 8002092:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 8002096:	ea4f 018b 	mov.w	r1, fp, lsl #2
 800209a:	468b      	mov	fp, r1
 800209c:	4694      	mov	ip, r2
 800209e:	465b      	mov	r3, fp
 80020a0:	4664      	mov	r4, ip
 80020a2:	1b5b      	subs	r3, r3, r5
 80020a4:	eb64 0406 	sbc.w	r4, r4, r6
 80020a8:	4618      	mov	r0, r3
 80020aa:	4621      	mov	r1, r4
 80020ac:	f7fe fa8e 	bl	80005cc <__aeabi_l2d>
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b8:	f7fe fbe0 	bl	800087c <__aeabi_ddiv>
 80020bc:	4603      	mov	r3, r0
 80020be:	460c      	mov	r4, r1
 80020c0:	461a      	mov	r2, r3
 80020c2:	4623      	mov	r3, r4
 80020c4:	4640      	mov	r0, r8
 80020c6:	4649      	mov	r1, r9
 80020c8:	f7fe fbd8 	bl	800087c <__aeabi_ddiv>
 80020cc:	4603      	mov	r3, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	4618      	mov	r0, r3
 80020d2:	4621      	mov	r1, r4
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	4b3f      	ldr	r3, [pc, #252]	; (80021d8 <getAccelgyroData+0x610>)
 80020da:	f7fe faa5 	bl	8000628 <__aeabi_dmul>
 80020de:	4603      	mov	r3, r0
 80020e0:	460c      	mov	r4, r1
 80020e2:	4618      	mov	r0, r3
 80020e4:	4621      	mov	r1, r4
 80020e6:	f04f 0200 	mov.w	r2, #0
 80020ea:	4b3c      	ldr	r3, [pc, #240]	; (80021dc <getAccelgyroData+0x614>)
 80020ec:	f7fe fbc6 	bl	800087c <__aeabi_ddiv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	460c      	mov	r4, r1
 80020f4:	4a37      	ldr	r2, [pc, #220]	; (80021d4 <getAccelgyroData+0x60c>)
 80020f6:	e9c2 3400 	strd	r3, r4, [r2]
	aays[n_sample-1] = aay, aay_sum += aay * n_sample, aay = (aay_sum / (11 * n_sample / 2.0)) * 9 / 7.0;
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <getAccelgyroData+0x608>)
 80020fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002100:	f113 31ff 	adds.w	r1, r3, #4294967295
 8002104:	f144 32ff 	adc.w	r2, r4, #4294967295
 8002108:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <getAccelgyroData+0x618>)
 800210a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800210e:	482c      	ldr	r0, [pc, #176]	; (80021c0 <getAccelgyroData+0x5f8>)
 8002110:	460a      	mov	r2, r1
 8002112:	00d2      	lsls	r2, r2, #3
 8002114:	4402      	add	r2, r0
 8002116:	e9c2 3400 	strd	r3, r4, [r2]
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <getAccelgyroData+0x5fc>)
 800211c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002120:	4618      	mov	r0, r3
 8002122:	4621      	mov	r1, r4
 8002124:	f7fe fa52 	bl	80005cc <__aeabi_l2d>
 8002128:	4605      	mov	r5, r0
 800212a:	460e      	mov	r6, r1
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <getAccelgyroData+0x608>)
 800212e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002132:	4618      	mov	r0, r3
 8002134:	4621      	mov	r1, r4
 8002136:	f7fe fa49 	bl	80005cc <__aeabi_l2d>
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <getAccelgyroData+0x618>)
 800213c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002140:	461a      	mov	r2, r3
 8002142:	4623      	mov	r3, r4
 8002144:	f7fe fa70 	bl	8000628 <__aeabi_dmul>
 8002148:	4603      	mov	r3, r0
 800214a:	460c      	mov	r4, r1
 800214c:	461a      	mov	r2, r3
 800214e:	4623      	mov	r3, r4
 8002150:	4628      	mov	r0, r5
 8002152:	4631      	mov	r1, r6
 8002154:	f7fe f8b2 	bl	80002bc <__adddf3>
 8002158:	4603      	mov	r3, r0
 800215a:	460c      	mov	r4, r1
 800215c:	4618      	mov	r0, r3
 800215e:	4621      	mov	r1, r4
 8002160:	f7fe fd52 	bl	8000c08 <__aeabi_d2lz>
 8002164:	4603      	mov	r3, r0
 8002166:	460c      	mov	r4, r1
 8002168:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <getAccelgyroData+0x5fc>)
 800216a:	e9c2 3400 	strd	r3, r4, [r2]
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <getAccelgyroData+0x5fc>)
 8002170:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002174:	4618      	mov	r0, r3
 8002176:	4621      	mov	r1, r4
 8002178:	f7fe fa28 	bl	80005cc <__aeabi_l2d>
 800217c:	4680      	mov	r8, r0
 800217e:	4689      	mov	r9, r1
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <getAccelgyroData+0x608>)
 8002182:	e9d3 5600 	ldrd	r5, r6, [r3]
 8002186:	46ab      	mov	fp, r5
 8002188:	46b4      	mov	ip, r6
 800218a:	eb1b 030b 	adds.w	r3, fp, fp
 800218e:	eb4c 040c 	adc.w	r4, ip, ip
 8002192:	469b      	mov	fp, r3
 8002194:	46a4      	mov	ip, r4
 8002196:	eb1b 0b05 	adds.w	fp, fp, r5
 800219a:	eb4c 0c06 	adc.w	ip, ip, r6
 800219e:	f04f 0100 	mov.w	r1, #0
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80021aa:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80021ae:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80021b2:	468b      	mov	fp, r1
 80021b4:	4694      	mov	ip, r2
 80021b6:	e015      	b.n	80021e4 <getAccelgyroData+0x61c>
 80021b8:	20000390 	.word	0x20000390
 80021bc:	20003598 	.word	0x20003598
 80021c0:	200003d0 	.word	0x200003d0
 80021c4:	20003580 	.word	0x20003580
 80021c8:	20000410 	.word	0x20000410
 80021cc:	200035a0 	.word	0x200035a0
 80021d0:	20000018 	.word	0x20000018
 80021d4:	20000350 	.word	0x20000350
 80021d8:	40220000 	.word	0x40220000
 80021dc:	401c0000 	.word	0x401c0000
 80021e0:	20000358 	.word	0x20000358
 80021e4:	465b      	mov	r3, fp
 80021e6:	4664      	mov	r4, ip
 80021e8:	1b5b      	subs	r3, r3, r5
 80021ea:	eb64 0406 	sbc.w	r4, r4, r6
 80021ee:	4618      	mov	r0, r3
 80021f0:	4621      	mov	r1, r4
 80021f2:	f7fe f9eb 	bl	80005cc <__aeabi_l2d>
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80021fe:	f7fe fb3d 	bl	800087c <__aeabi_ddiv>
 8002202:	4603      	mov	r3, r0
 8002204:	460c      	mov	r4, r1
 8002206:	461a      	mov	r2, r3
 8002208:	4623      	mov	r3, r4
 800220a:	4640      	mov	r0, r8
 800220c:	4649      	mov	r1, r9
 800220e:	f7fe fb35 	bl	800087c <__aeabi_ddiv>
 8002212:	4603      	mov	r3, r0
 8002214:	460c      	mov	r4, r1
 8002216:	4618      	mov	r0, r3
 8002218:	4621      	mov	r1, r4
 800221a:	f04f 0200 	mov.w	r2, #0
 800221e:	4ba3      	ldr	r3, [pc, #652]	; (80024ac <getAccelgyroData+0x8e4>)
 8002220:	f7fe fa02 	bl	8000628 <__aeabi_dmul>
 8002224:	4603      	mov	r3, r0
 8002226:	460c      	mov	r4, r1
 8002228:	4618      	mov	r0, r3
 800222a:	4621      	mov	r1, r4
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	4b9f      	ldr	r3, [pc, #636]	; (80024b0 <getAccelgyroData+0x8e8>)
 8002232:	f7fe fb23 	bl	800087c <__aeabi_ddiv>
 8002236:	4603      	mov	r3, r0
 8002238:	460c      	mov	r4, r1
 800223a:	4a9e      	ldr	r2, [pc, #632]	; (80024b4 <getAccelgyroData+0x8ec>)
 800223c:	e9c2 3400 	strd	r3, r4, [r2]
	aazs[n_sample-1] = aaz, aaz_sum += aaz * n_sample, aaz = (aaz_sum / (11 * n_sample / 2.0)) * 9 / 7.0;
 8002240:	4b9d      	ldr	r3, [pc, #628]	; (80024b8 <getAccelgyroData+0x8f0>)
 8002242:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002246:	f113 31ff 	adds.w	r1, r3, #4294967295
 800224a:	f144 32ff 	adc.w	r2, r4, #4294967295
 800224e:	4b9b      	ldr	r3, [pc, #620]	; (80024bc <getAccelgyroData+0x8f4>)
 8002250:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002254:	489a      	ldr	r0, [pc, #616]	; (80024c0 <getAccelgyroData+0x8f8>)
 8002256:	460a      	mov	r2, r1
 8002258:	00d2      	lsls	r2, r2, #3
 800225a:	4402      	add	r2, r0
 800225c:	e9c2 3400 	strd	r3, r4, [r2]
 8002260:	4b98      	ldr	r3, [pc, #608]	; (80024c4 <getAccelgyroData+0x8fc>)
 8002262:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002266:	4618      	mov	r0, r3
 8002268:	4621      	mov	r1, r4
 800226a:	f7fe f9af 	bl	80005cc <__aeabi_l2d>
 800226e:	4605      	mov	r5, r0
 8002270:	460e      	mov	r6, r1
 8002272:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <getAccelgyroData+0x8f0>)
 8002274:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002278:	4618      	mov	r0, r3
 800227a:	4621      	mov	r1, r4
 800227c:	f7fe f9a6 	bl	80005cc <__aeabi_l2d>
 8002280:	4b8e      	ldr	r3, [pc, #568]	; (80024bc <getAccelgyroData+0x8f4>)
 8002282:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002286:	461a      	mov	r2, r3
 8002288:	4623      	mov	r3, r4
 800228a:	f7fe f9cd 	bl	8000628 <__aeabi_dmul>
 800228e:	4603      	mov	r3, r0
 8002290:	460c      	mov	r4, r1
 8002292:	461a      	mov	r2, r3
 8002294:	4623      	mov	r3, r4
 8002296:	4628      	mov	r0, r5
 8002298:	4631      	mov	r1, r6
 800229a:	f7fe f80f 	bl	80002bc <__adddf3>
 800229e:	4603      	mov	r3, r0
 80022a0:	460c      	mov	r4, r1
 80022a2:	4618      	mov	r0, r3
 80022a4:	4621      	mov	r1, r4
 80022a6:	f7fe fcaf 	bl	8000c08 <__aeabi_d2lz>
 80022aa:	4603      	mov	r3, r0
 80022ac:	460c      	mov	r4, r1
 80022ae:	4a85      	ldr	r2, [pc, #532]	; (80024c4 <getAccelgyroData+0x8fc>)
 80022b0:	e9c2 3400 	strd	r3, r4, [r2]
 80022b4:	4b83      	ldr	r3, [pc, #524]	; (80024c4 <getAccelgyroData+0x8fc>)
 80022b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022ba:	4618      	mov	r0, r3
 80022bc:	4621      	mov	r1, r4
 80022be:	f7fe f985 	bl	80005cc <__aeabi_l2d>
 80022c2:	4680      	mov	r8, r0
 80022c4:	4689      	mov	r9, r1
 80022c6:	4b7c      	ldr	r3, [pc, #496]	; (80024b8 <getAccelgyroData+0x8f0>)
 80022c8:	e9d3 5600 	ldrd	r5, r6, [r3]
 80022cc:	46ab      	mov	fp, r5
 80022ce:	46b4      	mov	ip, r6
 80022d0:	eb1b 030b 	adds.w	r3, fp, fp
 80022d4:	eb4c 040c 	adc.w	r4, ip, ip
 80022d8:	469b      	mov	fp, r3
 80022da:	46a4      	mov	ip, r4
 80022dc:	eb1b 0b05 	adds.w	fp, fp, r5
 80022e0:	eb4c 0c06 	adc.w	ip, ip, r6
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80022f0:	ea42 729b 	orr.w	r2, r2, fp, lsr #30
 80022f4:	ea4f 018b 	mov.w	r1, fp, lsl #2
 80022f8:	468b      	mov	fp, r1
 80022fa:	4694      	mov	ip, r2
 80022fc:	465b      	mov	r3, fp
 80022fe:	4664      	mov	r4, ip
 8002300:	1b5b      	subs	r3, r3, r5
 8002302:	eb64 0406 	sbc.w	r4, r4, r6
 8002306:	4618      	mov	r0, r3
 8002308:	4621      	mov	r1, r4
 800230a:	f7fe f95f 	bl	80005cc <__aeabi_l2d>
 800230e:	f04f 0200 	mov.w	r2, #0
 8002312:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002316:	f7fe fab1 	bl	800087c <__aeabi_ddiv>
 800231a:	4603      	mov	r3, r0
 800231c:	460c      	mov	r4, r1
 800231e:	461a      	mov	r2, r3
 8002320:	4623      	mov	r3, r4
 8002322:	4640      	mov	r0, r8
 8002324:	4649      	mov	r1, r9
 8002326:	f7fe faa9 	bl	800087c <__aeabi_ddiv>
 800232a:	4603      	mov	r3, r0
 800232c:	460c      	mov	r4, r1
 800232e:	4618      	mov	r0, r3
 8002330:	4621      	mov	r1, r4
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <getAccelgyroData+0x8e4>)
 8002338:	f7fe f976 	bl	8000628 <__aeabi_dmul>
 800233c:	4603      	mov	r3, r0
 800233e:	460c      	mov	r4, r1
 8002340:	4618      	mov	r0, r3
 8002342:	4621      	mov	r1, r4
 8002344:	f04f 0200 	mov.w	r2, #0
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <getAccelgyroData+0x8e8>)
 800234a:	f7fe fa97 	bl	800087c <__aeabi_ddiv>
 800234e:	4603      	mov	r3, r0
 8002350:	460c      	mov	r4, r1
 8002352:	4a5a      	ldr	r2, [pc, #360]	; (80024bc <getAccelgyroData+0x8f4>)
 8002354:	e9c2 3400 	strd	r3, r4, [r2]

	double gyrox = -(gx - gxo) / GyroRatio * dt;
 8002358:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <getAccelgyroData+0x900>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a5b      	ldr	r2, [pc, #364]	; (80024cc <getAccelgyroData+0x904>)
 800235e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f8f5 	bl	8000554 <__aeabi_i2d>
 800236a:	4b59      	ldr	r3, [pc, #356]	; (80024d0 <getAccelgyroData+0x908>)
 800236c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002370:	461a      	mov	r2, r3
 8002372:	4623      	mov	r3, r4
 8002374:	f7fe fa82 	bl	800087c <__aeabi_ddiv>
 8002378:	4603      	mov	r3, r0
 800237a:	460c      	mov	r4, r1
 800237c:	4618      	mov	r0, r3
 800237e:	4621      	mov	r1, r4
 8002380:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <getAccelgyroData+0x90c>)
 8002382:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002386:	461a      	mov	r2, r3
 8002388:	4623      	mov	r3, r4
 800238a:	f7fe f94d 	bl	8000628 <__aeabi_dmul>
 800238e:	4603      	mov	r3, r0
 8002390:	460c      	mov	r4, r1
 8002392:	e9c7 3408 	strd	r3, r4, [r7, #32]
	double gyroy = -(gy - gyo) / GyroRatio * dt;
 8002396:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <getAccelgyroData+0x910>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a50      	ldr	r2, [pc, #320]	; (80024dc <getAccelgyroData+0x914>)
 800239c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe f8d6 	bl	8000554 <__aeabi_i2d>
 80023a8:	4b49      	ldr	r3, [pc, #292]	; (80024d0 <getAccelgyroData+0x908>)
 80023aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023ae:	461a      	mov	r2, r3
 80023b0:	4623      	mov	r3, r4
 80023b2:	f7fe fa63 	bl	800087c <__aeabi_ddiv>
 80023b6:	4603      	mov	r3, r0
 80023b8:	460c      	mov	r4, r1
 80023ba:	4618      	mov	r0, r3
 80023bc:	4621      	mov	r1, r4
 80023be:	4b45      	ldr	r3, [pc, #276]	; (80024d4 <getAccelgyroData+0x90c>)
 80023c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023c4:	461a      	mov	r2, r3
 80023c6:	4623      	mov	r3, r4
 80023c8:	f7fe f92e 	bl	8000628 <__aeabi_dmul>
 80023cc:	4603      	mov	r3, r0
 80023ce:	460c      	mov	r4, r1
 80023d0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	double gyroz = -(gz - gzo) / GyroRatio * dt;
 80023d4:	4b42      	ldr	r3, [pc, #264]	; (80024e0 <getAccelgyroData+0x918>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a42      	ldr	r2, [pc, #264]	; (80024e4 <getAccelgyroData+0x91c>)
 80023da:	f9b2 2000 	ldrsh.w	r2, [r2]
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f8b7 	bl	8000554 <__aeabi_i2d>
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <getAccelgyroData+0x908>)
 80023e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4623      	mov	r3, r4
 80023f0:	f7fe fa44 	bl	800087c <__aeabi_ddiv>
 80023f4:	4603      	mov	r3, r0
 80023f6:	460c      	mov	r4, r1
 80023f8:	4618      	mov	r0, r3
 80023fa:	4621      	mov	r1, r4
 80023fc:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <getAccelgyroData+0x90c>)
 80023fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002402:	461a      	mov	r2, r3
 8002404:	4623      	mov	r3, r4
 8002406:	f7fe f90f 	bl	8000628 <__aeabi_dmul>
 800240a:	4603      	mov	r3, r0
 800240c:	460c      	mov	r4, r1
 800240e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	agx += gyrox, agy += gyroy, agz += gyroz;
 8002412:	4b35      	ldr	r3, [pc, #212]	; (80024e8 <getAccelgyroData+0x920>)
 8002414:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002418:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800241c:	f7fd ff4e 	bl	80002bc <__adddf3>
 8002420:	4603      	mov	r3, r0
 8002422:	460c      	mov	r4, r1
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <getAccelgyroData+0x920>)
 8002426:	e9c2 3400 	strd	r3, r4, [r2]
 800242a:	4b30      	ldr	r3, [pc, #192]	; (80024ec <getAccelgyroData+0x924>)
 800242c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002434:	f7fd ff42 	bl	80002bc <__adddf3>
 8002438:	4603      	mov	r3, r0
 800243a:	460c      	mov	r4, r1
 800243c:	4a2b      	ldr	r2, [pc, #172]	; (80024ec <getAccelgyroData+0x924>)
 800243e:	e9c2 3400 	strd	r3, r4, [r2]
 8002442:	4b2b      	ldr	r3, [pc, #172]	; (80024f0 <getAccelgyroData+0x928>)
 8002444:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002448:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800244c:	f7fd ff36 	bl	80002bc <__adddf3>
 8002450:	4603      	mov	r3, r0
 8002452:	460c      	mov	r4, r1
 8002454:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <getAccelgyroData+0x928>)
 8002456:	e9c2 3400 	strd	r3, r4, [r2]

	Sx = Rx = Sy = Ry = Sz = Rz = 0;
 800245a:	4a26      	ldr	r2, [pc, #152]	; (80024f4 <getAccelgyroData+0x92c>)
 800245c:	f04f 0300 	mov.w	r3, #0
 8002460:	f04f 0400 	mov.w	r4, #0
 8002464:	e9c2 3400 	strd	r3, r4, [r2]
 8002468:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <getAccelgyroData+0x92c>)
 800246a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800246e:	4a22      	ldr	r2, [pc, #136]	; (80024f8 <getAccelgyroData+0x930>)
 8002470:	e9c2 3400 	strd	r3, r4, [r2]
 8002474:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <getAccelgyroData+0x930>)
 8002476:	e9d3 3400 	ldrd	r3, r4, [r3]
 800247a:	4a20      	ldr	r2, [pc, #128]	; (80024fc <getAccelgyroData+0x934>)
 800247c:	e9c2 3400 	strd	r3, r4, [r2]
 8002480:	4b1e      	ldr	r3, [pc, #120]	; (80024fc <getAccelgyroData+0x934>)
 8002482:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002486:	4a1e      	ldr	r2, [pc, #120]	; (8002500 <getAccelgyroData+0x938>)
 8002488:	e9c2 3400 	strd	r3, r4, [r2]
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <getAccelgyroData+0x938>)
 800248e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002492:	4a1c      	ldr	r2, [pc, #112]	; (8002504 <getAccelgyroData+0x93c>)
 8002494:	e9c2 3400 	strd	r3, r4, [r2]
 8002498:	4b1a      	ldr	r3, [pc, #104]	; (8002504 <getAccelgyroData+0x93c>)
 800249a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800249e:	4a1a      	ldr	r2, [pc, #104]	; (8002508 <getAccelgyroData+0x940>)
 80024a0:	e9c2 3400 	strd	r3, r4, [r2]

	for (int i = 1; i ^ 10; ++ i) {
 80024a4:	2301      	movs	r3, #1
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a8:	e090      	b.n	80025cc <getAccelgyroData+0xa04>
 80024aa:	bf00      	nop
 80024ac:	40220000 	.word	0x40220000
 80024b0:	401c0000 	.word	0x401c0000
 80024b4:	20000358 	.word	0x20000358
 80024b8:	20000018 	.word	0x20000018
 80024bc:	20000360 	.word	0x20000360
 80024c0:	20000410 	.word	0x20000410
 80024c4:	200035a0 	.word	0x200035a0
 80024c8:	20000380 	.word	0x20000380
 80024cc:	20003648 	.word	0x20003648
 80024d0:	20000010 	.word	0x20000010
 80024d4:	20003630 	.word	0x20003630
 80024d8:	20000384 	.word	0x20000384
 80024dc:	200035c0 	.word	0x200035c0
 80024e0:	20000388 	.word	0x20000388
 80024e4:	20003618 	.word	0x20003618
 80024e8:	20000368 	.word	0x20000368
 80024ec:	20000370 	.word	0x20000370
 80024f0:	20000378 	.word	0x20000378
 80024f4:	200035b8 	.word	0x200035b8
 80024f8:	200035a8 	.word	0x200035a8
 80024fc:	20003588 	.word	0x20003588
 8002500:	20003638 	.word	0x20003638
 8002504:	200035e0 	.word	0x200035e0
 8002508:	200035f8 	.word	0x200035f8
		a_x[i - 1] = a_x[i], Sx += a_x[i];
 800250c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800250e:	1e5a      	subs	r2, r3, #1
 8002510:	4964      	ldr	r1, [pc, #400]	; (80026a4 <getAccelgyroData+0xadc>)
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	440b      	add	r3, r1
 8002518:	e9d3 3400 	ldrd	r3, r4, [r3]
 800251c:	4961      	ldr	r1, [pc, #388]	; (80026a4 <getAccelgyroData+0xadc>)
 800251e:	00d2      	lsls	r2, r2, #3
 8002520:	440a      	add	r2, r1
 8002522:	e9c2 3400 	strd	r3, r4, [r2]
 8002526:	4a5f      	ldr	r2, [pc, #380]	; (80026a4 <getAccelgyroData+0xadc>)
 8002528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	4413      	add	r3, r2
 800252e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002532:	4b5d      	ldr	r3, [pc, #372]	; (80026a8 <getAccelgyroData+0xae0>)
 8002534:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002538:	461a      	mov	r2, r3
 800253a:	4623      	mov	r3, r4
 800253c:	f7fd febe 	bl	80002bc <__adddf3>
 8002540:	4603      	mov	r3, r0
 8002542:	460c      	mov	r4, r1
 8002544:	4a58      	ldr	r2, [pc, #352]	; (80026a8 <getAccelgyroData+0xae0>)
 8002546:	e9c2 3400 	strd	r3, r4, [r2]
		a_y[i - 1] = a_y[i], Sy += a_y[i];
 800254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	4957      	ldr	r1, [pc, #348]	; (80026ac <getAccelgyroData+0xae4>)
 8002550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	440b      	add	r3, r1
 8002556:	e9d3 3400 	ldrd	r3, r4, [r3]
 800255a:	4954      	ldr	r1, [pc, #336]	; (80026ac <getAccelgyroData+0xae4>)
 800255c:	00d2      	lsls	r2, r2, #3
 800255e:	440a      	add	r2, r1
 8002560:	e9c2 3400 	strd	r3, r4, [r2]
 8002564:	4a51      	ldr	r2, [pc, #324]	; (80026ac <getAccelgyroData+0xae4>)
 8002566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	4413      	add	r3, r2
 800256c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002570:	4b4f      	ldr	r3, [pc, #316]	; (80026b0 <getAccelgyroData+0xae8>)
 8002572:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002576:	461a      	mov	r2, r3
 8002578:	4623      	mov	r3, r4
 800257a:	f7fd fe9f 	bl	80002bc <__adddf3>
 800257e:	4603      	mov	r3, r0
 8002580:	460c      	mov	r4, r1
 8002582:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <getAccelgyroData+0xae8>)
 8002584:	e9c2 3400 	strd	r3, r4, [r2]
		a_z[i - 1] = a_z[i], Sz += a_z[i];
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	1e5a      	subs	r2, r3, #1
 800258c:	4949      	ldr	r1, [pc, #292]	; (80026b4 <getAccelgyroData+0xaec>)
 800258e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002598:	4946      	ldr	r1, [pc, #280]	; (80026b4 <getAccelgyroData+0xaec>)
 800259a:	00d2      	lsls	r2, r2, #3
 800259c:	440a      	add	r2, r1
 800259e:	e9c2 3400 	strd	r3, r4, [r2]
 80025a2:	4a44      	ldr	r2, [pc, #272]	; (80026b4 <getAccelgyroData+0xaec>)
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ae:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <getAccelgyroData+0xaf0>)
 80025b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025b4:	461a      	mov	r2, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	f7fd fe80 	bl	80002bc <__adddf3>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	4a3d      	ldr	r2, [pc, #244]	; (80026b8 <getAccelgyroData+0xaf0>)
 80025c2:	e9c2 3400 	strd	r3, r4, [r2]
	for (int i = 1; i ^ 10; ++ i) {
 80025c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c8:	3301      	adds	r3, #1
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ce:	2b0a      	cmp	r3, #10
 80025d0:	d19c      	bne.n	800250c <getAccelgyroData+0x944>
	} a_x[9] = aax, Sx += aax, Sx /= 10, a_y[9] = aay, Sy += aay, Sy /= 10, a_z[9] = aaz, Sz += aaz, Sz /= 10;
 80025d2:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <getAccelgyroData+0xaf4>)
 80025d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025d8:	4a32      	ldr	r2, [pc, #200]	; (80026a4 <getAccelgyroData+0xadc>)
 80025da:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 80025de:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <getAccelgyroData+0xae0>)
 80025e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025e4:	4b35      	ldr	r3, [pc, #212]	; (80026bc <getAccelgyroData+0xaf4>)
 80025e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025ea:	461a      	mov	r2, r3
 80025ec:	4623      	mov	r3, r4
 80025ee:	f7fd fe65 	bl	80002bc <__adddf3>
 80025f2:	4603      	mov	r3, r0
 80025f4:	460c      	mov	r4, r1
 80025f6:	4a2c      	ldr	r2, [pc, #176]	; (80026a8 <getAccelgyroData+0xae0>)
 80025f8:	e9c2 3400 	strd	r3, r4, [r2]
 80025fc:	4b2a      	ldr	r3, [pc, #168]	; (80026a8 <getAccelgyroData+0xae0>)
 80025fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	4b2e      	ldr	r3, [pc, #184]	; (80026c0 <getAccelgyroData+0xaf8>)
 8002608:	f7fe f938 	bl	800087c <__aeabi_ddiv>
 800260c:	4603      	mov	r3, r0
 800260e:	460c      	mov	r4, r1
 8002610:	4a25      	ldr	r2, [pc, #148]	; (80026a8 <getAccelgyroData+0xae0>)
 8002612:	e9c2 3400 	strd	r3, r4, [r2]
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <getAccelgyroData+0xafc>)
 8002618:	e9d3 3400 	ldrd	r3, r4, [r3]
 800261c:	4a23      	ldr	r2, [pc, #140]	; (80026ac <getAccelgyroData+0xae4>)
 800261e:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <getAccelgyroData+0xae8>)
 8002624:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002628:	4b26      	ldr	r3, [pc, #152]	; (80026c4 <getAccelgyroData+0xafc>)
 800262a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800262e:	461a      	mov	r2, r3
 8002630:	4623      	mov	r3, r4
 8002632:	f7fd fe43 	bl	80002bc <__adddf3>
 8002636:	4603      	mov	r3, r0
 8002638:	460c      	mov	r4, r1
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <getAccelgyroData+0xae8>)
 800263c:	e9c2 3400 	strd	r3, r4, [r2]
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <getAccelgyroData+0xae8>)
 8002642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <getAccelgyroData+0xaf8>)
 800264c:	f7fe f916 	bl	800087c <__aeabi_ddiv>
 8002650:	4603      	mov	r3, r0
 8002652:	460c      	mov	r4, r1
 8002654:	4a16      	ldr	r2, [pc, #88]	; (80026b0 <getAccelgyroData+0xae8>)
 8002656:	e9c2 3400 	strd	r3, r4, [r2]
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <getAccelgyroData+0xb00>)
 800265c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002660:	4a14      	ldr	r2, [pc, #80]	; (80026b4 <getAccelgyroData+0xaec>)
 8002662:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
 8002666:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <getAccelgyroData+0xaf0>)
 8002668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800266c:	4b16      	ldr	r3, [pc, #88]	; (80026c8 <getAccelgyroData+0xb00>)
 800266e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002672:	461a      	mov	r2, r3
 8002674:	4623      	mov	r3, r4
 8002676:	f7fd fe21 	bl	80002bc <__adddf3>
 800267a:	4603      	mov	r3, r0
 800267c:	460c      	mov	r4, r1
 800267e:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <getAccelgyroData+0xaf0>)
 8002680:	e9c2 3400 	strd	r3, r4, [r2]
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <getAccelgyroData+0xaf0>)
 8002686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <getAccelgyroData+0xaf8>)
 8002690:	f7fe f8f4 	bl	800087c <__aeabi_ddiv>
 8002694:	4603      	mov	r3, r0
 8002696:	460c      	mov	r4, r1
 8002698:	4a07      	ldr	r2, [pc, #28]	; (80026b8 <getAccelgyroData+0xaf0>)
 800269a:	e9c2 3400 	strd	r3, r4, [r2]

	for (register int i=0; i^10; ++ i) Rx += sq(a_x[i] - Sx), Ry += sq(a_y[i] - Sy), Rz += sq(a_z[i] - Sz);
 800269e:	2400      	movs	r4, #0
 80026a0:	e099      	b.n	80027d6 <getAccelgyroData+0xc0e>
 80026a2:	bf00      	nop
 80026a4:	20000450 	.word	0x20000450
 80026a8:	200035f8 	.word	0x200035f8
 80026ac:	200004a0 	.word	0x200004a0
 80026b0:	20003638 	.word	0x20003638
 80026b4:	200004f0 	.word	0x200004f0
 80026b8:	200035a8 	.word	0x200035a8
 80026bc:	20000350 	.word	0x20000350
 80026c0:	40240000 	.word	0x40240000
 80026c4:	20000358 	.word	0x20000358
 80026c8:	20000360 	.word	0x20000360
 80026cc:	4ab0      	ldr	r2, [pc, #704]	; (8002990 <getAccelgyroData+0xdc8>)
 80026ce:	00e3      	lsls	r3, r4, #3
 80026d0:	4413      	add	r3, r2
 80026d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d6:	4baf      	ldr	r3, [pc, #700]	; (8002994 <getAccelgyroData+0xdcc>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd fdec 	bl	80002b8 <__aeabi_dsub>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4615      	mov	r5, r2
 80026e6:	461e      	mov	r6, r3
 80026e8:	4aa9      	ldr	r2, [pc, #676]	; (8002990 <getAccelgyroData+0xdc8>)
 80026ea:	00e3      	lsls	r3, r4, #3
 80026ec:	4413      	add	r3, r2
 80026ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026f2:	4ba8      	ldr	r3, [pc, #672]	; (8002994 <getAccelgyroData+0xdcc>)
 80026f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f8:	f7fd fdde 	bl	80002b8 <__aeabi_dsub>
 80026fc:	4602      	mov	r2, r0
 80026fe:	460b      	mov	r3, r1
 8002700:	4628      	mov	r0, r5
 8002702:	4631      	mov	r1, r6
 8002704:	f7fd ff90 	bl	8000628 <__aeabi_dmul>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	4ba1      	ldr	r3, [pc, #644]	; (8002998 <getAccelgyroData+0xdd0>)
 8002712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002716:	f7fd fdd1 	bl	80002bc <__adddf3>
 800271a:	4602      	mov	r2, r0
 800271c:	460b      	mov	r3, r1
 800271e:	499e      	ldr	r1, [pc, #632]	; (8002998 <getAccelgyroData+0xdd0>)
 8002720:	e9c1 2300 	strd	r2, r3, [r1]
 8002724:	4a9d      	ldr	r2, [pc, #628]	; (800299c <getAccelgyroData+0xdd4>)
 8002726:	00e3      	lsls	r3, r4, #3
 8002728:	4413      	add	r3, r2
 800272a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800272e:	4b9c      	ldr	r3, [pc, #624]	; (80029a0 <getAccelgyroData+0xdd8>)
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f7fd fdc0 	bl	80002b8 <__aeabi_dsub>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4615      	mov	r5, r2
 800273e:	461e      	mov	r6, r3
 8002740:	4a96      	ldr	r2, [pc, #600]	; (800299c <getAccelgyroData+0xdd4>)
 8002742:	00e3      	lsls	r3, r4, #3
 8002744:	4413      	add	r3, r2
 8002746:	e9d3 0100 	ldrd	r0, r1, [r3]
 800274a:	4b95      	ldr	r3, [pc, #596]	; (80029a0 <getAccelgyroData+0xdd8>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fd fdb2 	bl	80002b8 <__aeabi_dsub>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4628      	mov	r0, r5
 800275a:	4631      	mov	r1, r6
 800275c:	f7fd ff64 	bl	8000628 <__aeabi_dmul>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	4b8e      	ldr	r3, [pc, #568]	; (80029a4 <getAccelgyroData+0xddc>)
 800276a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276e:	f7fd fda5 	bl	80002bc <__adddf3>
 8002772:	4602      	mov	r2, r0
 8002774:	460b      	mov	r3, r1
 8002776:	498b      	ldr	r1, [pc, #556]	; (80029a4 <getAccelgyroData+0xddc>)
 8002778:	e9c1 2300 	strd	r2, r3, [r1]
 800277c:	4a8a      	ldr	r2, [pc, #552]	; (80029a8 <getAccelgyroData+0xde0>)
 800277e:	00e3      	lsls	r3, r4, #3
 8002780:	4413      	add	r3, r2
 8002782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002786:	4b89      	ldr	r3, [pc, #548]	; (80029ac <getAccelgyroData+0xde4>)
 8002788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278c:	f7fd fd94 	bl	80002b8 <__aeabi_dsub>
 8002790:	4602      	mov	r2, r0
 8002792:	460b      	mov	r3, r1
 8002794:	4615      	mov	r5, r2
 8002796:	461e      	mov	r6, r3
 8002798:	4a83      	ldr	r2, [pc, #524]	; (80029a8 <getAccelgyroData+0xde0>)
 800279a:	00e3      	lsls	r3, r4, #3
 800279c:	4413      	add	r3, r2
 800279e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027a2:	4b82      	ldr	r3, [pc, #520]	; (80029ac <getAccelgyroData+0xde4>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f7fd fd86 	bl	80002b8 <__aeabi_dsub>
 80027ac:	4602      	mov	r2, r0
 80027ae:	460b      	mov	r3, r1
 80027b0:	4628      	mov	r0, r5
 80027b2:	4631      	mov	r1, r6
 80027b4:	f7fd ff38 	bl	8000628 <__aeabi_dmul>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	4b7b      	ldr	r3, [pc, #492]	; (80029b0 <getAccelgyroData+0xde8>)
 80027c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c6:	f7fd fd79 	bl	80002bc <__adddf3>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4978      	ldr	r1, [pc, #480]	; (80029b0 <getAccelgyroData+0xde8>)
 80027d0:	e9c1 2300 	strd	r2, r3, [r1]
 80027d4:	3401      	adds	r4, #1
 80027d6:	2c0a      	cmp	r4, #10
 80027d8:	f47f af78 	bne.w	80026cc <getAccelgyroData+0xb04>

	Rx = Rx / 9, Ry = Ry / 9, Rz = Rz / 9;
 80027dc:	4b6e      	ldr	r3, [pc, #440]	; (8002998 <getAccelgyroData+0xdd0>)
 80027de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	4b73      	ldr	r3, [pc, #460]	; (80029b4 <getAccelgyroData+0xdec>)
 80027e8:	f7fe f848 	bl	800087c <__aeabi_ddiv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	460c      	mov	r4, r1
 80027f0:	4a69      	ldr	r2, [pc, #420]	; (8002998 <getAccelgyroData+0xdd0>)
 80027f2:	e9c2 3400 	strd	r3, r4, [r2]
 80027f6:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <getAccelgyroData+0xddc>)
 80027f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	4b6c      	ldr	r3, [pc, #432]	; (80029b4 <getAccelgyroData+0xdec>)
 8002802:	f7fe f83b 	bl	800087c <__aeabi_ddiv>
 8002806:	4603      	mov	r3, r0
 8002808:	460c      	mov	r4, r1
 800280a:	4a66      	ldr	r2, [pc, #408]	; (80029a4 <getAccelgyroData+0xddc>)
 800280c:	e9c2 3400 	strd	r3, r4, [r2]
 8002810:	4b67      	ldr	r3, [pc, #412]	; (80029b0 <getAccelgyroData+0xde8>)
 8002812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002816:	f04f 0200 	mov.w	r2, #0
 800281a:	4b66      	ldr	r3, [pc, #408]	; (80029b4 <getAccelgyroData+0xdec>)
 800281c:	f7fe f82e 	bl	800087c <__aeabi_ddiv>
 8002820:	4603      	mov	r3, r0
 8002822:	460c      	mov	r4, r1
 8002824:	4a62      	ldr	r2, [pc, #392]	; (80029b0 <getAccelgyroData+0xde8>)
 8002826:	e9c2 3400 	strd	r3, r4, [r2]

	Px = Px + 0.0025, Kx = Px / (Px + Rx), agx = agx + Kx * (aax - agx), Px = (1 - Kx) * Px;
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <getAccelgyroData+0xdf0>)
 800282c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002830:	a355      	add	r3, pc, #340	; (adr r3, 8002988 <getAccelgyroData+0xdc0>)
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f7fd fd41 	bl	80002bc <__adddf3>
 800283a:	4603      	mov	r3, r0
 800283c:	460c      	mov	r4, r1
 800283e:	4a5e      	ldr	r2, [pc, #376]	; (80029b8 <getAccelgyroData+0xdf0>)
 8002840:	e9c2 3400 	strd	r3, r4, [r2]
 8002844:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <getAccelgyroData+0xdf0>)
 8002846:	e9d3 4500 	ldrd	r4, r5, [r3]
 800284a:	4b5b      	ldr	r3, [pc, #364]	; (80029b8 <getAccelgyroData+0xdf0>)
 800284c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002850:	4b51      	ldr	r3, [pc, #324]	; (8002998 <getAccelgyroData+0xdd0>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fd fd31 	bl	80002bc <__adddf3>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4620      	mov	r0, r4
 8002860:	4629      	mov	r1, r5
 8002862:	f7fe f80b 	bl	800087c <__aeabi_ddiv>
 8002866:	4603      	mov	r3, r0
 8002868:	460c      	mov	r4, r1
 800286a:	4a54      	ldr	r2, [pc, #336]	; (80029bc <getAccelgyroData+0xdf4>)
 800286c:	e9c2 3400 	strd	r3, r4, [r2]
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <getAccelgyroData+0xdf8>)
 8002872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002876:	4b53      	ldr	r3, [pc, #332]	; (80029c4 <getAccelgyroData+0xdfc>)
 8002878:	e9d3 3400 	ldrd	r3, r4, [r3]
 800287c:	461a      	mov	r2, r3
 800287e:	4623      	mov	r3, r4
 8002880:	f7fd fd1a 	bl	80002b8 <__aeabi_dsub>
 8002884:	4603      	mov	r3, r0
 8002886:	460c      	mov	r4, r1
 8002888:	4618      	mov	r0, r3
 800288a:	4621      	mov	r1, r4
 800288c:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <getAccelgyroData+0xdf4>)
 800288e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002892:	461a      	mov	r2, r3
 8002894:	4623      	mov	r3, r4
 8002896:	f7fd fec7 	bl	8000628 <__aeabi_dmul>
 800289a:	4603      	mov	r3, r0
 800289c:	460c      	mov	r4, r1
 800289e:	4618      	mov	r0, r3
 80028a0:	4621      	mov	r1, r4
 80028a2:	4b48      	ldr	r3, [pc, #288]	; (80029c4 <getAccelgyroData+0xdfc>)
 80028a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028a8:	461a      	mov	r2, r3
 80028aa:	4623      	mov	r3, r4
 80028ac:	f7fd fd06 	bl	80002bc <__adddf3>
 80028b0:	4603      	mov	r3, r0
 80028b2:	460c      	mov	r4, r1
 80028b4:	4a43      	ldr	r2, [pc, #268]	; (80029c4 <getAccelgyroData+0xdfc>)
 80028b6:	e9c2 3400 	strd	r3, r4, [r2]
 80028ba:	4b40      	ldr	r3, [pc, #256]	; (80029bc <getAccelgyroData+0xdf4>)
 80028bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	f04f 0000 	mov.w	r0, #0
 80028c8:	493f      	ldr	r1, [pc, #252]	; (80029c8 <getAccelgyroData+0xe00>)
 80028ca:	f7fd fcf5 	bl	80002b8 <__aeabi_dsub>
 80028ce:	4603      	mov	r3, r0
 80028d0:	460c      	mov	r4, r1
 80028d2:	4618      	mov	r0, r3
 80028d4:	4621      	mov	r1, r4
 80028d6:	4b38      	ldr	r3, [pc, #224]	; (80029b8 <getAccelgyroData+0xdf0>)
 80028d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028dc:	461a      	mov	r2, r3
 80028de:	4623      	mov	r3, r4
 80028e0:	f7fd fea2 	bl	8000628 <__aeabi_dmul>
 80028e4:	4603      	mov	r3, r0
 80028e6:	460c      	mov	r4, r1
 80028e8:	4a33      	ldr	r2, [pc, #204]	; (80029b8 <getAccelgyroData+0xdf0>)
 80028ea:	e9c2 3400 	strd	r3, r4, [r2]
	Py = Py + 0.0025, Ky = Py / (Py + Ry), agy = agy + Ky * (aay - agy), Py = (1 - Ky) * Py;
 80028ee:	4b37      	ldr	r3, [pc, #220]	; (80029cc <getAccelgyroData+0xe04>)
 80028f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028f4:	a324      	add	r3, pc, #144	; (adr r3, 8002988 <getAccelgyroData+0xdc0>)
 80028f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028fa:	f7fd fcdf 	bl	80002bc <__adddf3>
 80028fe:	4603      	mov	r3, r0
 8002900:	460c      	mov	r4, r1
 8002902:	4a32      	ldr	r2, [pc, #200]	; (80029cc <getAccelgyroData+0xe04>)
 8002904:	e9c2 3400 	strd	r3, r4, [r2]
 8002908:	4b30      	ldr	r3, [pc, #192]	; (80029cc <getAccelgyroData+0xe04>)
 800290a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800290e:	4b2f      	ldr	r3, [pc, #188]	; (80029cc <getAccelgyroData+0xe04>)
 8002910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <getAccelgyroData+0xddc>)
 8002916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291a:	f7fd fccf 	bl	80002bc <__adddf3>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4620      	mov	r0, r4
 8002924:	4629      	mov	r1, r5
 8002926:	f7fd ffa9 	bl	800087c <__aeabi_ddiv>
 800292a:	4603      	mov	r3, r0
 800292c:	460c      	mov	r4, r1
 800292e:	4a28      	ldr	r2, [pc, #160]	; (80029d0 <getAccelgyroData+0xe08>)
 8002930:	e9c2 3400 	strd	r3, r4, [r2]
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <getAccelgyroData+0xe0c>)
 8002936:	e9d3 0100 	ldrd	r0, r1, [r3]
 800293a:	4b27      	ldr	r3, [pc, #156]	; (80029d8 <getAccelgyroData+0xe10>)
 800293c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002940:	461a      	mov	r2, r3
 8002942:	4623      	mov	r3, r4
 8002944:	f7fd fcb8 	bl	80002b8 <__aeabi_dsub>
 8002948:	4603      	mov	r3, r0
 800294a:	460c      	mov	r4, r1
 800294c:	4618      	mov	r0, r3
 800294e:	4621      	mov	r1, r4
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <getAccelgyroData+0xe08>)
 8002952:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002956:	461a      	mov	r2, r3
 8002958:	4623      	mov	r3, r4
 800295a:	f7fd fe65 	bl	8000628 <__aeabi_dmul>
 800295e:	4603      	mov	r3, r0
 8002960:	460c      	mov	r4, r1
 8002962:	4618      	mov	r0, r3
 8002964:	4621      	mov	r1, r4
 8002966:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <getAccelgyroData+0xe10>)
 8002968:	e9d3 3400 	ldrd	r3, r4, [r3]
 800296c:	461a      	mov	r2, r3
 800296e:	4623      	mov	r3, r4
 8002970:	f7fd fca4 	bl	80002bc <__adddf3>
 8002974:	4603      	mov	r3, r0
 8002976:	460c      	mov	r4, r1
 8002978:	4a17      	ldr	r2, [pc, #92]	; (80029d8 <getAccelgyroData+0xe10>)
 800297a:	e9c2 3400 	strd	r3, r4, [r2]
 800297e:	4b14      	ldr	r3, [pc, #80]	; (80029d0 <getAccelgyroData+0xe08>)
 8002980:	e02c      	b.n	80029dc <getAccelgyroData+0xe14>
 8002982:	bf00      	nop
 8002984:	f3af 8000 	nop.w
 8002988:	47ae147b 	.word	0x47ae147b
 800298c:	3f647ae1 	.word	0x3f647ae1
 8002990:	20000450 	.word	0x20000450
 8002994:	200035f8 	.word	0x200035f8
 8002998:	200035e0 	.word	0x200035e0
 800299c:	200004a0 	.word	0x200004a0
 80029a0:	20003638 	.word	0x20003638
 80029a4:	20003588 	.word	0x20003588
 80029a8:	200004f0 	.word	0x200004f0
 80029ac:	200035a8 	.word	0x200035a8
 80029b0:	200035b8 	.word	0x200035b8
 80029b4:	40220000 	.word	0x40220000
 80029b8:	20000020 	.word	0x20000020
 80029bc:	20003608 	.word	0x20003608
 80029c0:	20000350 	.word	0x20000350
 80029c4:	20000368 	.word	0x20000368
 80029c8:	3ff00000 	.word	0x3ff00000
 80029cc:	20000028 	.word	0x20000028
 80029d0:	200035d0 	.word	0x200035d0
 80029d4:	20000358 	.word	0x20000358
 80029d8:	20000370 	.word	0x20000370
 80029dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029e0:	461a      	mov	r2, r3
 80029e2:	4623      	mov	r3, r4
 80029e4:	f04f 0000 	mov.w	r0, #0
 80029e8:	4947      	ldr	r1, [pc, #284]	; (8002b08 <getAccelgyroData+0xf40>)
 80029ea:	f7fd fc65 	bl	80002b8 <__aeabi_dsub>
 80029ee:	4603      	mov	r3, r0
 80029f0:	460c      	mov	r4, r1
 80029f2:	4618      	mov	r0, r3
 80029f4:	4621      	mov	r1, r4
 80029f6:	4b45      	ldr	r3, [pc, #276]	; (8002b0c <getAccelgyroData+0xf44>)
 80029f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4623      	mov	r3, r4
 8002a00:	f7fd fe12 	bl	8000628 <__aeabi_dmul>
 8002a04:	4603      	mov	r3, r0
 8002a06:	460c      	mov	r4, r1
 8002a08:	4a40      	ldr	r2, [pc, #256]	; (8002b0c <getAccelgyroData+0xf44>)
 8002a0a:	e9c2 3400 	strd	r3, r4, [r2]
	Pz = Pz + 0.0025, Kz = Pz / (Pz + Rz), agz = agz + Kz * (aaz - agz), Pz = (1 - Kz) * Pz;
 8002a0e:	4b40      	ldr	r3, [pc, #256]	; (8002b10 <getAccelgyroData+0xf48>)
 8002a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a14:	a33a      	add	r3, pc, #232	; (adr r3, 8002b00 <getAccelgyroData+0xf38>)
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f7fd fc4f 	bl	80002bc <__adddf3>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	460c      	mov	r4, r1
 8002a22:	4a3b      	ldr	r2, [pc, #236]	; (8002b10 <getAccelgyroData+0xf48>)
 8002a24:	e9c2 3400 	strd	r3, r4, [r2]
 8002a28:	4b39      	ldr	r3, [pc, #228]	; (8002b10 <getAccelgyroData+0xf48>)
 8002a2a:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002a2e:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <getAccelgyroData+0xf48>)
 8002a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a34:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <getAccelgyroData+0xf4c>)
 8002a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3a:	f7fd fc3f 	bl	80002bc <__adddf3>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4620      	mov	r0, r4
 8002a44:	4629      	mov	r1, r5
 8002a46:	f7fd ff19 	bl	800087c <__aeabi_ddiv>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	460c      	mov	r4, r1
 8002a4e:	4a32      	ldr	r2, [pc, #200]	; (8002b18 <getAccelgyroData+0xf50>)
 8002a50:	e9c2 3400 	strd	r3, r4, [r2]
 8002a54:	4b31      	ldr	r3, [pc, #196]	; (8002b1c <getAccelgyroData+0xf54>)
 8002a56:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a5a:	4b31      	ldr	r3, [pc, #196]	; (8002b20 <getAccelgyroData+0xf58>)
 8002a5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a60:	461a      	mov	r2, r3
 8002a62:	4623      	mov	r3, r4
 8002a64:	f7fd fc28 	bl	80002b8 <__aeabi_dsub>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	4621      	mov	r1, r4
 8002a70:	4b29      	ldr	r3, [pc, #164]	; (8002b18 <getAccelgyroData+0xf50>)
 8002a72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a76:	461a      	mov	r2, r3
 8002a78:	4623      	mov	r3, r4
 8002a7a:	f7fd fdd5 	bl	8000628 <__aeabi_dmul>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	460c      	mov	r4, r1
 8002a82:	4618      	mov	r0, r3
 8002a84:	4621      	mov	r1, r4
 8002a86:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <getAccelgyroData+0xf58>)
 8002a88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4623      	mov	r3, r4
 8002a90:	f7fd fc14 	bl	80002bc <__adddf3>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	4a21      	ldr	r2, [pc, #132]	; (8002b20 <getAccelgyroData+0xf58>)
 8002a9a:	e9c2 3400 	strd	r3, r4, [r2]
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <getAccelgyroData+0xf50>)
 8002aa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	f04f 0000 	mov.w	r0, #0
 8002aac:	4916      	ldr	r1, [pc, #88]	; (8002b08 <getAccelgyroData+0xf40>)
 8002aae:	f7fd fc03 	bl	80002b8 <__aeabi_dsub>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	460c      	mov	r4, r1
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	4621      	mov	r1, r4
 8002aba:	4b15      	ldr	r3, [pc, #84]	; (8002b10 <getAccelgyroData+0xf48>)
 8002abc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4623      	mov	r3, r4
 8002ac4:	f7fd fdb0 	bl	8000628 <__aeabi_dmul>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	460c      	mov	r4, r1
 8002acc:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <getAccelgyroData+0xf48>)
 8002ace:	e9c2 3400 	strd	r3, r4, [r2]

	*tagX = agx, *tagY = agy, *tagZ = agz;
 8002ad2:	4b14      	ldr	r3, [pc, #80]	; (8002b24 <getAccelgyroData+0xf5c>)
 8002ad4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	e9c2 3400 	strd	r3, r4, [r2]
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <getAccelgyroData+0xf60>)
 8002ae0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ae4:	68ba      	ldr	r2, [r7, #8]
 8002ae6:	e9c2 3400 	strd	r3, r4, [r2]
 8002aea:	4b0d      	ldr	r3, [pc, #52]	; (8002b20 <getAccelgyroData+0xf58>)
 8002aec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	e9c2 3400 	strd	r3, r4, [r2]
}
 8002af6:	bf00      	nop
 8002af8:	3730      	adds	r7, #48	; 0x30
 8002afa:	46bd      	mov	sp, r7
 8002afc:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8002b00:	47ae147b 	.word	0x47ae147b
 8002b04:	3f647ae1 	.word	0x3f647ae1
 8002b08:	3ff00000 	.word	0x3ff00000
 8002b0c:	20000028 	.word	0x20000028
 8002b10:	20000030 	.word	0x20000030
 8002b14:	200035b8 	.word	0x200035b8
 8002b18:	20003620 	.word	0x20003620
 8002b1c:	20000360 	.word	0x20000360
 8002b20:	20000378 	.word	0x20000378
 8002b24:	20000368 	.word	0x20000368
 8002b28:	20000370 	.word	0x20000370

08002b2c <MPU_Init>:

#include "MPU6050/MPU6050.h"

u8 MPU_Init(void) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
	u8 res;
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Init(&hi2c1);
 8002b32:	481f      	ldr	r0, [pc, #124]	; (8002bb0 <MPU_Init+0x84>)
 8002b34:	f002 f82e 	bl	8004b94 <HAL_I2C_Init>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X80);
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	206b      	movs	r0, #107	; 0x6b
 8002b3c:	f000 f93e 	bl	8002dbc <MPU_Write_Byte>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X00);
 8002b40:	2100      	movs	r1, #0
 8002b42:	206b      	movs	r0, #107	; 0x6b
 8002b44:	f000 f93a 	bl	8002dbc <MPU_Write_Byte>
	MPU_Set_Gyro_Fsr(3);
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f000 f833 	bl	8002bb4 <MPU_Set_Gyro_Fsr>
	MPU_Set_Accel_Fsr(0);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f000 f841 	bl	8002bd6 <MPU_Set_Accel_Fsr>
	MPU_Set_Rate(50);
 8002b54:	2032      	movs	r0, #50	; 0x32
 8002b56:	f000 f880 	bl	8002c5a <MPU_Set_Rate>
	MPU_Write_Byte(MPU_INT_EN_REG, 0X00);
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2038      	movs	r0, #56	; 0x38
 8002b5e:	f000 f92d 	bl	8002dbc <MPU_Write_Byte>
	MPU_Write_Byte(MPU_USER_CTRL_REG, 0X00);
 8002b62:	2100      	movs	r1, #0
 8002b64:	206a      	movs	r0, #106	; 0x6a
 8002b66:	f000 f929 	bl	8002dbc <MPU_Write_Byte>
	MPU_Write_Byte(MPU_FIFO_EN_REG, 0X00);
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	2023      	movs	r0, #35	; 0x23
 8002b6e:	f000 f925 	bl	8002dbc <MPU_Write_Byte>
	MPU_Write_Byte(MPU_INTBP_CFG_REG, 0X80);
 8002b72:	2180      	movs	r1, #128	; 0x80
 8002b74:	2037      	movs	r0, #55	; 0x37
 8002b76:	f000 f921 	bl	8002dbc <MPU_Write_Byte>
	res = MPU_Read_Byte(MPU_DEVICE_ID_REG);
 8002b7a:	2075      	movs	r0, #117	; 0x75
 8002b7c:	f000 f942 	bl	8002e04 <MPU_Read_Byte>
 8002b80:	4603      	mov	r3, r0
 8002b82:	71fb      	strb	r3, [r7, #7]
	if (res == MPU_ADDR) {
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	2b68      	cmp	r3, #104	; 0x68
 8002b88:	d10c      	bne.n	8002ba4 <MPU_Init+0x78>
		MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X01);
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	206b      	movs	r0, #107	; 0x6b
 8002b8e:	f000 f915 	bl	8002dbc <MPU_Write_Byte>
		MPU_Write_Byte(MPU_PWR_MGMT2_REG, 0X00);
 8002b92:	2100      	movs	r1, #0
 8002b94:	206c      	movs	r0, #108	; 0x6c
 8002b96:	f000 f911 	bl	8002dbc <MPU_Write_Byte>
		MPU_Set_Rate(50);
 8002b9a:	2032      	movs	r0, #50	; 0x32
 8002b9c:	f000 f85d 	bl	8002c5a <MPU_Set_Rate>
	} else return 1;
	return 0;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <MPU_Init+0x7a>
	} else return 1;
 8002ba4:	2301      	movs	r3, #1
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000550 	.word	0x20000550

08002bb4 <MPU_Set_Gyro_Fsr>:

u8 MPU_Set_Gyro_Fsr(u8 fsr) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_GYRO_CFG_REG, fsr<<3);
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	201b      	movs	r0, #27
 8002bc8:	f000 f8f8 	bl	8002dbc <MPU_Write_Byte>
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <MPU_Set_Accel_Fsr>:

u8 MPU_Set_Accel_Fsr(u8 fsr) {
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG, fsr<<3);
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	4619      	mov	r1, r3
 8002be8:	201c      	movs	r0, #28
 8002bea:	f000 f8e7 	bl	8002dbc <MPU_Write_Byte>
 8002bee:	4603      	mov	r3, r0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <MPU_Set_LPF>:

u8 MPU_Set_LPF(u16 lpf) {
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	80fb      	strh	r3, [r7, #6]
	u8 data = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
	if (lpf >= 188)  data = 1;
 8002c06:	88fb      	ldrh	r3, [r7, #6]
 8002c08:	2bbb      	cmp	r3, #187	; 0xbb
 8002c0a:	d902      	bls.n	8002c12 <MPU_Set_LPF+0x1a>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e019      	b.n	8002c46 <MPU_Set_LPF+0x4e>
	else if(lpf>=98) data = 2;
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	2b61      	cmp	r3, #97	; 0x61
 8002c16:	d902      	bls.n	8002c1e <MPU_Set_LPF+0x26>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	73fb      	strb	r3, [r7, #15]
 8002c1c:	e013      	b.n	8002c46 <MPU_Set_LPF+0x4e>
	else if(lpf>=42) data = 3;
 8002c1e:	88fb      	ldrh	r3, [r7, #6]
 8002c20:	2b29      	cmp	r3, #41	; 0x29
 8002c22:	d902      	bls.n	8002c2a <MPU_Set_LPF+0x32>
 8002c24:	2303      	movs	r3, #3
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e00d      	b.n	8002c46 <MPU_Set_LPF+0x4e>
	else if(lpf>=20) data = 4;
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b13      	cmp	r3, #19
 8002c2e:	d902      	bls.n	8002c36 <MPU_Set_LPF+0x3e>
 8002c30:	2304      	movs	r3, #4
 8002c32:	73fb      	strb	r3, [r7, #15]
 8002c34:	e007      	b.n	8002c46 <MPU_Set_LPF+0x4e>
	else if(lpf>=10) data = 5;
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b09      	cmp	r3, #9
 8002c3a:	d902      	bls.n	8002c42 <MPU_Set_LPF+0x4a>
 8002c3c:	2305      	movs	r3, #5
 8002c3e:	73fb      	strb	r3, [r7, #15]
 8002c40:	e001      	b.n	8002c46 <MPU_Set_LPF+0x4e>
	else data = 6;
 8002c42:	2306      	movs	r3, #6
 8002c44:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG, data);
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	4619      	mov	r1, r3
 8002c4a:	201a      	movs	r0, #26
 8002c4c:	f000 f8b6 	bl	8002dbc <MPU_Write_Byte>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <MPU_Set_Rate>:

u8 MPU_Set_Rate(u16 rate) {
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	4603      	mov	r3, r0
 8002c62:	80fb      	strh	r3, [r7, #6]
	u8 data;
	if (rate > 1000) rate = 1000;
 8002c64:	88fb      	ldrh	r3, [r7, #6]
 8002c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c6a:	d902      	bls.n	8002c72 <MPU_Set_Rate+0x18>
 8002c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c70:	80fb      	strh	r3, [r7, #6]
	if (rate < 4)    rate = 4;
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d801      	bhi.n	8002c7c <MPU_Set_Rate+0x22>
 8002c78:	2304      	movs	r3, #4
 8002c7a:	80fb      	strh	r3, [r7, #6]
	data = 1000/rate - 1;
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
	data = MPU_Write_Byte(MPU_SAMPLE_RATE_REG, data);
 8002c8c:	7bfb      	ldrb	r3, [r7, #15]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	2019      	movs	r0, #25
 8002c92:	f000 f893 	bl	8002dbc <MPU_Write_Byte>
 8002c96:	4603      	mov	r3, r0
 8002c98:	73fb      	strb	r3, [r7, #15]
 	return MPU_Set_LPF(rate/2);
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	085b      	lsrs	r3, r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ffa9 	bl	8002bf8 <MPU_Set_LPF>
 8002ca6:	4603      	mov	r3, r0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <MPU_Get_Gyroscope>:
	raw  = (buf[0]<<8) | buf[1];
	temp = (36.53+((double)raw)/340)*100;
	return temp / 100.0f;
}

u8 MPU_Get_Gyroscope(short *gx, short *gy, short *gz) {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
	u8 buf[6], res;
	res = MPU_Read_Len(MPU_GYRO_XOUTH_REG, 6, buf);
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2106      	movs	r1, #6
 8002cc4:	2043      	movs	r0, #67	; 0x43
 8002cc6:	f000 f857 	bl	8002d78 <MPU_Read_Len>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	75fb      	strb	r3, [r7, #23]
	if(res==0) {
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d11a      	bne.n	8002d0a <MPU_Get_Gyroscope+0x5a>
		*gx = ((u16)buf[0]<<8) | buf[1];
 8002cd4:	7c3b      	ldrb	r3, [r7, #16]
 8002cd6:	021b      	lsls	r3, r3, #8
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	7c7b      	ldrb	r3, [r7, #17]
 8002cdc:	b21b      	sxth	r3, r3
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	b21a      	sxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	801a      	strh	r2, [r3, #0]
		*gy = ((u16)buf[2]<<8) | buf[3];
 8002ce6:	7cbb      	ldrb	r3, [r7, #18]
 8002ce8:	021b      	lsls	r3, r3, #8
 8002cea:	b21a      	sxth	r2, r3
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	b21b      	sxth	r3, r3
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	b21a      	sxth	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	801a      	strh	r2, [r3, #0]
		*gz = ((u16)buf[4]<<8) | buf[5];
 8002cf8:	7d3b      	ldrb	r3, [r7, #20]
 8002cfa:	021b      	lsls	r3, r3, #8
 8002cfc:	b21a      	sxth	r2, r3
 8002cfe:	7d7b      	ldrb	r3, [r7, #21]
 8002d00:	b21b      	sxth	r3, r3
 8002d02:	4313      	orrs	r3, r2
 8002d04:	b21a      	sxth	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	801a      	strh	r2, [r3, #0]
	} return res;
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <MPU_Get_Accelerometer>:

u8 MPU_Get_Accelerometer(short *ax, short *ay, short *az) {
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
	u8 buf[6], res;
	res = MPU_Read_Len(MPU_ACCEL_XOUTH_REG, 6, buf);
 8002d20:	f107 0310 	add.w	r3, r7, #16
 8002d24:	461a      	mov	r2, r3
 8002d26:	2106      	movs	r1, #6
 8002d28:	203b      	movs	r0, #59	; 0x3b
 8002d2a:	f000 f825 	bl	8002d78 <MPU_Read_Len>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	75fb      	strb	r3, [r7, #23]
	if(res == 0) {
 8002d32:	7dfb      	ldrb	r3, [r7, #23]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11a      	bne.n	8002d6e <MPU_Get_Accelerometer+0x5a>
		*ax = ((u16)buf[0]<<8) | buf[1];
 8002d38:	7c3b      	ldrb	r3, [r7, #16]
 8002d3a:	021b      	lsls	r3, r3, #8
 8002d3c:	b21a      	sxth	r2, r3
 8002d3e:	7c7b      	ldrb	r3, [r7, #17]
 8002d40:	b21b      	sxth	r3, r3
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b21a      	sxth	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	801a      	strh	r2, [r3, #0]
		*ay = ((u16)buf[2]<<8) | buf[3];
 8002d4a:	7cbb      	ldrb	r3, [r7, #18]
 8002d4c:	021b      	lsls	r3, r3, #8
 8002d4e:	b21a      	sxth	r2, r3
 8002d50:	7cfb      	ldrb	r3, [r7, #19]
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	4313      	orrs	r3, r2
 8002d56:	b21a      	sxth	r2, r3
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	801a      	strh	r2, [r3, #0]
		*az = ((u16)buf[4]<<8) | buf[5];
 8002d5c:	7d3b      	ldrb	r3, [r7, #20]
 8002d5e:	021b      	lsls	r3, r3, #8
 8002d60:	b21a      	sxth	r2, r3
 8002d62:	7d7b      	ldrb	r3, [r7, #21]
 8002d64:	b21b      	sxth	r3, r3
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	801a      	strh	r2, [r3, #0]
	} return res;
 8002d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <MPU_Read_Len>:
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Write(&hi2c1, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 0xfff);
	HAL_Delay(100); return 0;
}

u8 MPU_Read_Len(u8 reg, u8 len, u8 *buf) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af04      	add	r7, sp, #16
 8002d7e:	4603      	mov	r3, r0
 8002d80:	603a      	str	r2, [r7, #0]
 8002d82:	71fb      	strb	r3, [r7, #7]
 8002d84:	460b      	mov	r3, r1
 8002d86:	71bb      	strb	r3, [r7, #6]
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Read  (&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 0xfff);
 8002d88:	79fb      	ldrb	r3, [r7, #7]
 8002d8a:	b299      	uxth	r1, r3
 8002d8c:	79bb      	ldrb	r3, [r7, #6]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002d94:	9202      	str	r2, [sp, #8]
 8002d96:	9301      	str	r3, [sp, #4]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	460a      	mov	r2, r1
 8002da0:	21d1      	movs	r1, #209	; 0xd1
 8002da2:	4805      	ldr	r0, [pc, #20]	; (8002db8 <MPU_Read_Len+0x40>)
 8002da4:	f002 f928 	bl	8004ff8 <HAL_I2C_Mem_Read>
	HAL_Delay(100); return 0;
 8002da8:	2064      	movs	r0, #100	; 0x64
 8002daa:	f001 fbe7 	bl	800457c <HAL_Delay>
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	20000550 	.word	0x20000550

08002dbc <MPU_Write_Byte>:

u8 MPU_Write_Byte(u8 reg, u8 data) {
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af04      	add	r7, sp, #16
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	460a      	mov	r2, r1
 8002dc6:	71fb      	strb	r3, [r7, #7]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	71bb      	strb	r3, [r7, #6]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char W_Data = data;
 8002dcc:	79bb      	ldrb	r3, [r7, #6]
 8002dce:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, &W_Data, 1, 0xfff);
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	b29a      	uxth	r2, r3
 8002dd4:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002dd8:	9302      	str	r3, [sp, #8]
 8002dda:	2301      	movs	r3, #1
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	f107 030f 	add.w	r3, r7, #15
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	2301      	movs	r3, #1
 8002de6:	21d0      	movs	r1, #208	; 0xd0
 8002de8:	4805      	ldr	r0, [pc, #20]	; (8002e00 <MPU_Write_Byte+0x44>)
 8002dea:	f002 f80b 	bl	8004e04 <HAL_I2C_Mem_Write>
	HAL_Delay(100); return 0;
 8002dee:	2064      	movs	r0, #100	; 0x64
 8002df0:	f001 fbc4 	bl	800457c <HAL_Delay>
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	20000550 	.word	0x20000550

08002e04 <MPU_Read_Byte>:

u8 MPU_Read_Byte(u8 reg) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b088      	sub	sp, #32
 8002e08:	af04      	add	r7, sp, #16
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	71fb      	strb	r3, [r7, #7]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char R_Data = 0;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, &R_Data, 1, 0xfff);
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002e1a:	9302      	str	r3, [sp, #8]
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	9301      	str	r3, [sp, #4]
 8002e20:	f107 030f 	add.w	r3, r7, #15
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	2301      	movs	r3, #1
 8002e28:	21d1      	movs	r1, #209	; 0xd1
 8002e2a:	4805      	ldr	r0, [pc, #20]	; (8002e40 <MPU_Read_Byte+0x3c>)
 8002e2c:	f002 f8e4 	bl	8004ff8 <HAL_I2C_Mem_Read>
	HAL_Delay(100); return R_Data;
 8002e30:	2064      	movs	r0, #100	; 0x64
 8002e32:	f001 fba3 	bl	800457c <HAL_Delay>
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000550 	.word	0x20000550

08002e44 <AT_CMD_Dispose>:
};

char Buff[2048];
int SIM7020_state = LNW_INIT;

int AT_CMD_Dispose(struct tok *tok) {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08c      	sub	sp, #48	; 0x30
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	struct at_cmd_hanld_t *atcmd, *match = NULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
	char name[32];
	atcmd = at_cmd_hanld;
 8002e50:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <AT_CMD_Dispose+0x6c>)
 8002e52:	62fb      	str	r3, [r7, #44]	; 0x2c
	stringCapitalize(name, tok->name);
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f000 fe33 	bl	8003ac8 <stringCapitalize>
	while(atcmd->atcmd) {
 8002e62:	e010      	b.n	8002e86 <AT_CMD_Dispose+0x42>
		if(strcmp(atcmd->atcmd, name) == 0) {
 8002e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f107 0208 	add.w	r2, r7, #8
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fd f9b6 	bl	80001e0 <strcmp>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <AT_CMD_Dispose+0x3c>
			match = atcmd; break;
 8002e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e7e:	e006      	b.n	8002e8e <AT_CMD_Dispose+0x4a>
		} atcmd ++;
 8002e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e82:	330c      	adds	r3, #12
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(atcmd->atcmd) {
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ea      	bne.n	8002e64 <AT_CMD_Dispose+0x20>
	} if(match) return match->send_hanld(match->atcmd, tok);
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <AT_CMD_Dispose+0x62>
 8002e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4610      	mov	r0, r2
 8002ea0:	4798      	blx	r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	e000      	b.n	8002ea8 <AT_CMD_Dispose+0x64>
	else {return 1;}
 8002ea6:	2301      	movs	r3, #1
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3730      	adds	r7, #48	; 0x30
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	20000038 	.word	0x20000038

08002eb4 <CMD_Send>:

void CMD_Send(char *buff, char *atcmd, struct tok *tok) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b0c6      	sub	sp, #280	; 0x118
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	f107 030c 	add.w	r3, r7, #12
 8002ebe:	6018      	str	r0, [r3, #0]
 8002ec0:	f107 0308 	add.w	r3, r7, #8
 8002ec4:	6019      	str	r1, [r3, #0]
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	601a      	str	r2, [r3, #0]
	int i = 0; char temp[256];
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	sprintf (buff, "%s", atcmd);
 8002ed0:	f107 0208 	add.w	r2, r7, #8
 8002ed4:	f107 030c 	add.w	r3, r7, #12
 8002ed8:	6811      	ldr	r1, [r2, #0]
 8002eda:	6818      	ldr	r0, [r3, #0]
 8002edc:	f005 fa67 	bl	80083ae <strcpy>
	if (tok->num != 0) {
 8002ee0:	1d3b      	adds	r3, r7, #4
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d071      	beq.n	8002fd0 <CMD_Send+0x11c>
		for (i=0; i<tok->num; i++) {
 8002eec:	2300      	movs	r3, #0
 8002eee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002ef2:	e064      	b.n	8002fbe <CMD_Send+0x10a>
			if(i == 0 && tok->sendstr[i][0] == '?') {
 8002ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d120      	bne.n	8002f3e <CMD_Send+0x8a>
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f04:	021b      	lsls	r3, r3, #8
 8002f06:	4413      	add	r3, r2
 8002f08:	3321      	adds	r3, #33	; 0x21
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	2b3f      	cmp	r3, #63	; 0x3f
 8002f0e:	d116      	bne.n	8002f3e <CMD_Send+0x8a>
				sprintf(temp,"%s",tok->sendstr[i]);
 8002f10:	1d3a      	adds	r2, r7, #4
 8002f12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	3320      	adds	r3, #32
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	1c5a      	adds	r2, r3, #1
 8002f20:	f107 0314 	add.w	r3, r7, #20
 8002f24:	4611      	mov	r1, r2
 8002f26:	4618      	mov	r0, r3
 8002f28:	f005 fa41 	bl	80083ae <strcpy>
				strcat(buff,temp);
 8002f2c:	f107 0214 	add.w	r2, r7, #20
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	4611      	mov	r1, r2
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	f005 fa2a 	bl	8008390 <strcat>
 8002f3c:	e03a      	b.n	8002fb4 <CMD_Send+0x100>
			} else if(i == 0 && tok->sendstr[i][0] != '?') {
 8002f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d120      	bne.n	8002f88 <CMD_Send+0xd4>
 8002f46:	1d3b      	adds	r3, r7, #4
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f4e:	021b      	lsls	r3, r3, #8
 8002f50:	4413      	add	r3, r2
 8002f52:	3321      	adds	r3, #33	; 0x21
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	2b3f      	cmp	r3, #63	; 0x3f
 8002f58:	d016      	beq.n	8002f88 <CMD_Send+0xd4>
				sprintf(temp,"=%s",tok->sendstr[i]);
 8002f5a:	1d3a      	adds	r2, r7, #4
 8002f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	3320      	adds	r3, #32
 8002f64:	6812      	ldr	r2, [r2, #0]
 8002f66:	4413      	add	r3, r2
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	4923      	ldr	r1, [pc, #140]	; (8002ffc <CMD_Send+0x148>)
 8002f70:	4618      	mov	r0, r3
 8002f72:	f005 f9ed 	bl	8008350 <siprintf>
				strcat(buff,temp);
 8002f76:	f107 0214 	add.w	r2, r7, #20
 8002f7a:	f107 030c 	add.w	r3, r7, #12
 8002f7e:	4611      	mov	r1, r2
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	f005 fa05 	bl	8008390 <strcat>
 8002f86:	e015      	b.n	8002fb4 <CMD_Send+0x100>
			} else {
				sprintf(temp,",%s",tok->sendstr[i]);
 8002f88:	1d3a      	adds	r2, r7, #4
 8002f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	3320      	adds	r3, #32
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	4413      	add	r3, r2
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	f107 0314 	add.w	r3, r7, #20
 8002f9c:	4918      	ldr	r1, [pc, #96]	; (8003000 <CMD_Send+0x14c>)
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f005 f9d6 	bl	8008350 <siprintf>
				strcat(buff,temp);
 8002fa4:	f107 0214 	add.w	r2, r7, #20
 8002fa8:	f107 030c 	add.w	r3, r7, #12
 8002fac:	4611      	mov	r1, r2
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	f005 f9ee 	bl	8008390 <strcat>
		for (i=0; i<tok->num; i++) {
 8002fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002fbe:	1d3b      	adds	r3, r7, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	db91      	blt.n	8002ef4 <CMD_Send+0x40>
			}
		}
	} strcat(buff,"\r\n");
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	f7fd f90d 	bl	80001f4 <strlen>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f107 030c 	add.w	r3, r7, #12
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <CMD_Send+0x150>)
 8002fe8:	8811      	ldrh	r1, [r2, #0]
 8002fea:	7892      	ldrb	r2, [r2, #2]
 8002fec:	8019      	strh	r1, [r3, #0]
 8002fee:	709a      	strb	r2, [r3, #2]
}
 8002ff0:	bf00      	nop
 8002ff2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	0800a558 	.word	0x0800a558
 8003000:	0800a55c 	.word	0x0800a55c
 8003004:	0800a560 	.word	0x0800a560

08003008 <AT_Send>:

int AT_Send(char *atcmd, struct tok *tok) {
 8003008:	b580      	push	{r7, lr}
 800300a:	b0c4      	sub	sp, #272	; 0x110
 800300c:	af00      	add	r7, sp, #0
 800300e:	1d3b      	adds	r3, r7, #4
 8003010:	6018      	str	r0, [r3, #0]
 8003012:	463b      	mov	r3, r7
 8003014:	6019      	str	r1, [r3, #0]
	int i; char buff[256];
	for(i=0; i<Retime; ++ i) {
 8003016:	2300      	movs	r3, #0
 8003018:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800301c:	e027      	b.n	800306e <AT_Send+0x66>
		CMD_Send(buff, atcmd, tok);
 800301e:	463a      	mov	r2, r7
 8003020:	1d3b      	adds	r3, r7, #4
 8003022:	f107 000c 	add.w	r0, r7, #12
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	f7ff ff43 	bl	8002eb4 <CMD_Send>
		HAL_UART_Transmit_IT(&huart6, (uint8_t*)buff, strlen(buff));
 800302e:	f107 030c 	add.w	r3, r7, #12
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd f8de 	bl	80001f4 <strlen>
 8003038:	4603      	mov	r3, r0
 800303a:	b29a      	uxth	r2, r3
 800303c:	f107 030c 	add.w	r3, r7, #12
 8003040:	4619      	mov	r1, r3
 8003042:	4810      	ldr	r0, [pc, #64]	; (8003084 <AT_Send+0x7c>)
 8003044:	f003 fb22 	bl	800668c <HAL_UART_Transmit_IT>
		if(!AT_Return(tok->ret, 1)) {return 0;}
 8003048:	463b      	mov	r3, r7
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003050:	3301      	adds	r3, #1
 8003052:	2101      	movs	r1, #1
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f817 	bl	8003088 <AT_Return>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <AT_Send+0x5c>
 8003060:	2300      	movs	r3, #0
 8003062:	e009      	b.n	8003078 <AT_Send+0x70>
	for(i=0; i<Retime; ++ i) {
 8003064:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003068:	3301      	adds	r3, #1
 800306a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800306e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003072:	2b01      	cmp	r3, #1
 8003074:	ddd3      	ble.n	800301e <AT_Send+0x16>
	} return 1;
 8003076:	2301      	movs	r3, #1
}
 8003078:	4618      	mov	r0, r3
 800307a:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200005e4 	.word	0x200005e4

08003088 <AT_Return>:

int AT_Return(char *str, int flag) {
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	uint32_t Time_count = 2;
 8003092:	2302      	movs	r3, #2
 8003094:	60fb      	str	r3, [r7, #12]
	Time_count = Timeout;
 8003096:	230a      	movs	r3, #10
 8003098:	60fb      	str	r3, [r7, #12]
	memset(Buff, 0, sizeof Buff);
 800309a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800309e:	2100      	movs	r1, #0
 80030a0:	4811      	ldr	r0, [pc, #68]	; (80030e8 <AT_Return+0x60>)
 80030a2:	f004 fc75 	bl	8007990 <memset>
	while(Time_count --) {
 80030a6:	e015      	b.n	80030d4 <AT_Return+0x4c>
		if (flag) HAL_UART_Receive(&huart6, (uint8_t *)Buff, sizeof Buff, 100);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <AT_Return+0x34>
 80030ae:	2364      	movs	r3, #100	; 0x64
 80030b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030b4:	490c      	ldr	r1, [pc, #48]	; (80030e8 <AT_Return+0x60>)
 80030b6:	480d      	ldr	r0, [pc, #52]	; (80030ec <AT_Return+0x64>)
 80030b8:	f003 fa42 	bl	8006540 <HAL_UART_Receive>
		//printf("AT_Return: %s\r\n", Buff);
		if(strstr((const char *)Buff,str)!=NULL) {return 0;}
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	480a      	ldr	r0, [pc, #40]	; (80030e8 <AT_Return+0x60>)
 80030c0:	f005 f97d 	bl	80083be <strstr>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <AT_Return+0x46>
 80030ca:	2300      	movs	r3, #0
 80030cc:	e008      	b.n	80030e0 <AT_Return+0x58>
		HAL_Delay(1);
 80030ce:	2001      	movs	r0, #1
 80030d0:	f001 fa54 	bl	800457c <HAL_Delay>
	while(Time_count --) {
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	1e5a      	subs	r2, r3, #1
 80030d8:	60fa      	str	r2, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e4      	bne.n	80030a8 <AT_Return+0x20>
	} return 1;
 80030de:	2301      	movs	r3, #1
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	20003658 	.word	0x20003658
 80030ec:	200005e4 	.word	0x200005e4

080030f0 <Buff_clear>:

void Buff_clear(struct tok *tok) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
	tok->num = 0;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2020 	strb.w	r2, [r3, #32]
	memset(tok->sendstr, 0, sizeof(tok->sendstr));
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3321      	adds	r3, #33	; 0x21
 8003104:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8003108:	2100      	movs	r1, #0
 800310a:	4618      	mov	r0, r3
 800310c:	f004 fc40 	bl	8007990 <memset>
	memset(tok->ret, 0, sizeof(tok->ret));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f503 53a1 	add.w	r3, r3, #5152	; 0x1420
 8003116:	3301      	adds	r3, #1
 8003118:	f44f 7280 	mov.w	r2, #256	; 0x100
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f004 fc36 	bl	8007990 <memset>
	memset(Buff, 0, sizeof(Buff));
 8003124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003128:	2100      	movs	r1, #0
 800312a:	4803      	ldr	r0, [pc, #12]	; (8003138 <Buff_clear+0x48>)
 800312c:	f004 fc30 	bl	8007990 <memset>
}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20003658 	.word	0x20003658

0800313c <CONNECT_Server>:
char RemoteIP[20]    = "\"183.230.40.39\"";
char RemotePort[6]   = "6002";

char hexToSend[256], strToSend[256];

int CONNECT_Server(void) {
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
	int ret;
	strcpy(tok.name, "AT+CMQNEW");
 8003142:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <CONNECT_Server+0x78>)
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <CONNECT_Server+0x7c>)
 8003146:	cb03      	ldmia	r3!, {r0, r1}
 8003148:	6010      	str	r0, [r2, #0]
 800314a:	6051      	str	r1, [r2, #4]
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	8113      	strh	r3, [r2, #8]
	tok.num = 4;
 8003150:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <CONNECT_Server+0x78>)
 8003152:	2204      	movs	r2, #4
 8003154:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0],RemoteIP);
 8003158:	4918      	ldr	r1, [pc, #96]	; (80031bc <CONNECT_Server+0x80>)
 800315a:	4819      	ldr	r0, [pc, #100]	; (80031c0 <CONNECT_Server+0x84>)
 800315c:	f005 f927 	bl	80083ae <strcpy>
	strcpy(tok.sendstr[1],RemotePort);
 8003160:	4918      	ldr	r1, [pc, #96]	; (80031c4 <CONNECT_Server+0x88>)
 8003162:	4819      	ldr	r0, [pc, #100]	; (80031c8 <CONNECT_Server+0x8c>)
 8003164:	f005 f923 	bl	80083ae <strcpy>
	strcpy(tok.sendstr[2],"12000");
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <CONNECT_Server+0x90>)
 800316a:	4a19      	ldr	r2, [pc, #100]	; (80031d0 <CONNECT_Server+0x94>)
 800316c:	6810      	ldr	r0, [r2, #0]
 800316e:	6018      	str	r0, [r3, #0]
 8003170:	8892      	ldrh	r2, [r2, #4]
 8003172:	809a      	strh	r2, [r3, #4]
	strcpy(tok.sendstr[3],"100");
 8003174:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <CONNECT_Server+0x98>)
 8003176:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <CONNECT_Server+0x9c>)
 8003178:	6810      	ldr	r0, [r2, #0]
 800317a:	6018      	str	r0, [r3, #0]
	strcpy(tok.ret,"OK");
 800317c:	4b17      	ldr	r3, [pc, #92]	; (80031dc <CONNECT_Server+0xa0>)
 800317e:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <CONNECT_Server+0xa4>)
 8003180:	8811      	ldrh	r1, [r2, #0]
 8003182:	7892      	ldrb	r2, [r2, #2]
 8003184:	8019      	strh	r1, [r3, #0]
 8003186:	709a      	strb	r2, [r3, #2]
	ret = AT_CMD_Dispose(&tok);
 8003188:	480a      	ldr	r0, [pc, #40]	; (80031b4 <CONNECT_Server+0x78>)
 800318a:	f7ff fe5b 	bl	8002e44 <AT_CMD_Dispose>
 800318e:	6078      	str	r0, [r7, #4]
	Buff_clear(&tok);
 8003190:	4808      	ldr	r0, [pc, #32]	; (80031b4 <CONNECT_Server+0x78>)
 8003192:	f7ff ffad 	bl	80030f0 <Buff_clear>
	if(ret) printf("OneNET Server Connection Fail.\r\n");
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <CONNECT_Server+0x68>
 800319c:	4811      	ldr	r0, [pc, #68]	; (80031e4 <CONNECT_Server+0xa8>)
 800319e:	f005 f8cf 	bl	8008340 <puts>
 80031a2:	e002      	b.n	80031aa <CONNECT_Server+0x6e>
	else printf("OneNET Server Connection Success.\r\n");
 80031a4:	4810      	ldr	r0, [pc, #64]	; (80031e8 <CONNECT_Server+0xac>)
 80031a6:	f005 f8cb 	bl	8008340 <puts>
	return ret;
 80031aa:	687b      	ldr	r3, [r7, #4]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20003e58 	.word	0x20003e58
 80031b8:	0800a564 	.word	0x0800a564
 80031bc:	20000124 	.word	0x20000124
 80031c0:	20003e79 	.word	0x20003e79
 80031c4:	20000138 	.word	0x20000138
 80031c8:	20003f79 	.word	0x20003f79
 80031cc:	20004079 	.word	0x20004079
 80031d0:	0800a570 	.word	0x0800a570
 80031d4:	20004179 	.word	0x20004179
 80031d8:	0800a578 	.word	0x0800a578
 80031dc:	20005279 	.word	0x20005279
 80031e0:	0800a57c 	.word	0x0800a57c
 80031e4:	0800a580 	.word	0x0800a580
 80031e8:	0800a5a0 	.word	0x0800a5a0

080031ec <Registered_Plant>:

int Registered_Plant(void) {
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
	int ret;
	strcpy(tok.name,"AT+CMQCON");
 80031f2:	4a23      	ldr	r2, [pc, #140]	; (8003280 <Registered_Plant+0x94>)
 80031f4:	4b23      	ldr	r3, [pc, #140]	; (8003284 <Registered_Plant+0x98>)
 80031f6:	cb03      	ldmia	r3!, {r0, r1}
 80031f8:	6010      	str	r0, [r2, #0]
 80031fa:	6051      	str	r1, [r2, #4]
 80031fc:	881b      	ldrh	r3, [r3, #0]
 80031fe:	8113      	strh	r3, [r2, #8]
	tok.num = 8;
 8003200:	4b1f      	ldr	r3, [pc, #124]	; (8003280 <Registered_Plant+0x94>)
 8003202:	2208      	movs	r2, #8
 8003204:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0],"0");
 8003208:	4a1f      	ldr	r2, [pc, #124]	; (8003288 <Registered_Plant+0x9c>)
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <Registered_Plant+0xa0>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	8013      	strh	r3, [r2, #0]
	strcpy(tok.sendstr[1],"4");
 8003210:	4a1f      	ldr	r2, [pc, #124]	; (8003290 <Registered_Plant+0xa4>)
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <Registered_Plant+0xa8>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	8013      	strh	r3, [r2, #0]
	strcpy(tok.sendstr[2],ClientID);
 8003218:	491f      	ldr	r1, [pc, #124]	; (8003298 <Registered_Plant+0xac>)
 800321a:	4820      	ldr	r0, [pc, #128]	; (800329c <Registered_Plant+0xb0>)
 800321c:	f005 f8c7 	bl	80083ae <strcpy>
	strcpy(tok.sendstr[3],"180");
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <Registered_Plant+0xb4>)
 8003222:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <Registered_Plant+0xb8>)
 8003224:	6810      	ldr	r0, [r2, #0]
 8003226:	6018      	str	r0, [r3, #0]
	strcpy(tok.sendstr[4],"0");
 8003228:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <Registered_Plant+0xbc>)
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <Registered_Plant+0xa0>)
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	8013      	strh	r3, [r2, #0]
	strcpy(tok.sendstr[5],"0");
 8003230:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <Registered_Plant+0xc0>)
 8003232:	4b16      	ldr	r3, [pc, #88]	; (800328c <Registered_Plant+0xa0>)
 8003234:	881b      	ldrh	r3, [r3, #0]
 8003236:	8013      	strh	r3, [r2, #0]
	strcpy(tok.sendstr[6],UserNAME);
 8003238:	491d      	ldr	r1, [pc, #116]	; (80032b0 <Registered_Plant+0xc4>)
 800323a:	481e      	ldr	r0, [pc, #120]	; (80032b4 <Registered_Plant+0xc8>)
 800323c:	f005 f8b7 	bl	80083ae <strcpy>
	strcpy(tok.sendstr[7],Password);
 8003240:	491d      	ldr	r1, [pc, #116]	; (80032b8 <Registered_Plant+0xcc>)
 8003242:	481e      	ldr	r0, [pc, #120]	; (80032bc <Registered_Plant+0xd0>)
 8003244:	f005 f8b3 	bl	80083ae <strcpy>
	strcpy(tok.ret,"OK");
 8003248:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <Registered_Plant+0xd4>)
 800324a:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <Registered_Plant+0xd8>)
 800324c:	8811      	ldrh	r1, [r2, #0]
 800324e:	7892      	ldrb	r2, [r2, #2]
 8003250:	8019      	strh	r1, [r3, #0]
 8003252:	709a      	strb	r2, [r3, #2]
	ret = AT_CMD_Dispose(&tok);
 8003254:	480a      	ldr	r0, [pc, #40]	; (8003280 <Registered_Plant+0x94>)
 8003256:	f7ff fdf5 	bl	8002e44 <AT_CMD_Dispose>
 800325a:	6078      	str	r0, [r7, #4]
	Buff_clear(&tok);
 800325c:	4808      	ldr	r0, [pc, #32]	; (8003280 <Registered_Plant+0x94>)
 800325e:	f7ff ff47 	bl	80030f0 <Buff_clear>
	if(ret) printf("Device Register Fail.\r\n");
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <Registered_Plant+0x84>
 8003268:	4817      	ldr	r0, [pc, #92]	; (80032c8 <Registered_Plant+0xdc>)
 800326a:	f005 f869 	bl	8008340 <puts>
 800326e:	e002      	b.n	8003276 <Registered_Plant+0x8a>
	else printf("Device Register Success.\r\n");
 8003270:	4816      	ldr	r0, [pc, #88]	; (80032cc <Registered_Plant+0xe0>)
 8003272:	f005 f865 	bl	8008340 <puts>
	return ret;
 8003276:	687b      	ldr	r3, [r7, #4]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20003e58 	.word	0x20003e58
 8003284:	0800a5c4 	.word	0x0800a5c4
 8003288:	20003e79 	.word	0x20003e79
 800328c:	0800a5d0 	.word	0x0800a5d0
 8003290:	20003f79 	.word	0x20003f79
 8003294:	0800a5d4 	.word	0x0800a5d4
 8003298:	200000d4 	.word	0x200000d4
 800329c:	20004079 	.word	0x20004079
 80032a0:	20004179 	.word	0x20004179
 80032a4:	0800a5d8 	.word	0x0800a5d8
 80032a8:	20004279 	.word	0x20004279
 80032ac:	20004379 	.word	0x20004379
 80032b0:	200000e8 	.word	0x200000e8
 80032b4:	20004479 	.word	0x20004479
 80032b8:	200000fc 	.word	0x200000fc
 80032bc:	20004579 	.word	0x20004579
 80032c0:	20005279 	.word	0x20005279
 80032c4:	0800a57c 	.word	0x0800a57c
 80032c8:	0800a5dc 	.word	0x0800a5dc
 80032cc:	0800a5f4 	.word	0x0800a5f4

080032d0 <SUB_Topic>:

int SUB_Topic(void) {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
	int ret;
	strcpy(tok.name,"AT+CMQSUB");
 80032d6:	4a19      	ldr	r2, [pc, #100]	; (800333c <SUB_Topic+0x6c>)
 80032d8:	4b19      	ldr	r3, [pc, #100]	; (8003340 <SUB_Topic+0x70>)
 80032da:	cb03      	ldmia	r3!, {r0, r1}
 80032dc:	6010      	str	r0, [r2, #0]
 80032de:	6051      	str	r1, [r2, #4]
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	8113      	strh	r3, [r2, #8]
	tok.num = 3;
 80032e4:	4b15      	ldr	r3, [pc, #84]	; (800333c <SUB_Topic+0x6c>)
 80032e6:	2203      	movs	r2, #3
 80032e8:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0],"0");
 80032ec:	4a15      	ldr	r2, [pc, #84]	; (8003344 <SUB_Topic+0x74>)
 80032ee:	4b16      	ldr	r3, [pc, #88]	; (8003348 <SUB_Topic+0x78>)
 80032f0:	881b      	ldrh	r3, [r3, #0]
 80032f2:	8013      	strh	r3, [r2, #0]
	strcpy(tok.sendstr[1],TOPIC);
 80032f4:	4915      	ldr	r1, [pc, #84]	; (800334c <SUB_Topic+0x7c>)
 80032f6:	4816      	ldr	r0, [pc, #88]	; (8003350 <SUB_Topic+0x80>)
 80032f8:	f005 f859 	bl	80083ae <strcpy>
	strcpy(tok.sendstr[2],"1");
 80032fc:	4a15      	ldr	r2, [pc, #84]	; (8003354 <SUB_Topic+0x84>)
 80032fe:	4b16      	ldr	r3, [pc, #88]	; (8003358 <SUB_Topic+0x88>)
 8003300:	881b      	ldrh	r3, [r3, #0]
 8003302:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret,"OK");
 8003304:	4b15      	ldr	r3, [pc, #84]	; (800335c <SUB_Topic+0x8c>)
 8003306:	4a16      	ldr	r2, [pc, #88]	; (8003360 <SUB_Topic+0x90>)
 8003308:	8811      	ldrh	r1, [r2, #0]
 800330a:	7892      	ldrb	r2, [r2, #2]
 800330c:	8019      	strh	r1, [r3, #0]
 800330e:	709a      	strb	r2, [r3, #2]
	ret = AT_CMD_Dispose(&tok);
 8003310:	480a      	ldr	r0, [pc, #40]	; (800333c <SUB_Topic+0x6c>)
 8003312:	f7ff fd97 	bl	8002e44 <AT_CMD_Dispose>
 8003316:	6078      	str	r0, [r7, #4]
	Buff_clear(&tok);
 8003318:	4808      	ldr	r0, [pc, #32]	; (800333c <SUB_Topic+0x6c>)
 800331a:	f7ff fee9 	bl	80030f0 <Buff_clear>
	if(ret) printf("Subscribe Fail.\r\n");
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d003      	beq.n	800332c <SUB_Topic+0x5c>
 8003324:	480f      	ldr	r0, [pc, #60]	; (8003364 <SUB_Topic+0x94>)
 8003326:	f005 f80b 	bl	8008340 <puts>
 800332a:	e002      	b.n	8003332 <SUB_Topic+0x62>
	else printf("Subscribe Success.\r\n");
 800332c:	480e      	ldr	r0, [pc, #56]	; (8003368 <SUB_Topic+0x98>)
 800332e:	f005 f807 	bl	8008340 <puts>
	return ret;
 8003332:	687b      	ldr	r3, [r7, #4]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20003e58 	.word	0x20003e58
 8003340:	0800a610 	.word	0x0800a610
 8003344:	20003e79 	.word	0x20003e79
 8003348:	0800a5d0 	.word	0x0800a5d0
 800334c:	20000110 	.word	0x20000110
 8003350:	20003f79 	.word	0x20003f79
 8003354:	20004079 	.word	0x20004079
 8003358:	0800a61c 	.word	0x0800a61c
 800335c:	20005279 	.word	0x20005279
 8003360:	0800a57c 	.word	0x0800a57c
 8003364:	0800a620 	.word	0x0800a620
 8003368:	0800a634 	.word	0x0800a634

0800336c <PUB_Messag>:

int PUB_Messag(char *Messag) {
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	int ret, len = strlen(Messag) - 2;
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7fc ff3d 	bl	80001f4 <strlen>
 800337a:	4603      	mov	r3, r0
 800337c:	3b02      	subs	r3, #2
 800337e:	617b      	str	r3, [r7, #20]
	char Messag_len[5];
	memset(Messag_len, 0, sizeof Messag_len);
 8003380:	f107 0308 	add.w	r3, r7, #8
 8003384:	2205      	movs	r2, #5
 8003386:	2100      	movs	r1, #0
 8003388:	4618      	mov	r0, r3
 800338a:	f004 fb01 	bl	8007990 <memset>
	intToString(len,(uint8_t*)Messag_len);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	b29b      	uxth	r3, r3
 8003392:	f107 0208 	add.w	r2, r7, #8
 8003396:	4611      	mov	r1, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fb33 	bl	8003a04 <intToString>
	strcpy(tok.name,"AT+CMQPUB");
 800339e:	4a22      	ldr	r2, [pc, #136]	; (8003428 <PUB_Messag+0xbc>)
 80033a0:	4b22      	ldr	r3, [pc, #136]	; (800342c <PUB_Messag+0xc0>)
 80033a2:	cb03      	ldmia	r3!, {r0, r1}
 80033a4:	6010      	str	r0, [r2, #0]
 80033a6:	6051      	str	r1, [r2, #4]
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	8113      	strh	r3, [r2, #8]
	tok.num = 7;
 80033ac:	4b1e      	ldr	r3, [pc, #120]	; (8003428 <PUB_Messag+0xbc>)
 80033ae:	2207      	movs	r2, #7
 80033b0:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0],"0");
 80033b4:	4a1e      	ldr	r2, [pc, #120]	; (8003430 <PUB_Messag+0xc4>)
 80033b6:	4b1f      	ldr	r3, [pc, #124]	; (8003434 <PUB_Messag+0xc8>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	8013      	strh	r3, [r2, #0]
	strcpy(tok.sendstr[1],TOPIC);
 80033bc:	491e      	ldr	r1, [pc, #120]	; (8003438 <PUB_Messag+0xcc>)
 80033be:	481f      	ldr	r0, [pc, #124]	; (800343c <PUB_Messag+0xd0>)
 80033c0:	f004 fff5 	bl	80083ae <strcpy>
	strcpy(tok.sendstr[2],"0");
 80033c4:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <PUB_Messag+0xd4>)
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <PUB_Messag+0xc8>)
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	8013      	strh	r3, [r2, #0]
	strcpy(tok.sendstr[3],"0");
 80033cc:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <PUB_Messag+0xd8>)
 80033ce:	4b19      	ldr	r3, [pc, #100]	; (8003434 <PUB_Messag+0xc8>)
 80033d0:	881b      	ldrh	r3, [r3, #0]
 80033d2:	8013      	strh	r3, [r2, #0]
	strcpy(tok.sendstr[4],"0");
 80033d4:	4a1c      	ldr	r2, [pc, #112]	; (8003448 <PUB_Messag+0xdc>)
 80033d6:	4b17      	ldr	r3, [pc, #92]	; (8003434 <PUB_Messag+0xc8>)
 80033d8:	881b      	ldrh	r3, [r3, #0]
 80033da:	8013      	strh	r3, [r2, #0]
	strcpy(tok.sendstr[5],Messag_len);
 80033dc:	f107 0308 	add.w	r3, r7, #8
 80033e0:	4619      	mov	r1, r3
 80033e2:	481a      	ldr	r0, [pc, #104]	; (800344c <PUB_Messag+0xe0>)
 80033e4:	f004 ffe3 	bl	80083ae <strcpy>
	//printf("Message_len: %send\r\n",Messag_len);
	strcpy(tok.sendstr[6],strToSend);
 80033e8:	4919      	ldr	r1, [pc, #100]	; (8003450 <PUB_Messag+0xe4>)
 80033ea:	481a      	ldr	r0, [pc, #104]	; (8003454 <PUB_Messag+0xe8>)
 80033ec:	f004 ffdf 	bl	80083ae <strcpy>
	//printf("Message_TEST1\r\n");
	strcpy(tok.ret,"OK");
 80033f0:	4b19      	ldr	r3, [pc, #100]	; (8003458 <PUB_Messag+0xec>)
 80033f2:	4a1a      	ldr	r2, [pc, #104]	; (800345c <PUB_Messag+0xf0>)
 80033f4:	8811      	ldrh	r1, [r2, #0]
 80033f6:	7892      	ldrb	r2, [r2, #2]
 80033f8:	8019      	strh	r1, [r3, #0]
 80033fa:	709a      	strb	r2, [r3, #2]
	ret = AT_CMD_Dispose(&tok);
 80033fc:	480a      	ldr	r0, [pc, #40]	; (8003428 <PUB_Messag+0xbc>)
 80033fe:	f7ff fd21 	bl	8002e44 <AT_CMD_Dispose>
 8003402:	6138      	str	r0, [r7, #16]
	//printf("Message_TEST2\r\n");
	Buff_clear(&tok);
 8003404:	4808      	ldr	r0, [pc, #32]	; (8003428 <PUB_Messag+0xbc>)
 8003406:	f7ff fe73 	bl	80030f0 <Buff_clear>
	if(ret) printf("Message PUB Fail.\r\n");
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d003      	beq.n	8003418 <PUB_Messag+0xac>
 8003410:	4813      	ldr	r0, [pc, #76]	; (8003460 <PUB_Messag+0xf4>)
 8003412:	f004 ff95 	bl	8008340 <puts>
 8003416:	e002      	b.n	800341e <PUB_Messag+0xb2>
	else printf("Message PUB Success.\r\n");
 8003418:	4812      	ldr	r0, [pc, #72]	; (8003464 <PUB_Messag+0xf8>)
 800341a:	f004 ff91 	bl	8008340 <puts>
	return ret;
 800341e:	693b      	ldr	r3, [r7, #16]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20003e58 	.word	0x20003e58
 800342c:	0800a648 	.word	0x0800a648
 8003430:	20003e79 	.word	0x20003e79
 8003434:	0800a5d0 	.word	0x0800a5d0
 8003438:	20000110 	.word	0x20000110
 800343c:	20003f79 	.word	0x20003f79
 8003440:	20004079 	.word	0x20004079
 8003444:	20004179 	.word	0x20004179
 8003448:	20004279 	.word	0x20004279
 800344c:	20004379 	.word	0x20004379
 8003450:	2000547c 	.word	0x2000547c
 8003454:	20004479 	.word	0x20004479
 8003458:	20005279 	.word	0x20005279
 800345c:	0800a57c 	.word	0x0800a57c
 8003460:	0800a654 	.word	0x0800a654
 8003464:	0800a668 	.word	0x0800a668

08003468 <Close_Server>:
	if(ret) printf("UNSUB Topic Fail.\r\n");
	else printf("UNSUB Topic Success.\r\n");
	return ret;
}

int Close_Server(void) {
 8003468:	b590      	push	{r4, r7, lr}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
	int ret;
	strcpy(tok.name,"AT+CMQDISCON");
 800346e:	4a16      	ldr	r2, [pc, #88]	; (80034c8 <Close_Server+0x60>)
 8003470:	4b16      	ldr	r3, [pc, #88]	; (80034cc <Close_Server+0x64>)
 8003472:	4614      	mov	r4, r2
 8003474:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003476:	6020      	str	r0, [r4, #0]
 8003478:	6061      	str	r1, [r4, #4]
 800347a:	60a2      	str	r2, [r4, #8]
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	7323      	strb	r3, [r4, #12]
	tok.num = 1;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <Close_Server+0x60>)
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0],"0");
 8003488:	4a11      	ldr	r2, [pc, #68]	; (80034d0 <Close_Server+0x68>)
 800348a:	4b12      	ldr	r3, [pc, #72]	; (80034d4 <Close_Server+0x6c>)
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret,"OK");
 8003490:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <Close_Server+0x70>)
 8003492:	4a12      	ldr	r2, [pc, #72]	; (80034dc <Close_Server+0x74>)
 8003494:	8811      	ldrh	r1, [r2, #0]
 8003496:	7892      	ldrb	r2, [r2, #2]
 8003498:	8019      	strh	r1, [r3, #0]
 800349a:	709a      	strb	r2, [r3, #2]
	ret = AT_CMD_Dispose(&tok);
 800349c:	480a      	ldr	r0, [pc, #40]	; (80034c8 <Close_Server+0x60>)
 800349e:	f7ff fcd1 	bl	8002e44 <AT_CMD_Dispose>
 80034a2:	6078      	str	r0, [r7, #4]
	Buff_clear(&tok);
 80034a4:	4808      	ldr	r0, [pc, #32]	; (80034c8 <Close_Server+0x60>)
 80034a6:	f7ff fe23 	bl	80030f0 <Buff_clear>
	if(ret) printf("ONENET Disconnect Fail.\r\n");
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <Close_Server+0x50>
 80034b0:	480b      	ldr	r0, [pc, #44]	; (80034e0 <Close_Server+0x78>)
 80034b2:	f004 ff45 	bl	8008340 <puts>
 80034b6:	e002      	b.n	80034be <Close_Server+0x56>
	else printf("ONENET Disconnect Success.\r\n");
 80034b8:	480a      	ldr	r0, [pc, #40]	; (80034e4 <Close_Server+0x7c>)
 80034ba:	f004 ff41 	bl	8008340 <puts>
	return ret;
 80034be:	687b      	ldr	r3, [r7, #4]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd90      	pop	{r4, r7, pc}
 80034c8:	20003e58 	.word	0x20003e58
 80034cc:	0800a6b8 	.word	0x0800a6b8
 80034d0:	20003e79 	.word	0x20003e79
 80034d4:	0800a5d0 	.word	0x0800a5d0
 80034d8:	20005279 	.word	0x20005279
 80034dc:	0800a57c 	.word	0x0800a57c
 80034e0:	0800a6c8 	.word	0x0800a6c8
 80034e4:	0800a6e4 	.word	0x0800a6e4

080034e8 <HEX_Mode_Enable>:

int HEX_Mode_Enable(void) {
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
	int ret;
	strcpy(tok.name,"AT+CREVHEX");
 80034ee:	4a16      	ldr	r2, [pc, #88]	; (8003548 <HEX_Mode_Enable+0x60>)
 80034f0:	4b16      	ldr	r3, [pc, #88]	; (800354c <HEX_Mode_Enable+0x64>)
 80034f2:	cb03      	ldmia	r3!, {r0, r1}
 80034f4:	6010      	str	r0, [r2, #0]
 80034f6:	6051      	str	r1, [r2, #4]
 80034f8:	8819      	ldrh	r1, [r3, #0]
 80034fa:	789b      	ldrb	r3, [r3, #2]
 80034fc:	8111      	strh	r1, [r2, #8]
 80034fe:	7293      	strb	r3, [r2, #10]
	tok.num = 1;
 8003500:	4b11      	ldr	r3, [pc, #68]	; (8003548 <HEX_Mode_Enable+0x60>)
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0],"1");
 8003508:	4a11      	ldr	r2, [pc, #68]	; (8003550 <HEX_Mode_Enable+0x68>)
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HEX_Mode_Enable+0x6c>)
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret,"OK");
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HEX_Mode_Enable+0x70>)
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <HEX_Mode_Enable+0x74>)
 8003514:	8811      	ldrh	r1, [r2, #0]
 8003516:	7892      	ldrb	r2, [r2, #2]
 8003518:	8019      	strh	r1, [r3, #0]
 800351a:	709a      	strb	r2, [r3, #2]
	ret = AT_CMD_Dispose(&tok);
 800351c:	480a      	ldr	r0, [pc, #40]	; (8003548 <HEX_Mode_Enable+0x60>)
 800351e:	f7ff fc91 	bl	8002e44 <AT_CMD_Dispose>
 8003522:	6078      	str	r0, [r7, #4]
	Buff_clear(&tok);
 8003524:	4808      	ldr	r0, [pc, #32]	; (8003548 <HEX_Mode_Enable+0x60>)
 8003526:	f7ff fde3 	bl	80030f0 <Buff_clear>
	if(ret) printf("HEX mode Fail.\r\n");
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HEX_Mode_Enable+0x50>
 8003530:	480b      	ldr	r0, [pc, #44]	; (8003560 <HEX_Mode_Enable+0x78>)
 8003532:	f004 ff05 	bl	8008340 <puts>
 8003536:	e002      	b.n	800353e <HEX_Mode_Enable+0x56>
	else printf("HEX mode Success.\r\n");
 8003538:	480a      	ldr	r0, [pc, #40]	; (8003564 <HEX_Mode_Enable+0x7c>)
 800353a:	f004 ff01 	bl	8008340 <puts>
	return ret;
 800353e:	687b      	ldr	r3, [r7, #4]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20003e58 	.word	0x20003e58
 800354c:	0800a700 	.word	0x0800a700
 8003550:	20003e79 	.word	0x20003e79
 8003554:	0800a61c 	.word	0x0800a61c
 8003558:	20005279 	.word	0x20005279
 800355c:	0800a57c 	.word	0x0800a57c
 8003560:	0800a70c 	.word	0x0800a70c
 8003564:	0800a71c 	.word	0x0800a71c

08003568 <Messag_Builder>:
		Messag_Analysis(Buff);
		Buff_clear(&tok); return 0;
	} return 1;
}

void Messag_Builder (dataPoints *DP) {
 8003568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800356c:	b08c      	sub	sp, #48	; 0x30
 800356e:	af08      	add	r7, sp, #32
 8003570:	6078      	str	r0, [r7, #4]
	sprintf(strToSend, "{\"La\":\"%.6f\",\"Lo\":\"%.6f\",\"S\":\"%.2f\",\"A\":\"%.1f\",\"F\":\"%d\"}", DP->latitude, DP->longitude, DP->speed, DP->pdop, DP->flag);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc fffe 	bl	8000578 <__aeabi_f2d>
 800357c:	4682      	mov	sl, r0
 800357e:	468b      	mov	fp, r1
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4618      	mov	r0, r3
 8003586:	f7fc fff7 	bl	8000578 <__aeabi_f2d>
 800358a:	4604      	mov	r4, r0
 800358c:	460d      	mov	r5, r1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc fff0 	bl	8000578 <__aeabi_f2d>
 8003598:	4680      	mov	r8, r0
 800359a:	4689      	mov	r9, r1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffe9 	bl	8000578 <__aeabi_f2d>
 80035a6:	4602      	mov	r2, r0
 80035a8:	460b      	mov	r3, r1
 80035aa:	6879      	ldr	r1, [r7, #4]
 80035ac:	6909      	ldr	r1, [r1, #16]
 80035ae:	9106      	str	r1, [sp, #24]
 80035b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80035b4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80035b8:	e9cd 4500 	strd	r4, r5, [sp]
 80035bc:	4652      	mov	r2, sl
 80035be:	465b      	mov	r3, fp
 80035c0:	4913      	ldr	r1, [pc, #76]	; (8003610 <Messag_Builder+0xa8>)
 80035c2:	4814      	ldr	r0, [pc, #80]	; (8003614 <Messag_Builder+0xac>)
 80035c4:	f004 fec4 	bl	8008350 <siprintf>
	int len = strlen(strToSend);
 80035c8:	4812      	ldr	r0, [pc, #72]	; (8003614 <Messag_Builder+0xac>)
 80035ca:	f7fc fe13 	bl	80001f4 <strlen>
 80035ce:	4603      	mov	r3, r0
 80035d0:	60fb      	str	r3, [r7, #12]
	//printf("Messag_Builder 1: %s\r\n", strToSend);
	strToHex(hexToSend, strToSend);
 80035d2:	4910      	ldr	r1, [pc, #64]	; (8003614 <Messag_Builder+0xac>)
 80035d4:	4810      	ldr	r0, [pc, #64]	; (8003618 <Messag_Builder+0xb0>)
 80035d6:	f000 fab3 	bl	8003b40 <strToHex>
	sprintf(strToSend, "\"03%04X", len);
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	490f      	ldr	r1, [pc, #60]	; (800361c <Messag_Builder+0xb4>)
 80035de:	480d      	ldr	r0, [pc, #52]	; (8003614 <Messag_Builder+0xac>)
 80035e0:	f004 feb6 	bl	8008350 <siprintf>
	strcat(strToSend, hexToSend);
 80035e4:	490c      	ldr	r1, [pc, #48]	; (8003618 <Messag_Builder+0xb0>)
 80035e6:	480b      	ldr	r0, [pc, #44]	; (8003614 <Messag_Builder+0xac>)
 80035e8:	f004 fed2 	bl	8008390 <strcat>
	strcat(strToSend, "\"");
 80035ec:	4809      	ldr	r0, [pc, #36]	; (8003614 <Messag_Builder+0xac>)
 80035ee:	f7fc fe01 	bl	80001f4 <strlen>
 80035f2:	4603      	mov	r3, r0
 80035f4:	461a      	mov	r2, r3
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <Messag_Builder+0xac>)
 80035f8:	4413      	add	r3, r2
 80035fa:	4909      	ldr	r1, [pc, #36]	; (8003620 <Messag_Builder+0xb8>)
 80035fc:	461a      	mov	r2, r3
 80035fe:	460b      	mov	r3, r1
 8003600:	881b      	ldrh	r3, [r3, #0]
 8003602:	8013      	strh	r3, [r2, #0]
	//printf("Messag_Builder 2: %s\r\n", strToSend);
}
 8003604:	bf00      	nop
 8003606:	3710      	adds	r7, #16
 8003608:	46bd      	mov	sp, r7
 800360a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360e:	bf00      	nop
 8003610:	0800a758 	.word	0x0800a758
 8003614:	2000547c 	.word	0x2000547c
 8003618:	2000537c 	.word	0x2000537c
 800361c:	0800a794 	.word	0x0800a794
 8003620:	0800a79c 	.word	0x0800a79c

08003624 <ONENET_MQTT>:

void ONENET_MQTT(dataPoints *DP) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	switch(SIM7020_state) {
 800362c:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <ONENET_MQTT+0x90>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d00c      	beq.n	800364e <ONENET_MQTT+0x2a>
 8003634:	2b02      	cmp	r3, #2
 8003636:	d01f      	beq.n	8003678 <ONENET_MQTT+0x54>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d137      	bne.n	80036ac <ONENET_MQTT+0x88>
		case LNW_INIT:
			if(!lte_init()) SIM7020_state = SET_LNW_PARAMETER;
 800363c:	f000 f9c8 	bl	80039d0 <lte_init>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d12b      	bne.n	800369e <ONENET_MQTT+0x7a>
 8003646:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <ONENET_MQTT+0x90>)
 8003648:	2201      	movs	r2, #1
 800364a:	601a      	str	r2, [r3, #0]
			break;
 800364c:	e027      	b.n	800369e <ONENET_MQTT+0x7a>
		case SET_LNW_PARAMETER:
			Close_Server();
 800364e:	f7ff ff0b 	bl	8003468 <Close_Server>
			if(CONNECT_Server()) return;
 8003652:	f7ff fd73 	bl	800313c <CONNECT_Server>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d122      	bne.n	80036a2 <ONENET_MQTT+0x7e>
			if(Registered_Plant()) return;
 800365c:	f7ff fdc6 	bl	80031ec <Registered_Plant>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d11f      	bne.n	80036a6 <ONENET_MQTT+0x82>
			if(SUB_Topic()) return;
 8003666:	f7ff fe33 	bl	80032d0 <SUB_Topic>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d11c      	bne.n	80036aa <ONENET_MQTT+0x86>
			SIM7020_state = CONNECT_OK;
 8003670:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <ONENET_MQTT+0x90>)
 8003672:	2202      	movs	r2, #2
 8003674:	601a      	str	r2, [r3, #0]
			break;
 8003676:	e019      	b.n	80036ac <ONENET_MQTT+0x88>
		case CONNECT_OK:
			LED_DATUPD_ON();
 8003678:	2201      	movs	r2, #1
 800367a:	2140      	movs	r1, #64	; 0x40
 800367c:	480e      	ldr	r0, [pc, #56]	; (80036b8 <ONENET_MQTT+0x94>)
 800367e:	f001 fa55 	bl	8004b2c <HAL_GPIO_WritePin>
			HEX_Mode_Enable();
 8003682:	f7ff ff31 	bl	80034e8 <HEX_Mode_Enable>
			Messag_Builder(DP);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ff6e 	bl	8003568 <Messag_Builder>
			PUB_Messag(strToSend);
 800368c:	480b      	ldr	r0, [pc, #44]	; (80036bc <ONENET_MQTT+0x98>)
 800368e:	f7ff fe6d 	bl	800336c <PUB_Messag>
			LED_DATUPD_OFF();
 8003692:	2200      	movs	r2, #0
 8003694:	2140      	movs	r1, #64	; 0x40
 8003696:	4808      	ldr	r0, [pc, #32]	; (80036b8 <ONENET_MQTT+0x94>)
 8003698:	f001 fa48 	bl	8004b2c <HAL_GPIO_WritePin>
 800369c:	e006      	b.n	80036ac <ONENET_MQTT+0x88>
			break;
 800369e:	bf00      	nop
 80036a0:	e004      	b.n	80036ac <ONENET_MQTT+0x88>
			if(CONNECT_Server()) return;
 80036a2:	bf00      	nop
 80036a4:	e002      	b.n	80036ac <ONENET_MQTT+0x88>
			if(Registered_Plant()) return;
 80036a6:	bf00      	nop
 80036a8:	e000      	b.n	80036ac <ONENET_MQTT+0x88>
			if(SUB_Topic()) return;
 80036aa:	bf00      	nop
	}
}
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000540 	.word	0x20000540
 80036b8:	40020000 	.word	0x40020000
 80036bc:	2000547c 	.word	0x2000547c

080036c0 <Query_Signal_Quality>:
	AT_CMD_Dispose(&tok);
	Buff_clear(&tok);
	HAL_Delay(10000);
}

int Query_Signal_Quality(void) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
	int ret, i=0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
	char signal[5];
	char *temp;
	strcpy(tok.name,"AT+CSQ");
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <Query_Signal_Quality+0xc4>)
 80036cc:	4a2e      	ldr	r2, [pc, #184]	; (8003788 <Query_Signal_Quality+0xc8>)
 80036ce:	6810      	ldr	r0, [r2, #0]
 80036d0:	6018      	str	r0, [r3, #0]
 80036d2:	8891      	ldrh	r1, [r2, #4]
 80036d4:	7992      	ldrb	r2, [r2, #6]
 80036d6:	8099      	strh	r1, [r3, #4]
 80036d8:	719a      	strb	r2, [r3, #6]
	tok.num = 0;
 80036da:	4b2a      	ldr	r3, [pc, #168]	; (8003784 <Query_Signal_Quality+0xc4>)
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.ret,"+CSQ");
 80036e2:	4b2a      	ldr	r3, [pc, #168]	; (800378c <Query_Signal_Quality+0xcc>)
 80036e4:	4a2a      	ldr	r2, [pc, #168]	; (8003790 <Query_Signal_Quality+0xd0>)
 80036e6:	6810      	ldr	r0, [r2, #0]
 80036e8:	6018      	str	r0, [r3, #0]
 80036ea:	7912      	ldrb	r2, [r2, #4]
 80036ec:	711a      	strb	r2, [r3, #4]
	ret = AT_CMD_Dispose(&tok);
 80036ee:	4825      	ldr	r0, [pc, #148]	; (8003784 <Query_Signal_Quality+0xc4>)
 80036f0:	f7ff fba8 	bl	8002e44 <AT_CMD_Dispose>
 80036f4:	6178      	str	r0, [r7, #20]
	if(!ret) {
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d13a      	bne.n	8003772 <Query_Signal_Quality+0xb2>
		HAL_UART_Receive(&huart6, (uint8_t *)Buff, sizeof Buff, 100);
 80036fc:	2364      	movs	r3, #100	; 0x64
 80036fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003702:	4924      	ldr	r1, [pc, #144]	; (8003794 <Query_Signal_Quality+0xd4>)
 8003704:	4824      	ldr	r0, [pc, #144]	; (8003798 <Query_Signal_Quality+0xd8>)
 8003706:	f002 ff1b 	bl	8006540 <HAL_UART_Receive>
		temp = strstr((const char *)Buff,"+CSQ:"); temp += 6;
 800370a:	4924      	ldr	r1, [pc, #144]	; (800379c <Query_Signal_Quality+0xdc>)
 800370c:	4821      	ldr	r0, [pc, #132]	; (8003794 <Query_Signal_Quality+0xd4>)
 800370e:	f004 fe56 	bl	80083be <strstr>
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3306      	adds	r3, #6
 8003718:	60fb      	str	r3, [r7, #12]
		while(*temp!=0x2C) {signal[i] = *temp; temp++; i++; signal[i] = '\0';}
 800371a:	e011      	b.n	8003740 <Query_Signal_Quality+0x80>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	7819      	ldrb	r1, [r3, #0]
 8003720:	1d3a      	adds	r2, r7, #4
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4413      	add	r3, r2
 8003726:	460a      	mov	r2, r1
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3301      	adds	r3, #1
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	1d3a      	adds	r2, r7, #4
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	4413      	add	r3, r2
 800373c:	2200      	movs	r2, #0
 800373e:	701a      	strb	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b2c      	cmp	r3, #44	; 0x2c
 8003746:	d1e9      	bne.n	800371c <Query_Signal_Quality+0x5c>
		printf("Query_Signal_Quality::Signal: \r\n%s\r\n", signal);
 8003748:	1d3b      	adds	r3, r7, #4
 800374a:	4619      	mov	r1, r3
 800374c:	4814      	ldr	r0, [pc, #80]	; (80037a0 <Query_Signal_Quality+0xe0>)
 800374e:	f004 fd83 	bl	8008258 <iprintf>
		if(stringToInt(signal) < 10 || stringToInt(signal) == 99) {ret = 1;}
 8003752:	1d3b      	adds	r3, r7, #4
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f993 	bl	8003a80 <stringToInt>
 800375a:	4603      	mov	r3, r0
 800375c:	2b09      	cmp	r3, #9
 800375e:	dd06      	ble.n	800376e <Query_Signal_Quality+0xae>
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	4618      	mov	r0, r3
 8003764:	f000 f98c 	bl	8003a80 <stringToInt>
 8003768:	4603      	mov	r3, r0
 800376a:	2b63      	cmp	r3, #99	; 0x63
 800376c:	d101      	bne.n	8003772 <Query_Signal_Quality+0xb2>
 800376e:	2301      	movs	r3, #1
 8003770:	617b      	str	r3, [r7, #20]
	} Buff_clear(&tok);
 8003772:	4804      	ldr	r0, [pc, #16]	; (8003784 <Query_Signal_Quality+0xc4>)
 8003774:	f7ff fcbc 	bl	80030f0 <Buff_clear>
	return ret;
 8003778:	697b      	ldr	r3, [r7, #20]
}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20003e58 	.word	0x20003e58
 8003788:	0800a7b4 	.word	0x0800a7b4
 800378c:	20005279 	.word	0x20005279
 8003790:	0800a7bc 	.word	0x0800a7bc
 8003794:	20003658 	.word	0x20003658
 8003798:	200005e4 	.word	0x200005e4
 800379c:	0800a7c4 	.word	0x0800a7c4
 80037a0:	0800a7cc 	.word	0x0800a7cc

080037a4 <Read_SIM_Card>:

int Read_SIM_Card(void) {
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
	strcpy(tok.name,"AT+CPIN");
 80037a8:	4a18      	ldr	r2, [pc, #96]	; (800380c <Read_SIM_Card+0x68>)
 80037aa:	4b19      	ldr	r3, [pc, #100]	; (8003810 <Read_SIM_Card+0x6c>)
 80037ac:	cb03      	ldmia	r3!, {r0, r1}
 80037ae:	6010      	str	r0, [r2, #0]
 80037b0:	6051      	str	r1, [r2, #4]
	tok.num = 1;
 80037b2:	4b16      	ldr	r3, [pc, #88]	; (800380c <Read_SIM_Card+0x68>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0],"?");
 80037ba:	4a16      	ldr	r2, [pc, #88]	; (8003814 <Read_SIM_Card+0x70>)
 80037bc:	4b16      	ldr	r3, [pc, #88]	; (8003818 <Read_SIM_Card+0x74>)
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret,"OK\r\n");
 80037c2:	4b16      	ldr	r3, [pc, #88]	; (800381c <Read_SIM_Card+0x78>)
 80037c4:	4a16      	ldr	r2, [pc, #88]	; (8003820 <Read_SIM_Card+0x7c>)
 80037c6:	6810      	ldr	r0, [r2, #0]
 80037c8:	6018      	str	r0, [r3, #0]
 80037ca:	7912      	ldrb	r2, [r2, #4]
 80037cc:	711a      	strb	r2, [r3, #4]
	if(!AT_CMD_Dispose(&tok)) {
 80037ce:	480f      	ldr	r0, [pc, #60]	; (800380c <Read_SIM_Card+0x68>)
 80037d0:	f7ff fb38 	bl	8002e44 <AT_CMD_Dispose>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10e      	bne.n	80037f8 <Read_SIM_Card+0x54>
		if(!AT_Return("+CPIN: READY", 1)) {printf("SIM Ready.\r\n");}
 80037da:	2101      	movs	r1, #1
 80037dc:	4811      	ldr	r0, [pc, #68]	; (8003824 <Read_SIM_Card+0x80>)
 80037de:	f7ff fc53 	bl	8003088 <AT_Return>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <Read_SIM_Card+0x4a>
 80037e8:	480f      	ldr	r0, [pc, #60]	; (8003828 <Read_SIM_Card+0x84>)
 80037ea:	f004 fda9 	bl	8008340 <puts>
		Buff_clear(&tok); return 0;
 80037ee:	4807      	ldr	r0, [pc, #28]	; (800380c <Read_SIM_Card+0x68>)
 80037f0:	f7ff fc7e 	bl	80030f0 <Buff_clear>
 80037f4:	2300      	movs	r3, #0
 80037f6:	e006      	b.n	8003806 <Read_SIM_Card+0x62>
	} else {
		printf("Read_SIM_Card Fail.\r\n");
 80037f8:	480c      	ldr	r0, [pc, #48]	; (800382c <Read_SIM_Card+0x88>)
 80037fa:	f004 fda1 	bl	8008340 <puts>
		Buff_clear(&tok); return 1;
 80037fe:	4803      	ldr	r0, [pc, #12]	; (800380c <Read_SIM_Card+0x68>)
 8003800:	f7ff fc76 	bl	80030f0 <Buff_clear>
 8003804:	2301      	movs	r3, #1
	}
}
 8003806:	4618      	mov	r0, r3
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20003e58 	.word	0x20003e58
 8003810:	0800a7f4 	.word	0x0800a7f4
 8003814:	20003e79 	.word	0x20003e79
 8003818:	0800a7fc 	.word	0x0800a7fc
 800381c:	20005279 	.word	0x20005279
 8003820:	0800a7ac 	.word	0x0800a7ac
 8003824:	0800a800 	.word	0x0800a800
 8003828:	0800a810 	.word	0x0800a810
 800382c:	0800a81c 	.word	0x0800a81c

08003830 <GET_LNW_State>:

int GET_LNW_State(void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
	int ret;
	strcpy(tok.name,"AT+CEREG");
 8003836:	4a38      	ldr	r2, [pc, #224]	; (8003918 <GET_LNW_State+0xe8>)
 8003838:	4b38      	ldr	r3, [pc, #224]	; (800391c <GET_LNW_State+0xec>)
 800383a:	cb03      	ldmia	r3!, {r0, r1}
 800383c:	6010      	str	r0, [r2, #0]
 800383e:	6051      	str	r1, [r2, #4]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 8003844:	4b34      	ldr	r3, [pc, #208]	; (8003918 <GET_LNW_State+0xe8>)
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0],"?");
 800384c:	4a34      	ldr	r2, [pc, #208]	; (8003920 <GET_LNW_State+0xf0>)
 800384e:	4b35      	ldr	r3, [pc, #212]	; (8003924 <GET_LNW_State+0xf4>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret,"OK");
 8003854:	4b34      	ldr	r3, [pc, #208]	; (8003928 <GET_LNW_State+0xf8>)
 8003856:	4a35      	ldr	r2, [pc, #212]	; (800392c <GET_LNW_State+0xfc>)
 8003858:	8811      	ldrh	r1, [r2, #0]
 800385a:	7892      	ldrb	r2, [r2, #2]
 800385c:	8019      	strh	r1, [r3, #0]
 800385e:	709a      	strb	r2, [r3, #2]
	ret = AT_CMD_Dispose(&tok);
 8003860:	482d      	ldr	r0, [pc, #180]	; (8003918 <GET_LNW_State+0xe8>)
 8003862:	f7ff faef 	bl	8002e44 <AT_CMD_Dispose>
 8003866:	6078      	str	r0, [r7, #4]
	if(!ret) {
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d14c      	bne.n	8003908 <GET_LNW_State+0xd8>
		if(!AT_Return("+CEREG: 0,0", 1)) {
 800386e:	2101      	movs	r1, #1
 8003870:	482f      	ldr	r0, [pc, #188]	; (8003930 <GET_LNW_State+0x100>)
 8003872:	f7ff fc09 	bl	8003088 <AT_Return>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d105      	bne.n	8003888 <GET_LNW_State+0x58>
			ret = 1; printf("Network_unregistered.\r\n");
 800387c:	2301      	movs	r3, #1
 800387e:	607b      	str	r3, [r7, #4]
 8003880:	482c      	ldr	r0, [pc, #176]	; (8003934 <GET_LNW_State+0x104>)
 8003882:	f004 fd5d 	bl	8008340 <puts>
 8003886:	e03f      	b.n	8003908 <GET_LNW_State+0xd8>
		} else if(!AT_Return("+CEREG: 0,1", 0)) {
 8003888:	2100      	movs	r1, #0
 800388a:	482b      	ldr	r0, [pc, #172]	; (8003938 <GET_LNW_State+0x108>)
 800388c:	f7ff fbfc 	bl	8003088 <AT_Return>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d105      	bne.n	80038a2 <GET_LNW_State+0x72>
			ret = 0; printf("Network_registered.\r\n");
 8003896:	2300      	movs	r3, #0
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	4828      	ldr	r0, [pc, #160]	; (800393c <GET_LNW_State+0x10c>)
 800389c:	f004 fd50 	bl	8008340 <puts>
 80038a0:	e032      	b.n	8003908 <GET_LNW_State+0xd8>
		} else if(!AT_Return("+CEREG: 0,2", 0)) {
 80038a2:	2100      	movs	r1, #0
 80038a4:	4826      	ldr	r0, [pc, #152]	; (8003940 <GET_LNW_State+0x110>)
 80038a6:	f7ff fbef 	bl	8003088 <AT_Return>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <GET_LNW_State+0x8c>
			ret = 1; printf("Network_Registering..\r\n");
 80038b0:	2301      	movs	r3, #1
 80038b2:	607b      	str	r3, [r7, #4]
 80038b4:	4823      	ldr	r0, [pc, #140]	; (8003944 <GET_LNW_State+0x114>)
 80038b6:	f004 fd43 	bl	8008340 <puts>
 80038ba:	e025      	b.n	8003908 <GET_LNW_State+0xd8>
		} else if(!AT_Return("+CEREG: 0,3", 0)) {
 80038bc:	2100      	movs	r1, #0
 80038be:	4822      	ldr	r0, [pc, #136]	; (8003948 <GET_LNW_State+0x118>)
 80038c0:	f7ff fbe2 	bl	8003088 <AT_Return>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d105      	bne.n	80038d6 <GET_LNW_State+0xa6>
			ret = 1; printf("Network_Register_Fail.\r\n");
 80038ca:	2301      	movs	r3, #1
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	481f      	ldr	r0, [pc, #124]	; (800394c <GET_LNW_State+0x11c>)
 80038d0:	f004 fd36 	bl	8008340 <puts>
 80038d4:	e018      	b.n	8003908 <GET_LNW_State+0xd8>
		} else if(!AT_Return("+CEREG: 0,4", 0)) {
 80038d6:	2100      	movs	r1, #0
 80038d8:	481d      	ldr	r0, [pc, #116]	; (8003950 <GET_LNW_State+0x120>)
 80038da:	f7ff fbd5 	bl	8003088 <AT_Return>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d105      	bne.n	80038f0 <GET_LNW_State+0xc0>
			ret = 1; printf("Network_Register_UKE.\r\n");
 80038e4:	2301      	movs	r3, #1
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	481a      	ldr	r0, [pc, #104]	; (8003954 <GET_LNW_State+0x124>)
 80038ea:	f004 fd29 	bl	8008340 <puts>
 80038ee:	e00b      	b.n	8003908 <GET_LNW_State+0xd8>
		} else if(!AT_Return("+CEREG: 0,4", 0)) {
 80038f0:	2100      	movs	r1, #0
 80038f2:	4817      	ldr	r0, [pc, #92]	; (8003950 <GET_LNW_State+0x120>)
 80038f4:	f7ff fbc8 	bl	8003088 <AT_Return>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d104      	bne.n	8003908 <GET_LNW_State+0xd8>
			ret = 0; printf("Network_roaming.\r\n");
 80038fe:	2300      	movs	r3, #0
 8003900:	607b      	str	r3, [r7, #4]
 8003902:	4815      	ldr	r0, [pc, #84]	; (8003958 <GET_LNW_State+0x128>)
 8003904:	f004 fd1c 	bl	8008340 <puts>
		}
	} Buff_clear(&tok); return ret;
 8003908:	4803      	ldr	r0, [pc, #12]	; (8003918 <GET_LNW_State+0xe8>)
 800390a:	f7ff fbf1 	bl	80030f0 <Buff_clear>
 800390e:	687b      	ldr	r3, [r7, #4]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20003e58 	.word	0x20003e58
 800391c:	0800a834 	.word	0x0800a834
 8003920:	20003e79 	.word	0x20003e79
 8003924:	0800a7fc 	.word	0x0800a7fc
 8003928:	20005279 	.word	0x20005279
 800392c:	0800a840 	.word	0x0800a840
 8003930:	0800a844 	.word	0x0800a844
 8003934:	0800a850 	.word	0x0800a850
 8003938:	0800a868 	.word	0x0800a868
 800393c:	0800a874 	.word	0x0800a874
 8003940:	0800a88c 	.word	0x0800a88c
 8003944:	0800a898 	.word	0x0800a898
 8003948:	0800a8b0 	.word	0x0800a8b0
 800394c:	0800a8bc 	.word	0x0800a8bc
 8003950:	0800a8d4 	.word	0x0800a8d4
 8003954:	0800a8e0 	.word	0x0800a8e0
 8003958:	0800a8f8 	.word	0x0800a8f8

0800395c <GET_LNW_Adhere>:

int GET_LNW_Adhere(void) {
 800395c:	b598      	push	{r3, r4, r7, lr}
 800395e:	af00      	add	r7, sp, #0
	strcpy(tok.name,"AT+CGATT");
 8003960:	4a14      	ldr	r2, [pc, #80]	; (80039b4 <GET_LNW_Adhere+0x58>)
 8003962:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <GET_LNW_Adhere+0x5c>)
 8003964:	cb03      	ldmia	r3!, {r0, r1}
 8003966:	6010      	str	r0, [r2, #0]
 8003968:	6051      	str	r1, [r2, #4]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	7213      	strb	r3, [r2, #8]
	tok.num = 1;
 800396e:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <GET_LNW_Adhere+0x58>)
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2020 	strb.w	r2, [r3, #32]
	strcpy(tok.sendstr[0],"?");
 8003976:	4a11      	ldr	r2, [pc, #68]	; (80039bc <GET_LNW_Adhere+0x60>)
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <GET_LNW_Adhere+0x64>)
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	8013      	strh	r3, [r2, #0]
	strcpy(tok.ret,"+CGATT: 1\r\n");
 800397e:	4a11      	ldr	r2, [pc, #68]	; (80039c4 <GET_LNW_Adhere+0x68>)
 8003980:	4b11      	ldr	r3, [pc, #68]	; (80039c8 <GET_LNW_Adhere+0x6c>)
 8003982:	4614      	mov	r4, r2
 8003984:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003986:	6020      	str	r0, [r4, #0]
 8003988:	6061      	str	r1, [r4, #4]
 800398a:	60a2      	str	r2, [r4, #8]
	if(AT_CMD_Dispose(&tok)) {
 800398c:	4809      	ldr	r0, [pc, #36]	; (80039b4 <GET_LNW_Adhere+0x58>)
 800398e:	f7ff fa59 	bl	8002e44 <AT_CMD_Dispose>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d007      	beq.n	80039a8 <GET_LNW_Adhere+0x4c>
		printf("Network unattached.\r\n");
 8003998:	480c      	ldr	r0, [pc, #48]	; (80039cc <GET_LNW_Adhere+0x70>)
 800399a:	f004 fcd1 	bl	8008340 <puts>
		Buff_clear(&tok); return 1;
 800399e:	4805      	ldr	r0, [pc, #20]	; (80039b4 <GET_LNW_Adhere+0x58>)
 80039a0:	f7ff fba6 	bl	80030f0 <Buff_clear>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e003      	b.n	80039b0 <GET_LNW_Adhere+0x54>
	} Buff_clear(&tok); return 0;
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <GET_LNW_Adhere+0x58>)
 80039aa:	f7ff fba1 	bl	80030f0 <Buff_clear>
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd98      	pop	{r3, r4, r7, pc}
 80039b4:	20003e58 	.word	0x20003e58
 80039b8:	0800a90c 	.word	0x0800a90c
 80039bc:	20003e79 	.word	0x20003e79
 80039c0:	0800a7fc 	.word	0x0800a7fc
 80039c4:	20005279 	.word	0x20005279
 80039c8:	0800a918 	.word	0x0800a918
 80039cc:	0800a924 	.word	0x0800a924

080039d0 <lte_init>:

int lte_init(void) {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
	if(Read_SIM_Card()) return 1;
 80039d4:	f7ff fee6 	bl	80037a4 <Read_SIM_Card>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <lte_init+0x12>
 80039de:	2301      	movs	r3, #1
 80039e0:	e00e      	b.n	8003a00 <lte_init+0x30>
	if(GET_LNW_State()) return 2;
 80039e2:	f7ff ff25 	bl	8003830 <GET_LNW_State>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <lte_init+0x20>
 80039ec:	2302      	movs	r3, #2
 80039ee:	e007      	b.n	8003a00 <lte_init+0x30>
	if(GET_LNW_Adhere()) return 3;
 80039f0:	f7ff ffb4 	bl	800395c <GET_LNW_Adhere>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <lte_init+0x2e>
 80039fa:	2303      	movs	r3, #3
 80039fc:	e000      	b.n	8003a00 <lte_init+0x30>
	return 0;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <intToString>:

#include <MQTT/utility.h>
#include <stdio.h>
#include <string.h>

void intToString (u16 n, u8 *str) {
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	6039      	str	r1, [r7, #0]
 8003a0e:	80fb      	strh	r3, [r7, #6]
	u8 len = 0; u16 tmp = n;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	81bb      	strh	r3, [r7, #12]
	while (tmp/=10) {++ len;}
 8003a18:	e002      	b.n	8003a20 <intToString+0x1c>
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	73fb      	strb	r3, [r7, #15]
 8003a20:	89bb      	ldrh	r3, [r7, #12]
 8003a22:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <intToString+0x78>)
 8003a24:	fba2 2303 	umull	r2, r3, r2, r3
 8003a28:	08db      	lsrs	r3, r3, #3
 8003a2a:	81bb      	strh	r3, [r7, #12]
 8003a2c:	89bb      	ldrh	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f3      	bne.n	8003a1a <intToString+0x16>
	do {str[len --] = n%10+'0';}
 8003a32:	88fa      	ldrh	r2, [r7, #6]
 8003a34:	4b11      	ldr	r3, [pc, #68]	; (8003a7c <intToString+0x78>)
 8003a36:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3a:	08d9      	lsrs	r1, r3, #3
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	1e59      	subs	r1, r3, #1
 8003a4e:	73f9      	strb	r1, [r7, #15]
 8003a50:	4619      	mov	r1, r3
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	440b      	add	r3, r1
 8003a56:	3230      	adds	r2, #48	; 0x30
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]
	while (n/=10); return;
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	4a07      	ldr	r2, [pc, #28]	; (8003a7c <intToString+0x78>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	80fb      	strh	r3, [r7, #6]
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1e1      	bne.n	8003a32 <intToString+0x2e>
 8003a6e:	bf00      	nop
}
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	cccccccd 	.word	0xcccccccd

08003a80 <stringToInt>:

int stringToInt (char *str) {
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
	int ret = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
	while (*str ^ '\0') {
 8003a8c:	e011      	b.n	8003ab2 <stringToInt+0x32>
		ret = (ret<<1) + (ret<<3);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	005a      	lsls	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4413      	add	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
		ret += *str ^ '0';
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	60fb      	str	r3, [r7, #12]
		str ++;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	607b      	str	r3, [r7, #4]
	while (*str ^ '\0') {
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1e9      	bne.n	8003a8e <stringToInt+0xe>
	} return ret;
 8003aba:	68fb      	ldr	r3, [r7, #12]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <stringCapitalize>:
	int ret = 1;
	while (a /= 10) ++ ret;
	return ret;
}

void stringCapitalize (char *dest, char *str) {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
	int pos = 0, len = strlen (str);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
 8003ad6:	6838      	ldr	r0, [r7, #0]
 8003ad8:	f7fc fb8c 	bl	80001f4 <strlen>
 8003adc:	4603      	mov	r3, r0
 8003ade:	60bb      	str	r3, [r7, #8]
	for (; pos<len; ++ pos) {
 8003ae0:	e021      	b.n	8003b26 <stringCapitalize+0x5e>
		if (str[pos]<='z' && str[pos]>='a') dest[pos]=str[pos]-32;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b7a      	cmp	r3, #122	; 0x7a
 8003aec:	d810      	bhi.n	8003b10 <stringCapitalize+0x48>
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2b60      	cmp	r3, #96	; 0x60
 8003af8:	d90a      	bls.n	8003b10 <stringCapitalize+0x48>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	781a      	ldrb	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	440b      	add	r3, r1
 8003b08:	3a20      	subs	r2, #32
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e007      	b.n	8003b20 <stringCapitalize+0x58>
		else dest[pos] = str[pos];
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	441a      	add	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	440b      	add	r3, r1
 8003b1c:	7812      	ldrb	r2, [r2, #0]
 8003b1e:	701a      	strb	r2, [r3, #0]
	for (; pos<len; ++ pos) {
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3301      	adds	r3, #1
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	dbd9      	blt.n	8003ae2 <stringCapitalize+0x1a>
	} dest[pos] = '\0';
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	4413      	add	r3, r2
 8003b34:	2200      	movs	r2, #0
 8003b36:	701a      	strb	r2, [r3, #0]
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <strToHex>:

int num[2048];
const char hex[16]={'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

void strToHex (char *dst, char *src) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
	int len = strlen(src), i, pos = 0, top = 0;
 8003b4a:	6838      	ldr	r0, [r7, #0]
 8003b4c:	f7fc fb52 	bl	80001f4 <strlen>
 8003b50:	4603      	mov	r3, r0
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	2300      	movs	r3, #0
 8003b56:	61bb      	str	r3, [r7, #24]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]
	char tmp;
	for (i=0; i<len; ++ i) {
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61fb      	str	r3, [r7, #28]
 8003b60:	e030      	b.n	8003bc4 <strToHex+0x84>
		tmp = src[i], top = 0;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	683a      	ldr	r2, [r7, #0]
 8003b66:	4413      	add	r3, r2
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	74fb      	strb	r3, [r7, #19]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	617b      	str	r3, [r7, #20]
		while (tmp) {
 8003b70:	e00b      	b.n	8003b8a <strToHex+0x4a>
			num[top ++] = tmp % 16;
 8003b72:	7cfa      	ldrb	r2, [r7, #19]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1c59      	adds	r1, r3, #1
 8003b78:	6179      	str	r1, [r7, #20]
 8003b7a:	f002 020f 	and.w	r2, r2, #15
 8003b7e:	4918      	ldr	r1, [pc, #96]	; (8003be0 <strToHex+0xa0>)
 8003b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			tmp >>= 4;
 8003b84:	7cfb      	ldrb	r3, [r7, #19]
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	74fb      	strb	r3, [r7, #19]
		while (tmp) {
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <strToHex+0x32>
		} for (top=top-1; top>=0; -- top) dst[pos ++] = hex[num[top]];
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e00f      	b.n	8003bb8 <strToHex+0x78>
 8003b98:	4a11      	ldr	r2, [pc, #68]	; (8003be0 <strToHex+0xa0>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	61b9      	str	r1, [r7, #24]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	440b      	add	r3, r1
 8003bac:	490d      	ldr	r1, [pc, #52]	; (8003be4 <strToHex+0xa4>)
 8003bae:	5c8a      	ldrb	r2, [r1, r2]
 8003bb0:	701a      	strb	r2, [r3, #0]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	daec      	bge.n	8003b98 <strToHex+0x58>
	for (i=0; i<len; ++ i) {
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	61fb      	str	r3, [r7, #28]
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	dbca      	blt.n	8003b62 <strToHex+0x22>
	} dst[pos] = '\0';
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	2000557c 	.word	0x2000557c
 8003be4:	0800a980 	.word	0x0800a980

08003be8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8003bf0:	1d39      	adds	r1, r7, #4
 8003bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	4803      	ldr	r0, [pc, #12]	; (8003c08 <__io_putchar+0x20>)
 8003bfa:	f002 fc08 	bl	800640e <HAL_UART_Transmit>
	return ch;
 8003bfe:	687b      	ldr	r3, [r7, #4]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	200005a4 	.word	0x200005a4

08003c0c <GPS_decode>:
nmea_utc_time          NMEAutctime;
nmea_msg           	   NMEAmsg;
gps_data               NMEAdata;
dataPoints             DP;

void GPS_decode (void) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0

	HAL_UART_Receive(&huart2, gps_uart, sizeof(gps_uart), GPS_Delay_Time);
 8003c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c18:	4922      	ldr	r1, [pc, #136]	; (8003ca4 <GPS_decode+0x98>)
 8003c1a:	4823      	ldr	r0, [pc, #140]	; (8003ca8 <GPS_decode+0x9c>)
 8003c1c:	f002 fc90 	bl	8006540 <HAL_UART_Receive>

	#ifdef SerialGPSdebug
		//printf("USART data:\r\n%s\r\n", gps_uart);
	#endif

	NMEA_GPGGA_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8003c20:	4920      	ldr	r1, [pc, #128]	; (8003ca4 <GPS_decode+0x98>)
 8003c22:	4822      	ldr	r0, [pc, #136]	; (8003cac <GPS_decode+0xa0>)
 8003c24:	f7fd fafe 	bl	8001224 <NMEA_GPGGA_Analysis>

	if (!NMEAmsg.gpssta) {
 8003c28:	4b20      	ldr	r3, [pc, #128]	; (8003cac <GPS_decode+0xa0>)
 8003c2a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d108      	bne.n	8003c44 <GPS_decode+0x38>
		LED_GPSRFS_ON();
 8003c32:	2201      	movs	r2, #1
 8003c34:	2180      	movs	r1, #128	; 0x80
 8003c36:	481e      	ldr	r0, [pc, #120]	; (8003cb0 <GPS_decode+0xa4>)
 8003c38:	f000 ff78 	bl	8004b2c <HAL_GPIO_WritePin>
		#ifdef SerialDebug
			printf("** GPS NO SIGNAL **\r\n");
 8003c3c:	481d      	ldr	r0, [pc, #116]	; (8003cb4 <GPS_decode+0xa8>)
 8003c3e:	f004 fb7f 	bl	8008340 <puts>
			printf("Lat: %.6f, Log: %.6f, Spd: %.6f\r\n", NMEAdata.latitude, NMEAdata.longitude, NMEAdata.speed);
		#endif

		LED_GPSRFS_OFF();
	}
}
 8003c42:	e02d      	b.n	8003ca0 <GPS_decode+0x94>
		LED_GPSRFS_ON();
 8003c44:	2201      	movs	r2, #1
 8003c46:	2180      	movs	r1, #128	; 0x80
 8003c48:	4819      	ldr	r0, [pc, #100]	; (8003cb0 <GPS_decode+0xa4>)
 8003c4a:	f000 ff6f 	bl	8004b2c <HAL_GPIO_WritePin>
		NMEA_GPRMC_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8003c4e:	4915      	ldr	r1, [pc, #84]	; (8003ca4 <GPS_decode+0x98>)
 8003c50:	4816      	ldr	r0, [pc, #88]	; (8003cac <GPS_decode+0xa0>)
 8003c52:	f7fd fb37 	bl	80012c4 <NMEA_GPRMC_Analysis>
		NMEA_GPGSA_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8003c56:	4913      	ldr	r1, [pc, #76]	; (8003ca4 <GPS_decode+0x98>)
 8003c58:	4814      	ldr	r0, [pc, #80]	; (8003cac <GPS_decode+0xa0>)
 8003c5a:	f7fd fb0b 	bl	8001274 <NMEA_GPGSA_Analysis>
		NMEA_GPVTG_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8003c5e:	4911      	ldr	r1, [pc, #68]	; (8003ca4 <GPS_decode+0x98>)
 8003c60:	4812      	ldr	r0, [pc, #72]	; (8003cac <GPS_decode+0xa0>)
 8003c62:	f7fd faa1 	bl	80011a8 <NMEA_GPVTG_Analysis>
		NMEA_GPRMC_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8003c66:	490f      	ldr	r1, [pc, #60]	; (8003ca4 <GPS_decode+0x98>)
 8003c68:	4810      	ldr	r0, [pc, #64]	; (8003cac <GPS_decode+0xa0>)
 8003c6a:	f7fd fb2b 	bl	80012c4 <NMEA_GPRMC_Analysis>
		NMEA_GPS_DATA_PHRASE(&NMEAmsg, &NMEAdata);
 8003c6e:	4912      	ldr	r1, [pc, #72]	; (8003cb8 <GPS_decode+0xac>)
 8003c70:	480e      	ldr	r0, [pc, #56]	; (8003cac <GPS_decode+0xa0>)
 8003c72:	f7fd fc75 	bl	8001560 <NMEA_GPS_DATA_PHRASE>
		DP.latitude  = NMEAdata.latitude;
 8003c76:	4b10      	ldr	r3, [pc, #64]	; (8003cb8 <GPS_decode+0xac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a10      	ldr	r2, [pc, #64]	; (8003cbc <GPS_decode+0xb0>)
 8003c7c:	6013      	str	r3, [r2, #0]
		DP.longitude = NMEAdata.longitude;
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <GPS_decode+0xac>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <GPS_decode+0xb0>)
 8003c84:	6053      	str	r3, [r2, #4]
		DP.speed     = NMEAdata.speed;
 8003c86:	4b0c      	ldr	r3, [pc, #48]	; (8003cb8 <GPS_decode+0xac>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <GPS_decode+0xb0>)
 8003c8c:	6093      	str	r3, [r2, #8]
		DP.pdop      = NMEAdata.pdop;
 8003c8e:	4b0a      	ldr	r3, [pc, #40]	; (8003cb8 <GPS_decode+0xac>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <GPS_decode+0xb0>)
 8003c94:	60d3      	str	r3, [r2, #12]
		LED_GPSRFS_OFF();
 8003c96:	2200      	movs	r2, #0
 8003c98:	2180      	movs	r1, #128	; 0x80
 8003c9a:	4805      	ldr	r0, [pc, #20]	; (8003cb0 <GPS_decode+0xa4>)
 8003c9c:	f000 ff46 	bl	8004b2c <HAL_GPIO_WritePin>
}
 8003ca0:	bf00      	nop
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20007600 	.word	0x20007600
 8003ca8:	20000624 	.word	0x20000624
 8003cac:	2000757c 	.word	0x2000757c
 8003cb0:	40020000 	.word	0x40020000
 8003cb4:	0800a93c 	.word	0x0800a93c
 8003cb8:	200075e8 	.word	0x200075e8
 8003cbc:	20008990 	.word	0x20008990

08003cc0 <main>:

#undef GPS_Delay_Time

// main

signed main(void) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0

	HAL_Init();
 8003cc4:	f000 fbe8 	bl	8004498 <HAL_Init>

	SystemClock_Config();
 8003cc8:	f000 f846 	bl	8003d58 <SystemClock_Config>

	MX_GPIO_Init();
 8003ccc:	f000 f94e 	bl	8003f6c <MX_GPIO_Init>
	MX_I2C1_Init();
 8003cd0:	f000 f8a0 	bl	8003e14 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8003cd4:	f000 f8f6 	bl	8003ec4 <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 8003cd8:	f000 f91e 	bl	8003f18 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 8003cdc:	f000 f8c8 	bl	8003e70 <MX_USART1_UART_Init>

	accidentMonitorSetup();
 8003ce0:	f7fd fd6e 	bl	80017c0 <accidentMonitorSetup>

	LED_OUTPUT_INIT();
 8003ce4:	f7fd fcd6 	bl	8001694 <LED_OUTPUT_INIT>
	LED_PC13_INIT();
 8003ce8:	f7fd fc86 	bl	80015f8 <LED_PC13_INIT>

	LED_OUTPUT_TEST();
 8003cec:	f7fd fd38 	bl	8001760 <LED_OUTPUT_TEST>

	HAL_UART_Receive_IT(&huart2, &gps_init, 1);
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	4912      	ldr	r1, [pc, #72]	; (8003d3c <main+0x7c>)
 8003cf4:	4812      	ldr	r0, [pc, #72]	; (8003d40 <main+0x80>)
 8003cf6:	f002 fd0e 	bl	8006716 <HAL_UART_Receive_IT>
		printf("\r\nFLOAT TEST\r\n%f\r\n", nnnnn);
		nnnnn = 1919.810;
		printf("%f\r\n\r\n", nnnnn);
	#endif

	LED_DATUPD_ON();
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2140      	movs	r1, #64	; 0x40
 8003cfe:	4811      	ldr	r0, [pc, #68]	; (8003d44 <main+0x84>)
 8003d00:	f000 ff14 	bl	8004b2c <HAL_GPIO_WritePin>
	while (Query_Signal_Quality()) {
 8003d04:	e006      	b.n	8003d14 <main+0x54>
		printf("Searching Signal...\r\n");
 8003d06:	4810      	ldr	r0, [pc, #64]	; (8003d48 <main+0x88>)
 8003d08:	f004 fb1a 	bl	8008340 <puts>
		HAL_Delay(1000);
 8003d0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d10:	f000 fc34 	bl	800457c <HAL_Delay>
	while (Query_Signal_Quality()) {
 8003d14:	f7ff fcd4 	bl	80036c0 <Query_Signal_Quality>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f3      	bne.n	8003d06 <main+0x46>
	} printf("Signal Success.\r\n");
 8003d1e:	480b      	ldr	r0, [pc, #44]	; (8003d4c <main+0x8c>)
 8003d20:	f004 fb0e 	bl	8008340 <puts>

	while (1) {
		GPS_decode();
 8003d24:	f7ff ff72 	bl	8003c0c <GPS_decode>
		DP.flag = accidentJudge(&NMEAdata);
 8003d28:	4809      	ldr	r0, [pc, #36]	; (8003d50 <main+0x90>)
 8003d2a:	f7fd fd6f 	bl	800180c <accidentJudge>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <main+0x94>)
 8003d32:	611a      	str	r2, [r3, #16]
		ONENET_MQTT(&DP);
 8003d34:	4807      	ldr	r0, [pc, #28]	; (8003d54 <main+0x94>)
 8003d36:	f7ff fc75 	bl	8003624 <ONENET_MQTT>
		GPS_decode();
 8003d3a:	e7f3      	b.n	8003d24 <main+0x64>
 8003d3c:	200075fd 	.word	0x200075fd
 8003d40:	20000624 	.word	0x20000624
 8003d44:	40020000 	.word	0x40020000
 8003d48:	0800a954 	.word	0x0800a954
 8003d4c:	0800a96c 	.word	0x0800a96c
 8003d50:	200075e8 	.word	0x200075e8
 8003d54:	20008990 	.word	0x20008990

08003d58 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b094      	sub	sp, #80	; 0x50
 8003d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d5e:	f107 0320 	add.w	r3, r7, #32
 8003d62:	2230      	movs	r2, #48	; 0x30
 8003d64:	2100      	movs	r1, #0
 8003d66:	4618      	mov	r0, r3
 8003d68:	f003 fe12 	bl	8007990 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d6c:	f107 030c 	add.w	r3, r7, #12
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	60da      	str	r2, [r3, #12]
 8003d7a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	60bb      	str	r3, [r7, #8]
 8003d80:	4b22      	ldr	r3, [pc, #136]	; (8003e0c <SystemClock_Config+0xb4>)
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <SystemClock_Config+0xb4>)
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8c:	4b1f      	ldr	r3, [pc, #124]	; (8003e0c <SystemClock_Config+0xb4>)
 8003d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d98:	2300      	movs	r3, #0
 8003d9a:	607b      	str	r3, [r7, #4]
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <SystemClock_Config+0xb8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a1b      	ldr	r2, [pc, #108]	; (8003e10 <SystemClock_Config+0xb8>)
 8003da2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003da6:	6013      	str	r3, [r2, #0]
 8003da8:	4b19      	ldr	r3, [pc, #100]	; (8003e10 <SystemClock_Config+0xb8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003db4:	2302      	movs	r3, #2
 8003db6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003db8:	2301      	movs	r3, #1
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003dbc:	2310      	movs	r3, #16
 8003dbe:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003dc4:	f107 0320 	add.w	r3, r7, #32
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fe97 	bl	8005afc <HAL_RCC_OscConfig>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <SystemClock_Config+0x80>
		Error_Handler();
 8003dd4:	f000 f8f2 	bl	8003fbc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dd8:	230f      	movs	r3, #15
 8003dda:	60fb      	str	r3, [r7, #12]
															|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003de0:	2300      	movs	r3, #0
 8003de2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8003dec:	f107 030c 	add.w	r3, r7, #12
 8003df0:	2100      	movs	r1, #0
 8003df2:	4618      	mov	r0, r3
 8003df4:	f002 f8f2 	bl	8005fdc <HAL_RCC_ClockConfig>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <SystemClock_Config+0xaa>
		Error_Handler();
 8003dfe:	f000 f8dd 	bl	8003fbc <Error_Handler>
	}
}
 8003e02:	bf00      	nop
 8003e04:	3750      	adds	r7, #80	; 0x50
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40007000 	.word	0x40007000

08003e14 <MX_I2C1_Init>:
/**
	* @brief I2C1 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_I2C1_Init(void) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e1a:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <MX_I2C1_Init+0x54>)
 8003e1c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e20:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <MX_I2C1_Init+0x58>)
 8003e22:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003e24:	4b0f      	ldr	r3, [pc, #60]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003e2a:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003e36:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003e3e:	4b09      	ldr	r3, [pc, #36]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003e44:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003e50:	4804      	ldr	r0, [pc, #16]	; (8003e64 <MX_I2C1_Init+0x50>)
 8003e52:	f000 fe9f 	bl	8004b94 <HAL_I2C_Init>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8003e5c:	f000 f8ae 	bl	8003fbc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000550 	.word	0x20000550
 8003e68:	40005400 	.word	0x40005400
 8003e6c:	00061a80 	.word	0x00061a80

08003e70 <MX_USART1_UART_Init>:
/**
	* @brief USART1 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART1_UART_Init(void) {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8003e74:	4b11      	ldr	r3, [pc, #68]	; (8003ebc <MX_USART1_UART_Init+0x4c>)
 8003e76:	4a12      	ldr	r2, [pc, #72]	; (8003ec0 <MX_USART1_UART_Init+0x50>)
 8003e78:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8003e7a:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <MX_USART1_UART_Init+0x4c>)
 8003e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003e80:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003e82:	4b0e      	ldr	r3, [pc, #56]	; (8003ebc <MX_USART1_UART_Init+0x4c>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <MX_USART1_UART_Init+0x4c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	; (8003ebc <MX_USART1_UART_Init+0x4c>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003e94:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <MX_USART1_UART_Init+0x4c>)
 8003e96:	220c      	movs	r2, #12
 8003e98:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003e9a:	4b08      	ldr	r3, [pc, #32]	; (8003ebc <MX_USART1_UART_Init+0x4c>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <MX_USART1_UART_Init+0x4c>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ea6:	4805      	ldr	r0, [pc, #20]	; (8003ebc <MX_USART1_UART_Init+0x4c>)
 8003ea8:	f002 fa64 	bl	8006374 <HAL_UART_Init>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8003eb2:	f000 f883 	bl	8003fbc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8003eb6:	bf00      	nop
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	200005a4 	.word	0x200005a4
 8003ec0:	40011000 	.word	0x40011000

08003ec4 <MX_USART2_UART_Init>:
/**
	* @brief USART2 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART2_UART_Init(void) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003ec8:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <MX_USART2_UART_Init+0x4c>)
 8003eca:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <MX_USART2_UART_Init+0x50>)
 8003ecc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <MX_USART2_UART_Init+0x4c>)
 8003ed0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003ed4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <MX_USART2_UART_Init+0x4c>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003edc:	4b0c      	ldr	r3, [pc, #48]	; (8003f10 <MX_USART2_UART_Init+0x4c>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	; (8003f10 <MX_USART2_UART_Init+0x4c>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003ee8:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <MX_USART2_UART_Init+0x4c>)
 8003eea:	220c      	movs	r2, #12
 8003eec:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003eee:	4b08      	ldr	r3, [pc, #32]	; (8003f10 <MX_USART2_UART_Init+0x4c>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ef4:	4b06      	ldr	r3, [pc, #24]	; (8003f10 <MX_USART2_UART_Init+0x4c>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003efa:	4805      	ldr	r0, [pc, #20]	; (8003f10 <MX_USART2_UART_Init+0x4c>)
 8003efc:	f002 fa3a 	bl	8006374 <HAL_UART_Init>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8003f06:	f000 f859 	bl	8003fbc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000624 	.word	0x20000624
 8003f14:	40004400 	.word	0x40004400

08003f18 <MX_USART6_UART_Init>:
/**
	* @brief USART6 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART6_UART_Init(void) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8003f1c:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <MX_USART6_UART_Init+0x4c>)
 8003f1e:	4a12      	ldr	r2, [pc, #72]	; (8003f68 <MX_USART6_UART_Init+0x50>)
 8003f20:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8003f22:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <MX_USART6_UART_Init+0x4c>)
 8003f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003f28:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <MX_USART6_UART_Init+0x4c>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8003f30:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <MX_USART6_UART_Init+0x4c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8003f36:	4b0b      	ldr	r3, [pc, #44]	; (8003f64 <MX_USART6_UART_Init+0x4c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <MX_USART6_UART_Init+0x4c>)
 8003f3e:	220c      	movs	r2, #12
 8003f40:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f42:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <MX_USART6_UART_Init+0x4c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <MX_USART6_UART_Init+0x4c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8003f4e:	4805      	ldr	r0, [pc, #20]	; (8003f64 <MX_USART6_UART_Init+0x4c>)
 8003f50:	f002 fa10 	bl	8006374 <HAL_UART_Init>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8003f5a:	f000 f82f 	bl	8003fbc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8003f5e:	bf00      	nop
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	200005e4 	.word	0x200005e4
 8003f68:	40011400 	.word	0x40011400

08003f6c <MX_GPIO_Init>:
/**
	* @brief GPIO Initialization Function
	* @param None
	* @retval None
	*/
static void MX_GPIO_Init(void) {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003f72:	2300      	movs	r3, #0
 8003f74:	607b      	str	r3, [r7, #4]
 8003f76:	4b10      	ldr	r3, [pc, #64]	; (8003fb8 <MX_GPIO_Init+0x4c>)
 8003f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7a:	4a0f      	ldr	r2, [pc, #60]	; (8003fb8 <MX_GPIO_Init+0x4c>)
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	6313      	str	r3, [r2, #48]	; 0x30
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <MX_GPIO_Init+0x4c>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	607b      	str	r3, [r7, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <MX_GPIO_Init+0x4c>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <MX_GPIO_Init+0x4c>)
 8003f98:	f043 0302 	orr.w	r3, r3, #2
 8003f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <MX_GPIO_Init+0x4c>)
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	603b      	str	r3, [r7, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]

}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800

08003fbc <Error_Handler>:

/**
	* @brief	This function is executed in case of error occurrence.
	* @retval None
	*/
void Error_Handler(void) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fc0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		LED_PC13_BLINK(1000);
 8003fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fc6:	f7fd fb4b 	bl	8001660 <LED_PC13_BLINK>
 8003fca:	e7fa      	b.n	8003fc2 <Error_Handler+0x6>

08003fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <HAL_MspInit+0x4c>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	4a0f      	ldr	r2, [pc, #60]	; (8004018 <HAL_MspInit+0x4c>)
 8003fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	; (8004018 <HAL_MspInit+0x4c>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	603b      	str	r3, [r7, #0]
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_MspInit+0x4c>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	4a08      	ldr	r2, [pc, #32]	; (8004018 <HAL_MspInit+0x4c>)
 8003ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_MspInit+0x4c>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	603b      	str	r3, [r7, #0]
 8004008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40023800 	.word	0x40023800

0800401c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08a      	sub	sp, #40	; 0x28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004024:	f107 0314 	add.w	r3, r7, #20
 8004028:	2200      	movs	r2, #0
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	60da      	str	r2, [r3, #12]
 8004032:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_I2C_MspInit+0x84>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d12b      	bne.n	8004096 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	4b18      	ldr	r3, [pc, #96]	; (80040a4 <HAL_I2C_MspInit+0x88>)
 8004044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004046:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <HAL_I2C_MspInit+0x88>)
 8004048:	f043 0302 	orr.w	r3, r3, #2
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_I2C_MspInit+0x88>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	613b      	str	r3, [r7, #16]
 8004058:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800405a:	23c0      	movs	r3, #192	; 0xc0
 800405c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800405e:	2312      	movs	r3, #18
 8004060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004062:	2301      	movs	r3, #1
 8004064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004066:	2303      	movs	r3, #3
 8004068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800406a:	2304      	movs	r3, #4
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800406e:	f107 0314 	add.w	r3, r7, #20
 8004072:	4619      	mov	r1, r3
 8004074:	480c      	ldr	r0, [pc, #48]	; (80040a8 <HAL_I2C_MspInit+0x8c>)
 8004076:	f000 fbd7 	bl	8004828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <HAL_I2C_MspInit+0x88>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <HAL_I2C_MspInit+0x88>)
 8004084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004088:	6413      	str	r3, [r2, #64]	; 0x40
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <HAL_I2C_MspInit+0x88>)
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004096:	bf00      	nop
 8004098:	3728      	adds	r7, #40	; 0x28
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	40005400 	.word	0x40005400
 80040a4:	40023800 	.word	0x40023800
 80040a8:	40020400 	.word	0x40020400

080040ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b08e      	sub	sp, #56	; 0x38
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	609a      	str	r2, [r3, #8]
 80040c0:	60da      	str	r2, [r3, #12]
 80040c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a58      	ldr	r2, [pc, #352]	; (800422c <HAL_UART_MspInit+0x180>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d135      	bne.n	800413a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	623b      	str	r3, [r7, #32]
 80040d2:	4b57      	ldr	r3, [pc, #348]	; (8004230 <HAL_UART_MspInit+0x184>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	4a56      	ldr	r2, [pc, #344]	; (8004230 <HAL_UART_MspInit+0x184>)
 80040d8:	f043 0310 	orr.w	r3, r3, #16
 80040dc:	6453      	str	r3, [r2, #68]	; 0x44
 80040de:	4b54      	ldr	r3, [pc, #336]	; (8004230 <HAL_UART_MspInit+0x184>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	623b      	str	r3, [r7, #32]
 80040e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	4b50      	ldr	r3, [pc, #320]	; (8004230 <HAL_UART_MspInit+0x184>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	4a4f      	ldr	r2, [pc, #316]	; (8004230 <HAL_UART_MspInit+0x184>)
 80040f4:	f043 0301 	orr.w	r3, r3, #1
 80040f8:	6313      	str	r3, [r2, #48]	; 0x30
 80040fa:	4b4d      	ldr	r3, [pc, #308]	; (8004230 <HAL_UART_MspInit+0x184>)
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
 8004104:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004106:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800410c:	2302      	movs	r3, #2
 800410e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004110:	2300      	movs	r3, #0
 8004112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004114:	2303      	movs	r3, #3
 8004116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004118:	2307      	movs	r3, #7
 800411a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800411c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004120:	4619      	mov	r1, r3
 8004122:	4844      	ldr	r0, [pc, #272]	; (8004234 <HAL_UART_MspInit+0x188>)
 8004124:	f000 fb80 	bl	8004828 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004128:	2200      	movs	r2, #0
 800412a:	2100      	movs	r1, #0
 800412c:	2025      	movs	r0, #37	; 0x25
 800412e:	f000 fb22 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004132:	2025      	movs	r0, #37	; 0x25
 8004134:	f000 fb3b 	bl	80047ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004138:	e073      	b.n	8004222 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a3e      	ldr	r2, [pc, #248]	; (8004238 <HAL_UART_MspInit+0x18c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d134      	bne.n	80041ae <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004144:	2300      	movs	r3, #0
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <HAL_UART_MspInit+0x184>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	4a38      	ldr	r2, [pc, #224]	; (8004230 <HAL_UART_MspInit+0x184>)
 800414e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004152:	6413      	str	r3, [r2, #64]	; 0x40
 8004154:	4b36      	ldr	r3, [pc, #216]	; (8004230 <HAL_UART_MspInit+0x184>)
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	4b32      	ldr	r3, [pc, #200]	; (8004230 <HAL_UART_MspInit+0x184>)
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	4a31      	ldr	r2, [pc, #196]	; (8004230 <HAL_UART_MspInit+0x184>)
 800416a:	f043 0301 	orr.w	r3, r3, #1
 800416e:	6313      	str	r3, [r2, #48]	; 0x30
 8004170:	4b2f      	ldr	r3, [pc, #188]	; (8004230 <HAL_UART_MspInit+0x184>)
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800417c:	230c      	movs	r3, #12
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004184:	2300      	movs	r3, #0
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004188:	2303      	movs	r3, #3
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800418c:	2307      	movs	r3, #7
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004194:	4619      	mov	r1, r3
 8004196:	4827      	ldr	r0, [pc, #156]	; (8004234 <HAL_UART_MspInit+0x188>)
 8004198:	f000 fb46 	bl	8004828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800419c:	2200      	movs	r2, #0
 800419e:	2100      	movs	r1, #0
 80041a0:	2026      	movs	r0, #38	; 0x26
 80041a2:	f000 fae8 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041a6:	2026      	movs	r0, #38	; 0x26
 80041a8:	f000 fb01 	bl	80047ae <HAL_NVIC_EnableIRQ>
}
 80041ac:	e039      	b.n	8004222 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a22      	ldr	r2, [pc, #136]	; (800423c <HAL_UART_MspInit+0x190>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d134      	bne.n	8004222 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]
 80041bc:	4b1c      	ldr	r3, [pc, #112]	; (8004230 <HAL_UART_MspInit+0x184>)
 80041be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c0:	4a1b      	ldr	r2, [pc, #108]	; (8004230 <HAL_UART_MspInit+0x184>)
 80041c2:	f043 0320 	orr.w	r3, r3, #32
 80041c6:	6453      	str	r3, [r2, #68]	; 0x44
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_UART_MspInit+0x184>)
 80041ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041cc:	f003 0320 	and.w	r3, r3, #32
 80041d0:	613b      	str	r3, [r7, #16]
 80041d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d4:	2300      	movs	r3, #0
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	4b15      	ldr	r3, [pc, #84]	; (8004230 <HAL_UART_MspInit+0x184>)
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	4a14      	ldr	r2, [pc, #80]	; (8004230 <HAL_UART_MspInit+0x184>)
 80041de:	f043 0301 	orr.w	r3, r3, #1
 80041e2:	6313      	str	r3, [r2, #48]	; 0x30
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_UART_MspInit+0x184>)
 80041e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80041f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f6:	2302      	movs	r3, #2
 80041f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041fa:	2300      	movs	r3, #0
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041fe:	2303      	movs	r3, #3
 8004200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004202:	2308      	movs	r3, #8
 8004204:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800420a:	4619      	mov	r1, r3
 800420c:	4809      	ldr	r0, [pc, #36]	; (8004234 <HAL_UART_MspInit+0x188>)
 800420e:	f000 fb0b 	bl	8004828 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8004212:	2200      	movs	r2, #0
 8004214:	2100      	movs	r1, #0
 8004216:	2047      	movs	r0, #71	; 0x47
 8004218:	f000 faad 	bl	8004776 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800421c:	2047      	movs	r0, #71	; 0x47
 800421e:	f000 fac6 	bl	80047ae <HAL_NVIC_EnableIRQ>
}
 8004222:	bf00      	nop
 8004224:	3738      	adds	r7, #56	; 0x38
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40011000 	.word	0x40011000
 8004230:	40023800 	.word	0x40023800
 8004234:	40020000 	.word	0x40020000
 8004238:	40004400 	.word	0x40004400
 800423c:	40011400 	.word	0x40011400

08004240 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004244:	e7fe      	b.n	8004244 <NMI_Handler+0x4>

08004246 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004246:	b480      	push	{r7}
 8004248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800424a:	e7fe      	b.n	800424a <HardFault_Handler+0x4>

0800424c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004250:	e7fe      	b.n	8004250 <MemManage_Handler+0x4>

08004252 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004252:	b480      	push	{r7}
 8004254:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004256:	e7fe      	b.n	8004256 <BusFault_Handler+0x4>

08004258 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800425c:	e7fe      	b.n	800425c <UsageFault_Handler+0x4>

0800425e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800425e:	b480      	push	{r7}
 8004260:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004270:	bf00      	nop
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800427a:	b480      	push	{r7}
 800427c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800428c:	f000 f956 	bl	800453c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}

08004294 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004298:	4802      	ldr	r0, [pc, #8]	; (80042a4 <USART1_IRQHandler+0x10>)
 800429a:	f002 fa91 	bl	80067c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800429e:	bf00      	nop
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	200005a4 	.word	0x200005a4

080042a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042ac:	4802      	ldr	r0, [pc, #8]	; (80042b8 <USART2_IRQHandler+0x10>)
 80042ae:	f002 fa87 	bl	80067c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042b2:	bf00      	nop
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	20000624 	.word	0x20000624

080042bc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80042c0:	4802      	ldr	r0, [pc, #8]	; (80042cc <USART6_IRQHandler+0x10>)
 80042c2:	f002 fa7d 	bl	80067c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200005e4 	.word	0x200005e4

080042d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	e00a      	b.n	80042f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80042e2:	f3af 8000 	nop.w
 80042e6:	4601      	mov	r1, r0
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	60ba      	str	r2, [r7, #8]
 80042ee:	b2ca      	uxtb	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	3301      	adds	r3, #1
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	dbf0      	blt.n	80042e2 <_read+0x12>
	}

return len;
 8004300:	687b      	ldr	r3, [r7, #4]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b086      	sub	sp, #24
 800430e:	af00      	add	r7, sp, #0
 8004310:	60f8      	str	r0, [r7, #12]
 8004312:	60b9      	str	r1, [r7, #8]
 8004314:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	e009      	b.n	8004330 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	60ba      	str	r2, [r7, #8]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff fc5f 	bl	8003be8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	429a      	cmp	r2, r3
 8004336:	dbf1      	blt.n	800431c <_write+0x12>
	}
	return len;
 8004338:	687b      	ldr	r3, [r7, #4]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3718      	adds	r7, #24
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <_close>:

int _close(int file)
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
	return -1;
 800434a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800436a:	605a      	str	r2, [r3, #4]
	return 0;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <_isatty>:

int _isatty(int file)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
	return 1;
 8004382:	2301      	movs	r3, #1
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
	return 0;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <_sbrk+0x5c>)
 80043b6:	4b15      	ldr	r3, [pc, #84]	; (800440c <_sbrk+0x60>)
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043c0:	4b13      	ldr	r3, [pc, #76]	; (8004410 <_sbrk+0x64>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d102      	bne.n	80043ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <_sbrk+0x64>)
 80043ca:	4a12      	ldr	r2, [pc, #72]	; (8004414 <_sbrk+0x68>)
 80043cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043ce:	4b10      	ldr	r3, [pc, #64]	; (8004410 <_sbrk+0x64>)
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4413      	add	r3, r2
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d207      	bcs.n	80043ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043dc:	f003 faae 	bl	800793c <__errno>
 80043e0:	4602      	mov	r2, r0
 80043e2:	230c      	movs	r3, #12
 80043e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80043e6:	f04f 33ff 	mov.w	r3, #4294967295
 80043ea:	e009      	b.n	8004400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043ec:	4b08      	ldr	r3, [pc, #32]	; (8004410 <_sbrk+0x64>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80043f2:	4b07      	ldr	r3, [pc, #28]	; (8004410 <_sbrk+0x64>)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	4a05      	ldr	r2, [pc, #20]	; (8004410 <_sbrk+0x64>)
 80043fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80043fe:	68fb      	ldr	r3, [r7, #12]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	20020000 	.word	0x20020000
 800440c:	00000400 	.word	0x00000400
 8004410:	20000544 	.word	0x20000544
 8004414:	200089b0 	.word	0x200089b0

08004418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800441c:	4b08      	ldr	r3, [pc, #32]	; (8004440 <SystemInit+0x28>)
 800441e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004422:	4a07      	ldr	r2, [pc, #28]	; (8004440 <SystemInit+0x28>)
 8004424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <SystemInit+0x28>)
 800442e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004432:	609a      	str	r2, [r3, #8]
#endif
}
 8004434:	bf00      	nop
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	e000ed00 	.word	0xe000ed00

08004444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800447c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004448:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800444a:	e003      	b.n	8004454 <LoopCopyDataInit>

0800444c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800444e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004450:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004452:	3104      	adds	r1, #4

08004454 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004454:	480b      	ldr	r0, [pc, #44]	; (8004484 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004458:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800445a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800445c:	d3f6      	bcc.n	800444c <CopyDataInit>
  ldr  r2, =_sbss
 800445e:	4a0b      	ldr	r2, [pc, #44]	; (800448c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004460:	e002      	b.n	8004468 <LoopFillZerobss>

08004462 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004462:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004464:	f842 3b04 	str.w	r3, [r2], #4

08004468 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800446a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800446c:	d3f9      	bcc.n	8004462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800446e:	f7ff ffd3 	bl	8004418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004472:	f003 fa69 	bl	8007948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004476:	f7ff fc23 	bl	8003cc0 <main>
  bx  lr    
 800447a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800447c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004480:	0800acc0 	.word	0x0800acc0
  ldr  r0, =_sdata
 8004484:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004488:	2000031c 	.word	0x2000031c
  ldr  r2, =_sbss
 800448c:	20000320 	.word	0x20000320
  ldr  r3, = _ebss
 8004490:	200089ac 	.word	0x200089ac

08004494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004494:	e7fe      	b.n	8004494 <ADC_IRQHandler>
	...

08004498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800449c:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <HAL_Init+0x40>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <HAL_Init+0x40>)
 80044a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80044a8:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_Init+0x40>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a0a      	ldr	r2, [pc, #40]	; (80044d8 <HAL_Init+0x40>)
 80044ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80044b4:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <HAL_Init+0x40>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a07      	ldr	r2, [pc, #28]	; (80044d8 <HAL_Init+0x40>)
 80044ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044c0:	2003      	movs	r0, #3
 80044c2:	f000 f94d 	bl	8004760 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044c6:	2000      	movs	r0, #0
 80044c8:	f000 f808 	bl	80044dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80044cc:	f7ff fd7e 	bl	8003fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023c00 	.word	0x40023c00

080044dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044e4:	4b12      	ldr	r3, [pc, #72]	; (8004530 <HAL_InitTick+0x54>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_InitTick+0x58>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	4619      	mov	r1, r3
 80044ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f965 	bl	80047ca <HAL_SYSTICK_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e00e      	b.n	8004528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b0f      	cmp	r3, #15
 800450e:	d80a      	bhi.n	8004526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004510:	2200      	movs	r2, #0
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	f000 f92d 	bl	8004776 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800451c:	4a06      	ldr	r2, [pc, #24]	; (8004538 <HAL_InitTick+0x5c>)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000140 	.word	0x20000140
 8004534:	20000148 	.word	0x20000148
 8004538:	20000144 	.word	0x20000144

0800453c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_IncTick+0x20>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_IncTick+0x24>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4413      	add	r3, r2
 800454c:	4a04      	ldr	r2, [pc, #16]	; (8004560 <HAL_IncTick+0x24>)
 800454e:	6013      	str	r3, [r2, #0]
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000148 	.word	0x20000148
 8004560:	200089a4 	.word	0x200089a4

08004564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return uwTick;
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <HAL_GetTick+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	200089a4 	.word	0x200089a4

0800457c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004584:	f7ff ffee 	bl	8004564 <HAL_GetTick>
 8004588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d005      	beq.n	80045a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_Delay+0x40>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045a2:	bf00      	nop
 80045a4:	f7ff ffde 	bl	8004564 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d8f7      	bhi.n	80045a4 <HAL_Delay+0x28>
  {
  }
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	20000148 	.word	0x20000148

080045c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045d0:	4b0c      	ldr	r3, [pc, #48]	; (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045dc:	4013      	ands	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80045e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80045ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80045f2:	4a04      	ldr	r2, [pc, #16]	; (8004604 <__NVIC_SetPriorityGrouping+0x44>)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	60d3      	str	r3, [r2, #12]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <__NVIC_GetPriorityGrouping+0x18>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0a1b      	lsrs	r3, r3, #8
 8004612:	f003 0307 	and.w	r3, r3, #7
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	4603      	mov	r3, r0
 800462c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004632:	2b00      	cmp	r3, #0
 8004634:	db0b      	blt.n	800464e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	f003 021f 	and.w	r2, r3, #31
 800463c:	4907      	ldr	r1, [pc, #28]	; (800465c <__NVIC_EnableIRQ+0x38>)
 800463e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	2001      	movs	r0, #1
 8004646:	fa00 f202 	lsl.w	r2, r0, r2
 800464a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	e000e100 	.word	0xe000e100

08004660 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	4603      	mov	r3, r0
 8004668:	6039      	str	r1, [r7, #0]
 800466a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800466c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004670:	2b00      	cmp	r3, #0
 8004672:	db0a      	blt.n	800468a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	b2da      	uxtb	r2, r3
 8004678:	490c      	ldr	r1, [pc, #48]	; (80046ac <__NVIC_SetPriority+0x4c>)
 800467a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467e:	0112      	lsls	r2, r2, #4
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	440b      	add	r3, r1
 8004684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004688:	e00a      	b.n	80046a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2da      	uxtb	r2, r3
 800468e:	4908      	ldr	r1, [pc, #32]	; (80046b0 <__NVIC_SetPriority+0x50>)
 8004690:	79fb      	ldrb	r3, [r7, #7]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3b04      	subs	r3, #4
 8004698:	0112      	lsls	r2, r2, #4
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	440b      	add	r3, r1
 800469e:	761a      	strb	r2, [r3, #24]
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr
 80046ac:	e000e100 	.word	0xe000e100
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	; 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	f1c3 0307 	rsb	r3, r3, #7
 80046ce:	2b04      	cmp	r3, #4
 80046d0:	bf28      	it	cs
 80046d2:	2304      	movcs	r3, #4
 80046d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	3304      	adds	r3, #4
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d902      	bls.n	80046e4 <NVIC_EncodePriority+0x30>
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	3b03      	subs	r3, #3
 80046e2:	e000      	b.n	80046e6 <NVIC_EncodePriority+0x32>
 80046e4:	2300      	movs	r3, #0
 80046e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046e8:	f04f 32ff 	mov.w	r2, #4294967295
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	fa02 f303 	lsl.w	r3, r2, r3
 80046f2:	43da      	mvns	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	401a      	ands	r2, r3
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80046fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	fa01 f303 	lsl.w	r3, r1, r3
 8004706:	43d9      	mvns	r1, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800470c:	4313      	orrs	r3, r2
         );
}
 800470e:	4618      	mov	r0, r3
 8004710:	3724      	adds	r7, #36	; 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3b01      	subs	r3, #1
 8004728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472c:	d301      	bcc.n	8004732 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800472e:	2301      	movs	r3, #1
 8004730:	e00f      	b.n	8004752 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004732:	4a0a      	ldr	r2, [pc, #40]	; (800475c <SysTick_Config+0x40>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3b01      	subs	r3, #1
 8004738:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800473a:	210f      	movs	r1, #15
 800473c:	f04f 30ff 	mov.w	r0, #4294967295
 8004740:	f7ff ff8e 	bl	8004660 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004744:	4b05      	ldr	r3, [pc, #20]	; (800475c <SysTick_Config+0x40>)
 8004746:	2200      	movs	r2, #0
 8004748:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800474a:	4b04      	ldr	r3, [pc, #16]	; (800475c <SysTick_Config+0x40>)
 800474c:	2207      	movs	r2, #7
 800474e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	e000e010 	.word	0xe000e010

08004760 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff ff29 	bl	80045c0 <__NVIC_SetPriorityGrouping>
}
 800476e:	bf00      	nop
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004776:	b580      	push	{r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af00      	add	r7, sp, #0
 800477c:	4603      	mov	r3, r0
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004788:	f7ff ff3e 	bl	8004608 <__NVIC_GetPriorityGrouping>
 800478c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	6978      	ldr	r0, [r7, #20]
 8004794:	f7ff ff8e 	bl	80046b4 <NVIC_EncodePriority>
 8004798:	4602      	mov	r2, r0
 800479a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800479e:	4611      	mov	r1, r2
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff ff5d 	bl	8004660 <__NVIC_SetPriority>
}
 80047a6:	bf00      	nop
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b082      	sub	sp, #8
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	4603      	mov	r3, r0
 80047b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff ff31 	bl	8004624 <__NVIC_EnableIRQ>
}
 80047c2:	bf00      	nop
 80047c4:	3708      	adds	r7, #8
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b082      	sub	sp, #8
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ffa2 	bl	800471c <SysTick_Config>
 80047d8:	4603      	mov	r3, r0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d004      	beq.n	8004800 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e00c      	b.n	800481a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2205      	movs	r2, #5
 8004804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
	...

08004828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004828:	b480      	push	{r7}
 800482a:	b089      	sub	sp, #36	; 0x24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004836:	2300      	movs	r3, #0
 8004838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800483e:	2300      	movs	r3, #0
 8004840:	61fb      	str	r3, [r7, #28]
 8004842:	e159      	b.n	8004af8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004844:	2201      	movs	r2, #1
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4013      	ands	r3, r2
 8004856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	429a      	cmp	r2, r3
 800485e:	f040 8148 	bne.w	8004af2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d00b      	beq.n	8004882 <HAL_GPIO_Init+0x5a>
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b02      	cmp	r3, #2
 8004870:	d007      	beq.n	8004882 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004876:	2b11      	cmp	r3, #17
 8004878:	d003      	beq.n	8004882 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b12      	cmp	r3, #18
 8004880:	d130      	bne.n	80048e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	2203      	movs	r2, #3
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	69ba      	ldr	r2, [r7, #24]
 8004896:	4013      	ands	r3, r2
 8004898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	fa02 f303 	lsl.w	r3, r2, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	69ba      	ldr	r2, [r7, #24]
 80048b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048b8:	2201      	movs	r2, #1
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	fa02 f303 	lsl.w	r3, r2, r3
 80048c0:	43db      	mvns	r3, r3
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	4013      	ands	r3, r2
 80048c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 0201 	and.w	r2, r3, #1
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	4313      	orrs	r3, r2
 80048dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	005b      	lsls	r3, r3, #1
 80048ee:	2203      	movs	r2, #3
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	4313      	orrs	r3, r2
 800490c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b02      	cmp	r3, #2
 800491a:	d003      	beq.n	8004924 <HAL_GPIO_Init+0xfc>
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b12      	cmp	r3, #18
 8004922:	d123      	bne.n	800496c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	08da      	lsrs	r2, r3, #3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	3208      	adds	r2, #8
 800492c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	220f      	movs	r2, #15
 800493c:	fa02 f303 	lsl.w	r3, r2, r3
 8004940:	43db      	mvns	r3, r3
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	4013      	ands	r3, r2
 8004946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	fa02 f303 	lsl.w	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4313      	orrs	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	08da      	lsrs	r2, r3, #3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	3208      	adds	r2, #8
 8004966:	69b9      	ldr	r1, [r7, #24]
 8004968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	2203      	movs	r2, #3
 8004978:	fa02 f303 	lsl.w	r3, r2, r3
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f003 0203 	and.w	r2, r3, #3
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80a2 	beq.w	8004af2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	4b56      	ldr	r3, [pc, #344]	; (8004b0c <HAL_GPIO_Init+0x2e4>)
 80049b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b6:	4a55      	ldr	r2, [pc, #340]	; (8004b0c <HAL_GPIO_Init+0x2e4>)
 80049b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049bc:	6453      	str	r3, [r2, #68]	; 0x44
 80049be:	4b53      	ldr	r3, [pc, #332]	; (8004b0c <HAL_GPIO_Init+0x2e4>)
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049ca:	4a51      	ldr	r2, [pc, #324]	; (8004b10 <HAL_GPIO_Init+0x2e8>)
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	3302      	adds	r3, #2
 80049d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	f003 0303 	and.w	r3, r3, #3
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	220f      	movs	r2, #15
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	43db      	mvns	r3, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	4013      	ands	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a48      	ldr	r2, [pc, #288]	; (8004b14 <HAL_GPIO_Init+0x2ec>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d019      	beq.n	8004a2a <HAL_GPIO_Init+0x202>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a47      	ldr	r2, [pc, #284]	; (8004b18 <HAL_GPIO_Init+0x2f0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d013      	beq.n	8004a26 <HAL_GPIO_Init+0x1fe>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a46      	ldr	r2, [pc, #280]	; (8004b1c <HAL_GPIO_Init+0x2f4>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d00d      	beq.n	8004a22 <HAL_GPIO_Init+0x1fa>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a45      	ldr	r2, [pc, #276]	; (8004b20 <HAL_GPIO_Init+0x2f8>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d007      	beq.n	8004a1e <HAL_GPIO_Init+0x1f6>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a44      	ldr	r2, [pc, #272]	; (8004b24 <HAL_GPIO_Init+0x2fc>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d101      	bne.n	8004a1a <HAL_GPIO_Init+0x1f2>
 8004a16:	2304      	movs	r3, #4
 8004a18:	e008      	b.n	8004a2c <HAL_GPIO_Init+0x204>
 8004a1a:	2307      	movs	r3, #7
 8004a1c:	e006      	b.n	8004a2c <HAL_GPIO_Init+0x204>
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e004      	b.n	8004a2c <HAL_GPIO_Init+0x204>
 8004a22:	2302      	movs	r3, #2
 8004a24:	e002      	b.n	8004a2c <HAL_GPIO_Init+0x204>
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_GPIO_Init+0x204>
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	f002 0203 	and.w	r2, r2, #3
 8004a32:	0092      	lsls	r2, r2, #2
 8004a34:	4093      	lsls	r3, r2
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a3c:	4934      	ldr	r1, [pc, #208]	; (8004b10 <HAL_GPIO_Init+0x2e8>)
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	089b      	lsrs	r3, r3, #2
 8004a42:	3302      	adds	r3, #2
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a4a:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_GPIO_Init+0x300>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	43db      	mvns	r3, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4013      	ands	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a66:	69ba      	ldr	r2, [r7, #24]
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a6e:	4a2e      	ldr	r2, [pc, #184]	; (8004b28 <HAL_GPIO_Init+0x300>)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a74:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <HAL_GPIO_Init+0x300>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	4013      	ands	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <HAL_GPIO_Init+0x300>)
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a9e:	4b22      	ldr	r3, [pc, #136]	; (8004b28 <HAL_GPIO_Init+0x300>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ac2:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_GPIO_Init+0x300>)
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ac8:	4b17      	ldr	r3, [pc, #92]	; (8004b28 <HAL_GPIO_Init+0x300>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aec:	4a0e      	ldr	r2, [pc, #56]	; (8004b28 <HAL_GPIO_Init+0x300>)
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	3301      	adds	r3, #1
 8004af6:	61fb      	str	r3, [r7, #28]
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	2b0f      	cmp	r3, #15
 8004afc:	f67f aea2 	bls.w	8004844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b00:	bf00      	nop
 8004b02:	3724      	adds	r7, #36	; 0x24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40013800 	.word	0x40013800
 8004b14:	40020000 	.word	0x40020000
 8004b18:	40020400 	.word	0x40020400
 8004b1c:	40020800 	.word	0x40020800
 8004b20:	40020c00 	.word	0x40020c00
 8004b24:	40021000 	.word	0x40021000
 8004b28:	40013c00 	.word	0x40013c00

08004b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	460b      	mov	r3, r1
 8004b36:	807b      	strh	r3, [r7, #2]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b3c:	787b      	ldrb	r3, [r7, #1]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b42:	887a      	ldrh	r2, [r7, #2]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b48:	e003      	b.n	8004b52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	041a      	lsls	r2, r3, #16
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	619a      	str	r2, [r3, #24]
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	460b      	mov	r3, r1
 8004b68:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	887b      	ldrh	r3, [r7, #2]
 8004b70:	401a      	ands	r2, r3
 8004b72:	887b      	ldrh	r3, [r7, #2]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d104      	bne.n	8004b82 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004b78:	887b      	ldrh	r3, [r7, #2]
 8004b7a:	041a      	lsls	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004b80:	e002      	b.n	8004b88 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	619a      	str	r2, [r3, #24]
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e11f      	b.n	8004de6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d106      	bne.n	8004bc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7ff fa2e 	bl	800401c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2224      	movs	r2, #36	; 0x24
 8004bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0201 	bic.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004be6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bf8:	f001 fb94 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8004bfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	4a7b      	ldr	r2, [pc, #492]	; (8004df0 <HAL_I2C_Init+0x25c>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d807      	bhi.n	8004c18 <HAL_I2C_Init+0x84>
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a7a      	ldr	r2, [pc, #488]	; (8004df4 <HAL_I2C_Init+0x260>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	bf94      	ite	ls
 8004c10:	2301      	movls	r3, #1
 8004c12:	2300      	movhi	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	e006      	b.n	8004c26 <HAL_I2C_Init+0x92>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4a77      	ldr	r2, [pc, #476]	; (8004df8 <HAL_I2C_Init+0x264>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	bf94      	ite	ls
 8004c20:	2301      	movls	r3, #1
 8004c22:	2300      	movhi	r3, #0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e0db      	b.n	8004de6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a72      	ldr	r2, [pc, #456]	; (8004dfc <HAL_I2C_Init+0x268>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	0c9b      	lsrs	r3, r3, #18
 8004c38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4a64      	ldr	r2, [pc, #400]	; (8004df0 <HAL_I2C_Init+0x25c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d802      	bhi.n	8004c68 <HAL_I2C_Init+0xd4>
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	3301      	adds	r3, #1
 8004c66:	e009      	b.n	8004c7c <HAL_I2C_Init+0xe8>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	4a63      	ldr	r2, [pc, #396]	; (8004e00 <HAL_I2C_Init+0x26c>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	099b      	lsrs	r3, r3, #6
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	6812      	ldr	r2, [r2, #0]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	4956      	ldr	r1, [pc, #344]	; (8004df0 <HAL_I2C_Init+0x25c>)
 8004c98:	428b      	cmp	r3, r1
 8004c9a:	d80d      	bhi.n	8004cb8 <HAL_I2C_Init+0x124>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1e59      	subs	r1, r3, #1
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004caa:	3301      	adds	r3, #1
 8004cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	bf38      	it	cc
 8004cb4:	2304      	movcc	r3, #4
 8004cb6:	e04f      	b.n	8004d58 <HAL_I2C_Init+0x1c4>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d111      	bne.n	8004ce4 <HAL_I2C_Init+0x150>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	1e58      	subs	r0, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	440b      	add	r3, r1
 8004cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	bf0c      	ite	eq
 8004cdc:	2301      	moveq	r3, #1
 8004cde:	2300      	movne	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e012      	b.n	8004d0a <HAL_I2C_Init+0x176>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	1e58      	subs	r0, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6859      	ldr	r1, [r3, #4]
 8004cec:	460b      	mov	r3, r1
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	0099      	lsls	r1, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bf0c      	ite	eq
 8004d04:	2301      	moveq	r3, #1
 8004d06:	2300      	movne	r3, #0
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <HAL_I2C_Init+0x17e>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e022      	b.n	8004d58 <HAL_I2C_Init+0x1c4>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10e      	bne.n	8004d38 <HAL_I2C_Init+0x1a4>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	1e58      	subs	r0, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6859      	ldr	r1, [r3, #4]
 8004d22:	460b      	mov	r3, r1
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	440b      	add	r3, r1
 8004d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d36:	e00f      	b.n	8004d58 <HAL_I2C_Init+0x1c4>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1e58      	subs	r0, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6859      	ldr	r1, [r3, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	009b      	lsls	r3, r3, #2
 8004d44:	440b      	add	r3, r1
 8004d46:	0099      	lsls	r1, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	6809      	ldr	r1, [r1, #0]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69da      	ldr	r2, [r3, #28]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	6911      	ldr	r1, [r2, #16]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	68d2      	ldr	r2, [r2, #12]
 8004d92:	4311      	orrs	r1, r2
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	430a      	orrs	r2, r1
 8004db6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	000186a0 	.word	0x000186a0
 8004df4:	001e847f 	.word	0x001e847f
 8004df8:	003d08ff 	.word	0x003d08ff
 8004dfc:	431bde83 	.word	0x431bde83
 8004e00:	10624dd3 	.word	0x10624dd3

08004e04 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	461a      	mov	r2, r3
 8004e12:	4603      	mov	r3, r0
 8004e14:	817b      	strh	r3, [r7, #10]
 8004e16:	460b      	mov	r3, r1
 8004e18:	813b      	strh	r3, [r7, #8]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e1e:	f7ff fba1 	bl	8004564 <HAL_GetTick>
 8004e22:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	f040 80d9 	bne.w	8004fe4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	2319      	movs	r3, #25
 8004e38:	2201      	movs	r2, #1
 8004e3a:	496d      	ldr	r1, [pc, #436]	; (8004ff0 <HAL_I2C_Mem_Write+0x1ec>)
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 fc7f 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e0cc      	b.n	8004fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d101      	bne.n	8004e5a <HAL_I2C_Mem_Write+0x56>
 8004e56:	2302      	movs	r3, #2
 8004e58:	e0c5      	b.n	8004fe6 <HAL_I2C_Mem_Write+0x1e2>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d007      	beq.n	8004e80 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0201 	orr.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2221      	movs	r2, #33	; 0x21
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2240      	movs	r2, #64	; 0x40
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a3a      	ldr	r2, [r7, #32]
 8004eaa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004eb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	4a4d      	ldr	r2, [pc, #308]	; (8004ff4 <HAL_I2C_Mem_Write+0x1f0>)
 8004ec0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ec2:	88f8      	ldrh	r0, [r7, #6]
 8004ec4:	893a      	ldrh	r2, [r7, #8]
 8004ec6:	8979      	ldrh	r1, [r7, #10]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	9301      	str	r3, [sp, #4]
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	9300      	str	r3, [sp, #0]
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 fab6 	bl	8005444 <I2C_RequestMemoryWrite>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d052      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e081      	b.n	8004fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fd00 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d107      	bne.n	8004f0a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e06b      	b.n	8004fe6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d11b      	bne.n	8004f84 <HAL_I2C_Mem_Write+0x180>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d017      	beq.n	8004f84 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1aa      	bne.n	8004ee2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f8c:	697a      	ldr	r2, [r7, #20]
 8004f8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f000 fcec 	bl	800596e <I2C_WaitOnBTFFlagUntilTimeout>
 8004f96:	4603      	mov	r3, r0
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00d      	beq.n	8004fb8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d107      	bne.n	8004fb4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e016      	b.n	8004fe6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2220      	movs	r2, #32
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e000      	b.n	8004fe6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	00100002 	.word	0x00100002
 8004ff4:	ffff0000 	.word	0xffff0000

08004ff8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08c      	sub	sp, #48	; 0x30
 8004ffc:	af02      	add	r7, sp, #8
 8004ffe:	60f8      	str	r0, [r7, #12]
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	461a      	mov	r2, r3
 8005006:	4603      	mov	r3, r0
 8005008:	817b      	strh	r3, [r7, #10]
 800500a:	460b      	mov	r3, r1
 800500c:	813b      	strh	r3, [r7, #8]
 800500e:	4613      	mov	r3, r2
 8005010:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005012:	f7ff faa7 	bl	8004564 <HAL_GetTick>
 8005016:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b20      	cmp	r3, #32
 8005022:	f040 8208 	bne.w	8005436 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	2319      	movs	r3, #25
 800502c:	2201      	movs	r2, #1
 800502e:	497b      	ldr	r1, [pc, #492]	; (800521c <HAL_I2C_Mem_Read+0x224>)
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fb85 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800503c:	2302      	movs	r3, #2
 800503e:	e1fb      	b.n	8005438 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005046:	2b01      	cmp	r3, #1
 8005048:	d101      	bne.n	800504e <HAL_I2C_Mem_Read+0x56>
 800504a:	2302      	movs	r3, #2
 800504c:	e1f4      	b.n	8005438 <HAL_I2C_Mem_Read+0x440>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b01      	cmp	r3, #1
 8005062:	d007      	beq.n	8005074 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005082:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2222      	movs	r2, #34	; 0x22
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a5b      	ldr	r2, [pc, #364]	; (8005220 <HAL_I2C_Mem_Read+0x228>)
 80050b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050b6:	88f8      	ldrh	r0, [r7, #6]
 80050b8:	893a      	ldrh	r2, [r7, #8]
 80050ba:	8979      	ldrh	r1, [r7, #10]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	4603      	mov	r3, r0
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f000 fa52 	bl	8005570 <I2C_RequestMemoryRead>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e1b0      	b.n	8005438 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d113      	bne.n	8005106 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050de:	2300      	movs	r3, #0
 80050e0:	623b      	str	r3, [r7, #32]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	623b      	str	r3, [r7, #32]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	699b      	ldr	r3, [r3, #24]
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e184      	b.n	8005410 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510a:	2b01      	cmp	r3, #1
 800510c:	d11b      	bne.n	8005146 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800511c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	61fb      	str	r3, [r7, #28]
 8005132:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	e164      	b.n	8005410 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514a:	2b02      	cmp	r3, #2
 800514c:	d11b      	bne.n	8005186 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800515c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800516c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	61bb      	str	r3, [r7, #24]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	e144      	b.n	8005410 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	617b      	str	r3, [r7, #20]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800519c:	e138      	b.n	8005410 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	f200 80f1 	bhi.w	800538a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d123      	bne.n	80051f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 fc1b 	bl	80059f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e139      	b.n	8005438 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691a      	ldr	r2, [r3, #16]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e0:	3b01      	subs	r3, #1
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051f6:	e10b      	b.n	8005410 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d14e      	bne.n	800529e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005206:	2200      	movs	r2, #0
 8005208:	4906      	ldr	r1, [pc, #24]	; (8005224 <HAL_I2C_Mem_Read+0x22c>)
 800520a:	68f8      	ldr	r0, [r7, #12]
 800520c:	f000 fa98 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e10e      	b.n	8005438 <HAL_I2C_Mem_Read+0x440>
 800521a:	bf00      	nop
 800521c:	00100002 	.word	0x00100002
 8005220:	ffff0000 	.word	0xffff0000
 8005224:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005236:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	691a      	ldr	r2, [r3, #16]
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005242:	b2d2      	uxtb	r2, r2
 8005244:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	1c5a      	adds	r2, r3, #1
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005254:	3b01      	subs	r3, #1
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005260:	b29b      	uxth	r3, r3
 8005262:	3b01      	subs	r3, #1
 8005264:	b29a      	uxth	r2, r3
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800529c:	e0b8      	b.n	8005410 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a4:	2200      	movs	r2, #0
 80052a6:	4966      	ldr	r1, [pc, #408]	; (8005440 <HAL_I2C_Mem_Read+0x448>)
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 fa49 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d001      	beq.n	80052b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e0bf      	b.n	8005438 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691a      	ldr	r2, [r3, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	1c5a      	adds	r2, r3, #1
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005300:	2200      	movs	r2, #0
 8005302:	494f      	ldr	r1, [pc, #316]	; (8005440 <HAL_I2C_Mem_Read+0x448>)
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fa1b 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e091      	b.n	8005438 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005322:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	691a      	ldr	r2, [r3, #16]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534c:	b29b      	uxth	r3, r3
 800534e:	3b01      	subs	r3, #1
 8005350:	b29a      	uxth	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	691a      	ldr	r2, [r3, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	b2d2      	uxtb	r2, r2
 8005362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	1c5a      	adds	r2, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29a      	uxth	r2, r3
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005388:	e042      	b.n	8005410 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800538c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fb2e 	bl	80059f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e04c      	b.n	8005438 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	b2d2      	uxtb	r2, r2
 80053aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b0:	1c5a      	adds	r2, r3, #1
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ba:	3b01      	subs	r3, #1
 80053bc:	b29a      	uxth	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b04      	cmp	r3, #4
 80053dc:	d118      	bne.n	8005410 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691a      	ldr	r2, [r3, #16]
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005406:	b29b      	uxth	r3, r3
 8005408:	3b01      	subs	r3, #1
 800540a:	b29a      	uxth	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005414:	2b00      	cmp	r3, #0
 8005416:	f47f aec2 	bne.w	800519e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e000      	b.n	8005438 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005436:	2302      	movs	r3, #2
  }
}
 8005438:	4618      	mov	r0, r3
 800543a:	3728      	adds	r7, #40	; 0x28
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	00010004 	.word	0x00010004

08005444 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	4608      	mov	r0, r1
 800544e:	4611      	mov	r1, r2
 8005450:	461a      	mov	r2, r3
 8005452:	4603      	mov	r3, r0
 8005454:	817b      	strh	r3, [r7, #10]
 8005456:	460b      	mov	r3, r1
 8005458:	813b      	strh	r3, [r7, #8]
 800545a:	4613      	mov	r3, r2
 800545c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800546c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	9300      	str	r3, [sp, #0]
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	2200      	movs	r2, #0
 8005476:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f000 f960 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00d      	beq.n	80054a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005494:	d103      	bne.n	800549e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800549c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e05f      	b.n	8005562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054a2:	897b      	ldrh	r3, [r7, #10]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	6a3a      	ldr	r2, [r7, #32]
 80054b6:	492d      	ldr	r1, [pc, #180]	; (800556c <I2C_RequestMemoryWrite+0x128>)
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 f998 	bl	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054be:	4603      	mov	r3, r0
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e04c      	b.n	8005562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c8:	2300      	movs	r3, #0
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e0:	6a39      	ldr	r1, [r7, #32]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f000 fa02 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d107      	bne.n	8005506 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005504:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e02b      	b.n	8005562 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800550a:	88fb      	ldrh	r3, [r7, #6]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d105      	bne.n	800551c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005510:	893b      	ldrh	r3, [r7, #8]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	611a      	str	r2, [r3, #16]
 800551a:	e021      	b.n	8005560 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800551c:	893b      	ldrh	r3, [r7, #8]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	b29b      	uxth	r3, r3
 8005522:	b2da      	uxtb	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800552a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552c:	6a39      	ldr	r1, [r7, #32]
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 f9dc 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00d      	beq.n	8005556 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	2b04      	cmp	r3, #4
 8005540:	d107      	bne.n	8005552 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005550:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e005      	b.n	8005562 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005556:	893b      	ldrh	r3, [r7, #8]
 8005558:	b2da      	uxtb	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	00010002 	.word	0x00010002

08005570 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af02      	add	r7, sp, #8
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	4608      	mov	r0, r1
 800557a:	4611      	mov	r1, r2
 800557c:	461a      	mov	r2, r3
 800557e:	4603      	mov	r3, r0
 8005580:	817b      	strh	r3, [r7, #10]
 8005582:	460b      	mov	r3, r1
 8005584:	813b      	strh	r3, [r7, #8]
 8005586:	4613      	mov	r3, r2
 8005588:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005598:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	6a3b      	ldr	r3, [r7, #32]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f000 f8c2 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00d      	beq.n	80055de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d0:	d103      	bne.n	80055da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e0aa      	b.n	8005734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055de:	897b      	ldrh	r3, [r7, #10]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f0:	6a3a      	ldr	r2, [r7, #32]
 80055f2:	4952      	ldr	r1, [pc, #328]	; (800573c <I2C_RequestMemoryRead+0x1cc>)
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f000 f8fa 	bl	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e097      	b.n	8005734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	617b      	str	r3, [r7, #20]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	617b      	str	r3, [r7, #20]
 8005618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800561a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800561c:	6a39      	ldr	r1, [r7, #32]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 f964 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00d      	beq.n	8005646 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2b04      	cmp	r3, #4
 8005630:	d107      	bne.n	8005642 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e076      	b.n	8005734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005646:	88fb      	ldrh	r3, [r7, #6]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d105      	bne.n	8005658 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800564c:	893b      	ldrh	r3, [r7, #8]
 800564e:	b2da      	uxtb	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	611a      	str	r2, [r3, #16]
 8005656:	e021      	b.n	800569c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005658:	893b      	ldrh	r3, [r7, #8]
 800565a:	0a1b      	lsrs	r3, r3, #8
 800565c:	b29b      	uxth	r3, r3
 800565e:	b2da      	uxtb	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005668:	6a39      	ldr	r1, [r7, #32]
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 f93e 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00d      	beq.n	8005692 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	2b04      	cmp	r3, #4
 800567c:	d107      	bne.n	800568e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800568c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e050      	b.n	8005734 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005692:	893b      	ldrh	r3, [r7, #8]
 8005694:	b2da      	uxtb	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	6a39      	ldr	r1, [r7, #32]
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f923 	bl	80058ec <I2C_WaitOnTXEFlagUntilTimeout>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00d      	beq.n	80056c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d107      	bne.n	80056c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e035      	b.n	8005734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	2200      	movs	r2, #0
 80056e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f82b 	bl	8005740 <I2C_WaitOnFlagUntilTimeout>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00d      	beq.n	800570c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fe:	d103      	bne.n	8005708 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e013      	b.n	8005734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800570c:	897b      	ldrh	r3, [r7, #10]
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f043 0301 	orr.w	r3, r3, #1
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	6a3a      	ldr	r2, [r7, #32]
 8005720:	4906      	ldr	r1, [pc, #24]	; (800573c <I2C_RequestMemoryRead+0x1cc>)
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f863 	bl	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e000      	b.n	8005734 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3718      	adds	r7, #24
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	00010002 	.word	0x00010002

08005740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	4613      	mov	r3, r2
 800574e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005750:	e025      	b.n	800579e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005758:	d021      	beq.n	800579e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575a:	f7fe ff03 	bl	8004564 <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	429a      	cmp	r2, r3
 8005768:	d302      	bcc.n	8005770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d116      	bne.n	800579e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	f043 0220 	orr.w	r2, r3, #32
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e023      	b.n	80057e6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	0c1b      	lsrs	r3, r3, #16
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d10d      	bne.n	80057c4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	43da      	mvns	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bf0c      	ite	eq
 80057ba:	2301      	moveq	r3, #1
 80057bc:	2300      	movne	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	e00c      	b.n	80057de <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	699b      	ldr	r3, [r3, #24]
 80057ca:	43da      	mvns	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4013      	ands	r3, r2
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bf0c      	ite	eq
 80057d6:	2301      	moveq	r3, #1
 80057d8:	2300      	movne	r3, #0
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	461a      	mov	r2, r3
 80057de:	79fb      	ldrb	r3, [r7, #7]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d0b6      	beq.n	8005752 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b084      	sub	sp, #16
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	60f8      	str	r0, [r7, #12]
 80057f6:	60b9      	str	r1, [r7, #8]
 80057f8:	607a      	str	r2, [r7, #4]
 80057fa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057fc:	e051      	b.n	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	695b      	ldr	r3, [r3, #20]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800580c:	d123      	bne.n	8005856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800581c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005826:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2220      	movs	r2, #32
 8005832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f043 0204 	orr.w	r2, r3, #4
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e046      	b.n	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d021      	beq.n	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800585e:	f7fe fe81 	bl	8004564 <HAL_GetTick>
 8005862:	4602      	mov	r2, r0
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d302      	bcc.n	8005874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d116      	bne.n	80058a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	f043 0220 	orr.w	r2, r3, #32
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e020      	b.n	80058e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	0c1b      	lsrs	r3, r3, #16
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d10c      	bne.n	80058c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	43da      	mvns	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4013      	ands	r3, r2
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	e00b      	b.n	80058de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	43da      	mvns	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	4013      	ands	r3, r2
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	bf14      	ite	ne
 80058d8:	2301      	movne	r3, #1
 80058da:	2300      	moveq	r3, #0
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d18d      	bne.n	80057fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058f8:	e02d      	b.n	8005956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f8ce 	bl	8005a9c <I2C_IsAcknowledgeFailed>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	e02d      	b.n	8005966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d021      	beq.n	8005956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005912:	f7fe fe27 	bl	8004564 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	429a      	cmp	r2, r3
 8005920:	d302      	bcc.n	8005928 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d116      	bne.n	8005956 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2220      	movs	r2, #32
 8005932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	f043 0220 	orr.w	r2, r3, #32
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e007      	b.n	8005966 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005960:	2b80      	cmp	r3, #128	; 0x80
 8005962:	d1ca      	bne.n	80058fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800596e:	b580      	push	{r7, lr}
 8005970:	b084      	sub	sp, #16
 8005972:	af00      	add	r7, sp, #0
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800597a:	e02d      	b.n	80059d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800597c:	68f8      	ldr	r0, [r7, #12]
 800597e:	f000 f88d 	bl	8005a9c <I2C_IsAcknowledgeFailed>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e02d      	b.n	80059e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005992:	d021      	beq.n	80059d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005994:	f7fe fde6 	bl	8004564 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d302      	bcc.n	80059aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d116      	bne.n	80059d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	f043 0220 	orr.w	r2, r3, #32
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e007      	b.n	80059e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d1ca      	bne.n	800597c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059fc:	e042      	b.n	8005a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d119      	bne.n	8005a40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0210 	mvn.w	r2, #16
 8005a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2200      	movs	r2, #0
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e029      	b.n	8005a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a40:	f7fe fd90 	bl	8004564 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d302      	bcc.n	8005a56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d116      	bne.n	8005a84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a70:	f043 0220 	orr.w	r2, r3, #32
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e007      	b.n	8005a94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b40      	cmp	r3, #64	; 0x40
 8005a90:	d1b5      	bne.n	80059fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab2:	d11b      	bne.n	8005aec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005abc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad8:	f043 0204 	orr.w	r2, r3, #4
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e000      	b.n	8005aee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e25b      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0301 	and.w	r3, r3, #1
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d075      	beq.n	8005c06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b1a:	4ba3      	ldr	r3, [pc, #652]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 030c 	and.w	r3, r3, #12
 8005b22:	2b04      	cmp	r3, #4
 8005b24:	d00c      	beq.n	8005b40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b26:	4ba0      	ldr	r3, [pc, #640]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b2e:	2b08      	cmp	r3, #8
 8005b30:	d112      	bne.n	8005b58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b32:	4b9d      	ldr	r3, [pc, #628]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b3e:	d10b      	bne.n	8005b58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b40:	4b99      	ldr	r3, [pc, #612]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d05b      	beq.n	8005c04 <HAL_RCC_OscConfig+0x108>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d157      	bne.n	8005c04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e236      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b60:	d106      	bne.n	8005b70 <HAL_RCC_OscConfig+0x74>
 8005b62:	4b91      	ldr	r3, [pc, #580]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a90      	ldr	r2, [pc, #576]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	e01d      	b.n	8005bac <HAL_RCC_OscConfig+0xb0>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b78:	d10c      	bne.n	8005b94 <HAL_RCC_OscConfig+0x98>
 8005b7a:	4b8b      	ldr	r3, [pc, #556]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a8a      	ldr	r2, [pc, #552]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	4b88      	ldr	r3, [pc, #544]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a87      	ldr	r2, [pc, #540]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	e00b      	b.n	8005bac <HAL_RCC_OscConfig+0xb0>
 8005b94:	4b84      	ldr	r3, [pc, #528]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a83      	ldr	r2, [pc, #524]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b9e:	6013      	str	r3, [r2, #0]
 8005ba0:	4b81      	ldr	r3, [pc, #516]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a80      	ldr	r2, [pc, #512]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d013      	beq.n	8005bdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bb4:	f7fe fcd6 	bl	8004564 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bbc:	f7fe fcd2 	bl	8004564 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b64      	cmp	r3, #100	; 0x64
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e1fb      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005bce:	4b76      	ldr	r3, [pc, #472]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f0      	beq.n	8005bbc <HAL_RCC_OscConfig+0xc0>
 8005bda:	e014      	b.n	8005c06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bdc:	f7fe fcc2 	bl	8004564 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005be4:	f7fe fcbe 	bl	8004564 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b64      	cmp	r3, #100	; 0x64
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e1e7      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bf6:	4b6c      	ldr	r3, [pc, #432]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0xe8>
 8005c02:	e000      	b.n	8005c06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d063      	beq.n	8005cda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c12:	4b65      	ldr	r3, [pc, #404]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 030c 	and.w	r3, r3, #12
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00b      	beq.n	8005c36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c1e:	4b62      	ldr	r3, [pc, #392]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c26:	2b08      	cmp	r3, #8
 8005c28:	d11c      	bne.n	8005c64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c2a:	4b5f      	ldr	r3, [pc, #380]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d116      	bne.n	8005c64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c36:	4b5c      	ldr	r3, [pc, #368]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d005      	beq.n	8005c4e <HAL_RCC_OscConfig+0x152>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d001      	beq.n	8005c4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e1bb      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c4e:	4b56      	ldr	r3, [pc, #344]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	00db      	lsls	r3, r3, #3
 8005c5c:	4952      	ldr	r1, [pc, #328]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c62:	e03a      	b.n	8005cda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d020      	beq.n	8005cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c6c:	4b4f      	ldr	r3, [pc, #316]	; (8005dac <HAL_RCC_OscConfig+0x2b0>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c72:	f7fe fc77 	bl	8004564 <HAL_GetTick>
 8005c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c78:	e008      	b.n	8005c8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c7a:	f7fe fc73 	bl	8004564 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d901      	bls.n	8005c8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e19c      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c8c:	4b46      	ldr	r3, [pc, #280]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d0f0      	beq.n	8005c7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c98:	4b43      	ldr	r3, [pc, #268]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	00db      	lsls	r3, r3, #3
 8005ca6:	4940      	ldr	r1, [pc, #256]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	600b      	str	r3, [r1, #0]
 8005cac:	e015      	b.n	8005cda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005cae:	4b3f      	ldr	r3, [pc, #252]	; (8005dac <HAL_RCC_OscConfig+0x2b0>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb4:	f7fe fc56 	bl	8004564 <HAL_GetTick>
 8005cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cba:	e008      	b.n	8005cce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cbc:	f7fe fc52 	bl	8004564 <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e17b      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005cce:	4b36      	ldr	r3, [pc, #216]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1f0      	bne.n	8005cbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0308 	and.w	r3, r3, #8
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d030      	beq.n	8005d48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d016      	beq.n	8005d1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cee:	4b30      	ldr	r3, [pc, #192]	; (8005db0 <HAL_RCC_OscConfig+0x2b4>)
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cf4:	f7fe fc36 	bl	8004564 <HAL_GetTick>
 8005cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cfa:	e008      	b.n	8005d0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cfc:	f7fe fc32 	bl	8004564 <HAL_GetTick>
 8005d00:	4602      	mov	r2, r0
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	1ad3      	subs	r3, r2, r3
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d901      	bls.n	8005d0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e15b      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d0e:	4b26      	ldr	r3, [pc, #152]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0f0      	beq.n	8005cfc <HAL_RCC_OscConfig+0x200>
 8005d1a:	e015      	b.n	8005d48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d1c:	4b24      	ldr	r3, [pc, #144]	; (8005db0 <HAL_RCC_OscConfig+0x2b4>)
 8005d1e:	2200      	movs	r2, #0
 8005d20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d22:	f7fe fc1f 	bl	8004564 <HAL_GetTick>
 8005d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d28:	e008      	b.n	8005d3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d2a:	f7fe fc1b 	bl	8004564 <HAL_GetTick>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d901      	bls.n	8005d3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d38:	2303      	movs	r3, #3
 8005d3a:	e144      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d3c:	4b1a      	ldr	r3, [pc, #104]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d1f0      	bne.n	8005d2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 80a0 	beq.w	8005e96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10f      	bne.n	8005d86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d66:	2300      	movs	r3, #0
 8005d68:	60bb      	str	r3, [r7, #8]
 8005d6a:	4b0f      	ldr	r3, [pc, #60]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	4a0e      	ldr	r2, [pc, #56]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d74:	6413      	str	r3, [r2, #64]	; 0x40
 8005d76:	4b0c      	ldr	r3, [pc, #48]	; (8005da8 <HAL_RCC_OscConfig+0x2ac>)
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	60bb      	str	r3, [r7, #8]
 8005d80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d82:	2301      	movs	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d86:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <HAL_RCC_OscConfig+0x2b8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d121      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d92:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <HAL_RCC_OscConfig+0x2b8>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a07      	ldr	r2, [pc, #28]	; (8005db4 <HAL_RCC_OscConfig+0x2b8>)
 8005d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d9e:	f7fe fbe1 	bl	8004564 <HAL_GetTick>
 8005da2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da4:	e011      	b.n	8005dca <HAL_RCC_OscConfig+0x2ce>
 8005da6:	bf00      	nop
 8005da8:	40023800 	.word	0x40023800
 8005dac:	42470000 	.word	0x42470000
 8005db0:	42470e80 	.word	0x42470e80
 8005db4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db8:	f7fe fbd4 	bl	8004564 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e0fd      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dca:	4b81      	ldr	r3, [pc, #516]	; (8005fd0 <HAL_RCC_OscConfig+0x4d4>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d0f0      	beq.n	8005db8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d106      	bne.n	8005dec <HAL_RCC_OscConfig+0x2f0>
 8005dde:	4b7d      	ldr	r3, [pc, #500]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005de2:	4a7c      	ldr	r2, [pc, #496]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005de4:	f043 0301 	orr.w	r3, r3, #1
 8005de8:	6713      	str	r3, [r2, #112]	; 0x70
 8005dea:	e01c      	b.n	8005e26 <HAL_RCC_OscConfig+0x32a>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2b05      	cmp	r3, #5
 8005df2:	d10c      	bne.n	8005e0e <HAL_RCC_OscConfig+0x312>
 8005df4:	4b77      	ldr	r3, [pc, #476]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df8:	4a76      	ldr	r2, [pc, #472]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005dfa:	f043 0304 	orr.w	r3, r3, #4
 8005dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005e00:	4b74      	ldr	r3, [pc, #464]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	4a73      	ldr	r2, [pc, #460]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e06:	f043 0301 	orr.w	r3, r3, #1
 8005e0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005e0c:	e00b      	b.n	8005e26 <HAL_RCC_OscConfig+0x32a>
 8005e0e:	4b71      	ldr	r3, [pc, #452]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	4a70      	ldr	r2, [pc, #448]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e14:	f023 0301 	bic.w	r3, r3, #1
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70
 8005e1a:	4b6e      	ldr	r3, [pc, #440]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	4a6d      	ldr	r2, [pc, #436]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e20:	f023 0304 	bic.w	r3, r3, #4
 8005e24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d015      	beq.n	8005e5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fe fb99 	bl	8004564 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e34:	e00a      	b.n	8005e4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e36:	f7fe fb95 	bl	8004564 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e0bc      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4c:	4b61      	ldr	r3, [pc, #388]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ee      	beq.n	8005e36 <HAL_RCC_OscConfig+0x33a>
 8005e58:	e014      	b.n	8005e84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e5a:	f7fe fb83 	bl	8004564 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e60:	e00a      	b.n	8005e78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e62:	f7fe fb7f 	bl	8004564 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d901      	bls.n	8005e78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e0a6      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e78:	4b56      	ldr	r3, [pc, #344]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7c:	f003 0302 	and.w	r3, r3, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1ee      	bne.n	8005e62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e84:	7dfb      	ldrb	r3, [r7, #23]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d105      	bne.n	8005e96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e8a:	4b52      	ldr	r3, [pc, #328]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	4a51      	ldr	r2, [pc, #324]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f000 8092 	beq.w	8005fc4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ea0:	4b4c      	ldr	r3, [pc, #304]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 030c 	and.w	r3, r3, #12
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d05c      	beq.n	8005f66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d141      	bne.n	8005f38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eb4:	4b48      	ldr	r3, [pc, #288]	; (8005fd8 <HAL_RCC_OscConfig+0x4dc>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eba:	f7fe fb53 	bl	8004564 <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec2:	f7fe fb4f 	bl	8004564 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e078      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ed4:	4b3f      	ldr	r3, [pc, #252]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f0      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	019b      	lsls	r3, r3, #6
 8005ef0:	431a      	orrs	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	3b01      	subs	r3, #1
 8005efa:	041b      	lsls	r3, r3, #16
 8005efc:	431a      	orrs	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	061b      	lsls	r3, r3, #24
 8005f04:	4933      	ldr	r1, [pc, #204]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f0a:	4b33      	ldr	r3, [pc, #204]	; (8005fd8 <HAL_RCC_OscConfig+0x4dc>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f10:	f7fe fb28 	bl	8004564 <HAL_GetTick>
 8005f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f16:	e008      	b.n	8005f2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f18:	f7fe fb24 	bl	8004564 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	2b02      	cmp	r3, #2
 8005f24:	d901      	bls.n	8005f2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005f26:	2303      	movs	r3, #3
 8005f28:	e04d      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f2a:	4b2a      	ldr	r3, [pc, #168]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d0f0      	beq.n	8005f18 <HAL_RCC_OscConfig+0x41c>
 8005f36:	e045      	b.n	8005fc4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f38:	4b27      	ldr	r3, [pc, #156]	; (8005fd8 <HAL_RCC_OscConfig+0x4dc>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f3e:	f7fe fb11 	bl	8004564 <HAL_GetTick>
 8005f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f44:	e008      	b.n	8005f58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f46:	f7fe fb0d 	bl	8004564 <HAL_GetTick>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	1ad3      	subs	r3, r2, r3
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d901      	bls.n	8005f58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005f54:	2303      	movs	r3, #3
 8005f56:	e036      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f58:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d1f0      	bne.n	8005f46 <HAL_RCC_OscConfig+0x44a>
 8005f64:	e02e      	b.n	8005fc4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d101      	bne.n	8005f72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e029      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f72:	4b18      	ldr	r3, [pc, #96]	; (8005fd4 <HAL_RCC_OscConfig+0x4d8>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d11c      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d115      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d10d      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d106      	bne.n	8005fc0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e000      	b.n	8005fc6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3718      	adds	r7, #24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40007000 	.word	0x40007000
 8005fd4:	40023800 	.word	0x40023800
 8005fd8:	42470060 	.word	0x42470060

08005fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fec:	2301      	movs	r3, #1
 8005fee:	e0cc      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ff0:	4b68      	ldr	r3, [pc, #416]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d90c      	bls.n	8006018 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ffe:	4b65      	ldr	r3, [pc, #404]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	b2d2      	uxtb	r2, r2
 8006004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	4b63      	ldr	r3, [pc, #396]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d001      	beq.n	8006018 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e0b8      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0302 	and.w	r3, r3, #2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d020      	beq.n	8006066 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006030:	4b59      	ldr	r3, [pc, #356]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	4a58      	ldr	r2, [pc, #352]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800603a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f003 0308 	and.w	r3, r3, #8
 8006044:	2b00      	cmp	r3, #0
 8006046:	d005      	beq.n	8006054 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006048:	4b53      	ldr	r3, [pc, #332]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	4a52      	ldr	r2, [pc, #328]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800604e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006052:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006054:	4b50      	ldr	r3, [pc, #320]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	494d      	ldr	r1, [pc, #308]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	4313      	orrs	r3, r2
 8006064:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d044      	beq.n	80060fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d107      	bne.n	800608a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607a:	4b47      	ldr	r3, [pc, #284]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d119      	bne.n	80060ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e07f      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2b02      	cmp	r3, #2
 8006090:	d003      	beq.n	800609a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006096:	2b03      	cmp	r3, #3
 8006098:	d107      	bne.n	80060aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800609a:	4b3f      	ldr	r3, [pc, #252]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d109      	bne.n	80060ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e06f      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80060aa:	4b3b      	ldr	r3, [pc, #236]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 0302 	and.w	r3, r3, #2
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e067      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80060ba:	4b37      	ldr	r3, [pc, #220]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f023 0203 	bic.w	r2, r3, #3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	4934      	ldr	r1, [pc, #208]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060cc:	f7fe fa4a 	bl	8004564 <HAL_GetTick>
 80060d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060d2:	e00a      	b.n	80060ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d4:	f7fe fa46 	bl	8004564 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	f241 3288 	movw	r2, #5000	; 0x1388
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e04f      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ea:	4b2b      	ldr	r3, [pc, #172]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f003 020c 	and.w	r2, r3, #12
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d1eb      	bne.n	80060d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d20c      	bcs.n	8006124 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610a:	4b22      	ldr	r3, [pc, #136]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 800610c:	683a      	ldr	r2, [r7, #0]
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006112:	4b20      	ldr	r3, [pc, #128]	; (8006194 <HAL_RCC_ClockConfig+0x1b8>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d001      	beq.n	8006124 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e032      	b.n	800618a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006130:	4b19      	ldr	r3, [pc, #100]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	4916      	ldr	r1, [pc, #88]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0308 	and.w	r3, r3, #8
 800614a:	2b00      	cmp	r3, #0
 800614c:	d009      	beq.n	8006162 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800614e:	4b12      	ldr	r3, [pc, #72]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	691b      	ldr	r3, [r3, #16]
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	490e      	ldr	r1, [pc, #56]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800615e:	4313      	orrs	r3, r2
 8006160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006162:	f000 f821 	bl	80061a8 <HAL_RCC_GetSysClockFreq>
 8006166:	4601      	mov	r1, r0
 8006168:	4b0b      	ldr	r3, [pc, #44]	; (8006198 <HAL_RCC_ClockConfig+0x1bc>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	091b      	lsrs	r3, r3, #4
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	4a0a      	ldr	r2, [pc, #40]	; (800619c <HAL_RCC_ClockConfig+0x1c0>)
 8006174:	5cd3      	ldrb	r3, [r2, r3]
 8006176:	fa21 f303 	lsr.w	r3, r1, r3
 800617a:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <HAL_RCC_ClockConfig+0x1c4>)
 800617c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800617e:	4b09      	ldr	r3, [pc, #36]	; (80061a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4618      	mov	r0, r3
 8006184:	f7fe f9aa 	bl	80044dc <HAL_InitTick>

  return HAL_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	40023c00 	.word	0x40023c00
 8006198:	40023800 	.word	0x40023800
 800619c:	0800a990 	.word	0x0800a990
 80061a0:	20000140 	.word	0x20000140
 80061a4:	20000144 	.word	0x20000144

080061a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80061a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	607b      	str	r3, [r7, #4]
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	2300      	movs	r3, #0
 80061b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061be:	4b50      	ldr	r3, [pc, #320]	; (8006300 <HAL_RCC_GetSysClockFreq+0x158>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f003 030c 	and.w	r3, r3, #12
 80061c6:	2b04      	cmp	r3, #4
 80061c8:	d007      	beq.n	80061da <HAL_RCC_GetSysClockFreq+0x32>
 80061ca:	2b08      	cmp	r3, #8
 80061cc:	d008      	beq.n	80061e0 <HAL_RCC_GetSysClockFreq+0x38>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 808d 	bne.w	80062ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061d4:	4b4b      	ldr	r3, [pc, #300]	; (8006304 <HAL_RCC_GetSysClockFreq+0x15c>)
 80061d6:	60bb      	str	r3, [r7, #8]
       break;
 80061d8:	e08c      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061da:	4b4b      	ldr	r3, [pc, #300]	; (8006308 <HAL_RCC_GetSysClockFreq+0x160>)
 80061dc:	60bb      	str	r3, [r7, #8]
      break;
 80061de:	e089      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061e0:	4b47      	ldr	r3, [pc, #284]	; (8006300 <HAL_RCC_GetSysClockFreq+0x158>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061ea:	4b45      	ldr	r3, [pc, #276]	; (8006300 <HAL_RCC_GetSysClockFreq+0x158>)
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d023      	beq.n	800623e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f6:	4b42      	ldr	r3, [pc, #264]	; (8006300 <HAL_RCC_GetSysClockFreq+0x158>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	099b      	lsrs	r3, r3, #6
 80061fc:	f04f 0400 	mov.w	r4, #0
 8006200:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	ea03 0501 	and.w	r5, r3, r1
 800620c:	ea04 0602 	and.w	r6, r4, r2
 8006210:	4a3d      	ldr	r2, [pc, #244]	; (8006308 <HAL_RCC_GetSysClockFreq+0x160>)
 8006212:	fb02 f106 	mul.w	r1, r2, r6
 8006216:	2200      	movs	r2, #0
 8006218:	fb02 f205 	mul.w	r2, r2, r5
 800621c:	440a      	add	r2, r1
 800621e:	493a      	ldr	r1, [pc, #232]	; (8006308 <HAL_RCC_GetSysClockFreq+0x160>)
 8006220:	fba5 0101 	umull	r0, r1, r5, r1
 8006224:	1853      	adds	r3, r2, r1
 8006226:	4619      	mov	r1, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f04f 0400 	mov.w	r4, #0
 800622e:	461a      	mov	r2, r3
 8006230:	4623      	mov	r3, r4
 8006232:	f7fa fcd1 	bl	8000bd8 <__aeabi_uldivmod>
 8006236:	4603      	mov	r3, r0
 8006238:	460c      	mov	r4, r1
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e049      	b.n	80062d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800623e:	4b30      	ldr	r3, [pc, #192]	; (8006300 <HAL_RCC_GetSysClockFreq+0x158>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	099b      	lsrs	r3, r3, #6
 8006244:	f04f 0400 	mov.w	r4, #0
 8006248:	f240 11ff 	movw	r1, #511	; 0x1ff
 800624c:	f04f 0200 	mov.w	r2, #0
 8006250:	ea03 0501 	and.w	r5, r3, r1
 8006254:	ea04 0602 	and.w	r6, r4, r2
 8006258:	4629      	mov	r1, r5
 800625a:	4632      	mov	r2, r6
 800625c:	f04f 0300 	mov.w	r3, #0
 8006260:	f04f 0400 	mov.w	r4, #0
 8006264:	0154      	lsls	r4, r2, #5
 8006266:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800626a:	014b      	lsls	r3, r1, #5
 800626c:	4619      	mov	r1, r3
 800626e:	4622      	mov	r2, r4
 8006270:	1b49      	subs	r1, r1, r5
 8006272:	eb62 0206 	sbc.w	r2, r2, r6
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	f04f 0400 	mov.w	r4, #0
 800627e:	0194      	lsls	r4, r2, #6
 8006280:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006284:	018b      	lsls	r3, r1, #6
 8006286:	1a5b      	subs	r3, r3, r1
 8006288:	eb64 0402 	sbc.w	r4, r4, r2
 800628c:	f04f 0100 	mov.w	r1, #0
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	00e2      	lsls	r2, r4, #3
 8006296:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800629a:	00d9      	lsls	r1, r3, #3
 800629c:	460b      	mov	r3, r1
 800629e:	4614      	mov	r4, r2
 80062a0:	195b      	adds	r3, r3, r5
 80062a2:	eb44 0406 	adc.w	r4, r4, r6
 80062a6:	f04f 0100 	mov.w	r1, #0
 80062aa:	f04f 0200 	mov.w	r2, #0
 80062ae:	02a2      	lsls	r2, r4, #10
 80062b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80062b4:	0299      	lsls	r1, r3, #10
 80062b6:	460b      	mov	r3, r1
 80062b8:	4614      	mov	r4, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	4621      	mov	r1, r4
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f04f 0400 	mov.w	r4, #0
 80062c4:	461a      	mov	r2, r3
 80062c6:	4623      	mov	r3, r4
 80062c8:	f7fa fc86 	bl	8000bd8 <__aeabi_uldivmod>
 80062cc:	4603      	mov	r3, r0
 80062ce:	460c      	mov	r4, r1
 80062d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80062d2:	4b0b      	ldr	r3, [pc, #44]	; (8006300 <HAL_RCC_GetSysClockFreq+0x158>)
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	0c1b      	lsrs	r3, r3, #16
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	3301      	adds	r3, #1
 80062de:	005b      	lsls	r3, r3, #1
 80062e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ea:	60bb      	str	r3, [r7, #8]
      break;
 80062ec:	e002      	b.n	80062f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <HAL_RCC_GetSysClockFreq+0x15c>)
 80062f0:	60bb      	str	r3, [r7, #8]
      break;
 80062f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062f4:	68bb      	ldr	r3, [r7, #8]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3714      	adds	r7, #20
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fe:	bf00      	nop
 8006300:	40023800 	.word	0x40023800
 8006304:	00f42400 	.word	0x00f42400
 8006308:	017d7840 	.word	0x017d7840

0800630c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006310:	4b03      	ldr	r3, [pc, #12]	; (8006320 <HAL_RCC_GetHCLKFreq+0x14>)
 8006312:	681b      	ldr	r3, [r3, #0]
}
 8006314:	4618      	mov	r0, r3
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	20000140 	.word	0x20000140

08006324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006328:	f7ff fff0 	bl	800630c <HAL_RCC_GetHCLKFreq>
 800632c:	4601      	mov	r1, r0
 800632e:	4b05      	ldr	r3, [pc, #20]	; (8006344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	0a9b      	lsrs	r3, r3, #10
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	4a03      	ldr	r2, [pc, #12]	; (8006348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800633a:	5cd3      	ldrb	r3, [r2, r3]
 800633c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40023800 	.word	0x40023800
 8006348:	0800a9a0 	.word	0x0800a9a0

0800634c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006350:	f7ff ffdc 	bl	800630c <HAL_RCC_GetHCLKFreq>
 8006354:	4601      	mov	r1, r0
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	0b5b      	lsrs	r3, r3, #13
 800635c:	f003 0307 	and.w	r3, r3, #7
 8006360:	4a03      	ldr	r2, [pc, #12]	; (8006370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006362:	5cd3      	ldrb	r3, [r2, r3]
 8006364:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006368:	4618      	mov	r0, r3
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40023800 	.word	0x40023800
 8006370:	0800a9a0 	.word	0x0800a9a0

08006374 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b082      	sub	sp, #8
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e03f      	b.n	8006406 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fd fe86 	bl	80040ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2224      	movs	r2, #36	; 0x24
 80063a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fc8b 	bl	8006cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691a      	ldr	r2, [r3, #16]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	695a      	ldr	r2, [r3, #20]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2220      	movs	r2, #32
 80063f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800640e:	b580      	push	{r7, lr}
 8006410:	b088      	sub	sp, #32
 8006412:	af02      	add	r7, sp, #8
 8006414:	60f8      	str	r0, [r7, #12]
 8006416:	60b9      	str	r1, [r7, #8]
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	4613      	mov	r3, r2
 800641c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b20      	cmp	r3, #32
 800642c:	f040 8083 	bne.w	8006536 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_UART_Transmit+0x2e>
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e07b      	b.n	8006538 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006446:	2b01      	cmp	r3, #1
 8006448:	d101      	bne.n	800644e <HAL_UART_Transmit+0x40>
 800644a:	2302      	movs	r3, #2
 800644c:	e074      	b.n	8006538 <HAL_UART_Transmit+0x12a>
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2221      	movs	r2, #33	; 0x21
 8006460:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006464:	f7fe f87e 	bl	8004564 <HAL_GetTick>
 8006468:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	88fa      	ldrh	r2, [r7, #6]
 800646e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	88fa      	ldrh	r2, [r7, #6]
 8006474:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800647e:	e042      	b.n	8006506 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006496:	d122      	bne.n	80064de <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	9300      	str	r3, [sp, #0]
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2200      	movs	r2, #0
 80064a0:	2180      	movs	r1, #128	; 0x80
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 faaa 	bl	80069fc <UART_WaitOnFlagUntilTimeout>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e042      	b.n	8006538 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	461a      	mov	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	3302      	adds	r3, #2
 80064d2:	60bb      	str	r3, [r7, #8]
 80064d4:	e017      	b.n	8006506 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	3301      	adds	r3, #1
 80064da:	60bb      	str	r3, [r7, #8]
 80064dc:	e013      	b.n	8006506 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2200      	movs	r2, #0
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fa87 	bl	80069fc <UART_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e01f      	b.n	8006538 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	1c5a      	adds	r2, r3, #1
 80064fc:	60ba      	str	r2, [r7, #8]
 80064fe:	781a      	ldrb	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1b7      	bne.n	8006480 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	2200      	movs	r2, #0
 8006518:	2140      	movs	r1, #64	; 0x40
 800651a:	68f8      	ldr	r0, [r7, #12]
 800651c:	f000 fa6e 	bl	80069fc <UART_WaitOnFlagUntilTimeout>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e006      	b.n	8006538 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	e000      	b.n	8006538 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006536:	2302      	movs	r3, #2
  }
}
 8006538:	4618      	mov	r0, r3
 800653a:	3718      	adds	r7, #24
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af02      	add	r7, sp, #8
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	4613      	mov	r3, r2
 800654e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b20      	cmp	r3, #32
 800655e:	f040 8090 	bne.w	8006682 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_UART_Receive+0x2e>
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e088      	b.n	8006684 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006578:	2b01      	cmp	r3, #1
 800657a:	d101      	bne.n	8006580 <HAL_UART_Receive+0x40>
 800657c:	2302      	movs	r3, #2
 800657e:	e081      	b.n	8006684 <HAL_UART_Receive+0x144>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2200      	movs	r2, #0
 800658c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2222      	movs	r2, #34	; 0x22
 8006592:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006596:	f7fd ffe5 	bl	8004564 <HAL_GetTick>
 800659a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	88fa      	ldrh	r2, [r7, #6]
 80065a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	88fa      	ldrh	r2, [r7, #6]
 80065a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80065b0:	e05c      	b.n	800666c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c8:	d12b      	bne.n	8006622 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2200      	movs	r2, #0
 80065d2:	2120      	movs	r1, #32
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 fa11 	bl	80069fc <UART_WaitOnFlagUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e04f      	b.n	8006684 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d10c      	bne.n	800660a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	3302      	adds	r3, #2
 8006606:	60bb      	str	r3, [r7, #8]
 8006608:	e030      	b.n	800666c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	b29b      	uxth	r3, r3
 8006612:	b2db      	uxtb	r3, r3
 8006614:	b29a      	uxth	r2, r3
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	3301      	adds	r3, #1
 800661e:	60bb      	str	r3, [r7, #8]
 8006620:	e024      	b.n	800666c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2200      	movs	r2, #0
 800662a:	2120      	movs	r1, #32
 800662c:	68f8      	ldr	r0, [r7, #12]
 800662e:	f000 f9e5 	bl	80069fc <UART_WaitOnFlagUntilTimeout>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	d001      	beq.n	800663c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006638:	2303      	movs	r3, #3
 800663a:	e023      	b.n	8006684 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d108      	bne.n	8006656 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6859      	ldr	r1, [r3, #4]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	60ba      	str	r2, [r7, #8]
 8006650:	b2ca      	uxtb	r2, r1
 8006652:	701a      	strb	r2, [r3, #0]
 8006654:	e00a      	b.n	800666c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	b2da      	uxtb	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	1c59      	adds	r1, r3, #1
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006668:	b2d2      	uxtb	r2, r2
 800666a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006670:	b29b      	uxth	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d19d      	bne.n	80065b2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2220      	movs	r2, #32
 800667a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	e000      	b.n	8006684 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006682:	2302      	movs	r3, #2
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4613      	mov	r3, r2
 8006698:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d130      	bne.n	8006708 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d002      	beq.n	80066b2 <HAL_UART_Transmit_IT+0x26>
 80066ac:	88fb      	ldrh	r3, [r7, #6]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e029      	b.n	800670a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d101      	bne.n	80066c4 <HAL_UART_Transmit_IT+0x38>
 80066c0:	2302      	movs	r3, #2
 80066c2:	e022      	b.n	800670a <HAL_UART_Transmit_IT+0x7e>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	88fa      	ldrh	r2, [r7, #6]
 80066d6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	88fa      	ldrh	r2, [r7, #6]
 80066dc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2221      	movs	r2, #33	; 0x21
 80066e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68da      	ldr	r2, [r3, #12]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006702:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	e000      	b.n	800670a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006708:	2302      	movs	r3, #2
  }
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	60b9      	str	r1, [r7, #8]
 8006720:	4613      	mov	r3, r2
 8006722:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800672a:	b2db      	uxtb	r3, r3
 800672c:	2b20      	cmp	r3, #32
 800672e:	d140      	bne.n	80067b2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d002      	beq.n	800673c <HAL_UART_Receive_IT+0x26>
 8006736:	88fb      	ldrh	r3, [r7, #6]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e039      	b.n	80067b4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006746:	2b01      	cmp	r3, #1
 8006748:	d101      	bne.n	800674e <HAL_UART_Receive_IT+0x38>
 800674a:	2302      	movs	r3, #2
 800674c:	e032      	b.n	80067b4 <HAL_UART_Receive_IT+0x9e>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2201      	movs	r2, #1
 8006752:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	88fa      	ldrh	r2, [r7, #6]
 8006760:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	88fa      	ldrh	r2, [r7, #6]
 8006766:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2222      	movs	r2, #34	; 0x22
 8006772:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800678c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f042 0201 	orr.w	r2, r2, #1
 800679c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68da      	ldr	r2, [r3, #12]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f042 0220 	orr.w	r2, r2, #32
 80067ac:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	e000      	b.n	80067b4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80067b2:	2302      	movs	r3, #2
  }
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10d      	bne.n	8006812 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f003 0320 	and.w	r3, r3, #32
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d008      	beq.n	8006812 <HAL_UART_IRQHandler+0x52>
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	f003 0320 	and.w	r3, r3, #32
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f9e0 	bl	8006bd0 <UART_Receive_IT>
      return;
 8006810:	e0d1      	b.n	80069b6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80b0 	beq.w	800697a <HAL_UART_IRQHandler+0x1ba>
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <HAL_UART_IRQHandler+0x70>
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 80a5 	beq.w	800697a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	f003 0301 	and.w	r3, r3, #1
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <HAL_UART_IRQHandler+0x90>
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006848:	f043 0201 	orr.w	r2, r3, #1
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006850:	69fb      	ldr	r3, [r7, #28]
 8006852:	f003 0304 	and.w	r3, r3, #4
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_UART_IRQHandler+0xb0>
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006868:	f043 0202 	orr.w	r2, r3, #2
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <HAL_UART_IRQHandler+0xd0>
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006888:	f043 0204 	orr.w	r2, r3, #4
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00f      	beq.n	80068ba <HAL_UART_IRQHandler+0xfa>
 800689a:	69bb      	ldr	r3, [r7, #24]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d104      	bne.n	80068ae <HAL_UART_IRQHandler+0xee>
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d005      	beq.n	80068ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	f043 0208 	orr.w	r2, r3, #8
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d078      	beq.n	80069b4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <HAL_UART_IRQHandler+0x11c>
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d002      	beq.n	80068dc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f97a 	bl	8006bd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	bf0c      	ite	eq
 80068ea:	2301      	moveq	r3, #1
 80068ec:	2300      	movne	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068f6:	f003 0308 	and.w	r3, r3, #8
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d102      	bne.n	8006904 <HAL_UART_IRQHandler+0x144>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d031      	beq.n	8006968 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f8c3 	bl	8006a90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006914:	2b40      	cmp	r3, #64	; 0x40
 8006916:	d123      	bne.n	8006960 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695a      	ldr	r2, [r3, #20]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006926:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692c:	2b00      	cmp	r3, #0
 800692e:	d013      	beq.n	8006958 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006934:	4a21      	ldr	r2, [pc, #132]	; (80069bc <HAL_UART_IRQHandler+0x1fc>)
 8006936:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693c:	4618      	mov	r0, r3
 800693e:	f7fd ff50 	bl	80047e2 <HAL_DMA_Abort_IT>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d016      	beq.n	8006976 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006952:	4610      	mov	r0, r2
 8006954:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006956:	e00e      	b.n	8006976 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 f845 	bl	80069e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695e:	e00a      	b.n	8006976 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f000 f841 	bl	80069e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006966:	e006      	b.n	8006976 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f83d 	bl	80069e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006974:	e01e      	b.n	80069b4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006976:	bf00      	nop
    return;
 8006978:	e01c      	b.n	80069b4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006980:	2b00      	cmp	r3, #0
 8006982:	d008      	beq.n	8006996 <HAL_UART_IRQHandler+0x1d6>
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f8b0 	bl	8006af4 <UART_Transmit_IT>
    return;
 8006994:	e00f      	b.n	80069b6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00a      	beq.n	80069b6 <HAL_UART_IRQHandler+0x1f6>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d005      	beq.n	80069b6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f8f8 	bl	8006ba0 <UART_EndTransmit_IT>
    return;
 80069b0:	bf00      	nop
 80069b2:	e000      	b.n	80069b6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80069b4:	bf00      	nop
  }
}
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	08006acd 	.word	0x08006acd

080069c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069c8:	bf00      	nop
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b083      	sub	sp, #12
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069f0:	bf00      	nop
 80069f2:	370c      	adds	r7, #12
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a0c:	e02c      	b.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a14:	d028      	beq.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d007      	beq.n	8006a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a1c:	f7fd fda2 	bl	8004564 <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d21d      	bcs.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	695a      	ldr	r2, [r3, #20]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0201 	bic.w	r2, r2, #1
 8006a4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e00f      	b.n	8006a88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	4013      	ands	r3, r2
 8006a72:	68ba      	ldr	r2, [r7, #8]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	bf0c      	ite	eq
 8006a78:	2301      	moveq	r3, #1
 8006a7a:	2300      	movne	r3, #0
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	461a      	mov	r2, r3
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d0c3      	beq.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006aa6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695a      	ldr	r2, [r3, #20]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f022 0201 	bic.w	r2, r2, #1
 8006ab6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ae6:	68f8      	ldr	r0, [r7, #12]
 8006ae8:	f7ff ff7e 	bl	80069e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aec:	bf00      	nop
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b21      	cmp	r3, #33	; 0x21
 8006b06:	d144      	bne.n	8006b92 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b10:	d11a      	bne.n	8006b48 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b26:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d105      	bne.n	8006b3c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6a1b      	ldr	r3, [r3, #32]
 8006b34:	1c9a      	adds	r2, r3, #2
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]
 8006b3a:	e00e      	b.n	8006b5a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a1b      	ldr	r3, [r3, #32]
 8006b40:	1c5a      	adds	r2, r3, #1
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	621a      	str	r2, [r3, #32]
 8006b46:	e008      	b.n	8006b5a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6a1b      	ldr	r3, [r3, #32]
 8006b4c:	1c59      	adds	r1, r3, #1
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6211      	str	r1, [r2, #32]
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	3b01      	subs	r3, #1
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	4619      	mov	r1, r3
 8006b68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10f      	bne.n	8006b8e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	e000      	b.n	8006b94 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
  }
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3714      	adds	r7, #20
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f7ff fefd 	bl	80069c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b22      	cmp	r3, #34	; 0x22
 8006be2:	d171      	bne.n	8006cc8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bec:	d123      	bne.n	8006c36 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10e      	bne.n	8006c1a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	1c9a      	adds	r2, r3, #2
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	629a      	str	r2, [r3, #40]	; 0x28
 8006c18:	e029      	b.n	8006c6e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	b29a      	uxth	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	1c5a      	adds	r2, r3, #1
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	629a      	str	r2, [r3, #40]	; 0x28
 8006c34:	e01b      	b.n	8006c6e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	6858      	ldr	r0, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	1c59      	adds	r1, r3, #1
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	6291      	str	r1, [r2, #40]	; 0x28
 8006c4e:	b2c2      	uxtb	r2, r0
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e00c      	b.n	8006c6e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	1c58      	adds	r0, r3, #1
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	6288      	str	r0, [r1, #40]	; 0x28
 8006c66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	3b01      	subs	r3, #1
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d120      	bne.n	8006cc4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68da      	ldr	r2, [r3, #12]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f022 0220 	bic.w	r2, r2, #32
 8006c90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695a      	ldr	r2, [r3, #20]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7ff fe8a 	bl	80069d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	e002      	b.n	8006cca <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	e000      	b.n	8006cca <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006cc8:	2302      	movs	r3, #2
  }
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3710      	adds	r7, #16
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
	...

08006cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	b085      	sub	sp, #20
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	689a      	ldr	r2, [r3, #8]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	69db      	ldr	r3, [r3, #28]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006d16:	f023 030c 	bic.w	r3, r3, #12
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	6812      	ldr	r2, [r2, #0]
 8006d1e:	68f9      	ldr	r1, [r7, #12]
 8006d20:	430b      	orrs	r3, r1
 8006d22:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d42:	f040 818b 	bne.w	800705c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4ac1      	ldr	r2, [pc, #772]	; (8007050 <UART_SetConfig+0x37c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d005      	beq.n	8006d5c <UART_SetConfig+0x88>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4abf      	ldr	r2, [pc, #764]	; (8007054 <UART_SetConfig+0x380>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	f040 80bd 	bne.w	8006ed6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d5c:	f7ff faf6 	bl	800634c <HAL_RCC_GetPCLK2Freq>
 8006d60:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	461d      	mov	r5, r3
 8006d66:	f04f 0600 	mov.w	r6, #0
 8006d6a:	46a8      	mov	r8, r5
 8006d6c:	46b1      	mov	r9, r6
 8006d6e:	eb18 0308 	adds.w	r3, r8, r8
 8006d72:	eb49 0409 	adc.w	r4, r9, r9
 8006d76:	4698      	mov	r8, r3
 8006d78:	46a1      	mov	r9, r4
 8006d7a:	eb18 0805 	adds.w	r8, r8, r5
 8006d7e:	eb49 0906 	adc.w	r9, r9, r6
 8006d82:	f04f 0100 	mov.w	r1, #0
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006d8e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006d92:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006d96:	4688      	mov	r8, r1
 8006d98:	4691      	mov	r9, r2
 8006d9a:	eb18 0005 	adds.w	r0, r8, r5
 8006d9e:	eb49 0106 	adc.w	r1, r9, r6
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	461d      	mov	r5, r3
 8006da8:	f04f 0600 	mov.w	r6, #0
 8006dac:	196b      	adds	r3, r5, r5
 8006dae:	eb46 0406 	adc.w	r4, r6, r6
 8006db2:	461a      	mov	r2, r3
 8006db4:	4623      	mov	r3, r4
 8006db6:	f7f9 ff0f 	bl	8000bd8 <__aeabi_uldivmod>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	460c      	mov	r4, r1
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	4ba5      	ldr	r3, [pc, #660]	; (8007058 <UART_SetConfig+0x384>)
 8006dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8006dc6:	095b      	lsrs	r3, r3, #5
 8006dc8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	461d      	mov	r5, r3
 8006dd0:	f04f 0600 	mov.w	r6, #0
 8006dd4:	46a9      	mov	r9, r5
 8006dd6:	46b2      	mov	sl, r6
 8006dd8:	eb19 0309 	adds.w	r3, r9, r9
 8006ddc:	eb4a 040a 	adc.w	r4, sl, sl
 8006de0:	4699      	mov	r9, r3
 8006de2:	46a2      	mov	sl, r4
 8006de4:	eb19 0905 	adds.w	r9, r9, r5
 8006de8:	eb4a 0a06 	adc.w	sl, sl, r6
 8006dec:	f04f 0100 	mov.w	r1, #0
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006df8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006dfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e00:	4689      	mov	r9, r1
 8006e02:	4692      	mov	sl, r2
 8006e04:	eb19 0005 	adds.w	r0, r9, r5
 8006e08:	eb4a 0106 	adc.w	r1, sl, r6
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	461d      	mov	r5, r3
 8006e12:	f04f 0600 	mov.w	r6, #0
 8006e16:	196b      	adds	r3, r5, r5
 8006e18:	eb46 0406 	adc.w	r4, r6, r6
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	4623      	mov	r3, r4
 8006e20:	f7f9 feda 	bl	8000bd8 <__aeabi_uldivmod>
 8006e24:	4603      	mov	r3, r0
 8006e26:	460c      	mov	r4, r1
 8006e28:	461a      	mov	r2, r3
 8006e2a:	4b8b      	ldr	r3, [pc, #556]	; (8007058 <UART_SetConfig+0x384>)
 8006e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8006e30:	095b      	lsrs	r3, r3, #5
 8006e32:	2164      	movs	r1, #100	; 0x64
 8006e34:	fb01 f303 	mul.w	r3, r1, r3
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	00db      	lsls	r3, r3, #3
 8006e3c:	3332      	adds	r3, #50	; 0x32
 8006e3e:	4a86      	ldr	r2, [pc, #536]	; (8007058 <UART_SetConfig+0x384>)
 8006e40:	fba2 2303 	umull	r2, r3, r2, r3
 8006e44:	095b      	lsrs	r3, r3, #5
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e4c:	4498      	add	r8, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	461d      	mov	r5, r3
 8006e52:	f04f 0600 	mov.w	r6, #0
 8006e56:	46a9      	mov	r9, r5
 8006e58:	46b2      	mov	sl, r6
 8006e5a:	eb19 0309 	adds.w	r3, r9, r9
 8006e5e:	eb4a 040a 	adc.w	r4, sl, sl
 8006e62:	4699      	mov	r9, r3
 8006e64:	46a2      	mov	sl, r4
 8006e66:	eb19 0905 	adds.w	r9, r9, r5
 8006e6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8006e6e:	f04f 0100 	mov.w	r1, #0
 8006e72:	f04f 0200 	mov.w	r2, #0
 8006e76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006e7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006e82:	4689      	mov	r9, r1
 8006e84:	4692      	mov	sl, r2
 8006e86:	eb19 0005 	adds.w	r0, r9, r5
 8006e8a:	eb4a 0106 	adc.w	r1, sl, r6
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	461d      	mov	r5, r3
 8006e94:	f04f 0600 	mov.w	r6, #0
 8006e98:	196b      	adds	r3, r5, r5
 8006e9a:	eb46 0406 	adc.w	r4, r6, r6
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	4623      	mov	r3, r4
 8006ea2:	f7f9 fe99 	bl	8000bd8 <__aeabi_uldivmod>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	461a      	mov	r2, r3
 8006eac:	4b6a      	ldr	r3, [pc, #424]	; (8007058 <UART_SetConfig+0x384>)
 8006eae:	fba3 1302 	umull	r1, r3, r3, r2
 8006eb2:	095b      	lsrs	r3, r3, #5
 8006eb4:	2164      	movs	r1, #100	; 0x64
 8006eb6:	fb01 f303 	mul.w	r3, r1, r3
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	3332      	adds	r3, #50	; 0x32
 8006ec0:	4a65      	ldr	r2, [pc, #404]	; (8007058 <UART_SetConfig+0x384>)
 8006ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	f003 0207 	and.w	r2, r3, #7
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4442      	add	r2, r8
 8006ed2:	609a      	str	r2, [r3, #8]
 8006ed4:	e26f      	b.n	80073b6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ed6:	f7ff fa25 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8006eda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	461d      	mov	r5, r3
 8006ee0:	f04f 0600 	mov.w	r6, #0
 8006ee4:	46a8      	mov	r8, r5
 8006ee6:	46b1      	mov	r9, r6
 8006ee8:	eb18 0308 	adds.w	r3, r8, r8
 8006eec:	eb49 0409 	adc.w	r4, r9, r9
 8006ef0:	4698      	mov	r8, r3
 8006ef2:	46a1      	mov	r9, r4
 8006ef4:	eb18 0805 	adds.w	r8, r8, r5
 8006ef8:	eb49 0906 	adc.w	r9, r9, r6
 8006efc:	f04f 0100 	mov.w	r1, #0
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006f08:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006f0c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006f10:	4688      	mov	r8, r1
 8006f12:	4691      	mov	r9, r2
 8006f14:	eb18 0005 	adds.w	r0, r8, r5
 8006f18:	eb49 0106 	adc.w	r1, r9, r6
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	461d      	mov	r5, r3
 8006f22:	f04f 0600 	mov.w	r6, #0
 8006f26:	196b      	adds	r3, r5, r5
 8006f28:	eb46 0406 	adc.w	r4, r6, r6
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	4623      	mov	r3, r4
 8006f30:	f7f9 fe52 	bl	8000bd8 <__aeabi_uldivmod>
 8006f34:	4603      	mov	r3, r0
 8006f36:	460c      	mov	r4, r1
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4b47      	ldr	r3, [pc, #284]	; (8007058 <UART_SetConfig+0x384>)
 8006f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	461d      	mov	r5, r3
 8006f4a:	f04f 0600 	mov.w	r6, #0
 8006f4e:	46a9      	mov	r9, r5
 8006f50:	46b2      	mov	sl, r6
 8006f52:	eb19 0309 	adds.w	r3, r9, r9
 8006f56:	eb4a 040a 	adc.w	r4, sl, sl
 8006f5a:	4699      	mov	r9, r3
 8006f5c:	46a2      	mov	sl, r4
 8006f5e:	eb19 0905 	adds.w	r9, r9, r5
 8006f62:	eb4a 0a06 	adc.w	sl, sl, r6
 8006f66:	f04f 0100 	mov.w	r1, #0
 8006f6a:	f04f 0200 	mov.w	r2, #0
 8006f6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006f76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006f7a:	4689      	mov	r9, r1
 8006f7c:	4692      	mov	sl, r2
 8006f7e:	eb19 0005 	adds.w	r0, r9, r5
 8006f82:	eb4a 0106 	adc.w	r1, sl, r6
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	461d      	mov	r5, r3
 8006f8c:	f04f 0600 	mov.w	r6, #0
 8006f90:	196b      	adds	r3, r5, r5
 8006f92:	eb46 0406 	adc.w	r4, r6, r6
 8006f96:	461a      	mov	r2, r3
 8006f98:	4623      	mov	r3, r4
 8006f9a:	f7f9 fe1d 	bl	8000bd8 <__aeabi_uldivmod>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	4b2c      	ldr	r3, [pc, #176]	; (8007058 <UART_SetConfig+0x384>)
 8006fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8006faa:	095b      	lsrs	r3, r3, #5
 8006fac:	2164      	movs	r1, #100	; 0x64
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	00db      	lsls	r3, r3, #3
 8006fb6:	3332      	adds	r3, #50	; 0x32
 8006fb8:	4a27      	ldr	r2, [pc, #156]	; (8007058 <UART_SetConfig+0x384>)
 8006fba:	fba2 2303 	umull	r2, r3, r2, r3
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	005b      	lsls	r3, r3, #1
 8006fc2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006fc6:	4498      	add	r8, r3
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	461d      	mov	r5, r3
 8006fcc:	f04f 0600 	mov.w	r6, #0
 8006fd0:	46a9      	mov	r9, r5
 8006fd2:	46b2      	mov	sl, r6
 8006fd4:	eb19 0309 	adds.w	r3, r9, r9
 8006fd8:	eb4a 040a 	adc.w	r4, sl, sl
 8006fdc:	4699      	mov	r9, r3
 8006fde:	46a2      	mov	sl, r4
 8006fe0:	eb19 0905 	adds.w	r9, r9, r5
 8006fe4:	eb4a 0a06 	adc.w	sl, sl, r6
 8006fe8:	f04f 0100 	mov.w	r1, #0
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ff4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ff8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ffc:	4689      	mov	r9, r1
 8006ffe:	4692      	mov	sl, r2
 8007000:	eb19 0005 	adds.w	r0, r9, r5
 8007004:	eb4a 0106 	adc.w	r1, sl, r6
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	461d      	mov	r5, r3
 800700e:	f04f 0600 	mov.w	r6, #0
 8007012:	196b      	adds	r3, r5, r5
 8007014:	eb46 0406 	adc.w	r4, r6, r6
 8007018:	461a      	mov	r2, r3
 800701a:	4623      	mov	r3, r4
 800701c:	f7f9 fddc 	bl	8000bd8 <__aeabi_uldivmod>
 8007020:	4603      	mov	r3, r0
 8007022:	460c      	mov	r4, r1
 8007024:	461a      	mov	r2, r3
 8007026:	4b0c      	ldr	r3, [pc, #48]	; (8007058 <UART_SetConfig+0x384>)
 8007028:	fba3 1302 	umull	r1, r3, r3, r2
 800702c:	095b      	lsrs	r3, r3, #5
 800702e:	2164      	movs	r1, #100	; 0x64
 8007030:	fb01 f303 	mul.w	r3, r1, r3
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	3332      	adds	r3, #50	; 0x32
 800703a:	4a07      	ldr	r2, [pc, #28]	; (8007058 <UART_SetConfig+0x384>)
 800703c:	fba2 2303 	umull	r2, r3, r2, r3
 8007040:	095b      	lsrs	r3, r3, #5
 8007042:	f003 0207 	and.w	r2, r3, #7
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4442      	add	r2, r8
 800704c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800704e:	e1b2      	b.n	80073b6 <UART_SetConfig+0x6e2>
 8007050:	40011000 	.word	0x40011000
 8007054:	40011400 	.word	0x40011400
 8007058:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4ad7      	ldr	r2, [pc, #860]	; (80073c0 <UART_SetConfig+0x6ec>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d005      	beq.n	8007072 <UART_SetConfig+0x39e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4ad6      	ldr	r2, [pc, #856]	; (80073c4 <UART_SetConfig+0x6f0>)
 800706c:	4293      	cmp	r3, r2
 800706e:	f040 80d1 	bne.w	8007214 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007072:	f7ff f96b 	bl	800634c <HAL_RCC_GetPCLK2Freq>
 8007076:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	469a      	mov	sl, r3
 800707c:	f04f 0b00 	mov.w	fp, #0
 8007080:	46d0      	mov	r8, sl
 8007082:	46d9      	mov	r9, fp
 8007084:	eb18 0308 	adds.w	r3, r8, r8
 8007088:	eb49 0409 	adc.w	r4, r9, r9
 800708c:	4698      	mov	r8, r3
 800708e:	46a1      	mov	r9, r4
 8007090:	eb18 080a 	adds.w	r8, r8, sl
 8007094:	eb49 090b 	adc.w	r9, r9, fp
 8007098:	f04f 0100 	mov.w	r1, #0
 800709c:	f04f 0200 	mov.w	r2, #0
 80070a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80070a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80070a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80070ac:	4688      	mov	r8, r1
 80070ae:	4691      	mov	r9, r2
 80070b0:	eb1a 0508 	adds.w	r5, sl, r8
 80070b4:	eb4b 0609 	adc.w	r6, fp, r9
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4619      	mov	r1, r3
 80070be:	f04f 0200 	mov.w	r2, #0
 80070c2:	f04f 0300 	mov.w	r3, #0
 80070c6:	f04f 0400 	mov.w	r4, #0
 80070ca:	0094      	lsls	r4, r2, #2
 80070cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80070d0:	008b      	lsls	r3, r1, #2
 80070d2:	461a      	mov	r2, r3
 80070d4:	4623      	mov	r3, r4
 80070d6:	4628      	mov	r0, r5
 80070d8:	4631      	mov	r1, r6
 80070da:	f7f9 fd7d 	bl	8000bd8 <__aeabi_uldivmod>
 80070de:	4603      	mov	r3, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	461a      	mov	r2, r3
 80070e4:	4bb8      	ldr	r3, [pc, #736]	; (80073c8 <UART_SetConfig+0x6f4>)
 80070e6:	fba3 2302 	umull	r2, r3, r3, r2
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	469b      	mov	fp, r3
 80070f4:	f04f 0c00 	mov.w	ip, #0
 80070f8:	46d9      	mov	r9, fp
 80070fa:	46e2      	mov	sl, ip
 80070fc:	eb19 0309 	adds.w	r3, r9, r9
 8007100:	eb4a 040a 	adc.w	r4, sl, sl
 8007104:	4699      	mov	r9, r3
 8007106:	46a2      	mov	sl, r4
 8007108:	eb19 090b 	adds.w	r9, r9, fp
 800710c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007110:	f04f 0100 	mov.w	r1, #0
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800711c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007120:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007124:	4689      	mov	r9, r1
 8007126:	4692      	mov	sl, r2
 8007128:	eb1b 0509 	adds.w	r5, fp, r9
 800712c:	eb4c 060a 	adc.w	r6, ip, sl
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	4619      	mov	r1, r3
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	f04f 0400 	mov.w	r4, #0
 8007142:	0094      	lsls	r4, r2, #2
 8007144:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007148:	008b      	lsls	r3, r1, #2
 800714a:	461a      	mov	r2, r3
 800714c:	4623      	mov	r3, r4
 800714e:	4628      	mov	r0, r5
 8007150:	4631      	mov	r1, r6
 8007152:	f7f9 fd41 	bl	8000bd8 <__aeabi_uldivmod>
 8007156:	4603      	mov	r3, r0
 8007158:	460c      	mov	r4, r1
 800715a:	461a      	mov	r2, r3
 800715c:	4b9a      	ldr	r3, [pc, #616]	; (80073c8 <UART_SetConfig+0x6f4>)
 800715e:	fba3 1302 	umull	r1, r3, r3, r2
 8007162:	095b      	lsrs	r3, r3, #5
 8007164:	2164      	movs	r1, #100	; 0x64
 8007166:	fb01 f303 	mul.w	r3, r1, r3
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	011b      	lsls	r3, r3, #4
 800716e:	3332      	adds	r3, #50	; 0x32
 8007170:	4a95      	ldr	r2, [pc, #596]	; (80073c8 <UART_SetConfig+0x6f4>)
 8007172:	fba2 2303 	umull	r2, r3, r2, r3
 8007176:	095b      	lsrs	r3, r3, #5
 8007178:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800717c:	4498      	add	r8, r3
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	469b      	mov	fp, r3
 8007182:	f04f 0c00 	mov.w	ip, #0
 8007186:	46d9      	mov	r9, fp
 8007188:	46e2      	mov	sl, ip
 800718a:	eb19 0309 	adds.w	r3, r9, r9
 800718e:	eb4a 040a 	adc.w	r4, sl, sl
 8007192:	4699      	mov	r9, r3
 8007194:	46a2      	mov	sl, r4
 8007196:	eb19 090b 	adds.w	r9, r9, fp
 800719a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800719e:	f04f 0100 	mov.w	r1, #0
 80071a2:	f04f 0200 	mov.w	r2, #0
 80071a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80071ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80071b2:	4689      	mov	r9, r1
 80071b4:	4692      	mov	sl, r2
 80071b6:	eb1b 0509 	adds.w	r5, fp, r9
 80071ba:	eb4c 060a 	adc.w	r6, ip, sl
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	4619      	mov	r1, r3
 80071c4:	f04f 0200 	mov.w	r2, #0
 80071c8:	f04f 0300 	mov.w	r3, #0
 80071cc:	f04f 0400 	mov.w	r4, #0
 80071d0:	0094      	lsls	r4, r2, #2
 80071d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80071d6:	008b      	lsls	r3, r1, #2
 80071d8:	461a      	mov	r2, r3
 80071da:	4623      	mov	r3, r4
 80071dc:	4628      	mov	r0, r5
 80071de:	4631      	mov	r1, r6
 80071e0:	f7f9 fcfa 	bl	8000bd8 <__aeabi_uldivmod>
 80071e4:	4603      	mov	r3, r0
 80071e6:	460c      	mov	r4, r1
 80071e8:	461a      	mov	r2, r3
 80071ea:	4b77      	ldr	r3, [pc, #476]	; (80073c8 <UART_SetConfig+0x6f4>)
 80071ec:	fba3 1302 	umull	r1, r3, r3, r2
 80071f0:	095b      	lsrs	r3, r3, #5
 80071f2:	2164      	movs	r1, #100	; 0x64
 80071f4:	fb01 f303 	mul.w	r3, r1, r3
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	011b      	lsls	r3, r3, #4
 80071fc:	3332      	adds	r3, #50	; 0x32
 80071fe:	4a72      	ldr	r2, [pc, #456]	; (80073c8 <UART_SetConfig+0x6f4>)
 8007200:	fba2 2303 	umull	r2, r3, r2, r3
 8007204:	095b      	lsrs	r3, r3, #5
 8007206:	f003 020f 	and.w	r2, r3, #15
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4442      	add	r2, r8
 8007210:	609a      	str	r2, [r3, #8]
 8007212:	e0d0      	b.n	80073b6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007214:	f7ff f886 	bl	8006324 <HAL_RCC_GetPCLK1Freq>
 8007218:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	469a      	mov	sl, r3
 800721e:	f04f 0b00 	mov.w	fp, #0
 8007222:	46d0      	mov	r8, sl
 8007224:	46d9      	mov	r9, fp
 8007226:	eb18 0308 	adds.w	r3, r8, r8
 800722a:	eb49 0409 	adc.w	r4, r9, r9
 800722e:	4698      	mov	r8, r3
 8007230:	46a1      	mov	r9, r4
 8007232:	eb18 080a 	adds.w	r8, r8, sl
 8007236:	eb49 090b 	adc.w	r9, r9, fp
 800723a:	f04f 0100 	mov.w	r1, #0
 800723e:	f04f 0200 	mov.w	r2, #0
 8007242:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007246:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800724a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800724e:	4688      	mov	r8, r1
 8007250:	4691      	mov	r9, r2
 8007252:	eb1a 0508 	adds.w	r5, sl, r8
 8007256:	eb4b 0609 	adc.w	r6, fp, r9
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	4619      	mov	r1, r3
 8007260:	f04f 0200 	mov.w	r2, #0
 8007264:	f04f 0300 	mov.w	r3, #0
 8007268:	f04f 0400 	mov.w	r4, #0
 800726c:	0094      	lsls	r4, r2, #2
 800726e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007272:	008b      	lsls	r3, r1, #2
 8007274:	461a      	mov	r2, r3
 8007276:	4623      	mov	r3, r4
 8007278:	4628      	mov	r0, r5
 800727a:	4631      	mov	r1, r6
 800727c:	f7f9 fcac 	bl	8000bd8 <__aeabi_uldivmod>
 8007280:	4603      	mov	r3, r0
 8007282:	460c      	mov	r4, r1
 8007284:	461a      	mov	r2, r3
 8007286:	4b50      	ldr	r3, [pc, #320]	; (80073c8 <UART_SetConfig+0x6f4>)
 8007288:	fba3 2302 	umull	r2, r3, r3, r2
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	469b      	mov	fp, r3
 8007296:	f04f 0c00 	mov.w	ip, #0
 800729a:	46d9      	mov	r9, fp
 800729c:	46e2      	mov	sl, ip
 800729e:	eb19 0309 	adds.w	r3, r9, r9
 80072a2:	eb4a 040a 	adc.w	r4, sl, sl
 80072a6:	4699      	mov	r9, r3
 80072a8:	46a2      	mov	sl, r4
 80072aa:	eb19 090b 	adds.w	r9, r9, fp
 80072ae:	eb4a 0a0c 	adc.w	sl, sl, ip
 80072b2:	f04f 0100 	mov.w	r1, #0
 80072b6:	f04f 0200 	mov.w	r2, #0
 80072ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072c6:	4689      	mov	r9, r1
 80072c8:	4692      	mov	sl, r2
 80072ca:	eb1b 0509 	adds.w	r5, fp, r9
 80072ce:	eb4c 060a 	adc.w	r6, ip, sl
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	4619      	mov	r1, r3
 80072d8:	f04f 0200 	mov.w	r2, #0
 80072dc:	f04f 0300 	mov.w	r3, #0
 80072e0:	f04f 0400 	mov.w	r4, #0
 80072e4:	0094      	lsls	r4, r2, #2
 80072e6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80072ea:	008b      	lsls	r3, r1, #2
 80072ec:	461a      	mov	r2, r3
 80072ee:	4623      	mov	r3, r4
 80072f0:	4628      	mov	r0, r5
 80072f2:	4631      	mov	r1, r6
 80072f4:	f7f9 fc70 	bl	8000bd8 <__aeabi_uldivmod>
 80072f8:	4603      	mov	r3, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	461a      	mov	r2, r3
 80072fe:	4b32      	ldr	r3, [pc, #200]	; (80073c8 <UART_SetConfig+0x6f4>)
 8007300:	fba3 1302 	umull	r1, r3, r3, r2
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	2164      	movs	r1, #100	; 0x64
 8007308:	fb01 f303 	mul.w	r3, r1, r3
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	3332      	adds	r3, #50	; 0x32
 8007312:	4a2d      	ldr	r2, [pc, #180]	; (80073c8 <UART_SetConfig+0x6f4>)
 8007314:	fba2 2303 	umull	r2, r3, r2, r3
 8007318:	095b      	lsrs	r3, r3, #5
 800731a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800731e:	4498      	add	r8, r3
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	469b      	mov	fp, r3
 8007324:	f04f 0c00 	mov.w	ip, #0
 8007328:	46d9      	mov	r9, fp
 800732a:	46e2      	mov	sl, ip
 800732c:	eb19 0309 	adds.w	r3, r9, r9
 8007330:	eb4a 040a 	adc.w	r4, sl, sl
 8007334:	4699      	mov	r9, r3
 8007336:	46a2      	mov	sl, r4
 8007338:	eb19 090b 	adds.w	r9, r9, fp
 800733c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007340:	f04f 0100 	mov.w	r1, #0
 8007344:	f04f 0200 	mov.w	r2, #0
 8007348:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800734c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007350:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007354:	4689      	mov	r9, r1
 8007356:	4692      	mov	sl, r2
 8007358:	eb1b 0509 	adds.w	r5, fp, r9
 800735c:	eb4c 060a 	adc.w	r6, ip, sl
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	4619      	mov	r1, r3
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	f04f 0400 	mov.w	r4, #0
 8007372:	0094      	lsls	r4, r2, #2
 8007374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007378:	008b      	lsls	r3, r1, #2
 800737a:	461a      	mov	r2, r3
 800737c:	4623      	mov	r3, r4
 800737e:	4628      	mov	r0, r5
 8007380:	4631      	mov	r1, r6
 8007382:	f7f9 fc29 	bl	8000bd8 <__aeabi_uldivmod>
 8007386:	4603      	mov	r3, r0
 8007388:	460c      	mov	r4, r1
 800738a:	461a      	mov	r2, r3
 800738c:	4b0e      	ldr	r3, [pc, #56]	; (80073c8 <UART_SetConfig+0x6f4>)
 800738e:	fba3 1302 	umull	r1, r3, r3, r2
 8007392:	095b      	lsrs	r3, r3, #5
 8007394:	2164      	movs	r1, #100	; 0x64
 8007396:	fb01 f303 	mul.w	r3, r1, r3
 800739a:	1ad3      	subs	r3, r2, r3
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	3332      	adds	r3, #50	; 0x32
 80073a0:	4a09      	ldr	r2, [pc, #36]	; (80073c8 <UART_SetConfig+0x6f4>)
 80073a2:	fba2 2303 	umull	r2, r3, r2, r3
 80073a6:	095b      	lsrs	r3, r3, #5
 80073a8:	f003 020f 	and.w	r2, r3, #15
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4442      	add	r2, r8
 80073b2:	609a      	str	r2, [r3, #8]
}
 80073b4:	e7ff      	b.n	80073b6 <UART_SetConfig+0x6e2>
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c0:	40011000 	.word	0x40011000
 80073c4:	40011400 	.word	0x40011400
 80073c8:	51eb851f 	.word	0x51eb851f
 80073cc:	00000000 	.word	0x00000000

080073d0 <atan>:
 80073d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d4:	ec55 4b10 	vmov	r4, r5, d0
 80073d8:	4bc3      	ldr	r3, [pc, #780]	; (80076e8 <atan+0x318>)
 80073da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80073de:	429e      	cmp	r6, r3
 80073e0:	46ab      	mov	fp, r5
 80073e2:	dd18      	ble.n	8007416 <atan+0x46>
 80073e4:	4bc1      	ldr	r3, [pc, #772]	; (80076ec <atan+0x31c>)
 80073e6:	429e      	cmp	r6, r3
 80073e8:	dc01      	bgt.n	80073ee <atan+0x1e>
 80073ea:	d109      	bne.n	8007400 <atan+0x30>
 80073ec:	b144      	cbz	r4, 8007400 <atan+0x30>
 80073ee:	4622      	mov	r2, r4
 80073f0:	462b      	mov	r3, r5
 80073f2:	4620      	mov	r0, r4
 80073f4:	4629      	mov	r1, r5
 80073f6:	f7f8 ff61 	bl	80002bc <__adddf3>
 80073fa:	4604      	mov	r4, r0
 80073fc:	460d      	mov	r5, r1
 80073fe:	e006      	b.n	800740e <atan+0x3e>
 8007400:	f1bb 0f00 	cmp.w	fp, #0
 8007404:	f340 8131 	ble.w	800766a <atan+0x29a>
 8007408:	a59b      	add	r5, pc, #620	; (adr r5, 8007678 <atan+0x2a8>)
 800740a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800740e:	ec45 4b10 	vmov	d0, r4, r5
 8007412:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007416:	4bb6      	ldr	r3, [pc, #728]	; (80076f0 <atan+0x320>)
 8007418:	429e      	cmp	r6, r3
 800741a:	dc14      	bgt.n	8007446 <atan+0x76>
 800741c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007420:	429e      	cmp	r6, r3
 8007422:	dc0d      	bgt.n	8007440 <atan+0x70>
 8007424:	a396      	add	r3, pc, #600	; (adr r3, 8007680 <atan+0x2b0>)
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	ee10 0a10 	vmov	r0, s0
 800742e:	4629      	mov	r1, r5
 8007430:	f7f8 ff44 	bl	80002bc <__adddf3>
 8007434:	2200      	movs	r2, #0
 8007436:	4baf      	ldr	r3, [pc, #700]	; (80076f4 <atan+0x324>)
 8007438:	f7f9 fb86 	bl	8000b48 <__aeabi_dcmpgt>
 800743c:	2800      	cmp	r0, #0
 800743e:	d1e6      	bne.n	800740e <atan+0x3e>
 8007440:	f04f 3aff 	mov.w	sl, #4294967295
 8007444:	e02b      	b.n	800749e <atan+0xce>
 8007446:	f000 f963 	bl	8007710 <fabs>
 800744a:	4bab      	ldr	r3, [pc, #684]	; (80076f8 <atan+0x328>)
 800744c:	429e      	cmp	r6, r3
 800744e:	ec55 4b10 	vmov	r4, r5, d0
 8007452:	f300 80bf 	bgt.w	80075d4 <atan+0x204>
 8007456:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800745a:	429e      	cmp	r6, r3
 800745c:	f300 80a0 	bgt.w	80075a0 <atan+0x1d0>
 8007460:	ee10 2a10 	vmov	r2, s0
 8007464:	ee10 0a10 	vmov	r0, s0
 8007468:	462b      	mov	r3, r5
 800746a:	4629      	mov	r1, r5
 800746c:	f7f8 ff26 	bl	80002bc <__adddf3>
 8007470:	2200      	movs	r2, #0
 8007472:	4ba0      	ldr	r3, [pc, #640]	; (80076f4 <atan+0x324>)
 8007474:	f7f8 ff20 	bl	80002b8 <__aeabi_dsub>
 8007478:	2200      	movs	r2, #0
 800747a:	4606      	mov	r6, r0
 800747c:	460f      	mov	r7, r1
 800747e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007482:	4620      	mov	r0, r4
 8007484:	4629      	mov	r1, r5
 8007486:	f7f8 ff19 	bl	80002bc <__adddf3>
 800748a:	4602      	mov	r2, r0
 800748c:	460b      	mov	r3, r1
 800748e:	4630      	mov	r0, r6
 8007490:	4639      	mov	r1, r7
 8007492:	f7f9 f9f3 	bl	800087c <__aeabi_ddiv>
 8007496:	f04f 0a00 	mov.w	sl, #0
 800749a:	4604      	mov	r4, r0
 800749c:	460d      	mov	r5, r1
 800749e:	4622      	mov	r2, r4
 80074a0:	462b      	mov	r3, r5
 80074a2:	4620      	mov	r0, r4
 80074a4:	4629      	mov	r1, r5
 80074a6:	f7f9 f8bf 	bl	8000628 <__aeabi_dmul>
 80074aa:	4602      	mov	r2, r0
 80074ac:	460b      	mov	r3, r1
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	f7f9 f8b9 	bl	8000628 <__aeabi_dmul>
 80074b6:	a374      	add	r3, pc, #464	; (adr r3, 8007688 <atan+0x2b8>)
 80074b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074bc:	4606      	mov	r6, r0
 80074be:	460f      	mov	r7, r1
 80074c0:	f7f9 f8b2 	bl	8000628 <__aeabi_dmul>
 80074c4:	a372      	add	r3, pc, #456	; (adr r3, 8007690 <atan+0x2c0>)
 80074c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ca:	f7f8 fef7 	bl	80002bc <__adddf3>
 80074ce:	4632      	mov	r2, r6
 80074d0:	463b      	mov	r3, r7
 80074d2:	f7f9 f8a9 	bl	8000628 <__aeabi_dmul>
 80074d6:	a370      	add	r3, pc, #448	; (adr r3, 8007698 <atan+0x2c8>)
 80074d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074dc:	f7f8 feee 	bl	80002bc <__adddf3>
 80074e0:	4632      	mov	r2, r6
 80074e2:	463b      	mov	r3, r7
 80074e4:	f7f9 f8a0 	bl	8000628 <__aeabi_dmul>
 80074e8:	a36d      	add	r3, pc, #436	; (adr r3, 80076a0 <atan+0x2d0>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	f7f8 fee5 	bl	80002bc <__adddf3>
 80074f2:	4632      	mov	r2, r6
 80074f4:	463b      	mov	r3, r7
 80074f6:	f7f9 f897 	bl	8000628 <__aeabi_dmul>
 80074fa:	a36b      	add	r3, pc, #428	; (adr r3, 80076a8 <atan+0x2d8>)
 80074fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007500:	f7f8 fedc 	bl	80002bc <__adddf3>
 8007504:	4632      	mov	r2, r6
 8007506:	463b      	mov	r3, r7
 8007508:	f7f9 f88e 	bl	8000628 <__aeabi_dmul>
 800750c:	a368      	add	r3, pc, #416	; (adr r3, 80076b0 <atan+0x2e0>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	f7f8 fed3 	bl	80002bc <__adddf3>
 8007516:	4642      	mov	r2, r8
 8007518:	464b      	mov	r3, r9
 800751a:	f7f9 f885 	bl	8000628 <__aeabi_dmul>
 800751e:	a366      	add	r3, pc, #408	; (adr r3, 80076b8 <atan+0x2e8>)
 8007520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007524:	4680      	mov	r8, r0
 8007526:	4689      	mov	r9, r1
 8007528:	4630      	mov	r0, r6
 800752a:	4639      	mov	r1, r7
 800752c:	f7f9 f87c 	bl	8000628 <__aeabi_dmul>
 8007530:	a363      	add	r3, pc, #396	; (adr r3, 80076c0 <atan+0x2f0>)
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	f7f8 febf 	bl	80002b8 <__aeabi_dsub>
 800753a:	4632      	mov	r2, r6
 800753c:	463b      	mov	r3, r7
 800753e:	f7f9 f873 	bl	8000628 <__aeabi_dmul>
 8007542:	a361      	add	r3, pc, #388	; (adr r3, 80076c8 <atan+0x2f8>)
 8007544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007548:	f7f8 feb6 	bl	80002b8 <__aeabi_dsub>
 800754c:	4632      	mov	r2, r6
 800754e:	463b      	mov	r3, r7
 8007550:	f7f9 f86a 	bl	8000628 <__aeabi_dmul>
 8007554:	a35e      	add	r3, pc, #376	; (adr r3, 80076d0 <atan+0x300>)
 8007556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755a:	f7f8 fead 	bl	80002b8 <__aeabi_dsub>
 800755e:	4632      	mov	r2, r6
 8007560:	463b      	mov	r3, r7
 8007562:	f7f9 f861 	bl	8000628 <__aeabi_dmul>
 8007566:	a35c      	add	r3, pc, #368	; (adr r3, 80076d8 <atan+0x308>)
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	f7f8 fea4 	bl	80002b8 <__aeabi_dsub>
 8007570:	4632      	mov	r2, r6
 8007572:	463b      	mov	r3, r7
 8007574:	f7f9 f858 	bl	8000628 <__aeabi_dmul>
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	4640      	mov	r0, r8
 800757e:	4649      	mov	r1, r9
 8007580:	f7f8 fe9c 	bl	80002bc <__adddf3>
 8007584:	4622      	mov	r2, r4
 8007586:	462b      	mov	r3, r5
 8007588:	f7f9 f84e 	bl	8000628 <__aeabi_dmul>
 800758c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007590:	4602      	mov	r2, r0
 8007592:	460b      	mov	r3, r1
 8007594:	d14b      	bne.n	800762e <atan+0x25e>
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f7f8 fe8d 	bl	80002b8 <__aeabi_dsub>
 800759e:	e72c      	b.n	80073fa <atan+0x2a>
 80075a0:	ee10 0a10 	vmov	r0, s0
 80075a4:	2200      	movs	r2, #0
 80075a6:	4b53      	ldr	r3, [pc, #332]	; (80076f4 <atan+0x324>)
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f8 fe85 	bl	80002b8 <__aeabi_dsub>
 80075ae:	2200      	movs	r2, #0
 80075b0:	4606      	mov	r6, r0
 80075b2:	460f      	mov	r7, r1
 80075b4:	4b4f      	ldr	r3, [pc, #316]	; (80076f4 <atan+0x324>)
 80075b6:	4620      	mov	r0, r4
 80075b8:	4629      	mov	r1, r5
 80075ba:	f7f8 fe7f 	bl	80002bc <__adddf3>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4630      	mov	r0, r6
 80075c4:	4639      	mov	r1, r7
 80075c6:	f7f9 f959 	bl	800087c <__aeabi_ddiv>
 80075ca:	f04f 0a01 	mov.w	sl, #1
 80075ce:	4604      	mov	r4, r0
 80075d0:	460d      	mov	r5, r1
 80075d2:	e764      	b.n	800749e <atan+0xce>
 80075d4:	4b49      	ldr	r3, [pc, #292]	; (80076fc <atan+0x32c>)
 80075d6:	429e      	cmp	r6, r3
 80075d8:	dc1d      	bgt.n	8007616 <atan+0x246>
 80075da:	ee10 0a10 	vmov	r0, s0
 80075de:	2200      	movs	r2, #0
 80075e0:	4b47      	ldr	r3, [pc, #284]	; (8007700 <atan+0x330>)
 80075e2:	4629      	mov	r1, r5
 80075e4:	f7f8 fe68 	bl	80002b8 <__aeabi_dsub>
 80075e8:	2200      	movs	r2, #0
 80075ea:	4606      	mov	r6, r0
 80075ec:	460f      	mov	r7, r1
 80075ee:	4b44      	ldr	r3, [pc, #272]	; (8007700 <atan+0x330>)
 80075f0:	4620      	mov	r0, r4
 80075f2:	4629      	mov	r1, r5
 80075f4:	f7f9 f818 	bl	8000628 <__aeabi_dmul>
 80075f8:	2200      	movs	r2, #0
 80075fa:	4b3e      	ldr	r3, [pc, #248]	; (80076f4 <atan+0x324>)
 80075fc:	f7f8 fe5e 	bl	80002bc <__adddf3>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4630      	mov	r0, r6
 8007606:	4639      	mov	r1, r7
 8007608:	f7f9 f938 	bl	800087c <__aeabi_ddiv>
 800760c:	f04f 0a02 	mov.w	sl, #2
 8007610:	4604      	mov	r4, r0
 8007612:	460d      	mov	r5, r1
 8007614:	e743      	b.n	800749e <atan+0xce>
 8007616:	462b      	mov	r3, r5
 8007618:	ee10 2a10 	vmov	r2, s0
 800761c:	2000      	movs	r0, #0
 800761e:	4939      	ldr	r1, [pc, #228]	; (8007704 <atan+0x334>)
 8007620:	f7f9 f92c 	bl	800087c <__aeabi_ddiv>
 8007624:	f04f 0a03 	mov.w	sl, #3
 8007628:	4604      	mov	r4, r0
 800762a:	460d      	mov	r5, r1
 800762c:	e737      	b.n	800749e <atan+0xce>
 800762e:	4b36      	ldr	r3, [pc, #216]	; (8007708 <atan+0x338>)
 8007630:	4e36      	ldr	r6, [pc, #216]	; (800770c <atan+0x33c>)
 8007632:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8007636:	4456      	add	r6, sl
 8007638:	449a      	add	sl, r3
 800763a:	e9da 2300 	ldrd	r2, r3, [sl]
 800763e:	f7f8 fe3b 	bl	80002b8 <__aeabi_dsub>
 8007642:	4622      	mov	r2, r4
 8007644:	462b      	mov	r3, r5
 8007646:	f7f8 fe37 	bl	80002b8 <__aeabi_dsub>
 800764a:	4602      	mov	r2, r0
 800764c:	460b      	mov	r3, r1
 800764e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007652:	f7f8 fe31 	bl	80002b8 <__aeabi_dsub>
 8007656:	f1bb 0f00 	cmp.w	fp, #0
 800765a:	4604      	mov	r4, r0
 800765c:	460d      	mov	r5, r1
 800765e:	f6bf aed6 	bge.w	800740e <atan+0x3e>
 8007662:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007666:	461d      	mov	r5, r3
 8007668:	e6d1      	b.n	800740e <atan+0x3e>
 800766a:	a51d      	add	r5, pc, #116	; (adr r5, 80076e0 <atan+0x310>)
 800766c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007670:	e6cd      	b.n	800740e <atan+0x3e>
 8007672:	bf00      	nop
 8007674:	f3af 8000 	nop.w
 8007678:	54442d18 	.word	0x54442d18
 800767c:	3ff921fb 	.word	0x3ff921fb
 8007680:	8800759c 	.word	0x8800759c
 8007684:	7e37e43c 	.word	0x7e37e43c
 8007688:	e322da11 	.word	0xe322da11
 800768c:	3f90ad3a 	.word	0x3f90ad3a
 8007690:	24760deb 	.word	0x24760deb
 8007694:	3fa97b4b 	.word	0x3fa97b4b
 8007698:	a0d03d51 	.word	0xa0d03d51
 800769c:	3fb10d66 	.word	0x3fb10d66
 80076a0:	c54c206e 	.word	0xc54c206e
 80076a4:	3fb745cd 	.word	0x3fb745cd
 80076a8:	920083ff 	.word	0x920083ff
 80076ac:	3fc24924 	.word	0x3fc24924
 80076b0:	5555550d 	.word	0x5555550d
 80076b4:	3fd55555 	.word	0x3fd55555
 80076b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80076bc:	bfa2b444 	.word	0xbfa2b444
 80076c0:	52defd9a 	.word	0x52defd9a
 80076c4:	3fadde2d 	.word	0x3fadde2d
 80076c8:	af749a6d 	.word	0xaf749a6d
 80076cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80076d0:	fe231671 	.word	0xfe231671
 80076d4:	3fbc71c6 	.word	0x3fbc71c6
 80076d8:	9998ebc4 	.word	0x9998ebc4
 80076dc:	3fc99999 	.word	0x3fc99999
 80076e0:	54442d18 	.word	0x54442d18
 80076e4:	bff921fb 	.word	0xbff921fb
 80076e8:	440fffff 	.word	0x440fffff
 80076ec:	7ff00000 	.word	0x7ff00000
 80076f0:	3fdbffff 	.word	0x3fdbffff
 80076f4:	3ff00000 	.word	0x3ff00000
 80076f8:	3ff2ffff 	.word	0x3ff2ffff
 80076fc:	40037fff 	.word	0x40037fff
 8007700:	3ff80000 	.word	0x3ff80000
 8007704:	bff00000 	.word	0xbff00000
 8007708:	0800a9c8 	.word	0x0800a9c8
 800770c:	0800a9a8 	.word	0x0800a9a8

08007710 <fabs>:
 8007710:	ec51 0b10 	vmov	r0, r1, d0
 8007714:	ee10 2a10 	vmov	r2, s0
 8007718:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800771c:	ec43 2b10 	vmov	d0, r2, r3
 8007720:	4770      	bx	lr
	...

08007724 <sqrt>:
 8007724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007728:	ed2d 8b02 	vpush	{d8}
 800772c:	b08b      	sub	sp, #44	; 0x2c
 800772e:	ec55 4b10 	vmov	r4, r5, d0
 8007732:	f000 f851 	bl	80077d8 <__ieee754_sqrt>
 8007736:	4b26      	ldr	r3, [pc, #152]	; (80077d0 <sqrt+0xac>)
 8007738:	eeb0 8a40 	vmov.f32	s16, s0
 800773c:	eef0 8a60 	vmov.f32	s17, s1
 8007740:	f993 6000 	ldrsb.w	r6, [r3]
 8007744:	1c73      	adds	r3, r6, #1
 8007746:	d02a      	beq.n	800779e <sqrt+0x7a>
 8007748:	4622      	mov	r2, r4
 800774a:	462b      	mov	r3, r5
 800774c:	4620      	mov	r0, r4
 800774e:	4629      	mov	r1, r5
 8007750:	f7f9 fa04 	bl	8000b5c <__aeabi_dcmpun>
 8007754:	4607      	mov	r7, r0
 8007756:	bb10      	cbnz	r0, 800779e <sqrt+0x7a>
 8007758:	f04f 0800 	mov.w	r8, #0
 800775c:	f04f 0900 	mov.w	r9, #0
 8007760:	4642      	mov	r2, r8
 8007762:	464b      	mov	r3, r9
 8007764:	4620      	mov	r0, r4
 8007766:	4629      	mov	r1, r5
 8007768:	f7f9 f9d0 	bl	8000b0c <__aeabi_dcmplt>
 800776c:	b1b8      	cbz	r0, 800779e <sqrt+0x7a>
 800776e:	2301      	movs	r3, #1
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	4b18      	ldr	r3, [pc, #96]	; (80077d4 <sqrt+0xb0>)
 8007774:	9301      	str	r3, [sp, #4]
 8007776:	9708      	str	r7, [sp, #32]
 8007778:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800777c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007780:	b9b6      	cbnz	r6, 80077b0 <sqrt+0x8c>
 8007782:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007786:	4668      	mov	r0, sp
 8007788:	f000 f8d6 	bl	8007938 <matherr>
 800778c:	b1d0      	cbz	r0, 80077c4 <sqrt+0xa0>
 800778e:	9b08      	ldr	r3, [sp, #32]
 8007790:	b11b      	cbz	r3, 800779a <sqrt+0x76>
 8007792:	f000 f8d3 	bl	800793c <__errno>
 8007796:	9b08      	ldr	r3, [sp, #32]
 8007798:	6003      	str	r3, [r0, #0]
 800779a:	ed9d 8b06 	vldr	d8, [sp, #24]
 800779e:	eeb0 0a48 	vmov.f32	s0, s16
 80077a2:	eef0 0a68 	vmov.f32	s1, s17
 80077a6:	b00b      	add	sp, #44	; 0x2c
 80077a8:	ecbd 8b02 	vpop	{d8}
 80077ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80077b0:	4642      	mov	r2, r8
 80077b2:	464b      	mov	r3, r9
 80077b4:	4640      	mov	r0, r8
 80077b6:	4649      	mov	r1, r9
 80077b8:	f7f9 f860 	bl	800087c <__aeabi_ddiv>
 80077bc:	2e02      	cmp	r6, #2
 80077be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80077c2:	d1e0      	bne.n	8007786 <sqrt+0x62>
 80077c4:	f000 f8ba 	bl	800793c <__errno>
 80077c8:	2321      	movs	r3, #33	; 0x21
 80077ca:	6003      	str	r3, [r0, #0]
 80077cc:	e7df      	b.n	800778e <sqrt+0x6a>
 80077ce:	bf00      	nop
 80077d0:	20000149 	.word	0x20000149
 80077d4:	0800a9e8 	.word	0x0800a9e8

080077d8 <__ieee754_sqrt>:
 80077d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077dc:	4955      	ldr	r1, [pc, #340]	; (8007934 <__ieee754_sqrt+0x15c>)
 80077de:	ec55 4b10 	vmov	r4, r5, d0
 80077e2:	43a9      	bics	r1, r5
 80077e4:	462b      	mov	r3, r5
 80077e6:	462a      	mov	r2, r5
 80077e8:	d112      	bne.n	8007810 <__ieee754_sqrt+0x38>
 80077ea:	ee10 2a10 	vmov	r2, s0
 80077ee:	ee10 0a10 	vmov	r0, s0
 80077f2:	4629      	mov	r1, r5
 80077f4:	f7f8 ff18 	bl	8000628 <__aeabi_dmul>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	f7f8 fd5c 	bl	80002bc <__adddf3>
 8007804:	4604      	mov	r4, r0
 8007806:	460d      	mov	r5, r1
 8007808:	ec45 4b10 	vmov	d0, r4, r5
 800780c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007810:	2d00      	cmp	r5, #0
 8007812:	ee10 0a10 	vmov	r0, s0
 8007816:	4621      	mov	r1, r4
 8007818:	dc0f      	bgt.n	800783a <__ieee754_sqrt+0x62>
 800781a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800781e:	4330      	orrs	r0, r6
 8007820:	d0f2      	beq.n	8007808 <__ieee754_sqrt+0x30>
 8007822:	b155      	cbz	r5, 800783a <__ieee754_sqrt+0x62>
 8007824:	ee10 2a10 	vmov	r2, s0
 8007828:	4620      	mov	r0, r4
 800782a:	4629      	mov	r1, r5
 800782c:	f7f8 fd44 	bl	80002b8 <__aeabi_dsub>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	f7f9 f822 	bl	800087c <__aeabi_ddiv>
 8007838:	e7e4      	b.n	8007804 <__ieee754_sqrt+0x2c>
 800783a:	151b      	asrs	r3, r3, #20
 800783c:	d073      	beq.n	8007926 <__ieee754_sqrt+0x14e>
 800783e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007842:	07dd      	lsls	r5, r3, #31
 8007844:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007848:	bf48      	it	mi
 800784a:	0fc8      	lsrmi	r0, r1, #31
 800784c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007850:	bf44      	itt	mi
 8007852:	0049      	lslmi	r1, r1, #1
 8007854:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8007858:	2500      	movs	r5, #0
 800785a:	1058      	asrs	r0, r3, #1
 800785c:	0fcb      	lsrs	r3, r1, #31
 800785e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8007862:	0049      	lsls	r1, r1, #1
 8007864:	2316      	movs	r3, #22
 8007866:	462c      	mov	r4, r5
 8007868:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800786c:	19a7      	adds	r7, r4, r6
 800786e:	4297      	cmp	r7, r2
 8007870:	bfde      	ittt	le
 8007872:	19bc      	addle	r4, r7, r6
 8007874:	1bd2      	suble	r2, r2, r7
 8007876:	19ad      	addle	r5, r5, r6
 8007878:	0fcf      	lsrs	r7, r1, #31
 800787a:	3b01      	subs	r3, #1
 800787c:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8007880:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8007884:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007888:	d1f0      	bne.n	800786c <__ieee754_sqrt+0x94>
 800788a:	f04f 0c20 	mov.w	ip, #32
 800788e:	469e      	mov	lr, r3
 8007890:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8007894:	42a2      	cmp	r2, r4
 8007896:	eb06 070e 	add.w	r7, r6, lr
 800789a:	dc02      	bgt.n	80078a2 <__ieee754_sqrt+0xca>
 800789c:	d112      	bne.n	80078c4 <__ieee754_sqrt+0xec>
 800789e:	428f      	cmp	r7, r1
 80078a0:	d810      	bhi.n	80078c4 <__ieee754_sqrt+0xec>
 80078a2:	2f00      	cmp	r7, #0
 80078a4:	eb07 0e06 	add.w	lr, r7, r6
 80078a8:	da42      	bge.n	8007930 <__ieee754_sqrt+0x158>
 80078aa:	f1be 0f00 	cmp.w	lr, #0
 80078ae:	db3f      	blt.n	8007930 <__ieee754_sqrt+0x158>
 80078b0:	f104 0801 	add.w	r8, r4, #1
 80078b4:	1b12      	subs	r2, r2, r4
 80078b6:	428f      	cmp	r7, r1
 80078b8:	bf88      	it	hi
 80078ba:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80078be:	1bc9      	subs	r1, r1, r7
 80078c0:	4433      	add	r3, r6
 80078c2:	4644      	mov	r4, r8
 80078c4:	0052      	lsls	r2, r2, #1
 80078c6:	f1bc 0c01 	subs.w	ip, ip, #1
 80078ca:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80078ce:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80078d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80078d6:	d1dd      	bne.n	8007894 <__ieee754_sqrt+0xbc>
 80078d8:	430a      	orrs	r2, r1
 80078da:	d006      	beq.n	80078ea <__ieee754_sqrt+0x112>
 80078dc:	1c5c      	adds	r4, r3, #1
 80078de:	bf13      	iteet	ne
 80078e0:	3301      	addne	r3, #1
 80078e2:	3501      	addeq	r5, #1
 80078e4:	4663      	moveq	r3, ip
 80078e6:	f023 0301 	bicne.w	r3, r3, #1
 80078ea:	106a      	asrs	r2, r5, #1
 80078ec:	085b      	lsrs	r3, r3, #1
 80078ee:	07e9      	lsls	r1, r5, #31
 80078f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80078f4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80078f8:	bf48      	it	mi
 80078fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80078fe:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8007902:	461c      	mov	r4, r3
 8007904:	e780      	b.n	8007808 <__ieee754_sqrt+0x30>
 8007906:	0aca      	lsrs	r2, r1, #11
 8007908:	3815      	subs	r0, #21
 800790a:	0549      	lsls	r1, r1, #21
 800790c:	2a00      	cmp	r2, #0
 800790e:	d0fa      	beq.n	8007906 <__ieee754_sqrt+0x12e>
 8007910:	02d6      	lsls	r6, r2, #11
 8007912:	d50a      	bpl.n	800792a <__ieee754_sqrt+0x152>
 8007914:	f1c3 0420 	rsb	r4, r3, #32
 8007918:	fa21 f404 	lsr.w	r4, r1, r4
 800791c:	1e5d      	subs	r5, r3, #1
 800791e:	4099      	lsls	r1, r3
 8007920:	4322      	orrs	r2, r4
 8007922:	1b43      	subs	r3, r0, r5
 8007924:	e78b      	b.n	800783e <__ieee754_sqrt+0x66>
 8007926:	4618      	mov	r0, r3
 8007928:	e7f0      	b.n	800790c <__ieee754_sqrt+0x134>
 800792a:	0052      	lsls	r2, r2, #1
 800792c:	3301      	adds	r3, #1
 800792e:	e7ef      	b.n	8007910 <__ieee754_sqrt+0x138>
 8007930:	46a0      	mov	r8, r4
 8007932:	e7bf      	b.n	80078b4 <__ieee754_sqrt+0xdc>
 8007934:	7ff00000 	.word	0x7ff00000

08007938 <matherr>:
 8007938:	2000      	movs	r0, #0
 800793a:	4770      	bx	lr

0800793c <__errno>:
 800793c:	4b01      	ldr	r3, [pc, #4]	; (8007944 <__errno+0x8>)
 800793e:	6818      	ldr	r0, [r3, #0]
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	2000014c 	.word	0x2000014c

08007948 <__libc_init_array>:
 8007948:	b570      	push	{r4, r5, r6, lr}
 800794a:	4e0d      	ldr	r6, [pc, #52]	; (8007980 <__libc_init_array+0x38>)
 800794c:	4c0d      	ldr	r4, [pc, #52]	; (8007984 <__libc_init_array+0x3c>)
 800794e:	1ba4      	subs	r4, r4, r6
 8007950:	10a4      	asrs	r4, r4, #2
 8007952:	2500      	movs	r5, #0
 8007954:	42a5      	cmp	r5, r4
 8007956:	d109      	bne.n	800796c <__libc_init_array+0x24>
 8007958:	4e0b      	ldr	r6, [pc, #44]	; (8007988 <__libc_init_array+0x40>)
 800795a:	4c0c      	ldr	r4, [pc, #48]	; (800798c <__libc_init_array+0x44>)
 800795c:	f002 fd98 	bl	800a490 <_init>
 8007960:	1ba4      	subs	r4, r4, r6
 8007962:	10a4      	asrs	r4, r4, #2
 8007964:	2500      	movs	r5, #0
 8007966:	42a5      	cmp	r5, r4
 8007968:	d105      	bne.n	8007976 <__libc_init_array+0x2e>
 800796a:	bd70      	pop	{r4, r5, r6, pc}
 800796c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007970:	4798      	blx	r3
 8007972:	3501      	adds	r5, #1
 8007974:	e7ee      	b.n	8007954 <__libc_init_array+0xc>
 8007976:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800797a:	4798      	blx	r3
 800797c:	3501      	adds	r5, #1
 800797e:	e7f2      	b.n	8007966 <__libc_init_array+0x1e>
 8007980:	0800acb8 	.word	0x0800acb8
 8007984:	0800acb8 	.word	0x0800acb8
 8007988:	0800acb8 	.word	0x0800acb8
 800798c:	0800acbc 	.word	0x0800acbc

08007990 <memset>:
 8007990:	4402      	add	r2, r0
 8007992:	4603      	mov	r3, r0
 8007994:	4293      	cmp	r3, r2
 8007996:	d100      	bne.n	800799a <memset+0xa>
 8007998:	4770      	bx	lr
 800799a:	f803 1b01 	strb.w	r1, [r3], #1
 800799e:	e7f9      	b.n	8007994 <memset+0x4>

080079a0 <__cvt>:
 80079a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	ec55 4b10 	vmov	r4, r5, d0
 80079a8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80079aa:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079ae:	2d00      	cmp	r5, #0
 80079b0:	460e      	mov	r6, r1
 80079b2:	4691      	mov	r9, r2
 80079b4:	4619      	mov	r1, r3
 80079b6:	bfb8      	it	lt
 80079b8:	4622      	movlt	r2, r4
 80079ba:	462b      	mov	r3, r5
 80079bc:	f027 0720 	bic.w	r7, r7, #32
 80079c0:	bfbb      	ittet	lt
 80079c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079c6:	461d      	movlt	r5, r3
 80079c8:	2300      	movge	r3, #0
 80079ca:	232d      	movlt	r3, #45	; 0x2d
 80079cc:	bfb8      	it	lt
 80079ce:	4614      	movlt	r4, r2
 80079d0:	2f46      	cmp	r7, #70	; 0x46
 80079d2:	700b      	strb	r3, [r1, #0]
 80079d4:	d004      	beq.n	80079e0 <__cvt+0x40>
 80079d6:	2f45      	cmp	r7, #69	; 0x45
 80079d8:	d100      	bne.n	80079dc <__cvt+0x3c>
 80079da:	3601      	adds	r6, #1
 80079dc:	2102      	movs	r1, #2
 80079de:	e000      	b.n	80079e2 <__cvt+0x42>
 80079e0:	2103      	movs	r1, #3
 80079e2:	ab03      	add	r3, sp, #12
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	ab02      	add	r3, sp, #8
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	4632      	mov	r2, r6
 80079ec:	4653      	mov	r3, sl
 80079ee:	ec45 4b10 	vmov	d0, r4, r5
 80079f2:	f000 fe4d 	bl	8008690 <_dtoa_r>
 80079f6:	2f47      	cmp	r7, #71	; 0x47
 80079f8:	4680      	mov	r8, r0
 80079fa:	d102      	bne.n	8007a02 <__cvt+0x62>
 80079fc:	f019 0f01 	tst.w	r9, #1
 8007a00:	d026      	beq.n	8007a50 <__cvt+0xb0>
 8007a02:	2f46      	cmp	r7, #70	; 0x46
 8007a04:	eb08 0906 	add.w	r9, r8, r6
 8007a08:	d111      	bne.n	8007a2e <__cvt+0x8e>
 8007a0a:	f898 3000 	ldrb.w	r3, [r8]
 8007a0e:	2b30      	cmp	r3, #48	; 0x30
 8007a10:	d10a      	bne.n	8007a28 <__cvt+0x88>
 8007a12:	2200      	movs	r2, #0
 8007a14:	2300      	movs	r3, #0
 8007a16:	4620      	mov	r0, r4
 8007a18:	4629      	mov	r1, r5
 8007a1a:	f7f9 f86d 	bl	8000af8 <__aeabi_dcmpeq>
 8007a1e:	b918      	cbnz	r0, 8007a28 <__cvt+0x88>
 8007a20:	f1c6 0601 	rsb	r6, r6, #1
 8007a24:	f8ca 6000 	str.w	r6, [sl]
 8007a28:	f8da 3000 	ldr.w	r3, [sl]
 8007a2c:	4499      	add	r9, r3
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2300      	movs	r3, #0
 8007a32:	4620      	mov	r0, r4
 8007a34:	4629      	mov	r1, r5
 8007a36:	f7f9 f85f 	bl	8000af8 <__aeabi_dcmpeq>
 8007a3a:	b938      	cbnz	r0, 8007a4c <__cvt+0xac>
 8007a3c:	2230      	movs	r2, #48	; 0x30
 8007a3e:	9b03      	ldr	r3, [sp, #12]
 8007a40:	454b      	cmp	r3, r9
 8007a42:	d205      	bcs.n	8007a50 <__cvt+0xb0>
 8007a44:	1c59      	adds	r1, r3, #1
 8007a46:	9103      	str	r1, [sp, #12]
 8007a48:	701a      	strb	r2, [r3, #0]
 8007a4a:	e7f8      	b.n	8007a3e <__cvt+0x9e>
 8007a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a54:	eba3 0308 	sub.w	r3, r3, r8
 8007a58:	4640      	mov	r0, r8
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	b004      	add	sp, #16
 8007a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007a62 <__exponent>:
 8007a62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a64:	2900      	cmp	r1, #0
 8007a66:	4604      	mov	r4, r0
 8007a68:	bfba      	itte	lt
 8007a6a:	4249      	neglt	r1, r1
 8007a6c:	232d      	movlt	r3, #45	; 0x2d
 8007a6e:	232b      	movge	r3, #43	; 0x2b
 8007a70:	2909      	cmp	r1, #9
 8007a72:	f804 2b02 	strb.w	r2, [r4], #2
 8007a76:	7043      	strb	r3, [r0, #1]
 8007a78:	dd20      	ble.n	8007abc <__exponent+0x5a>
 8007a7a:	f10d 0307 	add.w	r3, sp, #7
 8007a7e:	461f      	mov	r7, r3
 8007a80:	260a      	movs	r6, #10
 8007a82:	fb91 f5f6 	sdiv	r5, r1, r6
 8007a86:	fb06 1115 	mls	r1, r6, r5, r1
 8007a8a:	3130      	adds	r1, #48	; 0x30
 8007a8c:	2d09      	cmp	r5, #9
 8007a8e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007a92:	f103 32ff 	add.w	r2, r3, #4294967295
 8007a96:	4629      	mov	r1, r5
 8007a98:	dc09      	bgt.n	8007aae <__exponent+0x4c>
 8007a9a:	3130      	adds	r1, #48	; 0x30
 8007a9c:	3b02      	subs	r3, #2
 8007a9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007aa2:	42bb      	cmp	r3, r7
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	d304      	bcc.n	8007ab2 <__exponent+0x50>
 8007aa8:	1a10      	subs	r0, r2, r0
 8007aaa:	b003      	add	sp, #12
 8007aac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aae:	4613      	mov	r3, r2
 8007ab0:	e7e7      	b.n	8007a82 <__exponent+0x20>
 8007ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ab6:	f804 2b01 	strb.w	r2, [r4], #1
 8007aba:	e7f2      	b.n	8007aa2 <__exponent+0x40>
 8007abc:	2330      	movs	r3, #48	; 0x30
 8007abe:	4419      	add	r1, r3
 8007ac0:	7083      	strb	r3, [r0, #2]
 8007ac2:	1d02      	adds	r2, r0, #4
 8007ac4:	70c1      	strb	r1, [r0, #3]
 8007ac6:	e7ef      	b.n	8007aa8 <__exponent+0x46>

08007ac8 <_printf_float>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	b08d      	sub	sp, #52	; 0x34
 8007ace:	460c      	mov	r4, r1
 8007ad0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007ad4:	4616      	mov	r6, r2
 8007ad6:	461f      	mov	r7, r3
 8007ad8:	4605      	mov	r5, r0
 8007ada:	f001 fd0b 	bl	80094f4 <_localeconv_r>
 8007ade:	6803      	ldr	r3, [r0, #0]
 8007ae0:	9304      	str	r3, [sp, #16]
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7f8 fb86 	bl	80001f4 <strlen>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	930a      	str	r3, [sp, #40]	; 0x28
 8007aec:	f8d8 3000 	ldr.w	r3, [r8]
 8007af0:	9005      	str	r0, [sp, #20]
 8007af2:	3307      	adds	r3, #7
 8007af4:	f023 0307 	bic.w	r3, r3, #7
 8007af8:	f103 0208 	add.w	r2, r3, #8
 8007afc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b00:	f8d4 b000 	ldr.w	fp, [r4]
 8007b04:	f8c8 2000 	str.w	r2, [r8]
 8007b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b10:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b14:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b18:	9307      	str	r3, [sp, #28]
 8007b1a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b22:	4ba7      	ldr	r3, [pc, #668]	; (8007dc0 <_printf_float+0x2f8>)
 8007b24:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b28:	f7f9 f818 	bl	8000b5c <__aeabi_dcmpun>
 8007b2c:	bb70      	cbnz	r0, 8007b8c <_printf_float+0xc4>
 8007b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b32:	4ba3      	ldr	r3, [pc, #652]	; (8007dc0 <_printf_float+0x2f8>)
 8007b34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b38:	f7f8 fff2 	bl	8000b20 <__aeabi_dcmple>
 8007b3c:	bb30      	cbnz	r0, 8007b8c <_printf_float+0xc4>
 8007b3e:	2200      	movs	r2, #0
 8007b40:	2300      	movs	r3, #0
 8007b42:	4640      	mov	r0, r8
 8007b44:	4649      	mov	r1, r9
 8007b46:	f7f8 ffe1 	bl	8000b0c <__aeabi_dcmplt>
 8007b4a:	b110      	cbz	r0, 8007b52 <_printf_float+0x8a>
 8007b4c:	232d      	movs	r3, #45	; 0x2d
 8007b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b52:	4a9c      	ldr	r2, [pc, #624]	; (8007dc4 <_printf_float+0x2fc>)
 8007b54:	4b9c      	ldr	r3, [pc, #624]	; (8007dc8 <_printf_float+0x300>)
 8007b56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007b5a:	bf8c      	ite	hi
 8007b5c:	4690      	movhi	r8, r2
 8007b5e:	4698      	movls	r8, r3
 8007b60:	2303      	movs	r3, #3
 8007b62:	f02b 0204 	bic.w	r2, fp, #4
 8007b66:	6123      	str	r3, [r4, #16]
 8007b68:	6022      	str	r2, [r4, #0]
 8007b6a:	f04f 0900 	mov.w	r9, #0
 8007b6e:	9700      	str	r7, [sp, #0]
 8007b70:	4633      	mov	r3, r6
 8007b72:	aa0b      	add	r2, sp, #44	; 0x2c
 8007b74:	4621      	mov	r1, r4
 8007b76:	4628      	mov	r0, r5
 8007b78:	f000 f9e6 	bl	8007f48 <_printf_common>
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	f040 808d 	bne.w	8007c9c <_printf_float+0x1d4>
 8007b82:	f04f 30ff 	mov.w	r0, #4294967295
 8007b86:	b00d      	add	sp, #52	; 0x34
 8007b88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	464b      	mov	r3, r9
 8007b90:	4640      	mov	r0, r8
 8007b92:	4649      	mov	r1, r9
 8007b94:	f7f8 ffe2 	bl	8000b5c <__aeabi_dcmpun>
 8007b98:	b110      	cbz	r0, 8007ba0 <_printf_float+0xd8>
 8007b9a:	4a8c      	ldr	r2, [pc, #560]	; (8007dcc <_printf_float+0x304>)
 8007b9c:	4b8c      	ldr	r3, [pc, #560]	; (8007dd0 <_printf_float+0x308>)
 8007b9e:	e7da      	b.n	8007b56 <_printf_float+0x8e>
 8007ba0:	6861      	ldr	r1, [r4, #4]
 8007ba2:	1c4b      	adds	r3, r1, #1
 8007ba4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007ba8:	a80a      	add	r0, sp, #40	; 0x28
 8007baa:	d13e      	bne.n	8007c2a <_printf_float+0x162>
 8007bac:	2306      	movs	r3, #6
 8007bae:	6063      	str	r3, [r4, #4]
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007bb6:	ab09      	add	r3, sp, #36	; 0x24
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	ec49 8b10 	vmov	d0, r8, r9
 8007bbe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007bc2:	6022      	str	r2, [r4, #0]
 8007bc4:	f8cd a004 	str.w	sl, [sp, #4]
 8007bc8:	6861      	ldr	r1, [r4, #4]
 8007bca:	4628      	mov	r0, r5
 8007bcc:	f7ff fee8 	bl	80079a0 <__cvt>
 8007bd0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007bd4:	2b47      	cmp	r3, #71	; 0x47
 8007bd6:	4680      	mov	r8, r0
 8007bd8:	d109      	bne.n	8007bee <_printf_float+0x126>
 8007bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bdc:	1cd8      	adds	r0, r3, #3
 8007bde:	db02      	blt.n	8007be6 <_printf_float+0x11e>
 8007be0:	6862      	ldr	r2, [r4, #4]
 8007be2:	4293      	cmp	r3, r2
 8007be4:	dd47      	ble.n	8007c76 <_printf_float+0x1ae>
 8007be6:	f1aa 0a02 	sub.w	sl, sl, #2
 8007bea:	fa5f fa8a 	uxtb.w	sl, sl
 8007bee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007bf2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bf4:	d824      	bhi.n	8007c40 <_printf_float+0x178>
 8007bf6:	3901      	subs	r1, #1
 8007bf8:	4652      	mov	r2, sl
 8007bfa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007bfe:	9109      	str	r1, [sp, #36]	; 0x24
 8007c00:	f7ff ff2f 	bl	8007a62 <__exponent>
 8007c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c06:	1813      	adds	r3, r2, r0
 8007c08:	2a01      	cmp	r2, #1
 8007c0a:	4681      	mov	r9, r0
 8007c0c:	6123      	str	r3, [r4, #16]
 8007c0e:	dc02      	bgt.n	8007c16 <_printf_float+0x14e>
 8007c10:	6822      	ldr	r2, [r4, #0]
 8007c12:	07d1      	lsls	r1, r2, #31
 8007c14:	d501      	bpl.n	8007c1a <_printf_float+0x152>
 8007c16:	3301      	adds	r3, #1
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0a5      	beq.n	8007b6e <_printf_float+0xa6>
 8007c22:	232d      	movs	r3, #45	; 0x2d
 8007c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c28:	e7a1      	b.n	8007b6e <_printf_float+0xa6>
 8007c2a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8007c2e:	f000 8177 	beq.w	8007f20 <_printf_float+0x458>
 8007c32:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007c36:	d1bb      	bne.n	8007bb0 <_printf_float+0xe8>
 8007c38:	2900      	cmp	r1, #0
 8007c3a:	d1b9      	bne.n	8007bb0 <_printf_float+0xe8>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e7b6      	b.n	8007bae <_printf_float+0xe6>
 8007c40:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007c44:	d119      	bne.n	8007c7a <_printf_float+0x1b2>
 8007c46:	2900      	cmp	r1, #0
 8007c48:	6863      	ldr	r3, [r4, #4]
 8007c4a:	dd0c      	ble.n	8007c66 <_printf_float+0x19e>
 8007c4c:	6121      	str	r1, [r4, #16]
 8007c4e:	b913      	cbnz	r3, 8007c56 <_printf_float+0x18e>
 8007c50:	6822      	ldr	r2, [r4, #0]
 8007c52:	07d2      	lsls	r2, r2, #31
 8007c54:	d502      	bpl.n	8007c5c <_printf_float+0x194>
 8007c56:	3301      	adds	r3, #1
 8007c58:	440b      	add	r3, r1
 8007c5a:	6123      	str	r3, [r4, #16]
 8007c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007c60:	f04f 0900 	mov.w	r9, #0
 8007c64:	e7d9      	b.n	8007c1a <_printf_float+0x152>
 8007c66:	b913      	cbnz	r3, 8007c6e <_printf_float+0x1a6>
 8007c68:	6822      	ldr	r2, [r4, #0]
 8007c6a:	07d0      	lsls	r0, r2, #31
 8007c6c:	d501      	bpl.n	8007c72 <_printf_float+0x1aa>
 8007c6e:	3302      	adds	r3, #2
 8007c70:	e7f3      	b.n	8007c5a <_printf_float+0x192>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e7f1      	b.n	8007c5a <_printf_float+0x192>
 8007c76:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8007c7a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	db05      	blt.n	8007c8e <_printf_float+0x1c6>
 8007c82:	6822      	ldr	r2, [r4, #0]
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	07d1      	lsls	r1, r2, #31
 8007c88:	d5e8      	bpl.n	8007c5c <_printf_float+0x194>
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	e7e5      	b.n	8007c5a <_printf_float+0x192>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	bfd4      	ite	le
 8007c92:	f1c3 0302 	rsble	r3, r3, #2
 8007c96:	2301      	movgt	r3, #1
 8007c98:	4413      	add	r3, r2
 8007c9a:	e7de      	b.n	8007c5a <_printf_float+0x192>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	055a      	lsls	r2, r3, #21
 8007ca0:	d407      	bmi.n	8007cb2 <_printf_float+0x1ea>
 8007ca2:	6923      	ldr	r3, [r4, #16]
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	d12b      	bne.n	8007d08 <_printf_float+0x240>
 8007cb0:	e767      	b.n	8007b82 <_printf_float+0xba>
 8007cb2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007cb6:	f240 80dc 	bls.w	8007e72 <_printf_float+0x3aa>
 8007cba:	2200      	movs	r2, #0
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cc2:	f7f8 ff19 	bl	8000af8 <__aeabi_dcmpeq>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d033      	beq.n	8007d32 <_printf_float+0x26a>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4a41      	ldr	r2, [pc, #260]	; (8007dd4 <_printf_float+0x30c>)
 8007cce:	4631      	mov	r1, r6
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b8      	blx	r7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	f43f af54 	beq.w	8007b82 <_printf_float+0xba>
 8007cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	db02      	blt.n	8007ce8 <_printf_float+0x220>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	07d8      	lsls	r0, r3, #31
 8007ce6:	d50f      	bpl.n	8007d08 <_printf_float+0x240>
 8007ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cec:	4631      	mov	r1, r6
 8007cee:	4628      	mov	r0, r5
 8007cf0:	47b8      	blx	r7
 8007cf2:	3001      	adds	r0, #1
 8007cf4:	f43f af45 	beq.w	8007b82 <_printf_float+0xba>
 8007cf8:	f04f 0800 	mov.w	r8, #0
 8007cfc:	f104 091a 	add.w	r9, r4, #26
 8007d00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d02:	3b01      	subs	r3, #1
 8007d04:	4543      	cmp	r3, r8
 8007d06:	dc09      	bgt.n	8007d1c <_printf_float+0x254>
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	079b      	lsls	r3, r3, #30
 8007d0c:	f100 8103 	bmi.w	8007f16 <_printf_float+0x44e>
 8007d10:	68e0      	ldr	r0, [r4, #12]
 8007d12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d14:	4298      	cmp	r0, r3
 8007d16:	bfb8      	it	lt
 8007d18:	4618      	movlt	r0, r3
 8007d1a:	e734      	b.n	8007b86 <_printf_float+0xbe>
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	464a      	mov	r2, r9
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f af2b 	beq.w	8007b82 <_printf_float+0xba>
 8007d2c:	f108 0801 	add.w	r8, r8, #1
 8007d30:	e7e6      	b.n	8007d00 <_printf_float+0x238>
 8007d32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	dc2b      	bgt.n	8007d90 <_printf_float+0x2c8>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	4a26      	ldr	r2, [pc, #152]	; (8007dd4 <_printf_float+0x30c>)
 8007d3c:	4631      	mov	r1, r6
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b8      	blx	r7
 8007d42:	3001      	adds	r0, #1
 8007d44:	f43f af1d 	beq.w	8007b82 <_printf_float+0xba>
 8007d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4a:	b923      	cbnz	r3, 8007d56 <_printf_float+0x28e>
 8007d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4e:	b913      	cbnz	r3, 8007d56 <_printf_float+0x28e>
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	07d9      	lsls	r1, r3, #31
 8007d54:	d5d8      	bpl.n	8007d08 <_printf_float+0x240>
 8007d56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	47b8      	blx	r7
 8007d60:	3001      	adds	r0, #1
 8007d62:	f43f af0e 	beq.w	8007b82 <_printf_float+0xba>
 8007d66:	f04f 0900 	mov.w	r9, #0
 8007d6a:	f104 0a1a 	add.w	sl, r4, #26
 8007d6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d70:	425b      	negs	r3, r3
 8007d72:	454b      	cmp	r3, r9
 8007d74:	dc01      	bgt.n	8007d7a <_printf_float+0x2b2>
 8007d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d78:	e794      	b.n	8007ca4 <_printf_float+0x1dc>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	4652      	mov	r2, sl
 8007d7e:	4631      	mov	r1, r6
 8007d80:	4628      	mov	r0, r5
 8007d82:	47b8      	blx	r7
 8007d84:	3001      	adds	r0, #1
 8007d86:	f43f aefc 	beq.w	8007b82 <_printf_float+0xba>
 8007d8a:	f109 0901 	add.w	r9, r9, #1
 8007d8e:	e7ee      	b.n	8007d6e <_printf_float+0x2a6>
 8007d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d94:	429a      	cmp	r2, r3
 8007d96:	bfa8      	it	ge
 8007d98:	461a      	movge	r2, r3
 8007d9a:	2a00      	cmp	r2, #0
 8007d9c:	4691      	mov	r9, r2
 8007d9e:	dd07      	ble.n	8007db0 <_printf_float+0x2e8>
 8007da0:	4613      	mov	r3, r2
 8007da2:	4631      	mov	r1, r6
 8007da4:	4642      	mov	r2, r8
 8007da6:	4628      	mov	r0, r5
 8007da8:	47b8      	blx	r7
 8007daa:	3001      	adds	r0, #1
 8007dac:	f43f aee9 	beq.w	8007b82 <_printf_float+0xba>
 8007db0:	f104 031a 	add.w	r3, r4, #26
 8007db4:	f04f 0b00 	mov.w	fp, #0
 8007db8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007dbc:	9306      	str	r3, [sp, #24]
 8007dbe:	e015      	b.n	8007dec <_printf_float+0x324>
 8007dc0:	7fefffff 	.word	0x7fefffff
 8007dc4:	0800a9f8 	.word	0x0800a9f8
 8007dc8:	0800a9f4 	.word	0x0800a9f4
 8007dcc:	0800aa00 	.word	0x0800aa00
 8007dd0:	0800a9fc 	.word	0x0800a9fc
 8007dd4:	0800aa04 	.word	0x0800aa04
 8007dd8:	2301      	movs	r3, #1
 8007dda:	9a06      	ldr	r2, [sp, #24]
 8007ddc:	4631      	mov	r1, r6
 8007dde:	4628      	mov	r0, r5
 8007de0:	47b8      	blx	r7
 8007de2:	3001      	adds	r0, #1
 8007de4:	f43f aecd 	beq.w	8007b82 <_printf_float+0xba>
 8007de8:	f10b 0b01 	add.w	fp, fp, #1
 8007dec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007df0:	ebaa 0309 	sub.w	r3, sl, r9
 8007df4:	455b      	cmp	r3, fp
 8007df6:	dcef      	bgt.n	8007dd8 <_printf_float+0x310>
 8007df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	44d0      	add	r8, sl
 8007e00:	db15      	blt.n	8007e2e <_printf_float+0x366>
 8007e02:	6823      	ldr	r3, [r4, #0]
 8007e04:	07da      	lsls	r2, r3, #31
 8007e06:	d412      	bmi.n	8007e2e <_printf_float+0x366>
 8007e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e0c:	eba3 020a 	sub.w	r2, r3, sl
 8007e10:	eba3 0a01 	sub.w	sl, r3, r1
 8007e14:	4592      	cmp	sl, r2
 8007e16:	bfa8      	it	ge
 8007e18:	4692      	movge	sl, r2
 8007e1a:	f1ba 0f00 	cmp.w	sl, #0
 8007e1e:	dc0e      	bgt.n	8007e3e <_printf_float+0x376>
 8007e20:	f04f 0800 	mov.w	r8, #0
 8007e24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007e28:	f104 091a 	add.w	r9, r4, #26
 8007e2c:	e019      	b.n	8007e62 <_printf_float+0x39a>
 8007e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e32:	4631      	mov	r1, r6
 8007e34:	4628      	mov	r0, r5
 8007e36:	47b8      	blx	r7
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d1e5      	bne.n	8007e08 <_printf_float+0x340>
 8007e3c:	e6a1      	b.n	8007b82 <_printf_float+0xba>
 8007e3e:	4653      	mov	r3, sl
 8007e40:	4642      	mov	r2, r8
 8007e42:	4631      	mov	r1, r6
 8007e44:	4628      	mov	r0, r5
 8007e46:	47b8      	blx	r7
 8007e48:	3001      	adds	r0, #1
 8007e4a:	d1e9      	bne.n	8007e20 <_printf_float+0x358>
 8007e4c:	e699      	b.n	8007b82 <_printf_float+0xba>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	464a      	mov	r2, r9
 8007e52:	4631      	mov	r1, r6
 8007e54:	4628      	mov	r0, r5
 8007e56:	47b8      	blx	r7
 8007e58:	3001      	adds	r0, #1
 8007e5a:	f43f ae92 	beq.w	8007b82 <_printf_float+0xba>
 8007e5e:	f108 0801 	add.w	r8, r8, #1
 8007e62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e66:	1a9b      	subs	r3, r3, r2
 8007e68:	eba3 030a 	sub.w	r3, r3, sl
 8007e6c:	4543      	cmp	r3, r8
 8007e6e:	dcee      	bgt.n	8007e4e <_printf_float+0x386>
 8007e70:	e74a      	b.n	8007d08 <_printf_float+0x240>
 8007e72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e74:	2a01      	cmp	r2, #1
 8007e76:	dc01      	bgt.n	8007e7c <_printf_float+0x3b4>
 8007e78:	07db      	lsls	r3, r3, #31
 8007e7a:	d53a      	bpl.n	8007ef2 <_printf_float+0x42a>
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	4642      	mov	r2, r8
 8007e80:	4631      	mov	r1, r6
 8007e82:	4628      	mov	r0, r5
 8007e84:	47b8      	blx	r7
 8007e86:	3001      	adds	r0, #1
 8007e88:	f43f ae7b 	beq.w	8007b82 <_printf_float+0xba>
 8007e8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e90:	4631      	mov	r1, r6
 8007e92:	4628      	mov	r0, r5
 8007e94:	47b8      	blx	r7
 8007e96:	3001      	adds	r0, #1
 8007e98:	f108 0801 	add.w	r8, r8, #1
 8007e9c:	f43f ae71 	beq.w	8007b82 <_printf_float+0xba>
 8007ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f103 3aff 	add.w	sl, r3, #4294967295
 8007ea8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007eac:	2300      	movs	r3, #0
 8007eae:	f7f8 fe23 	bl	8000af8 <__aeabi_dcmpeq>
 8007eb2:	b9c8      	cbnz	r0, 8007ee8 <_printf_float+0x420>
 8007eb4:	4653      	mov	r3, sl
 8007eb6:	4642      	mov	r2, r8
 8007eb8:	4631      	mov	r1, r6
 8007eba:	4628      	mov	r0, r5
 8007ebc:	47b8      	blx	r7
 8007ebe:	3001      	adds	r0, #1
 8007ec0:	d10e      	bne.n	8007ee0 <_printf_float+0x418>
 8007ec2:	e65e      	b.n	8007b82 <_printf_float+0xba>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	4652      	mov	r2, sl
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4628      	mov	r0, r5
 8007ecc:	47b8      	blx	r7
 8007ece:	3001      	adds	r0, #1
 8007ed0:	f43f ae57 	beq.w	8007b82 <_printf_float+0xba>
 8007ed4:	f108 0801 	add.w	r8, r8, #1
 8007ed8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007eda:	3b01      	subs	r3, #1
 8007edc:	4543      	cmp	r3, r8
 8007ede:	dcf1      	bgt.n	8007ec4 <_printf_float+0x3fc>
 8007ee0:	464b      	mov	r3, r9
 8007ee2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ee6:	e6de      	b.n	8007ca6 <_printf_float+0x1de>
 8007ee8:	f04f 0800 	mov.w	r8, #0
 8007eec:	f104 0a1a 	add.w	sl, r4, #26
 8007ef0:	e7f2      	b.n	8007ed8 <_printf_float+0x410>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e7df      	b.n	8007eb6 <_printf_float+0x3ee>
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	464a      	mov	r2, r9
 8007efa:	4631      	mov	r1, r6
 8007efc:	4628      	mov	r0, r5
 8007efe:	47b8      	blx	r7
 8007f00:	3001      	adds	r0, #1
 8007f02:	f43f ae3e 	beq.w	8007b82 <_printf_float+0xba>
 8007f06:	f108 0801 	add.w	r8, r8, #1
 8007f0a:	68e3      	ldr	r3, [r4, #12]
 8007f0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007f0e:	1a9b      	subs	r3, r3, r2
 8007f10:	4543      	cmp	r3, r8
 8007f12:	dcf0      	bgt.n	8007ef6 <_printf_float+0x42e>
 8007f14:	e6fc      	b.n	8007d10 <_printf_float+0x248>
 8007f16:	f04f 0800 	mov.w	r8, #0
 8007f1a:	f104 0919 	add.w	r9, r4, #25
 8007f1e:	e7f4      	b.n	8007f0a <_printf_float+0x442>
 8007f20:	2900      	cmp	r1, #0
 8007f22:	f43f ae8b 	beq.w	8007c3c <_printf_float+0x174>
 8007f26:	2300      	movs	r3, #0
 8007f28:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007f2c:	ab09      	add	r3, sp, #36	; 0x24
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	ec49 8b10 	vmov	d0, r8, r9
 8007f34:	6022      	str	r2, [r4, #0]
 8007f36:	f8cd a004 	str.w	sl, [sp, #4]
 8007f3a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007f3e:	4628      	mov	r0, r5
 8007f40:	f7ff fd2e 	bl	80079a0 <__cvt>
 8007f44:	4680      	mov	r8, r0
 8007f46:	e648      	b.n	8007bda <_printf_float+0x112>

08007f48 <_printf_common>:
 8007f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f4c:	4691      	mov	r9, r2
 8007f4e:	461f      	mov	r7, r3
 8007f50:	688a      	ldr	r2, [r1, #8]
 8007f52:	690b      	ldr	r3, [r1, #16]
 8007f54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	bfb8      	it	lt
 8007f5c:	4613      	movlt	r3, r2
 8007f5e:	f8c9 3000 	str.w	r3, [r9]
 8007f62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f66:	4606      	mov	r6, r0
 8007f68:	460c      	mov	r4, r1
 8007f6a:	b112      	cbz	r2, 8007f72 <_printf_common+0x2a>
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	f8c9 3000 	str.w	r3, [r9]
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	0699      	lsls	r1, r3, #26
 8007f76:	bf42      	ittt	mi
 8007f78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f7c:	3302      	addmi	r3, #2
 8007f7e:	f8c9 3000 	strmi.w	r3, [r9]
 8007f82:	6825      	ldr	r5, [r4, #0]
 8007f84:	f015 0506 	ands.w	r5, r5, #6
 8007f88:	d107      	bne.n	8007f9a <_printf_common+0x52>
 8007f8a:	f104 0a19 	add.w	sl, r4, #25
 8007f8e:	68e3      	ldr	r3, [r4, #12]
 8007f90:	f8d9 2000 	ldr.w	r2, [r9]
 8007f94:	1a9b      	subs	r3, r3, r2
 8007f96:	42ab      	cmp	r3, r5
 8007f98:	dc28      	bgt.n	8007fec <_printf_common+0xa4>
 8007f9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	3300      	adds	r3, #0
 8007fa2:	bf18      	it	ne
 8007fa4:	2301      	movne	r3, #1
 8007fa6:	0692      	lsls	r2, r2, #26
 8007fa8:	d42d      	bmi.n	8008006 <_printf_common+0xbe>
 8007faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fae:	4639      	mov	r1, r7
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	47c0      	blx	r8
 8007fb4:	3001      	adds	r0, #1
 8007fb6:	d020      	beq.n	8007ffa <_printf_common+0xb2>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	68e5      	ldr	r5, [r4, #12]
 8007fbc:	f8d9 2000 	ldr.w	r2, [r9]
 8007fc0:	f003 0306 	and.w	r3, r3, #6
 8007fc4:	2b04      	cmp	r3, #4
 8007fc6:	bf08      	it	eq
 8007fc8:	1aad      	subeq	r5, r5, r2
 8007fca:	68a3      	ldr	r3, [r4, #8]
 8007fcc:	6922      	ldr	r2, [r4, #16]
 8007fce:	bf0c      	ite	eq
 8007fd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fd4:	2500      	movne	r5, #0
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	bfc4      	itt	gt
 8007fda:	1a9b      	subgt	r3, r3, r2
 8007fdc:	18ed      	addgt	r5, r5, r3
 8007fde:	f04f 0900 	mov.w	r9, #0
 8007fe2:	341a      	adds	r4, #26
 8007fe4:	454d      	cmp	r5, r9
 8007fe6:	d11a      	bne.n	800801e <_printf_common+0xd6>
 8007fe8:	2000      	movs	r0, #0
 8007fea:	e008      	b.n	8007ffe <_printf_common+0xb6>
 8007fec:	2301      	movs	r3, #1
 8007fee:	4652      	mov	r2, sl
 8007ff0:	4639      	mov	r1, r7
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	47c0      	blx	r8
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	d103      	bne.n	8008002 <_printf_common+0xba>
 8007ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8007ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008002:	3501      	adds	r5, #1
 8008004:	e7c3      	b.n	8007f8e <_printf_common+0x46>
 8008006:	18e1      	adds	r1, r4, r3
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	2030      	movs	r0, #48	; 0x30
 800800c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008010:	4422      	add	r2, r4
 8008012:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008016:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800801a:	3302      	adds	r3, #2
 800801c:	e7c5      	b.n	8007faa <_printf_common+0x62>
 800801e:	2301      	movs	r3, #1
 8008020:	4622      	mov	r2, r4
 8008022:	4639      	mov	r1, r7
 8008024:	4630      	mov	r0, r6
 8008026:	47c0      	blx	r8
 8008028:	3001      	adds	r0, #1
 800802a:	d0e6      	beq.n	8007ffa <_printf_common+0xb2>
 800802c:	f109 0901 	add.w	r9, r9, #1
 8008030:	e7d8      	b.n	8007fe4 <_printf_common+0x9c>
	...

08008034 <_printf_i>:
 8008034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008038:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800803c:	460c      	mov	r4, r1
 800803e:	7e09      	ldrb	r1, [r1, #24]
 8008040:	b085      	sub	sp, #20
 8008042:	296e      	cmp	r1, #110	; 0x6e
 8008044:	4617      	mov	r7, r2
 8008046:	4606      	mov	r6, r0
 8008048:	4698      	mov	r8, r3
 800804a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800804c:	f000 80b3 	beq.w	80081b6 <_printf_i+0x182>
 8008050:	d822      	bhi.n	8008098 <_printf_i+0x64>
 8008052:	2963      	cmp	r1, #99	; 0x63
 8008054:	d036      	beq.n	80080c4 <_printf_i+0x90>
 8008056:	d80a      	bhi.n	800806e <_printf_i+0x3a>
 8008058:	2900      	cmp	r1, #0
 800805a:	f000 80b9 	beq.w	80081d0 <_printf_i+0x19c>
 800805e:	2958      	cmp	r1, #88	; 0x58
 8008060:	f000 8083 	beq.w	800816a <_printf_i+0x136>
 8008064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008068:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800806c:	e032      	b.n	80080d4 <_printf_i+0xa0>
 800806e:	2964      	cmp	r1, #100	; 0x64
 8008070:	d001      	beq.n	8008076 <_printf_i+0x42>
 8008072:	2969      	cmp	r1, #105	; 0x69
 8008074:	d1f6      	bne.n	8008064 <_printf_i+0x30>
 8008076:	6820      	ldr	r0, [r4, #0]
 8008078:	6813      	ldr	r3, [r2, #0]
 800807a:	0605      	lsls	r5, r0, #24
 800807c:	f103 0104 	add.w	r1, r3, #4
 8008080:	d52a      	bpl.n	80080d8 <_printf_i+0xa4>
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	6011      	str	r1, [r2, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	da03      	bge.n	8008092 <_printf_i+0x5e>
 800808a:	222d      	movs	r2, #45	; 0x2d
 800808c:	425b      	negs	r3, r3
 800808e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008092:	486f      	ldr	r0, [pc, #444]	; (8008250 <_printf_i+0x21c>)
 8008094:	220a      	movs	r2, #10
 8008096:	e039      	b.n	800810c <_printf_i+0xd8>
 8008098:	2973      	cmp	r1, #115	; 0x73
 800809a:	f000 809d 	beq.w	80081d8 <_printf_i+0x1a4>
 800809e:	d808      	bhi.n	80080b2 <_printf_i+0x7e>
 80080a0:	296f      	cmp	r1, #111	; 0x6f
 80080a2:	d020      	beq.n	80080e6 <_printf_i+0xb2>
 80080a4:	2970      	cmp	r1, #112	; 0x70
 80080a6:	d1dd      	bne.n	8008064 <_printf_i+0x30>
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	f043 0320 	orr.w	r3, r3, #32
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	e003      	b.n	80080ba <_printf_i+0x86>
 80080b2:	2975      	cmp	r1, #117	; 0x75
 80080b4:	d017      	beq.n	80080e6 <_printf_i+0xb2>
 80080b6:	2978      	cmp	r1, #120	; 0x78
 80080b8:	d1d4      	bne.n	8008064 <_printf_i+0x30>
 80080ba:	2378      	movs	r3, #120	; 0x78
 80080bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080c0:	4864      	ldr	r0, [pc, #400]	; (8008254 <_printf_i+0x220>)
 80080c2:	e055      	b.n	8008170 <_printf_i+0x13c>
 80080c4:	6813      	ldr	r3, [r2, #0]
 80080c6:	1d19      	adds	r1, r3, #4
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	6011      	str	r1, [r2, #0]
 80080cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080d4:	2301      	movs	r3, #1
 80080d6:	e08c      	b.n	80081f2 <_printf_i+0x1be>
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	6011      	str	r1, [r2, #0]
 80080dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80080e0:	bf18      	it	ne
 80080e2:	b21b      	sxthne	r3, r3
 80080e4:	e7cf      	b.n	8008086 <_printf_i+0x52>
 80080e6:	6813      	ldr	r3, [r2, #0]
 80080e8:	6825      	ldr	r5, [r4, #0]
 80080ea:	1d18      	adds	r0, r3, #4
 80080ec:	6010      	str	r0, [r2, #0]
 80080ee:	0628      	lsls	r0, r5, #24
 80080f0:	d501      	bpl.n	80080f6 <_printf_i+0xc2>
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	e002      	b.n	80080fc <_printf_i+0xc8>
 80080f6:	0668      	lsls	r0, r5, #25
 80080f8:	d5fb      	bpl.n	80080f2 <_printf_i+0xbe>
 80080fa:	881b      	ldrh	r3, [r3, #0]
 80080fc:	4854      	ldr	r0, [pc, #336]	; (8008250 <_printf_i+0x21c>)
 80080fe:	296f      	cmp	r1, #111	; 0x6f
 8008100:	bf14      	ite	ne
 8008102:	220a      	movne	r2, #10
 8008104:	2208      	moveq	r2, #8
 8008106:	2100      	movs	r1, #0
 8008108:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800810c:	6865      	ldr	r5, [r4, #4]
 800810e:	60a5      	str	r5, [r4, #8]
 8008110:	2d00      	cmp	r5, #0
 8008112:	f2c0 8095 	blt.w	8008240 <_printf_i+0x20c>
 8008116:	6821      	ldr	r1, [r4, #0]
 8008118:	f021 0104 	bic.w	r1, r1, #4
 800811c:	6021      	str	r1, [r4, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d13d      	bne.n	800819e <_printf_i+0x16a>
 8008122:	2d00      	cmp	r5, #0
 8008124:	f040 808e 	bne.w	8008244 <_printf_i+0x210>
 8008128:	4665      	mov	r5, ip
 800812a:	2a08      	cmp	r2, #8
 800812c:	d10b      	bne.n	8008146 <_printf_i+0x112>
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	07db      	lsls	r3, r3, #31
 8008132:	d508      	bpl.n	8008146 <_printf_i+0x112>
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	6862      	ldr	r2, [r4, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	bfde      	ittt	le
 800813c:	2330      	movle	r3, #48	; 0x30
 800813e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008142:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008146:	ebac 0305 	sub.w	r3, ip, r5
 800814a:	6123      	str	r3, [r4, #16]
 800814c:	f8cd 8000 	str.w	r8, [sp]
 8008150:	463b      	mov	r3, r7
 8008152:	aa03      	add	r2, sp, #12
 8008154:	4621      	mov	r1, r4
 8008156:	4630      	mov	r0, r6
 8008158:	f7ff fef6 	bl	8007f48 <_printf_common>
 800815c:	3001      	adds	r0, #1
 800815e:	d14d      	bne.n	80081fc <_printf_i+0x1c8>
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	b005      	add	sp, #20
 8008166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800816a:	4839      	ldr	r0, [pc, #228]	; (8008250 <_printf_i+0x21c>)
 800816c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008170:	6813      	ldr	r3, [r2, #0]
 8008172:	6821      	ldr	r1, [r4, #0]
 8008174:	1d1d      	adds	r5, r3, #4
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6015      	str	r5, [r2, #0]
 800817a:	060a      	lsls	r2, r1, #24
 800817c:	d50b      	bpl.n	8008196 <_printf_i+0x162>
 800817e:	07ca      	lsls	r2, r1, #31
 8008180:	bf44      	itt	mi
 8008182:	f041 0120 	orrmi.w	r1, r1, #32
 8008186:	6021      	strmi	r1, [r4, #0]
 8008188:	b91b      	cbnz	r3, 8008192 <_printf_i+0x15e>
 800818a:	6822      	ldr	r2, [r4, #0]
 800818c:	f022 0220 	bic.w	r2, r2, #32
 8008190:	6022      	str	r2, [r4, #0]
 8008192:	2210      	movs	r2, #16
 8008194:	e7b7      	b.n	8008106 <_printf_i+0xd2>
 8008196:	064d      	lsls	r5, r1, #25
 8008198:	bf48      	it	mi
 800819a:	b29b      	uxthmi	r3, r3
 800819c:	e7ef      	b.n	800817e <_printf_i+0x14a>
 800819e:	4665      	mov	r5, ip
 80081a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80081a4:	fb02 3311 	mls	r3, r2, r1, r3
 80081a8:	5cc3      	ldrb	r3, [r0, r3]
 80081aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80081ae:	460b      	mov	r3, r1
 80081b0:	2900      	cmp	r1, #0
 80081b2:	d1f5      	bne.n	80081a0 <_printf_i+0x16c>
 80081b4:	e7b9      	b.n	800812a <_printf_i+0xf6>
 80081b6:	6813      	ldr	r3, [r2, #0]
 80081b8:	6825      	ldr	r5, [r4, #0]
 80081ba:	6961      	ldr	r1, [r4, #20]
 80081bc:	1d18      	adds	r0, r3, #4
 80081be:	6010      	str	r0, [r2, #0]
 80081c0:	0628      	lsls	r0, r5, #24
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	d501      	bpl.n	80081ca <_printf_i+0x196>
 80081c6:	6019      	str	r1, [r3, #0]
 80081c8:	e002      	b.n	80081d0 <_printf_i+0x19c>
 80081ca:	066a      	lsls	r2, r5, #25
 80081cc:	d5fb      	bpl.n	80081c6 <_printf_i+0x192>
 80081ce:	8019      	strh	r1, [r3, #0]
 80081d0:	2300      	movs	r3, #0
 80081d2:	6123      	str	r3, [r4, #16]
 80081d4:	4665      	mov	r5, ip
 80081d6:	e7b9      	b.n	800814c <_printf_i+0x118>
 80081d8:	6813      	ldr	r3, [r2, #0]
 80081da:	1d19      	adds	r1, r3, #4
 80081dc:	6011      	str	r1, [r2, #0]
 80081de:	681d      	ldr	r5, [r3, #0]
 80081e0:	6862      	ldr	r2, [r4, #4]
 80081e2:	2100      	movs	r1, #0
 80081e4:	4628      	mov	r0, r5
 80081e6:	f7f8 f813 	bl	8000210 <memchr>
 80081ea:	b108      	cbz	r0, 80081f0 <_printf_i+0x1bc>
 80081ec:	1b40      	subs	r0, r0, r5
 80081ee:	6060      	str	r0, [r4, #4]
 80081f0:	6863      	ldr	r3, [r4, #4]
 80081f2:	6123      	str	r3, [r4, #16]
 80081f4:	2300      	movs	r3, #0
 80081f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081fa:	e7a7      	b.n	800814c <_printf_i+0x118>
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	462a      	mov	r2, r5
 8008200:	4639      	mov	r1, r7
 8008202:	4630      	mov	r0, r6
 8008204:	47c0      	blx	r8
 8008206:	3001      	adds	r0, #1
 8008208:	d0aa      	beq.n	8008160 <_printf_i+0x12c>
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	079b      	lsls	r3, r3, #30
 800820e:	d413      	bmi.n	8008238 <_printf_i+0x204>
 8008210:	68e0      	ldr	r0, [r4, #12]
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	4298      	cmp	r0, r3
 8008216:	bfb8      	it	lt
 8008218:	4618      	movlt	r0, r3
 800821a:	e7a3      	b.n	8008164 <_printf_i+0x130>
 800821c:	2301      	movs	r3, #1
 800821e:	464a      	mov	r2, r9
 8008220:	4639      	mov	r1, r7
 8008222:	4630      	mov	r0, r6
 8008224:	47c0      	blx	r8
 8008226:	3001      	adds	r0, #1
 8008228:	d09a      	beq.n	8008160 <_printf_i+0x12c>
 800822a:	3501      	adds	r5, #1
 800822c:	68e3      	ldr	r3, [r4, #12]
 800822e:	9a03      	ldr	r2, [sp, #12]
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	42ab      	cmp	r3, r5
 8008234:	dcf2      	bgt.n	800821c <_printf_i+0x1e8>
 8008236:	e7eb      	b.n	8008210 <_printf_i+0x1dc>
 8008238:	2500      	movs	r5, #0
 800823a:	f104 0919 	add.w	r9, r4, #25
 800823e:	e7f5      	b.n	800822c <_printf_i+0x1f8>
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1ac      	bne.n	800819e <_printf_i+0x16a>
 8008244:	7803      	ldrb	r3, [r0, #0]
 8008246:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800824a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800824e:	e76c      	b.n	800812a <_printf_i+0xf6>
 8008250:	0800aa06 	.word	0x0800aa06
 8008254:	0800aa17 	.word	0x0800aa17

08008258 <iprintf>:
 8008258:	b40f      	push	{r0, r1, r2, r3}
 800825a:	4b0a      	ldr	r3, [pc, #40]	; (8008284 <iprintf+0x2c>)
 800825c:	b513      	push	{r0, r1, r4, lr}
 800825e:	681c      	ldr	r4, [r3, #0]
 8008260:	b124      	cbz	r4, 800826c <iprintf+0x14>
 8008262:	69a3      	ldr	r3, [r4, #24]
 8008264:	b913      	cbnz	r3, 800826c <iprintf+0x14>
 8008266:	4620      	mov	r0, r4
 8008268:	f001 f8ba 	bl	80093e0 <__sinit>
 800826c:	ab05      	add	r3, sp, #20
 800826e:	9a04      	ldr	r2, [sp, #16]
 8008270:	68a1      	ldr	r1, [r4, #8]
 8008272:	9301      	str	r3, [sp, #4]
 8008274:	4620      	mov	r0, r4
 8008276:	f001 fecf 	bl	800a018 <_vfiprintf_r>
 800827a:	b002      	add	sp, #8
 800827c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008280:	b004      	add	sp, #16
 8008282:	4770      	bx	lr
 8008284:	2000014c 	.word	0x2000014c

08008288 <_puts_r>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	460e      	mov	r6, r1
 800828c:	4605      	mov	r5, r0
 800828e:	b118      	cbz	r0, 8008298 <_puts_r+0x10>
 8008290:	6983      	ldr	r3, [r0, #24]
 8008292:	b90b      	cbnz	r3, 8008298 <_puts_r+0x10>
 8008294:	f001 f8a4 	bl	80093e0 <__sinit>
 8008298:	69ab      	ldr	r3, [r5, #24]
 800829a:	68ac      	ldr	r4, [r5, #8]
 800829c:	b913      	cbnz	r3, 80082a4 <_puts_r+0x1c>
 800829e:	4628      	mov	r0, r5
 80082a0:	f001 f89e 	bl	80093e0 <__sinit>
 80082a4:	4b23      	ldr	r3, [pc, #140]	; (8008334 <_puts_r+0xac>)
 80082a6:	429c      	cmp	r4, r3
 80082a8:	d117      	bne.n	80082da <_puts_r+0x52>
 80082aa:	686c      	ldr	r4, [r5, #4]
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	071b      	lsls	r3, r3, #28
 80082b0:	d51d      	bpl.n	80082ee <_puts_r+0x66>
 80082b2:	6923      	ldr	r3, [r4, #16]
 80082b4:	b1db      	cbz	r3, 80082ee <_puts_r+0x66>
 80082b6:	3e01      	subs	r6, #1
 80082b8:	68a3      	ldr	r3, [r4, #8]
 80082ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80082be:	3b01      	subs	r3, #1
 80082c0:	60a3      	str	r3, [r4, #8]
 80082c2:	b9e9      	cbnz	r1, 8008300 <_puts_r+0x78>
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	da2e      	bge.n	8008326 <_puts_r+0x9e>
 80082c8:	4622      	mov	r2, r4
 80082ca:	210a      	movs	r1, #10
 80082cc:	4628      	mov	r0, r5
 80082ce:	f000 f891 	bl	80083f4 <__swbuf_r>
 80082d2:	3001      	adds	r0, #1
 80082d4:	d011      	beq.n	80082fa <_puts_r+0x72>
 80082d6:	200a      	movs	r0, #10
 80082d8:	e011      	b.n	80082fe <_puts_r+0x76>
 80082da:	4b17      	ldr	r3, [pc, #92]	; (8008338 <_puts_r+0xb0>)
 80082dc:	429c      	cmp	r4, r3
 80082de:	d101      	bne.n	80082e4 <_puts_r+0x5c>
 80082e0:	68ac      	ldr	r4, [r5, #8]
 80082e2:	e7e3      	b.n	80082ac <_puts_r+0x24>
 80082e4:	4b15      	ldr	r3, [pc, #84]	; (800833c <_puts_r+0xb4>)
 80082e6:	429c      	cmp	r4, r3
 80082e8:	bf08      	it	eq
 80082ea:	68ec      	ldreq	r4, [r5, #12]
 80082ec:	e7de      	b.n	80082ac <_puts_r+0x24>
 80082ee:	4621      	mov	r1, r4
 80082f0:	4628      	mov	r0, r5
 80082f2:	f000 f8d1 	bl	8008498 <__swsetup_r>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d0dd      	beq.n	80082b6 <_puts_r+0x2e>
 80082fa:	f04f 30ff 	mov.w	r0, #4294967295
 80082fe:	bd70      	pop	{r4, r5, r6, pc}
 8008300:	2b00      	cmp	r3, #0
 8008302:	da04      	bge.n	800830e <_puts_r+0x86>
 8008304:	69a2      	ldr	r2, [r4, #24]
 8008306:	429a      	cmp	r2, r3
 8008308:	dc06      	bgt.n	8008318 <_puts_r+0x90>
 800830a:	290a      	cmp	r1, #10
 800830c:	d004      	beq.n	8008318 <_puts_r+0x90>
 800830e:	6823      	ldr	r3, [r4, #0]
 8008310:	1c5a      	adds	r2, r3, #1
 8008312:	6022      	str	r2, [r4, #0]
 8008314:	7019      	strb	r1, [r3, #0]
 8008316:	e7cf      	b.n	80082b8 <_puts_r+0x30>
 8008318:	4622      	mov	r2, r4
 800831a:	4628      	mov	r0, r5
 800831c:	f000 f86a 	bl	80083f4 <__swbuf_r>
 8008320:	3001      	adds	r0, #1
 8008322:	d1c9      	bne.n	80082b8 <_puts_r+0x30>
 8008324:	e7e9      	b.n	80082fa <_puts_r+0x72>
 8008326:	6823      	ldr	r3, [r4, #0]
 8008328:	200a      	movs	r0, #10
 800832a:	1c5a      	adds	r2, r3, #1
 800832c:	6022      	str	r2, [r4, #0]
 800832e:	7018      	strb	r0, [r3, #0]
 8008330:	e7e5      	b.n	80082fe <_puts_r+0x76>
 8008332:	bf00      	nop
 8008334:	0800aa58 	.word	0x0800aa58
 8008338:	0800aa78 	.word	0x0800aa78
 800833c:	0800aa38 	.word	0x0800aa38

08008340 <puts>:
 8008340:	4b02      	ldr	r3, [pc, #8]	; (800834c <puts+0xc>)
 8008342:	4601      	mov	r1, r0
 8008344:	6818      	ldr	r0, [r3, #0]
 8008346:	f7ff bf9f 	b.w	8008288 <_puts_r>
 800834a:	bf00      	nop
 800834c:	2000014c 	.word	0x2000014c

08008350 <siprintf>:
 8008350:	b40e      	push	{r1, r2, r3}
 8008352:	b500      	push	{lr}
 8008354:	b09c      	sub	sp, #112	; 0x70
 8008356:	ab1d      	add	r3, sp, #116	; 0x74
 8008358:	9002      	str	r0, [sp, #8]
 800835a:	9006      	str	r0, [sp, #24]
 800835c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008360:	4809      	ldr	r0, [pc, #36]	; (8008388 <siprintf+0x38>)
 8008362:	9107      	str	r1, [sp, #28]
 8008364:	9104      	str	r1, [sp, #16]
 8008366:	4909      	ldr	r1, [pc, #36]	; (800838c <siprintf+0x3c>)
 8008368:	f853 2b04 	ldr.w	r2, [r3], #4
 800836c:	9105      	str	r1, [sp, #20]
 800836e:	6800      	ldr	r0, [r0, #0]
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	a902      	add	r1, sp, #8
 8008374:	f001 fd2e 	bl	8009dd4 <_svfiprintf_r>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]
 800837e:	b01c      	add	sp, #112	; 0x70
 8008380:	f85d eb04 	ldr.w	lr, [sp], #4
 8008384:	b003      	add	sp, #12
 8008386:	4770      	bx	lr
 8008388:	2000014c 	.word	0x2000014c
 800838c:	ffff0208 	.word	0xffff0208

08008390 <strcat>:
 8008390:	b510      	push	{r4, lr}
 8008392:	4603      	mov	r3, r0
 8008394:	781a      	ldrb	r2, [r3, #0]
 8008396:	1c5c      	adds	r4, r3, #1
 8008398:	b93a      	cbnz	r2, 80083aa <strcat+0x1a>
 800839a:	3b01      	subs	r3, #1
 800839c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083a4:	2a00      	cmp	r2, #0
 80083a6:	d1f9      	bne.n	800839c <strcat+0xc>
 80083a8:	bd10      	pop	{r4, pc}
 80083aa:	4623      	mov	r3, r4
 80083ac:	e7f2      	b.n	8008394 <strcat+0x4>

080083ae <strcpy>:
 80083ae:	4603      	mov	r3, r0
 80083b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083b4:	f803 2b01 	strb.w	r2, [r3], #1
 80083b8:	2a00      	cmp	r2, #0
 80083ba:	d1f9      	bne.n	80083b0 <strcpy+0x2>
 80083bc:	4770      	bx	lr

080083be <strstr>:
 80083be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083c0:	7803      	ldrb	r3, [r0, #0]
 80083c2:	b17b      	cbz	r3, 80083e4 <strstr+0x26>
 80083c4:	4604      	mov	r4, r0
 80083c6:	7823      	ldrb	r3, [r4, #0]
 80083c8:	4620      	mov	r0, r4
 80083ca:	1c66      	adds	r6, r4, #1
 80083cc:	b17b      	cbz	r3, 80083ee <strstr+0x30>
 80083ce:	1e4a      	subs	r2, r1, #1
 80083d0:	1e63      	subs	r3, r4, #1
 80083d2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80083d6:	b14d      	cbz	r5, 80083ec <strstr+0x2e>
 80083d8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80083dc:	42af      	cmp	r7, r5
 80083de:	4634      	mov	r4, r6
 80083e0:	d0f7      	beq.n	80083d2 <strstr+0x14>
 80083e2:	e7f0      	b.n	80083c6 <strstr+0x8>
 80083e4:	780b      	ldrb	r3, [r1, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	bf18      	it	ne
 80083ea:	2000      	movne	r0, #0
 80083ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083ee:	4618      	mov	r0, r3
 80083f0:	e7fc      	b.n	80083ec <strstr+0x2e>
	...

080083f4 <__swbuf_r>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	460e      	mov	r6, r1
 80083f8:	4614      	mov	r4, r2
 80083fa:	4605      	mov	r5, r0
 80083fc:	b118      	cbz	r0, 8008406 <__swbuf_r+0x12>
 80083fe:	6983      	ldr	r3, [r0, #24]
 8008400:	b90b      	cbnz	r3, 8008406 <__swbuf_r+0x12>
 8008402:	f000 ffed 	bl	80093e0 <__sinit>
 8008406:	4b21      	ldr	r3, [pc, #132]	; (800848c <__swbuf_r+0x98>)
 8008408:	429c      	cmp	r4, r3
 800840a:	d12a      	bne.n	8008462 <__swbuf_r+0x6e>
 800840c:	686c      	ldr	r4, [r5, #4]
 800840e:	69a3      	ldr	r3, [r4, #24]
 8008410:	60a3      	str	r3, [r4, #8]
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	071a      	lsls	r2, r3, #28
 8008416:	d52e      	bpl.n	8008476 <__swbuf_r+0x82>
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	b363      	cbz	r3, 8008476 <__swbuf_r+0x82>
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	6820      	ldr	r0, [r4, #0]
 8008420:	1ac0      	subs	r0, r0, r3
 8008422:	6963      	ldr	r3, [r4, #20]
 8008424:	b2f6      	uxtb	r6, r6
 8008426:	4283      	cmp	r3, r0
 8008428:	4637      	mov	r7, r6
 800842a:	dc04      	bgt.n	8008436 <__swbuf_r+0x42>
 800842c:	4621      	mov	r1, r4
 800842e:	4628      	mov	r0, r5
 8008430:	f000 ff6c 	bl	800930c <_fflush_r>
 8008434:	bb28      	cbnz	r0, 8008482 <__swbuf_r+0x8e>
 8008436:	68a3      	ldr	r3, [r4, #8]
 8008438:	3b01      	subs	r3, #1
 800843a:	60a3      	str	r3, [r4, #8]
 800843c:	6823      	ldr	r3, [r4, #0]
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	6022      	str	r2, [r4, #0]
 8008442:	701e      	strb	r6, [r3, #0]
 8008444:	6963      	ldr	r3, [r4, #20]
 8008446:	3001      	adds	r0, #1
 8008448:	4283      	cmp	r3, r0
 800844a:	d004      	beq.n	8008456 <__swbuf_r+0x62>
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	07db      	lsls	r3, r3, #31
 8008450:	d519      	bpl.n	8008486 <__swbuf_r+0x92>
 8008452:	2e0a      	cmp	r6, #10
 8008454:	d117      	bne.n	8008486 <__swbuf_r+0x92>
 8008456:	4621      	mov	r1, r4
 8008458:	4628      	mov	r0, r5
 800845a:	f000 ff57 	bl	800930c <_fflush_r>
 800845e:	b190      	cbz	r0, 8008486 <__swbuf_r+0x92>
 8008460:	e00f      	b.n	8008482 <__swbuf_r+0x8e>
 8008462:	4b0b      	ldr	r3, [pc, #44]	; (8008490 <__swbuf_r+0x9c>)
 8008464:	429c      	cmp	r4, r3
 8008466:	d101      	bne.n	800846c <__swbuf_r+0x78>
 8008468:	68ac      	ldr	r4, [r5, #8]
 800846a:	e7d0      	b.n	800840e <__swbuf_r+0x1a>
 800846c:	4b09      	ldr	r3, [pc, #36]	; (8008494 <__swbuf_r+0xa0>)
 800846e:	429c      	cmp	r4, r3
 8008470:	bf08      	it	eq
 8008472:	68ec      	ldreq	r4, [r5, #12]
 8008474:	e7cb      	b.n	800840e <__swbuf_r+0x1a>
 8008476:	4621      	mov	r1, r4
 8008478:	4628      	mov	r0, r5
 800847a:	f000 f80d 	bl	8008498 <__swsetup_r>
 800847e:	2800      	cmp	r0, #0
 8008480:	d0cc      	beq.n	800841c <__swbuf_r+0x28>
 8008482:	f04f 37ff 	mov.w	r7, #4294967295
 8008486:	4638      	mov	r0, r7
 8008488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800848a:	bf00      	nop
 800848c:	0800aa58 	.word	0x0800aa58
 8008490:	0800aa78 	.word	0x0800aa78
 8008494:	0800aa38 	.word	0x0800aa38

08008498 <__swsetup_r>:
 8008498:	4b32      	ldr	r3, [pc, #200]	; (8008564 <__swsetup_r+0xcc>)
 800849a:	b570      	push	{r4, r5, r6, lr}
 800849c:	681d      	ldr	r5, [r3, #0]
 800849e:	4606      	mov	r6, r0
 80084a0:	460c      	mov	r4, r1
 80084a2:	b125      	cbz	r5, 80084ae <__swsetup_r+0x16>
 80084a4:	69ab      	ldr	r3, [r5, #24]
 80084a6:	b913      	cbnz	r3, 80084ae <__swsetup_r+0x16>
 80084a8:	4628      	mov	r0, r5
 80084aa:	f000 ff99 	bl	80093e0 <__sinit>
 80084ae:	4b2e      	ldr	r3, [pc, #184]	; (8008568 <__swsetup_r+0xd0>)
 80084b0:	429c      	cmp	r4, r3
 80084b2:	d10f      	bne.n	80084d4 <__swsetup_r+0x3c>
 80084b4:	686c      	ldr	r4, [r5, #4]
 80084b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	0715      	lsls	r5, r2, #28
 80084be:	d42c      	bmi.n	800851a <__swsetup_r+0x82>
 80084c0:	06d0      	lsls	r0, r2, #27
 80084c2:	d411      	bmi.n	80084e8 <__swsetup_r+0x50>
 80084c4:	2209      	movs	r2, #9
 80084c6:	6032      	str	r2, [r6, #0]
 80084c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	e03e      	b.n	8008552 <__swsetup_r+0xba>
 80084d4:	4b25      	ldr	r3, [pc, #148]	; (800856c <__swsetup_r+0xd4>)
 80084d6:	429c      	cmp	r4, r3
 80084d8:	d101      	bne.n	80084de <__swsetup_r+0x46>
 80084da:	68ac      	ldr	r4, [r5, #8]
 80084dc:	e7eb      	b.n	80084b6 <__swsetup_r+0x1e>
 80084de:	4b24      	ldr	r3, [pc, #144]	; (8008570 <__swsetup_r+0xd8>)
 80084e0:	429c      	cmp	r4, r3
 80084e2:	bf08      	it	eq
 80084e4:	68ec      	ldreq	r4, [r5, #12]
 80084e6:	e7e6      	b.n	80084b6 <__swsetup_r+0x1e>
 80084e8:	0751      	lsls	r1, r2, #29
 80084ea:	d512      	bpl.n	8008512 <__swsetup_r+0x7a>
 80084ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ee:	b141      	cbz	r1, 8008502 <__swsetup_r+0x6a>
 80084f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084f4:	4299      	cmp	r1, r3
 80084f6:	d002      	beq.n	80084fe <__swsetup_r+0x66>
 80084f8:	4630      	mov	r0, r6
 80084fa:	f001 fb69 	bl	8009bd0 <_free_r>
 80084fe:	2300      	movs	r3, #0
 8008500:	6363      	str	r3, [r4, #52]	; 0x34
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	2300      	movs	r3, #0
 800850c:	6063      	str	r3, [r4, #4]
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	89a3      	ldrh	r3, [r4, #12]
 8008514:	f043 0308 	orr.w	r3, r3, #8
 8008518:	81a3      	strh	r3, [r4, #12]
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	b94b      	cbnz	r3, 8008532 <__swsetup_r+0x9a>
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008528:	d003      	beq.n	8008532 <__swsetup_r+0x9a>
 800852a:	4621      	mov	r1, r4
 800852c:	4630      	mov	r0, r6
 800852e:	f001 f813 	bl	8009558 <__smakebuf_r>
 8008532:	89a2      	ldrh	r2, [r4, #12]
 8008534:	f012 0301 	ands.w	r3, r2, #1
 8008538:	d00c      	beq.n	8008554 <__swsetup_r+0xbc>
 800853a:	2300      	movs	r3, #0
 800853c:	60a3      	str	r3, [r4, #8]
 800853e:	6963      	ldr	r3, [r4, #20]
 8008540:	425b      	negs	r3, r3
 8008542:	61a3      	str	r3, [r4, #24]
 8008544:	6923      	ldr	r3, [r4, #16]
 8008546:	b953      	cbnz	r3, 800855e <__swsetup_r+0xc6>
 8008548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008550:	d1ba      	bne.n	80084c8 <__swsetup_r+0x30>
 8008552:	bd70      	pop	{r4, r5, r6, pc}
 8008554:	0792      	lsls	r2, r2, #30
 8008556:	bf58      	it	pl
 8008558:	6963      	ldrpl	r3, [r4, #20]
 800855a:	60a3      	str	r3, [r4, #8]
 800855c:	e7f2      	b.n	8008544 <__swsetup_r+0xac>
 800855e:	2000      	movs	r0, #0
 8008560:	e7f7      	b.n	8008552 <__swsetup_r+0xba>
 8008562:	bf00      	nop
 8008564:	2000014c 	.word	0x2000014c
 8008568:	0800aa58 	.word	0x0800aa58
 800856c:	0800aa78 	.word	0x0800aa78
 8008570:	0800aa38 	.word	0x0800aa38

08008574 <quorem>:
 8008574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008578:	6903      	ldr	r3, [r0, #16]
 800857a:	690c      	ldr	r4, [r1, #16]
 800857c:	42a3      	cmp	r3, r4
 800857e:	4680      	mov	r8, r0
 8008580:	f2c0 8082 	blt.w	8008688 <quorem+0x114>
 8008584:	3c01      	subs	r4, #1
 8008586:	f101 0714 	add.w	r7, r1, #20
 800858a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800858e:	f100 0614 	add.w	r6, r0, #20
 8008592:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8008596:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800859a:	eb06 030c 	add.w	r3, r6, ip
 800859e:	3501      	adds	r5, #1
 80085a0:	eb07 090c 	add.w	r9, r7, ip
 80085a4:	9301      	str	r3, [sp, #4]
 80085a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80085aa:	b395      	cbz	r5, 8008612 <quorem+0x9e>
 80085ac:	f04f 0a00 	mov.w	sl, #0
 80085b0:	4638      	mov	r0, r7
 80085b2:	46b6      	mov	lr, r6
 80085b4:	46d3      	mov	fp, sl
 80085b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80085ba:	b293      	uxth	r3, r2
 80085bc:	fb05 a303 	mla	r3, r5, r3, sl
 80085c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	ebab 0303 	sub.w	r3, fp, r3
 80085ca:	0c12      	lsrs	r2, r2, #16
 80085cc:	f8de b000 	ldr.w	fp, [lr]
 80085d0:	fb05 a202 	mla	r2, r5, r2, sl
 80085d4:	fa13 f38b 	uxtah	r3, r3, fp
 80085d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80085dc:	fa1f fb82 	uxth.w	fp, r2
 80085e0:	f8de 2000 	ldr.w	r2, [lr]
 80085e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80085e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085f2:	4581      	cmp	r9, r0
 80085f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80085f8:	f84e 3b04 	str.w	r3, [lr], #4
 80085fc:	d2db      	bcs.n	80085b6 <quorem+0x42>
 80085fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8008602:	b933      	cbnz	r3, 8008612 <quorem+0x9e>
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	3b04      	subs	r3, #4
 8008608:	429e      	cmp	r6, r3
 800860a:	461a      	mov	r2, r3
 800860c:	d330      	bcc.n	8008670 <quorem+0xfc>
 800860e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008612:	4640      	mov	r0, r8
 8008614:	f001 fa08 	bl	8009a28 <__mcmp>
 8008618:	2800      	cmp	r0, #0
 800861a:	db25      	blt.n	8008668 <quorem+0xf4>
 800861c:	3501      	adds	r5, #1
 800861e:	4630      	mov	r0, r6
 8008620:	f04f 0c00 	mov.w	ip, #0
 8008624:	f857 2b04 	ldr.w	r2, [r7], #4
 8008628:	f8d0 e000 	ldr.w	lr, [r0]
 800862c:	b293      	uxth	r3, r2
 800862e:	ebac 0303 	sub.w	r3, ip, r3
 8008632:	0c12      	lsrs	r2, r2, #16
 8008634:	fa13 f38e 	uxtah	r3, r3, lr
 8008638:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800863c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008640:	b29b      	uxth	r3, r3
 8008642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008646:	45b9      	cmp	r9, r7
 8008648:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800864c:	f840 3b04 	str.w	r3, [r0], #4
 8008650:	d2e8      	bcs.n	8008624 <quorem+0xb0>
 8008652:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008656:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800865a:	b92a      	cbnz	r2, 8008668 <quorem+0xf4>
 800865c:	3b04      	subs	r3, #4
 800865e:	429e      	cmp	r6, r3
 8008660:	461a      	mov	r2, r3
 8008662:	d30b      	bcc.n	800867c <quorem+0x108>
 8008664:	f8c8 4010 	str.w	r4, [r8, #16]
 8008668:	4628      	mov	r0, r5
 800866a:	b003      	add	sp, #12
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008670:	6812      	ldr	r2, [r2, #0]
 8008672:	3b04      	subs	r3, #4
 8008674:	2a00      	cmp	r2, #0
 8008676:	d1ca      	bne.n	800860e <quorem+0x9a>
 8008678:	3c01      	subs	r4, #1
 800867a:	e7c5      	b.n	8008608 <quorem+0x94>
 800867c:	6812      	ldr	r2, [r2, #0]
 800867e:	3b04      	subs	r3, #4
 8008680:	2a00      	cmp	r2, #0
 8008682:	d1ef      	bne.n	8008664 <quorem+0xf0>
 8008684:	3c01      	subs	r4, #1
 8008686:	e7ea      	b.n	800865e <quorem+0xea>
 8008688:	2000      	movs	r0, #0
 800868a:	e7ee      	b.n	800866a <quorem+0xf6>
 800868c:	0000      	movs	r0, r0
	...

08008690 <_dtoa_r>:
 8008690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008694:	ec57 6b10 	vmov	r6, r7, d0
 8008698:	b097      	sub	sp, #92	; 0x5c
 800869a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800869c:	9106      	str	r1, [sp, #24]
 800869e:	4604      	mov	r4, r0
 80086a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80086a2:	9312      	str	r3, [sp, #72]	; 0x48
 80086a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80086a8:	e9cd 6700 	strd	r6, r7, [sp]
 80086ac:	b93d      	cbnz	r5, 80086be <_dtoa_r+0x2e>
 80086ae:	2010      	movs	r0, #16
 80086b0:	f000 ff92 	bl	80095d8 <malloc>
 80086b4:	6260      	str	r0, [r4, #36]	; 0x24
 80086b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80086ba:	6005      	str	r5, [r0, #0]
 80086bc:	60c5      	str	r5, [r0, #12]
 80086be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086c0:	6819      	ldr	r1, [r3, #0]
 80086c2:	b151      	cbz	r1, 80086da <_dtoa_r+0x4a>
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	604a      	str	r2, [r1, #4]
 80086c8:	2301      	movs	r3, #1
 80086ca:	4093      	lsls	r3, r2
 80086cc:	608b      	str	r3, [r1, #8]
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 ffc9 	bl	8009666 <_Bfree>
 80086d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]
 80086da:	1e3b      	subs	r3, r7, #0
 80086dc:	bfbb      	ittet	lt
 80086de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80086e2:	9301      	strlt	r3, [sp, #4]
 80086e4:	2300      	movge	r3, #0
 80086e6:	2201      	movlt	r2, #1
 80086e8:	bfac      	ite	ge
 80086ea:	f8c8 3000 	strge.w	r3, [r8]
 80086ee:	f8c8 2000 	strlt.w	r2, [r8]
 80086f2:	4baf      	ldr	r3, [pc, #700]	; (80089b0 <_dtoa_r+0x320>)
 80086f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80086f8:	ea33 0308 	bics.w	r3, r3, r8
 80086fc:	d114      	bne.n	8008728 <_dtoa_r+0x98>
 80086fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008700:	f242 730f 	movw	r3, #9999	; 0x270f
 8008704:	6013      	str	r3, [r2, #0]
 8008706:	9b00      	ldr	r3, [sp, #0]
 8008708:	b923      	cbnz	r3, 8008714 <_dtoa_r+0x84>
 800870a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800870e:	2800      	cmp	r0, #0
 8008710:	f000 8542 	beq.w	8009198 <_dtoa_r+0xb08>
 8008714:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008716:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80089c4 <_dtoa_r+0x334>
 800871a:	2b00      	cmp	r3, #0
 800871c:	f000 8544 	beq.w	80091a8 <_dtoa_r+0xb18>
 8008720:	f10b 0303 	add.w	r3, fp, #3
 8008724:	f000 bd3e 	b.w	80091a4 <_dtoa_r+0xb14>
 8008728:	e9dd 6700 	ldrd	r6, r7, [sp]
 800872c:	2200      	movs	r2, #0
 800872e:	2300      	movs	r3, #0
 8008730:	4630      	mov	r0, r6
 8008732:	4639      	mov	r1, r7
 8008734:	f7f8 f9e0 	bl	8000af8 <__aeabi_dcmpeq>
 8008738:	4681      	mov	r9, r0
 800873a:	b168      	cbz	r0, 8008758 <_dtoa_r+0xc8>
 800873c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800873e:	2301      	movs	r3, #1
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8524 	beq.w	8009192 <_dtoa_r+0xb02>
 800874a:	4b9a      	ldr	r3, [pc, #616]	; (80089b4 <_dtoa_r+0x324>)
 800874c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800874e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008752:	6013      	str	r3, [r2, #0]
 8008754:	f000 bd28 	b.w	80091a8 <_dtoa_r+0xb18>
 8008758:	aa14      	add	r2, sp, #80	; 0x50
 800875a:	a915      	add	r1, sp, #84	; 0x54
 800875c:	ec47 6b10 	vmov	d0, r6, r7
 8008760:	4620      	mov	r0, r4
 8008762:	f001 f9d8 	bl	8009b16 <__d2b>
 8008766:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800876a:	9004      	str	r0, [sp, #16]
 800876c:	2d00      	cmp	r5, #0
 800876e:	d07c      	beq.n	800886a <_dtoa_r+0x1da>
 8008770:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008774:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008778:	46b2      	mov	sl, r6
 800877a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800877e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008782:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008786:	2200      	movs	r2, #0
 8008788:	4b8b      	ldr	r3, [pc, #556]	; (80089b8 <_dtoa_r+0x328>)
 800878a:	4650      	mov	r0, sl
 800878c:	4659      	mov	r1, fp
 800878e:	f7f7 fd93 	bl	80002b8 <__aeabi_dsub>
 8008792:	a381      	add	r3, pc, #516	; (adr r3, 8008998 <_dtoa_r+0x308>)
 8008794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008798:	f7f7 ff46 	bl	8000628 <__aeabi_dmul>
 800879c:	a380      	add	r3, pc, #512	; (adr r3, 80089a0 <_dtoa_r+0x310>)
 800879e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087a2:	f7f7 fd8b 	bl	80002bc <__adddf3>
 80087a6:	4606      	mov	r6, r0
 80087a8:	4628      	mov	r0, r5
 80087aa:	460f      	mov	r7, r1
 80087ac:	f7f7 fed2 	bl	8000554 <__aeabi_i2d>
 80087b0:	a37d      	add	r3, pc, #500	; (adr r3, 80089a8 <_dtoa_r+0x318>)
 80087b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b6:	f7f7 ff37 	bl	8000628 <__aeabi_dmul>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4630      	mov	r0, r6
 80087c0:	4639      	mov	r1, r7
 80087c2:	f7f7 fd7b 	bl	80002bc <__adddf3>
 80087c6:	4606      	mov	r6, r0
 80087c8:	460f      	mov	r7, r1
 80087ca:	f7f8 f9dd 	bl	8000b88 <__aeabi_d2iz>
 80087ce:	2200      	movs	r2, #0
 80087d0:	4682      	mov	sl, r0
 80087d2:	2300      	movs	r3, #0
 80087d4:	4630      	mov	r0, r6
 80087d6:	4639      	mov	r1, r7
 80087d8:	f7f8 f998 	bl	8000b0c <__aeabi_dcmplt>
 80087dc:	b148      	cbz	r0, 80087f2 <_dtoa_r+0x162>
 80087de:	4650      	mov	r0, sl
 80087e0:	f7f7 feb8 	bl	8000554 <__aeabi_i2d>
 80087e4:	4632      	mov	r2, r6
 80087e6:	463b      	mov	r3, r7
 80087e8:	f7f8 f986 	bl	8000af8 <__aeabi_dcmpeq>
 80087ec:	b908      	cbnz	r0, 80087f2 <_dtoa_r+0x162>
 80087ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087f2:	f1ba 0f16 	cmp.w	sl, #22
 80087f6:	d859      	bhi.n	80088ac <_dtoa_r+0x21c>
 80087f8:	4970      	ldr	r1, [pc, #448]	; (80089bc <_dtoa_r+0x32c>)
 80087fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80087fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008802:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008806:	f7f8 f99f 	bl	8000b48 <__aeabi_dcmpgt>
 800880a:	2800      	cmp	r0, #0
 800880c:	d050      	beq.n	80088b0 <_dtoa_r+0x220>
 800880e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008812:	2300      	movs	r3, #0
 8008814:	930f      	str	r3, [sp, #60]	; 0x3c
 8008816:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008818:	1b5d      	subs	r5, r3, r5
 800881a:	f1b5 0801 	subs.w	r8, r5, #1
 800881e:	bf49      	itett	mi
 8008820:	f1c5 0301 	rsbmi	r3, r5, #1
 8008824:	2300      	movpl	r3, #0
 8008826:	9305      	strmi	r3, [sp, #20]
 8008828:	f04f 0800 	movmi.w	r8, #0
 800882c:	bf58      	it	pl
 800882e:	9305      	strpl	r3, [sp, #20]
 8008830:	f1ba 0f00 	cmp.w	sl, #0
 8008834:	db3e      	blt.n	80088b4 <_dtoa_r+0x224>
 8008836:	2300      	movs	r3, #0
 8008838:	44d0      	add	r8, sl
 800883a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800883e:	9307      	str	r3, [sp, #28]
 8008840:	9b06      	ldr	r3, [sp, #24]
 8008842:	2b09      	cmp	r3, #9
 8008844:	f200 8090 	bhi.w	8008968 <_dtoa_r+0x2d8>
 8008848:	2b05      	cmp	r3, #5
 800884a:	bfc4      	itt	gt
 800884c:	3b04      	subgt	r3, #4
 800884e:	9306      	strgt	r3, [sp, #24]
 8008850:	9b06      	ldr	r3, [sp, #24]
 8008852:	f1a3 0302 	sub.w	r3, r3, #2
 8008856:	bfcc      	ite	gt
 8008858:	2500      	movgt	r5, #0
 800885a:	2501      	movle	r5, #1
 800885c:	2b03      	cmp	r3, #3
 800885e:	f200 808f 	bhi.w	8008980 <_dtoa_r+0x2f0>
 8008862:	e8df f003 	tbb	[pc, r3]
 8008866:	7f7d      	.short	0x7f7d
 8008868:	7131      	.short	0x7131
 800886a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800886e:	441d      	add	r5, r3
 8008870:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008874:	2820      	cmp	r0, #32
 8008876:	dd13      	ble.n	80088a0 <_dtoa_r+0x210>
 8008878:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800887c:	9b00      	ldr	r3, [sp, #0]
 800887e:	fa08 f800 	lsl.w	r8, r8, r0
 8008882:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008886:	fa23 f000 	lsr.w	r0, r3, r0
 800888a:	ea48 0000 	orr.w	r0, r8, r0
 800888e:	f7f7 fe51 	bl	8000534 <__aeabi_ui2d>
 8008892:	2301      	movs	r3, #1
 8008894:	4682      	mov	sl, r0
 8008896:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800889a:	3d01      	subs	r5, #1
 800889c:	9313      	str	r3, [sp, #76]	; 0x4c
 800889e:	e772      	b.n	8008786 <_dtoa_r+0xf6>
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	f1c0 0020 	rsb	r0, r0, #32
 80088a6:	fa03 f000 	lsl.w	r0, r3, r0
 80088aa:	e7f0      	b.n	800888e <_dtoa_r+0x1fe>
 80088ac:	2301      	movs	r3, #1
 80088ae:	e7b1      	b.n	8008814 <_dtoa_r+0x184>
 80088b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80088b2:	e7b0      	b.n	8008816 <_dtoa_r+0x186>
 80088b4:	9b05      	ldr	r3, [sp, #20]
 80088b6:	eba3 030a 	sub.w	r3, r3, sl
 80088ba:	9305      	str	r3, [sp, #20]
 80088bc:	f1ca 0300 	rsb	r3, sl, #0
 80088c0:	9307      	str	r3, [sp, #28]
 80088c2:	2300      	movs	r3, #0
 80088c4:	930e      	str	r3, [sp, #56]	; 0x38
 80088c6:	e7bb      	b.n	8008840 <_dtoa_r+0x1b0>
 80088c8:	2301      	movs	r3, #1
 80088ca:	930a      	str	r3, [sp, #40]	; 0x28
 80088cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	dd59      	ble.n	8008986 <_dtoa_r+0x2f6>
 80088d2:	9302      	str	r3, [sp, #8]
 80088d4:	4699      	mov	r9, r3
 80088d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80088d8:	2200      	movs	r2, #0
 80088da:	6072      	str	r2, [r6, #4]
 80088dc:	2204      	movs	r2, #4
 80088de:	f102 0014 	add.w	r0, r2, #20
 80088e2:	4298      	cmp	r0, r3
 80088e4:	6871      	ldr	r1, [r6, #4]
 80088e6:	d953      	bls.n	8008990 <_dtoa_r+0x300>
 80088e8:	4620      	mov	r0, r4
 80088ea:	f000 fe88 	bl	80095fe <_Balloc>
 80088ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088f0:	6030      	str	r0, [r6, #0]
 80088f2:	f1b9 0f0e 	cmp.w	r9, #14
 80088f6:	f8d3 b000 	ldr.w	fp, [r3]
 80088fa:	f200 80e6 	bhi.w	8008aca <_dtoa_r+0x43a>
 80088fe:	2d00      	cmp	r5, #0
 8008900:	f000 80e3 	beq.w	8008aca <_dtoa_r+0x43a>
 8008904:	ed9d 7b00 	vldr	d7, [sp]
 8008908:	f1ba 0f00 	cmp.w	sl, #0
 800890c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008910:	dd74      	ble.n	80089fc <_dtoa_r+0x36c>
 8008912:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <_dtoa_r+0x32c>)
 8008914:	f00a 030f 	and.w	r3, sl, #15
 8008918:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800891c:	ed93 7b00 	vldr	d7, [r3]
 8008920:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008924:	06f0      	lsls	r0, r6, #27
 8008926:	ed8d 7b08 	vstr	d7, [sp, #32]
 800892a:	d565      	bpl.n	80089f8 <_dtoa_r+0x368>
 800892c:	4b24      	ldr	r3, [pc, #144]	; (80089c0 <_dtoa_r+0x330>)
 800892e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008932:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008936:	f7f7 ffa1 	bl	800087c <__aeabi_ddiv>
 800893a:	e9cd 0100 	strd	r0, r1, [sp]
 800893e:	f006 060f 	and.w	r6, r6, #15
 8008942:	2503      	movs	r5, #3
 8008944:	4f1e      	ldr	r7, [pc, #120]	; (80089c0 <_dtoa_r+0x330>)
 8008946:	e04c      	b.n	80089e2 <_dtoa_r+0x352>
 8008948:	2301      	movs	r3, #1
 800894a:	930a      	str	r3, [sp, #40]	; 0x28
 800894c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800894e:	4453      	add	r3, sl
 8008950:	f103 0901 	add.w	r9, r3, #1
 8008954:	9302      	str	r3, [sp, #8]
 8008956:	464b      	mov	r3, r9
 8008958:	2b01      	cmp	r3, #1
 800895a:	bfb8      	it	lt
 800895c:	2301      	movlt	r3, #1
 800895e:	e7ba      	b.n	80088d6 <_dtoa_r+0x246>
 8008960:	2300      	movs	r3, #0
 8008962:	e7b2      	b.n	80088ca <_dtoa_r+0x23a>
 8008964:	2300      	movs	r3, #0
 8008966:	e7f0      	b.n	800894a <_dtoa_r+0x2ba>
 8008968:	2501      	movs	r5, #1
 800896a:	2300      	movs	r3, #0
 800896c:	9306      	str	r3, [sp, #24]
 800896e:	950a      	str	r5, [sp, #40]	; 0x28
 8008970:	f04f 33ff 	mov.w	r3, #4294967295
 8008974:	9302      	str	r3, [sp, #8]
 8008976:	4699      	mov	r9, r3
 8008978:	2200      	movs	r2, #0
 800897a:	2312      	movs	r3, #18
 800897c:	920b      	str	r2, [sp, #44]	; 0x2c
 800897e:	e7aa      	b.n	80088d6 <_dtoa_r+0x246>
 8008980:	2301      	movs	r3, #1
 8008982:	930a      	str	r3, [sp, #40]	; 0x28
 8008984:	e7f4      	b.n	8008970 <_dtoa_r+0x2e0>
 8008986:	2301      	movs	r3, #1
 8008988:	9302      	str	r3, [sp, #8]
 800898a:	4699      	mov	r9, r3
 800898c:	461a      	mov	r2, r3
 800898e:	e7f5      	b.n	800897c <_dtoa_r+0x2ec>
 8008990:	3101      	adds	r1, #1
 8008992:	6071      	str	r1, [r6, #4]
 8008994:	0052      	lsls	r2, r2, #1
 8008996:	e7a2      	b.n	80088de <_dtoa_r+0x24e>
 8008998:	636f4361 	.word	0x636f4361
 800899c:	3fd287a7 	.word	0x3fd287a7
 80089a0:	8b60c8b3 	.word	0x8b60c8b3
 80089a4:	3fc68a28 	.word	0x3fc68a28
 80089a8:	509f79fb 	.word	0x509f79fb
 80089ac:	3fd34413 	.word	0x3fd34413
 80089b0:	7ff00000 	.word	0x7ff00000
 80089b4:	0800aa05 	.word	0x0800aa05
 80089b8:	3ff80000 	.word	0x3ff80000
 80089bc:	0800aac0 	.word	0x0800aac0
 80089c0:	0800aa98 	.word	0x0800aa98
 80089c4:	0800aa31 	.word	0x0800aa31
 80089c8:	07f1      	lsls	r1, r6, #31
 80089ca:	d508      	bpl.n	80089de <_dtoa_r+0x34e>
 80089cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089d4:	f7f7 fe28 	bl	8000628 <__aeabi_dmul>
 80089d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80089dc:	3501      	adds	r5, #1
 80089de:	1076      	asrs	r6, r6, #1
 80089e0:	3708      	adds	r7, #8
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	d1f0      	bne.n	80089c8 <_dtoa_r+0x338>
 80089e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089ee:	f7f7 ff45 	bl	800087c <__aeabi_ddiv>
 80089f2:	e9cd 0100 	strd	r0, r1, [sp]
 80089f6:	e01a      	b.n	8008a2e <_dtoa_r+0x39e>
 80089f8:	2502      	movs	r5, #2
 80089fa:	e7a3      	b.n	8008944 <_dtoa_r+0x2b4>
 80089fc:	f000 80a0 	beq.w	8008b40 <_dtoa_r+0x4b0>
 8008a00:	f1ca 0600 	rsb	r6, sl, #0
 8008a04:	4b9f      	ldr	r3, [pc, #636]	; (8008c84 <_dtoa_r+0x5f4>)
 8008a06:	4fa0      	ldr	r7, [pc, #640]	; (8008c88 <_dtoa_r+0x5f8>)
 8008a08:	f006 020f 	and.w	r2, r6, #15
 8008a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a18:	f7f7 fe06 	bl	8000628 <__aeabi_dmul>
 8008a1c:	e9cd 0100 	strd	r0, r1, [sp]
 8008a20:	1136      	asrs	r6, r6, #4
 8008a22:	2300      	movs	r3, #0
 8008a24:	2502      	movs	r5, #2
 8008a26:	2e00      	cmp	r6, #0
 8008a28:	d17f      	bne.n	8008b2a <_dtoa_r+0x49a>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d1e1      	bne.n	80089f2 <_dtoa_r+0x362>
 8008a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 8087 	beq.w	8008b44 <_dtoa_r+0x4b4>
 8008a36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	4b93      	ldr	r3, [pc, #588]	; (8008c8c <_dtoa_r+0x5fc>)
 8008a3e:	4630      	mov	r0, r6
 8008a40:	4639      	mov	r1, r7
 8008a42:	f7f8 f863 	bl	8000b0c <__aeabi_dcmplt>
 8008a46:	2800      	cmp	r0, #0
 8008a48:	d07c      	beq.n	8008b44 <_dtoa_r+0x4b4>
 8008a4a:	f1b9 0f00 	cmp.w	r9, #0
 8008a4e:	d079      	beq.n	8008b44 <_dtoa_r+0x4b4>
 8008a50:	9b02      	ldr	r3, [sp, #8]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	dd35      	ble.n	8008ac2 <_dtoa_r+0x432>
 8008a56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008a5a:	9308      	str	r3, [sp, #32]
 8008a5c:	4639      	mov	r1, r7
 8008a5e:	2200      	movs	r2, #0
 8008a60:	4b8b      	ldr	r3, [pc, #556]	; (8008c90 <_dtoa_r+0x600>)
 8008a62:	4630      	mov	r0, r6
 8008a64:	f7f7 fde0 	bl	8000628 <__aeabi_dmul>
 8008a68:	e9cd 0100 	strd	r0, r1, [sp]
 8008a6c:	9f02      	ldr	r7, [sp, #8]
 8008a6e:	3501      	adds	r5, #1
 8008a70:	4628      	mov	r0, r5
 8008a72:	f7f7 fd6f 	bl	8000554 <__aeabi_i2d>
 8008a76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a7a:	f7f7 fdd5 	bl	8000628 <__aeabi_dmul>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	4b84      	ldr	r3, [pc, #528]	; (8008c94 <_dtoa_r+0x604>)
 8008a82:	f7f7 fc1b 	bl	80002bc <__adddf3>
 8008a86:	4605      	mov	r5, r0
 8008a88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008a8c:	2f00      	cmp	r7, #0
 8008a8e:	d15d      	bne.n	8008b4c <_dtoa_r+0x4bc>
 8008a90:	2200      	movs	r2, #0
 8008a92:	4b81      	ldr	r3, [pc, #516]	; (8008c98 <_dtoa_r+0x608>)
 8008a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a98:	f7f7 fc0e 	bl	80002b8 <__aeabi_dsub>
 8008a9c:	462a      	mov	r2, r5
 8008a9e:	4633      	mov	r3, r6
 8008aa0:	e9cd 0100 	strd	r0, r1, [sp]
 8008aa4:	f7f8 f850 	bl	8000b48 <__aeabi_dcmpgt>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	f040 8288 	bne.w	8008fbe <_dtoa_r+0x92e>
 8008aae:	462a      	mov	r2, r5
 8008ab0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab8:	f7f8 f828 	bl	8000b0c <__aeabi_dcmplt>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f040 827c 	bne.w	8008fba <_dtoa_r+0x92a>
 8008ac2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008ac6:	e9cd 2300 	strd	r2, r3, [sp]
 8008aca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f2c0 8150 	blt.w	8008d72 <_dtoa_r+0x6e2>
 8008ad2:	f1ba 0f0e 	cmp.w	sl, #14
 8008ad6:	f300 814c 	bgt.w	8008d72 <_dtoa_r+0x6e2>
 8008ada:	4b6a      	ldr	r3, [pc, #424]	; (8008c84 <_dtoa_r+0x5f4>)
 8008adc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008ae0:	ed93 7b00 	vldr	d7, [r3]
 8008ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008aec:	f280 80d8 	bge.w	8008ca0 <_dtoa_r+0x610>
 8008af0:	f1b9 0f00 	cmp.w	r9, #0
 8008af4:	f300 80d4 	bgt.w	8008ca0 <_dtoa_r+0x610>
 8008af8:	f040 825e 	bne.w	8008fb8 <_dtoa_r+0x928>
 8008afc:	2200      	movs	r2, #0
 8008afe:	4b66      	ldr	r3, [pc, #408]	; (8008c98 <_dtoa_r+0x608>)
 8008b00:	ec51 0b17 	vmov	r0, r1, d7
 8008b04:	f7f7 fd90 	bl	8000628 <__aeabi_dmul>
 8008b08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b0c:	f7f8 f812 	bl	8000b34 <__aeabi_dcmpge>
 8008b10:	464f      	mov	r7, r9
 8008b12:	464e      	mov	r6, r9
 8008b14:	2800      	cmp	r0, #0
 8008b16:	f040 8234 	bne.w	8008f82 <_dtoa_r+0x8f2>
 8008b1a:	2331      	movs	r3, #49	; 0x31
 8008b1c:	f10b 0501 	add.w	r5, fp, #1
 8008b20:	f88b 3000 	strb.w	r3, [fp]
 8008b24:	f10a 0a01 	add.w	sl, sl, #1
 8008b28:	e22f      	b.n	8008f8a <_dtoa_r+0x8fa>
 8008b2a:	07f2      	lsls	r2, r6, #31
 8008b2c:	d505      	bpl.n	8008b3a <_dtoa_r+0x4aa>
 8008b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b32:	f7f7 fd79 	bl	8000628 <__aeabi_dmul>
 8008b36:	3501      	adds	r5, #1
 8008b38:	2301      	movs	r3, #1
 8008b3a:	1076      	asrs	r6, r6, #1
 8008b3c:	3708      	adds	r7, #8
 8008b3e:	e772      	b.n	8008a26 <_dtoa_r+0x396>
 8008b40:	2502      	movs	r5, #2
 8008b42:	e774      	b.n	8008a2e <_dtoa_r+0x39e>
 8008b44:	f8cd a020 	str.w	sl, [sp, #32]
 8008b48:	464f      	mov	r7, r9
 8008b4a:	e791      	b.n	8008a70 <_dtoa_r+0x3e0>
 8008b4c:	4b4d      	ldr	r3, [pc, #308]	; (8008c84 <_dtoa_r+0x5f4>)
 8008b4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008b56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d047      	beq.n	8008bec <_dtoa_r+0x55c>
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	2000      	movs	r0, #0
 8008b62:	494e      	ldr	r1, [pc, #312]	; (8008c9c <_dtoa_r+0x60c>)
 8008b64:	f7f7 fe8a 	bl	800087c <__aeabi_ddiv>
 8008b68:	462a      	mov	r2, r5
 8008b6a:	4633      	mov	r3, r6
 8008b6c:	f7f7 fba4 	bl	80002b8 <__aeabi_dsub>
 8008b70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b74:	465d      	mov	r5, fp
 8008b76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b7a:	f7f8 f805 	bl	8000b88 <__aeabi_d2iz>
 8008b7e:	4606      	mov	r6, r0
 8008b80:	f7f7 fce8 	bl	8000554 <__aeabi_i2d>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b8c:	f7f7 fb94 	bl	80002b8 <__aeabi_dsub>
 8008b90:	3630      	adds	r6, #48	; 0x30
 8008b92:	f805 6b01 	strb.w	r6, [r5], #1
 8008b96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008b9a:	e9cd 0100 	strd	r0, r1, [sp]
 8008b9e:	f7f7 ffb5 	bl	8000b0c <__aeabi_dcmplt>
 8008ba2:	2800      	cmp	r0, #0
 8008ba4:	d163      	bne.n	8008c6e <_dtoa_r+0x5de>
 8008ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008baa:	2000      	movs	r0, #0
 8008bac:	4937      	ldr	r1, [pc, #220]	; (8008c8c <_dtoa_r+0x5fc>)
 8008bae:	f7f7 fb83 	bl	80002b8 <__aeabi_dsub>
 8008bb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008bb6:	f7f7 ffa9 	bl	8000b0c <__aeabi_dcmplt>
 8008bba:	2800      	cmp	r0, #0
 8008bbc:	f040 80b7 	bne.w	8008d2e <_dtoa_r+0x69e>
 8008bc0:	eba5 030b 	sub.w	r3, r5, fp
 8008bc4:	429f      	cmp	r7, r3
 8008bc6:	f77f af7c 	ble.w	8008ac2 <_dtoa_r+0x432>
 8008bca:	2200      	movs	r2, #0
 8008bcc:	4b30      	ldr	r3, [pc, #192]	; (8008c90 <_dtoa_r+0x600>)
 8008bce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008bd2:	f7f7 fd29 	bl	8000628 <__aeabi_dmul>
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008bdc:	4b2c      	ldr	r3, [pc, #176]	; (8008c90 <_dtoa_r+0x600>)
 8008bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008be2:	f7f7 fd21 	bl	8000628 <__aeabi_dmul>
 8008be6:	e9cd 0100 	strd	r0, r1, [sp]
 8008bea:	e7c4      	b.n	8008b76 <_dtoa_r+0x4e6>
 8008bec:	462a      	mov	r2, r5
 8008bee:	4633      	mov	r3, r6
 8008bf0:	f7f7 fd1a 	bl	8000628 <__aeabi_dmul>
 8008bf4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008bf8:	eb0b 0507 	add.w	r5, fp, r7
 8008bfc:	465e      	mov	r6, fp
 8008bfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c02:	f7f7 ffc1 	bl	8000b88 <__aeabi_d2iz>
 8008c06:	4607      	mov	r7, r0
 8008c08:	f7f7 fca4 	bl	8000554 <__aeabi_i2d>
 8008c0c:	3730      	adds	r7, #48	; 0x30
 8008c0e:	4602      	mov	r2, r0
 8008c10:	460b      	mov	r3, r1
 8008c12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c16:	f7f7 fb4f 	bl	80002b8 <__aeabi_dsub>
 8008c1a:	f806 7b01 	strb.w	r7, [r6], #1
 8008c1e:	42ae      	cmp	r6, r5
 8008c20:	e9cd 0100 	strd	r0, r1, [sp]
 8008c24:	f04f 0200 	mov.w	r2, #0
 8008c28:	d126      	bne.n	8008c78 <_dtoa_r+0x5e8>
 8008c2a:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <_dtoa_r+0x60c>)
 8008c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008c30:	f7f7 fb44 	bl	80002bc <__adddf3>
 8008c34:	4602      	mov	r2, r0
 8008c36:	460b      	mov	r3, r1
 8008c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c3c:	f7f7 ff84 	bl	8000b48 <__aeabi_dcmpgt>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	d174      	bne.n	8008d2e <_dtoa_r+0x69e>
 8008c44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008c48:	2000      	movs	r0, #0
 8008c4a:	4914      	ldr	r1, [pc, #80]	; (8008c9c <_dtoa_r+0x60c>)
 8008c4c:	f7f7 fb34 	bl	80002b8 <__aeabi_dsub>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c58:	f7f7 ff58 	bl	8000b0c <__aeabi_dcmplt>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	f43f af30 	beq.w	8008ac2 <_dtoa_r+0x432>
 8008c62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c66:	2b30      	cmp	r3, #48	; 0x30
 8008c68:	f105 32ff 	add.w	r2, r5, #4294967295
 8008c6c:	d002      	beq.n	8008c74 <_dtoa_r+0x5e4>
 8008c6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008c72:	e04a      	b.n	8008d0a <_dtoa_r+0x67a>
 8008c74:	4615      	mov	r5, r2
 8008c76:	e7f4      	b.n	8008c62 <_dtoa_r+0x5d2>
 8008c78:	4b05      	ldr	r3, [pc, #20]	; (8008c90 <_dtoa_r+0x600>)
 8008c7a:	f7f7 fcd5 	bl	8000628 <__aeabi_dmul>
 8008c7e:	e9cd 0100 	strd	r0, r1, [sp]
 8008c82:	e7bc      	b.n	8008bfe <_dtoa_r+0x56e>
 8008c84:	0800aac0 	.word	0x0800aac0
 8008c88:	0800aa98 	.word	0x0800aa98
 8008c8c:	3ff00000 	.word	0x3ff00000
 8008c90:	40240000 	.word	0x40240000
 8008c94:	401c0000 	.word	0x401c0000
 8008c98:	40140000 	.word	0x40140000
 8008c9c:	3fe00000 	.word	0x3fe00000
 8008ca0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008ca4:	465d      	mov	r5, fp
 8008ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008caa:	4630      	mov	r0, r6
 8008cac:	4639      	mov	r1, r7
 8008cae:	f7f7 fde5 	bl	800087c <__aeabi_ddiv>
 8008cb2:	f7f7 ff69 	bl	8000b88 <__aeabi_d2iz>
 8008cb6:	4680      	mov	r8, r0
 8008cb8:	f7f7 fc4c 	bl	8000554 <__aeabi_i2d>
 8008cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cc0:	f7f7 fcb2 	bl	8000628 <__aeabi_dmul>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4639      	mov	r1, r7
 8008ccc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008cd0:	f7f7 faf2 	bl	80002b8 <__aeabi_dsub>
 8008cd4:	f805 6b01 	strb.w	r6, [r5], #1
 8008cd8:	eba5 060b 	sub.w	r6, r5, fp
 8008cdc:	45b1      	cmp	r9, r6
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	d139      	bne.n	8008d58 <_dtoa_r+0x6c8>
 8008ce4:	f7f7 faea 	bl	80002bc <__adddf3>
 8008ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cec:	4606      	mov	r6, r0
 8008cee:	460f      	mov	r7, r1
 8008cf0:	f7f7 ff2a 	bl	8000b48 <__aeabi_dcmpgt>
 8008cf4:	b9c8      	cbnz	r0, 8008d2a <_dtoa_r+0x69a>
 8008cf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	f7f7 fefb 	bl	8000af8 <__aeabi_dcmpeq>
 8008d02:	b110      	cbz	r0, 8008d0a <_dtoa_r+0x67a>
 8008d04:	f018 0f01 	tst.w	r8, #1
 8008d08:	d10f      	bne.n	8008d2a <_dtoa_r+0x69a>
 8008d0a:	9904      	ldr	r1, [sp, #16]
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	f000 fcaa 	bl	8009666 <_Bfree>
 8008d12:	2300      	movs	r3, #0
 8008d14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008d16:	702b      	strb	r3, [r5, #0]
 8008d18:	f10a 0301 	add.w	r3, sl, #1
 8008d1c:	6013      	str	r3, [r2, #0]
 8008d1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 8241 	beq.w	80091a8 <_dtoa_r+0xb18>
 8008d26:	601d      	str	r5, [r3, #0]
 8008d28:	e23e      	b.n	80091a8 <_dtoa_r+0xb18>
 8008d2a:	f8cd a020 	str.w	sl, [sp, #32]
 8008d2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008d32:	2a39      	cmp	r2, #57	; 0x39
 8008d34:	f105 33ff 	add.w	r3, r5, #4294967295
 8008d38:	d108      	bne.n	8008d4c <_dtoa_r+0x6bc>
 8008d3a:	459b      	cmp	fp, r3
 8008d3c:	d10a      	bne.n	8008d54 <_dtoa_r+0x6c4>
 8008d3e:	9b08      	ldr	r3, [sp, #32]
 8008d40:	3301      	adds	r3, #1
 8008d42:	9308      	str	r3, [sp, #32]
 8008d44:	2330      	movs	r3, #48	; 0x30
 8008d46:	f88b 3000 	strb.w	r3, [fp]
 8008d4a:	465b      	mov	r3, fp
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	3201      	adds	r2, #1
 8008d50:	701a      	strb	r2, [r3, #0]
 8008d52:	e78c      	b.n	8008c6e <_dtoa_r+0x5de>
 8008d54:	461d      	mov	r5, r3
 8008d56:	e7ea      	b.n	8008d2e <_dtoa_r+0x69e>
 8008d58:	2200      	movs	r2, #0
 8008d5a:	4b9b      	ldr	r3, [pc, #620]	; (8008fc8 <_dtoa_r+0x938>)
 8008d5c:	f7f7 fc64 	bl	8000628 <__aeabi_dmul>
 8008d60:	2200      	movs	r2, #0
 8008d62:	2300      	movs	r3, #0
 8008d64:	4606      	mov	r6, r0
 8008d66:	460f      	mov	r7, r1
 8008d68:	f7f7 fec6 	bl	8000af8 <__aeabi_dcmpeq>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d09a      	beq.n	8008ca6 <_dtoa_r+0x616>
 8008d70:	e7cb      	b.n	8008d0a <_dtoa_r+0x67a>
 8008d72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d74:	2a00      	cmp	r2, #0
 8008d76:	f000 808b 	beq.w	8008e90 <_dtoa_r+0x800>
 8008d7a:	9a06      	ldr	r2, [sp, #24]
 8008d7c:	2a01      	cmp	r2, #1
 8008d7e:	dc6e      	bgt.n	8008e5e <_dtoa_r+0x7ce>
 8008d80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008d82:	2a00      	cmp	r2, #0
 8008d84:	d067      	beq.n	8008e56 <_dtoa_r+0x7c6>
 8008d86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d8a:	9f07      	ldr	r7, [sp, #28]
 8008d8c:	9d05      	ldr	r5, [sp, #20]
 8008d8e:	9a05      	ldr	r2, [sp, #20]
 8008d90:	2101      	movs	r1, #1
 8008d92:	441a      	add	r2, r3
 8008d94:	4620      	mov	r0, r4
 8008d96:	9205      	str	r2, [sp, #20]
 8008d98:	4498      	add	r8, r3
 8008d9a:	f000 fd04 	bl	80097a6 <__i2b>
 8008d9e:	4606      	mov	r6, r0
 8008da0:	2d00      	cmp	r5, #0
 8008da2:	dd0c      	ble.n	8008dbe <_dtoa_r+0x72e>
 8008da4:	f1b8 0f00 	cmp.w	r8, #0
 8008da8:	dd09      	ble.n	8008dbe <_dtoa_r+0x72e>
 8008daa:	4545      	cmp	r5, r8
 8008dac:	9a05      	ldr	r2, [sp, #20]
 8008dae:	462b      	mov	r3, r5
 8008db0:	bfa8      	it	ge
 8008db2:	4643      	movge	r3, r8
 8008db4:	1ad2      	subs	r2, r2, r3
 8008db6:	9205      	str	r2, [sp, #20]
 8008db8:	1aed      	subs	r5, r5, r3
 8008dba:	eba8 0803 	sub.w	r8, r8, r3
 8008dbe:	9b07      	ldr	r3, [sp, #28]
 8008dc0:	b1eb      	cbz	r3, 8008dfe <_dtoa_r+0x76e>
 8008dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d067      	beq.n	8008e98 <_dtoa_r+0x808>
 8008dc8:	b18f      	cbz	r7, 8008dee <_dtoa_r+0x75e>
 8008dca:	4631      	mov	r1, r6
 8008dcc:	463a      	mov	r2, r7
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fd88 	bl	80098e4 <__pow5mult>
 8008dd4:	9a04      	ldr	r2, [sp, #16]
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	4606      	mov	r6, r0
 8008dda:	4620      	mov	r0, r4
 8008ddc:	f000 fcec 	bl	80097b8 <__multiply>
 8008de0:	9904      	ldr	r1, [sp, #16]
 8008de2:	9008      	str	r0, [sp, #32]
 8008de4:	4620      	mov	r0, r4
 8008de6:	f000 fc3e 	bl	8009666 <_Bfree>
 8008dea:	9b08      	ldr	r3, [sp, #32]
 8008dec:	9304      	str	r3, [sp, #16]
 8008dee:	9b07      	ldr	r3, [sp, #28]
 8008df0:	1bda      	subs	r2, r3, r7
 8008df2:	d004      	beq.n	8008dfe <_dtoa_r+0x76e>
 8008df4:	9904      	ldr	r1, [sp, #16]
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fd74 	bl	80098e4 <__pow5mult>
 8008dfc:	9004      	str	r0, [sp, #16]
 8008dfe:	2101      	movs	r1, #1
 8008e00:	4620      	mov	r0, r4
 8008e02:	f000 fcd0 	bl	80097a6 <__i2b>
 8008e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e08:	4607      	mov	r7, r0
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f000 81d0 	beq.w	80091b0 <_dtoa_r+0xb20>
 8008e10:	461a      	mov	r2, r3
 8008e12:	4601      	mov	r1, r0
 8008e14:	4620      	mov	r0, r4
 8008e16:	f000 fd65 	bl	80098e4 <__pow5mult>
 8008e1a:	9b06      	ldr	r3, [sp, #24]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	4607      	mov	r7, r0
 8008e20:	dc40      	bgt.n	8008ea4 <_dtoa_r+0x814>
 8008e22:	9b00      	ldr	r3, [sp, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d139      	bne.n	8008e9c <_dtoa_r+0x80c>
 8008e28:	9b01      	ldr	r3, [sp, #4]
 8008e2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d136      	bne.n	8008ea0 <_dtoa_r+0x810>
 8008e32:	9b01      	ldr	r3, [sp, #4]
 8008e34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e38:	0d1b      	lsrs	r3, r3, #20
 8008e3a:	051b      	lsls	r3, r3, #20
 8008e3c:	b12b      	cbz	r3, 8008e4a <_dtoa_r+0x7ba>
 8008e3e:	9b05      	ldr	r3, [sp, #20]
 8008e40:	3301      	adds	r3, #1
 8008e42:	9305      	str	r3, [sp, #20]
 8008e44:	f108 0801 	add.w	r8, r8, #1
 8008e48:	2301      	movs	r3, #1
 8008e4a:	9307      	str	r3, [sp, #28]
 8008e4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d12a      	bne.n	8008ea8 <_dtoa_r+0x818>
 8008e52:	2001      	movs	r0, #1
 8008e54:	e030      	b.n	8008eb8 <_dtoa_r+0x828>
 8008e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e5c:	e795      	b.n	8008d8a <_dtoa_r+0x6fa>
 8008e5e:	9b07      	ldr	r3, [sp, #28]
 8008e60:	f109 37ff 	add.w	r7, r9, #4294967295
 8008e64:	42bb      	cmp	r3, r7
 8008e66:	bfbf      	itttt	lt
 8008e68:	9b07      	ldrlt	r3, [sp, #28]
 8008e6a:	9707      	strlt	r7, [sp, #28]
 8008e6c:	1afa      	sublt	r2, r7, r3
 8008e6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008e70:	bfbb      	ittet	lt
 8008e72:	189b      	addlt	r3, r3, r2
 8008e74:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008e76:	1bdf      	subge	r7, r3, r7
 8008e78:	2700      	movlt	r7, #0
 8008e7a:	f1b9 0f00 	cmp.w	r9, #0
 8008e7e:	bfb5      	itete	lt
 8008e80:	9b05      	ldrlt	r3, [sp, #20]
 8008e82:	9d05      	ldrge	r5, [sp, #20]
 8008e84:	eba3 0509 	sublt.w	r5, r3, r9
 8008e88:	464b      	movge	r3, r9
 8008e8a:	bfb8      	it	lt
 8008e8c:	2300      	movlt	r3, #0
 8008e8e:	e77e      	b.n	8008d8e <_dtoa_r+0x6fe>
 8008e90:	9f07      	ldr	r7, [sp, #28]
 8008e92:	9d05      	ldr	r5, [sp, #20]
 8008e94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008e96:	e783      	b.n	8008da0 <_dtoa_r+0x710>
 8008e98:	9a07      	ldr	r2, [sp, #28]
 8008e9a:	e7ab      	b.n	8008df4 <_dtoa_r+0x764>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	e7d4      	b.n	8008e4a <_dtoa_r+0x7ba>
 8008ea0:	9b00      	ldr	r3, [sp, #0]
 8008ea2:	e7d2      	b.n	8008e4a <_dtoa_r+0x7ba>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	9307      	str	r3, [sp, #28]
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008eae:	6918      	ldr	r0, [r3, #16]
 8008eb0:	f000 fc2b 	bl	800970a <__hi0bits>
 8008eb4:	f1c0 0020 	rsb	r0, r0, #32
 8008eb8:	4440      	add	r0, r8
 8008eba:	f010 001f 	ands.w	r0, r0, #31
 8008ebe:	d047      	beq.n	8008f50 <_dtoa_r+0x8c0>
 8008ec0:	f1c0 0320 	rsb	r3, r0, #32
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	dd3b      	ble.n	8008f40 <_dtoa_r+0x8b0>
 8008ec8:	9b05      	ldr	r3, [sp, #20]
 8008eca:	f1c0 001c 	rsb	r0, r0, #28
 8008ece:	4403      	add	r3, r0
 8008ed0:	9305      	str	r3, [sp, #20]
 8008ed2:	4405      	add	r5, r0
 8008ed4:	4480      	add	r8, r0
 8008ed6:	9b05      	ldr	r3, [sp, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dd05      	ble.n	8008ee8 <_dtoa_r+0x858>
 8008edc:	461a      	mov	r2, r3
 8008ede:	9904      	ldr	r1, [sp, #16]
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f000 fd4d 	bl	8009980 <__lshift>
 8008ee6:	9004      	str	r0, [sp, #16]
 8008ee8:	f1b8 0f00 	cmp.w	r8, #0
 8008eec:	dd05      	ble.n	8008efa <_dtoa_r+0x86a>
 8008eee:	4639      	mov	r1, r7
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 fd44 	bl	8009980 <__lshift>
 8008ef8:	4607      	mov	r7, r0
 8008efa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008efc:	b353      	cbz	r3, 8008f54 <_dtoa_r+0x8c4>
 8008efe:	4639      	mov	r1, r7
 8008f00:	9804      	ldr	r0, [sp, #16]
 8008f02:	f000 fd91 	bl	8009a28 <__mcmp>
 8008f06:	2800      	cmp	r0, #0
 8008f08:	da24      	bge.n	8008f54 <_dtoa_r+0x8c4>
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	220a      	movs	r2, #10
 8008f0e:	9904      	ldr	r1, [sp, #16]
 8008f10:	4620      	mov	r0, r4
 8008f12:	f000 fbbf 	bl	8009694 <__multadd>
 8008f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f18:	9004      	str	r0, [sp, #16]
 8008f1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	f000 814d 	beq.w	80091be <_dtoa_r+0xb2e>
 8008f24:	2300      	movs	r3, #0
 8008f26:	4631      	mov	r1, r6
 8008f28:	220a      	movs	r2, #10
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fbb2 	bl	8009694 <__multadd>
 8008f30:	9b02      	ldr	r3, [sp, #8]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	4606      	mov	r6, r0
 8008f36:	dc4f      	bgt.n	8008fd8 <_dtoa_r+0x948>
 8008f38:	9b06      	ldr	r3, [sp, #24]
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	dd4c      	ble.n	8008fd8 <_dtoa_r+0x948>
 8008f3e:	e011      	b.n	8008f64 <_dtoa_r+0x8d4>
 8008f40:	d0c9      	beq.n	8008ed6 <_dtoa_r+0x846>
 8008f42:	9a05      	ldr	r2, [sp, #20]
 8008f44:	331c      	adds	r3, #28
 8008f46:	441a      	add	r2, r3
 8008f48:	9205      	str	r2, [sp, #20]
 8008f4a:	441d      	add	r5, r3
 8008f4c:	4498      	add	r8, r3
 8008f4e:	e7c2      	b.n	8008ed6 <_dtoa_r+0x846>
 8008f50:	4603      	mov	r3, r0
 8008f52:	e7f6      	b.n	8008f42 <_dtoa_r+0x8b2>
 8008f54:	f1b9 0f00 	cmp.w	r9, #0
 8008f58:	dc38      	bgt.n	8008fcc <_dtoa_r+0x93c>
 8008f5a:	9b06      	ldr	r3, [sp, #24]
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	dd35      	ble.n	8008fcc <_dtoa_r+0x93c>
 8008f60:	f8cd 9008 	str.w	r9, [sp, #8]
 8008f64:	9b02      	ldr	r3, [sp, #8]
 8008f66:	b963      	cbnz	r3, 8008f82 <_dtoa_r+0x8f2>
 8008f68:	4639      	mov	r1, r7
 8008f6a:	2205      	movs	r2, #5
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f000 fb91 	bl	8009694 <__multadd>
 8008f72:	4601      	mov	r1, r0
 8008f74:	4607      	mov	r7, r0
 8008f76:	9804      	ldr	r0, [sp, #16]
 8008f78:	f000 fd56 	bl	8009a28 <__mcmp>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	f73f adcc 	bgt.w	8008b1a <_dtoa_r+0x48a>
 8008f82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f84:	465d      	mov	r5, fp
 8008f86:	ea6f 0a03 	mvn.w	sl, r3
 8008f8a:	f04f 0900 	mov.w	r9, #0
 8008f8e:	4639      	mov	r1, r7
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 fb68 	bl	8009666 <_Bfree>
 8008f96:	2e00      	cmp	r6, #0
 8008f98:	f43f aeb7 	beq.w	8008d0a <_dtoa_r+0x67a>
 8008f9c:	f1b9 0f00 	cmp.w	r9, #0
 8008fa0:	d005      	beq.n	8008fae <_dtoa_r+0x91e>
 8008fa2:	45b1      	cmp	r9, r6
 8008fa4:	d003      	beq.n	8008fae <_dtoa_r+0x91e>
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	4620      	mov	r0, r4
 8008faa:	f000 fb5c 	bl	8009666 <_Bfree>
 8008fae:	4631      	mov	r1, r6
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 fb58 	bl	8009666 <_Bfree>
 8008fb6:	e6a8      	b.n	8008d0a <_dtoa_r+0x67a>
 8008fb8:	2700      	movs	r7, #0
 8008fba:	463e      	mov	r6, r7
 8008fbc:	e7e1      	b.n	8008f82 <_dtoa_r+0x8f2>
 8008fbe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008fc2:	463e      	mov	r6, r7
 8008fc4:	e5a9      	b.n	8008b1a <_dtoa_r+0x48a>
 8008fc6:	bf00      	nop
 8008fc8:	40240000 	.word	0x40240000
 8008fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fce:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	f000 80fa 	beq.w	80091cc <_dtoa_r+0xb3c>
 8008fd8:	2d00      	cmp	r5, #0
 8008fda:	dd05      	ble.n	8008fe8 <_dtoa_r+0x958>
 8008fdc:	4631      	mov	r1, r6
 8008fde:	462a      	mov	r2, r5
 8008fe0:	4620      	mov	r0, r4
 8008fe2:	f000 fccd 	bl	8009980 <__lshift>
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	9b07      	ldr	r3, [sp, #28]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d04c      	beq.n	8009088 <_dtoa_r+0x9f8>
 8008fee:	6871      	ldr	r1, [r6, #4]
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f000 fb04 	bl	80095fe <_Balloc>
 8008ff6:	6932      	ldr	r2, [r6, #16]
 8008ff8:	3202      	adds	r2, #2
 8008ffa:	4605      	mov	r5, r0
 8008ffc:	0092      	lsls	r2, r2, #2
 8008ffe:	f106 010c 	add.w	r1, r6, #12
 8009002:	300c      	adds	r0, #12
 8009004:	f000 faf0 	bl	80095e8 <memcpy>
 8009008:	2201      	movs	r2, #1
 800900a:	4629      	mov	r1, r5
 800900c:	4620      	mov	r0, r4
 800900e:	f000 fcb7 	bl	8009980 <__lshift>
 8009012:	9b00      	ldr	r3, [sp, #0]
 8009014:	f8cd b014 	str.w	fp, [sp, #20]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	46b1      	mov	r9, r6
 800901e:	9307      	str	r3, [sp, #28]
 8009020:	4606      	mov	r6, r0
 8009022:	4639      	mov	r1, r7
 8009024:	9804      	ldr	r0, [sp, #16]
 8009026:	f7ff faa5 	bl	8008574 <quorem>
 800902a:	4649      	mov	r1, r9
 800902c:	4605      	mov	r5, r0
 800902e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009032:	9804      	ldr	r0, [sp, #16]
 8009034:	f000 fcf8 	bl	8009a28 <__mcmp>
 8009038:	4632      	mov	r2, r6
 800903a:	9000      	str	r0, [sp, #0]
 800903c:	4639      	mov	r1, r7
 800903e:	4620      	mov	r0, r4
 8009040:	f000 fd0c 	bl	8009a5c <__mdiff>
 8009044:	68c3      	ldr	r3, [r0, #12]
 8009046:	4602      	mov	r2, r0
 8009048:	bb03      	cbnz	r3, 800908c <_dtoa_r+0x9fc>
 800904a:	4601      	mov	r1, r0
 800904c:	9008      	str	r0, [sp, #32]
 800904e:	9804      	ldr	r0, [sp, #16]
 8009050:	f000 fcea 	bl	8009a28 <__mcmp>
 8009054:	9a08      	ldr	r2, [sp, #32]
 8009056:	4603      	mov	r3, r0
 8009058:	4611      	mov	r1, r2
 800905a:	4620      	mov	r0, r4
 800905c:	9308      	str	r3, [sp, #32]
 800905e:	f000 fb02 	bl	8009666 <_Bfree>
 8009062:	9b08      	ldr	r3, [sp, #32]
 8009064:	b9a3      	cbnz	r3, 8009090 <_dtoa_r+0xa00>
 8009066:	9a06      	ldr	r2, [sp, #24]
 8009068:	b992      	cbnz	r2, 8009090 <_dtoa_r+0xa00>
 800906a:	9a07      	ldr	r2, [sp, #28]
 800906c:	b982      	cbnz	r2, 8009090 <_dtoa_r+0xa00>
 800906e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009072:	d029      	beq.n	80090c8 <_dtoa_r+0xa38>
 8009074:	9b00      	ldr	r3, [sp, #0]
 8009076:	2b00      	cmp	r3, #0
 8009078:	dd01      	ble.n	800907e <_dtoa_r+0x9ee>
 800907a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800907e:	9b05      	ldr	r3, [sp, #20]
 8009080:	1c5d      	adds	r5, r3, #1
 8009082:	f883 8000 	strb.w	r8, [r3]
 8009086:	e782      	b.n	8008f8e <_dtoa_r+0x8fe>
 8009088:	4630      	mov	r0, r6
 800908a:	e7c2      	b.n	8009012 <_dtoa_r+0x982>
 800908c:	2301      	movs	r3, #1
 800908e:	e7e3      	b.n	8009058 <_dtoa_r+0x9c8>
 8009090:	9a00      	ldr	r2, [sp, #0]
 8009092:	2a00      	cmp	r2, #0
 8009094:	db04      	blt.n	80090a0 <_dtoa_r+0xa10>
 8009096:	d125      	bne.n	80090e4 <_dtoa_r+0xa54>
 8009098:	9a06      	ldr	r2, [sp, #24]
 800909a:	bb1a      	cbnz	r2, 80090e4 <_dtoa_r+0xa54>
 800909c:	9a07      	ldr	r2, [sp, #28]
 800909e:	bb0a      	cbnz	r2, 80090e4 <_dtoa_r+0xa54>
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	ddec      	ble.n	800907e <_dtoa_r+0x9ee>
 80090a4:	2201      	movs	r2, #1
 80090a6:	9904      	ldr	r1, [sp, #16]
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 fc69 	bl	8009980 <__lshift>
 80090ae:	4639      	mov	r1, r7
 80090b0:	9004      	str	r0, [sp, #16]
 80090b2:	f000 fcb9 	bl	8009a28 <__mcmp>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	dc03      	bgt.n	80090c2 <_dtoa_r+0xa32>
 80090ba:	d1e0      	bne.n	800907e <_dtoa_r+0x9ee>
 80090bc:	f018 0f01 	tst.w	r8, #1
 80090c0:	d0dd      	beq.n	800907e <_dtoa_r+0x9ee>
 80090c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80090c6:	d1d8      	bne.n	800907a <_dtoa_r+0x9ea>
 80090c8:	9b05      	ldr	r3, [sp, #20]
 80090ca:	9a05      	ldr	r2, [sp, #20]
 80090cc:	1c5d      	adds	r5, r3, #1
 80090ce:	2339      	movs	r3, #57	; 0x39
 80090d0:	7013      	strb	r3, [r2, #0]
 80090d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80090d6:	2b39      	cmp	r3, #57	; 0x39
 80090d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80090dc:	d04f      	beq.n	800917e <_dtoa_r+0xaee>
 80090de:	3301      	adds	r3, #1
 80090e0:	7013      	strb	r3, [r2, #0]
 80090e2:	e754      	b.n	8008f8e <_dtoa_r+0x8fe>
 80090e4:	9a05      	ldr	r2, [sp, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f102 0501 	add.w	r5, r2, #1
 80090ec:	dd06      	ble.n	80090fc <_dtoa_r+0xa6c>
 80090ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80090f2:	d0e9      	beq.n	80090c8 <_dtoa_r+0xa38>
 80090f4:	f108 0801 	add.w	r8, r8, #1
 80090f8:	9b05      	ldr	r3, [sp, #20]
 80090fa:	e7c2      	b.n	8009082 <_dtoa_r+0x9f2>
 80090fc:	9a02      	ldr	r2, [sp, #8]
 80090fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009102:	eba5 030b 	sub.w	r3, r5, fp
 8009106:	4293      	cmp	r3, r2
 8009108:	d021      	beq.n	800914e <_dtoa_r+0xabe>
 800910a:	2300      	movs	r3, #0
 800910c:	220a      	movs	r2, #10
 800910e:	9904      	ldr	r1, [sp, #16]
 8009110:	4620      	mov	r0, r4
 8009112:	f000 fabf 	bl	8009694 <__multadd>
 8009116:	45b1      	cmp	r9, r6
 8009118:	9004      	str	r0, [sp, #16]
 800911a:	f04f 0300 	mov.w	r3, #0
 800911e:	f04f 020a 	mov.w	r2, #10
 8009122:	4649      	mov	r1, r9
 8009124:	4620      	mov	r0, r4
 8009126:	d105      	bne.n	8009134 <_dtoa_r+0xaa4>
 8009128:	f000 fab4 	bl	8009694 <__multadd>
 800912c:	4681      	mov	r9, r0
 800912e:	4606      	mov	r6, r0
 8009130:	9505      	str	r5, [sp, #20]
 8009132:	e776      	b.n	8009022 <_dtoa_r+0x992>
 8009134:	f000 faae 	bl	8009694 <__multadd>
 8009138:	4631      	mov	r1, r6
 800913a:	4681      	mov	r9, r0
 800913c:	2300      	movs	r3, #0
 800913e:	220a      	movs	r2, #10
 8009140:	4620      	mov	r0, r4
 8009142:	f000 faa7 	bl	8009694 <__multadd>
 8009146:	4606      	mov	r6, r0
 8009148:	e7f2      	b.n	8009130 <_dtoa_r+0xaa0>
 800914a:	f04f 0900 	mov.w	r9, #0
 800914e:	2201      	movs	r2, #1
 8009150:	9904      	ldr	r1, [sp, #16]
 8009152:	4620      	mov	r0, r4
 8009154:	f000 fc14 	bl	8009980 <__lshift>
 8009158:	4639      	mov	r1, r7
 800915a:	9004      	str	r0, [sp, #16]
 800915c:	f000 fc64 	bl	8009a28 <__mcmp>
 8009160:	2800      	cmp	r0, #0
 8009162:	dcb6      	bgt.n	80090d2 <_dtoa_r+0xa42>
 8009164:	d102      	bne.n	800916c <_dtoa_r+0xadc>
 8009166:	f018 0f01 	tst.w	r8, #1
 800916a:	d1b2      	bne.n	80090d2 <_dtoa_r+0xa42>
 800916c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009170:	2b30      	cmp	r3, #48	; 0x30
 8009172:	f105 32ff 	add.w	r2, r5, #4294967295
 8009176:	f47f af0a 	bne.w	8008f8e <_dtoa_r+0x8fe>
 800917a:	4615      	mov	r5, r2
 800917c:	e7f6      	b.n	800916c <_dtoa_r+0xadc>
 800917e:	4593      	cmp	fp, r2
 8009180:	d105      	bne.n	800918e <_dtoa_r+0xafe>
 8009182:	2331      	movs	r3, #49	; 0x31
 8009184:	f10a 0a01 	add.w	sl, sl, #1
 8009188:	f88b 3000 	strb.w	r3, [fp]
 800918c:	e6ff      	b.n	8008f8e <_dtoa_r+0x8fe>
 800918e:	4615      	mov	r5, r2
 8009190:	e79f      	b.n	80090d2 <_dtoa_r+0xa42>
 8009192:	f8df b064 	ldr.w	fp, [pc, #100]	; 80091f8 <_dtoa_r+0xb68>
 8009196:	e007      	b.n	80091a8 <_dtoa_r+0xb18>
 8009198:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800919a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80091fc <_dtoa_r+0xb6c>
 800919e:	b11b      	cbz	r3, 80091a8 <_dtoa_r+0xb18>
 80091a0:	f10b 0308 	add.w	r3, fp, #8
 80091a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80091a6:	6013      	str	r3, [r2, #0]
 80091a8:	4658      	mov	r0, fp
 80091aa:	b017      	add	sp, #92	; 0x5c
 80091ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b0:	9b06      	ldr	r3, [sp, #24]
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	f77f ae35 	ble.w	8008e22 <_dtoa_r+0x792>
 80091b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091ba:	9307      	str	r3, [sp, #28]
 80091bc:	e649      	b.n	8008e52 <_dtoa_r+0x7c2>
 80091be:	9b02      	ldr	r3, [sp, #8]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	dc03      	bgt.n	80091cc <_dtoa_r+0xb3c>
 80091c4:	9b06      	ldr	r3, [sp, #24]
 80091c6:	2b02      	cmp	r3, #2
 80091c8:	f73f aecc 	bgt.w	8008f64 <_dtoa_r+0x8d4>
 80091cc:	465d      	mov	r5, fp
 80091ce:	4639      	mov	r1, r7
 80091d0:	9804      	ldr	r0, [sp, #16]
 80091d2:	f7ff f9cf 	bl	8008574 <quorem>
 80091d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80091da:	f805 8b01 	strb.w	r8, [r5], #1
 80091de:	9a02      	ldr	r2, [sp, #8]
 80091e0:	eba5 030b 	sub.w	r3, r5, fp
 80091e4:	429a      	cmp	r2, r3
 80091e6:	ddb0      	ble.n	800914a <_dtoa_r+0xaba>
 80091e8:	2300      	movs	r3, #0
 80091ea:	220a      	movs	r2, #10
 80091ec:	9904      	ldr	r1, [sp, #16]
 80091ee:	4620      	mov	r0, r4
 80091f0:	f000 fa50 	bl	8009694 <__multadd>
 80091f4:	9004      	str	r0, [sp, #16]
 80091f6:	e7ea      	b.n	80091ce <_dtoa_r+0xb3e>
 80091f8:	0800aa04 	.word	0x0800aa04
 80091fc:	0800aa28 	.word	0x0800aa28

08009200 <__sflush_r>:
 8009200:	898a      	ldrh	r2, [r1, #12]
 8009202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009206:	4605      	mov	r5, r0
 8009208:	0710      	lsls	r0, r2, #28
 800920a:	460c      	mov	r4, r1
 800920c:	d458      	bmi.n	80092c0 <__sflush_r+0xc0>
 800920e:	684b      	ldr	r3, [r1, #4]
 8009210:	2b00      	cmp	r3, #0
 8009212:	dc05      	bgt.n	8009220 <__sflush_r+0x20>
 8009214:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	dc02      	bgt.n	8009220 <__sflush_r+0x20>
 800921a:	2000      	movs	r0, #0
 800921c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009220:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009222:	2e00      	cmp	r6, #0
 8009224:	d0f9      	beq.n	800921a <__sflush_r+0x1a>
 8009226:	2300      	movs	r3, #0
 8009228:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800922c:	682f      	ldr	r7, [r5, #0]
 800922e:	6a21      	ldr	r1, [r4, #32]
 8009230:	602b      	str	r3, [r5, #0]
 8009232:	d032      	beq.n	800929a <__sflush_r+0x9a>
 8009234:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009236:	89a3      	ldrh	r3, [r4, #12]
 8009238:	075a      	lsls	r2, r3, #29
 800923a:	d505      	bpl.n	8009248 <__sflush_r+0x48>
 800923c:	6863      	ldr	r3, [r4, #4]
 800923e:	1ac0      	subs	r0, r0, r3
 8009240:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009242:	b10b      	cbz	r3, 8009248 <__sflush_r+0x48>
 8009244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009246:	1ac0      	subs	r0, r0, r3
 8009248:	2300      	movs	r3, #0
 800924a:	4602      	mov	r2, r0
 800924c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800924e:	6a21      	ldr	r1, [r4, #32]
 8009250:	4628      	mov	r0, r5
 8009252:	47b0      	blx	r6
 8009254:	1c43      	adds	r3, r0, #1
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	d106      	bne.n	8009268 <__sflush_r+0x68>
 800925a:	6829      	ldr	r1, [r5, #0]
 800925c:	291d      	cmp	r1, #29
 800925e:	d848      	bhi.n	80092f2 <__sflush_r+0xf2>
 8009260:	4a29      	ldr	r2, [pc, #164]	; (8009308 <__sflush_r+0x108>)
 8009262:	40ca      	lsrs	r2, r1
 8009264:	07d6      	lsls	r6, r2, #31
 8009266:	d544      	bpl.n	80092f2 <__sflush_r+0xf2>
 8009268:	2200      	movs	r2, #0
 800926a:	6062      	str	r2, [r4, #4]
 800926c:	04d9      	lsls	r1, r3, #19
 800926e:	6922      	ldr	r2, [r4, #16]
 8009270:	6022      	str	r2, [r4, #0]
 8009272:	d504      	bpl.n	800927e <__sflush_r+0x7e>
 8009274:	1c42      	adds	r2, r0, #1
 8009276:	d101      	bne.n	800927c <__sflush_r+0x7c>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b903      	cbnz	r3, 800927e <__sflush_r+0x7e>
 800927c:	6560      	str	r0, [r4, #84]	; 0x54
 800927e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009280:	602f      	str	r7, [r5, #0]
 8009282:	2900      	cmp	r1, #0
 8009284:	d0c9      	beq.n	800921a <__sflush_r+0x1a>
 8009286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800928a:	4299      	cmp	r1, r3
 800928c:	d002      	beq.n	8009294 <__sflush_r+0x94>
 800928e:	4628      	mov	r0, r5
 8009290:	f000 fc9e 	bl	8009bd0 <_free_r>
 8009294:	2000      	movs	r0, #0
 8009296:	6360      	str	r0, [r4, #52]	; 0x34
 8009298:	e7c0      	b.n	800921c <__sflush_r+0x1c>
 800929a:	2301      	movs	r3, #1
 800929c:	4628      	mov	r0, r5
 800929e:	47b0      	blx	r6
 80092a0:	1c41      	adds	r1, r0, #1
 80092a2:	d1c8      	bne.n	8009236 <__sflush_r+0x36>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0c5      	beq.n	8009236 <__sflush_r+0x36>
 80092aa:	2b1d      	cmp	r3, #29
 80092ac:	d001      	beq.n	80092b2 <__sflush_r+0xb2>
 80092ae:	2b16      	cmp	r3, #22
 80092b0:	d101      	bne.n	80092b6 <__sflush_r+0xb6>
 80092b2:	602f      	str	r7, [r5, #0]
 80092b4:	e7b1      	b.n	800921a <__sflush_r+0x1a>
 80092b6:	89a3      	ldrh	r3, [r4, #12]
 80092b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092bc:	81a3      	strh	r3, [r4, #12]
 80092be:	e7ad      	b.n	800921c <__sflush_r+0x1c>
 80092c0:	690f      	ldr	r7, [r1, #16]
 80092c2:	2f00      	cmp	r7, #0
 80092c4:	d0a9      	beq.n	800921a <__sflush_r+0x1a>
 80092c6:	0793      	lsls	r3, r2, #30
 80092c8:	680e      	ldr	r6, [r1, #0]
 80092ca:	bf08      	it	eq
 80092cc:	694b      	ldreq	r3, [r1, #20]
 80092ce:	600f      	str	r7, [r1, #0]
 80092d0:	bf18      	it	ne
 80092d2:	2300      	movne	r3, #0
 80092d4:	eba6 0807 	sub.w	r8, r6, r7
 80092d8:	608b      	str	r3, [r1, #8]
 80092da:	f1b8 0f00 	cmp.w	r8, #0
 80092de:	dd9c      	ble.n	800921a <__sflush_r+0x1a>
 80092e0:	4643      	mov	r3, r8
 80092e2:	463a      	mov	r2, r7
 80092e4:	6a21      	ldr	r1, [r4, #32]
 80092e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092e8:	4628      	mov	r0, r5
 80092ea:	47b0      	blx	r6
 80092ec:	2800      	cmp	r0, #0
 80092ee:	dc06      	bgt.n	80092fe <__sflush_r+0xfe>
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092f6:	81a3      	strh	r3, [r4, #12]
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	e78e      	b.n	800921c <__sflush_r+0x1c>
 80092fe:	4407      	add	r7, r0
 8009300:	eba8 0800 	sub.w	r8, r8, r0
 8009304:	e7e9      	b.n	80092da <__sflush_r+0xda>
 8009306:	bf00      	nop
 8009308:	20400001 	.word	0x20400001

0800930c <_fflush_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	690b      	ldr	r3, [r1, #16]
 8009310:	4605      	mov	r5, r0
 8009312:	460c      	mov	r4, r1
 8009314:	b1db      	cbz	r3, 800934e <_fflush_r+0x42>
 8009316:	b118      	cbz	r0, 8009320 <_fflush_r+0x14>
 8009318:	6983      	ldr	r3, [r0, #24]
 800931a:	b90b      	cbnz	r3, 8009320 <_fflush_r+0x14>
 800931c:	f000 f860 	bl	80093e0 <__sinit>
 8009320:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <_fflush_r+0x48>)
 8009322:	429c      	cmp	r4, r3
 8009324:	d109      	bne.n	800933a <_fflush_r+0x2e>
 8009326:	686c      	ldr	r4, [r5, #4]
 8009328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800932c:	b17b      	cbz	r3, 800934e <_fflush_r+0x42>
 800932e:	4621      	mov	r1, r4
 8009330:	4628      	mov	r0, r5
 8009332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009336:	f7ff bf63 	b.w	8009200 <__sflush_r>
 800933a:	4b07      	ldr	r3, [pc, #28]	; (8009358 <_fflush_r+0x4c>)
 800933c:	429c      	cmp	r4, r3
 800933e:	d101      	bne.n	8009344 <_fflush_r+0x38>
 8009340:	68ac      	ldr	r4, [r5, #8]
 8009342:	e7f1      	b.n	8009328 <_fflush_r+0x1c>
 8009344:	4b05      	ldr	r3, [pc, #20]	; (800935c <_fflush_r+0x50>)
 8009346:	429c      	cmp	r4, r3
 8009348:	bf08      	it	eq
 800934a:	68ec      	ldreq	r4, [r5, #12]
 800934c:	e7ec      	b.n	8009328 <_fflush_r+0x1c>
 800934e:	2000      	movs	r0, #0
 8009350:	bd38      	pop	{r3, r4, r5, pc}
 8009352:	bf00      	nop
 8009354:	0800aa58 	.word	0x0800aa58
 8009358:	0800aa78 	.word	0x0800aa78
 800935c:	0800aa38 	.word	0x0800aa38

08009360 <std>:
 8009360:	2300      	movs	r3, #0
 8009362:	b510      	push	{r4, lr}
 8009364:	4604      	mov	r4, r0
 8009366:	e9c0 3300 	strd	r3, r3, [r0]
 800936a:	6083      	str	r3, [r0, #8]
 800936c:	8181      	strh	r1, [r0, #12]
 800936e:	6643      	str	r3, [r0, #100]	; 0x64
 8009370:	81c2      	strh	r2, [r0, #14]
 8009372:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009376:	6183      	str	r3, [r0, #24]
 8009378:	4619      	mov	r1, r3
 800937a:	2208      	movs	r2, #8
 800937c:	305c      	adds	r0, #92	; 0x5c
 800937e:	f7fe fb07 	bl	8007990 <memset>
 8009382:	4b05      	ldr	r3, [pc, #20]	; (8009398 <std+0x38>)
 8009384:	6263      	str	r3, [r4, #36]	; 0x24
 8009386:	4b05      	ldr	r3, [pc, #20]	; (800939c <std+0x3c>)
 8009388:	62a3      	str	r3, [r4, #40]	; 0x28
 800938a:	4b05      	ldr	r3, [pc, #20]	; (80093a0 <std+0x40>)
 800938c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800938e:	4b05      	ldr	r3, [pc, #20]	; (80093a4 <std+0x44>)
 8009390:	6224      	str	r4, [r4, #32]
 8009392:	6323      	str	r3, [r4, #48]	; 0x30
 8009394:	bd10      	pop	{r4, pc}
 8009396:	bf00      	nop
 8009398:	0800a265 	.word	0x0800a265
 800939c:	0800a287 	.word	0x0800a287
 80093a0:	0800a2bf 	.word	0x0800a2bf
 80093a4:	0800a2e3 	.word	0x0800a2e3

080093a8 <_cleanup_r>:
 80093a8:	4901      	ldr	r1, [pc, #4]	; (80093b0 <_cleanup_r+0x8>)
 80093aa:	f000 b885 	b.w	80094b8 <_fwalk_reent>
 80093ae:	bf00      	nop
 80093b0:	0800930d 	.word	0x0800930d

080093b4 <__sfmoreglue>:
 80093b4:	b570      	push	{r4, r5, r6, lr}
 80093b6:	1e4a      	subs	r2, r1, #1
 80093b8:	2568      	movs	r5, #104	; 0x68
 80093ba:	4355      	muls	r5, r2
 80093bc:	460e      	mov	r6, r1
 80093be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80093c2:	f000 fc53 	bl	8009c6c <_malloc_r>
 80093c6:	4604      	mov	r4, r0
 80093c8:	b140      	cbz	r0, 80093dc <__sfmoreglue+0x28>
 80093ca:	2100      	movs	r1, #0
 80093cc:	e9c0 1600 	strd	r1, r6, [r0]
 80093d0:	300c      	adds	r0, #12
 80093d2:	60a0      	str	r0, [r4, #8]
 80093d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093d8:	f7fe fada 	bl	8007990 <memset>
 80093dc:	4620      	mov	r0, r4
 80093de:	bd70      	pop	{r4, r5, r6, pc}

080093e0 <__sinit>:
 80093e0:	6983      	ldr	r3, [r0, #24]
 80093e2:	b510      	push	{r4, lr}
 80093e4:	4604      	mov	r4, r0
 80093e6:	bb33      	cbnz	r3, 8009436 <__sinit+0x56>
 80093e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80093ec:	6503      	str	r3, [r0, #80]	; 0x50
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <__sinit+0x58>)
 80093f0:	4a12      	ldr	r2, [pc, #72]	; (800943c <__sinit+0x5c>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	6282      	str	r2, [r0, #40]	; 0x28
 80093f6:	4298      	cmp	r0, r3
 80093f8:	bf04      	itt	eq
 80093fa:	2301      	moveq	r3, #1
 80093fc:	6183      	streq	r3, [r0, #24]
 80093fe:	f000 f81f 	bl	8009440 <__sfp>
 8009402:	6060      	str	r0, [r4, #4]
 8009404:	4620      	mov	r0, r4
 8009406:	f000 f81b 	bl	8009440 <__sfp>
 800940a:	60a0      	str	r0, [r4, #8]
 800940c:	4620      	mov	r0, r4
 800940e:	f000 f817 	bl	8009440 <__sfp>
 8009412:	2200      	movs	r2, #0
 8009414:	60e0      	str	r0, [r4, #12]
 8009416:	2104      	movs	r1, #4
 8009418:	6860      	ldr	r0, [r4, #4]
 800941a:	f7ff ffa1 	bl	8009360 <std>
 800941e:	2201      	movs	r2, #1
 8009420:	2109      	movs	r1, #9
 8009422:	68a0      	ldr	r0, [r4, #8]
 8009424:	f7ff ff9c 	bl	8009360 <std>
 8009428:	2202      	movs	r2, #2
 800942a:	2112      	movs	r1, #18
 800942c:	68e0      	ldr	r0, [r4, #12]
 800942e:	f7ff ff97 	bl	8009360 <std>
 8009432:	2301      	movs	r3, #1
 8009434:	61a3      	str	r3, [r4, #24]
 8009436:	bd10      	pop	{r4, pc}
 8009438:	0800a9f0 	.word	0x0800a9f0
 800943c:	080093a9 	.word	0x080093a9

08009440 <__sfp>:
 8009440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009442:	4b1b      	ldr	r3, [pc, #108]	; (80094b0 <__sfp+0x70>)
 8009444:	681e      	ldr	r6, [r3, #0]
 8009446:	69b3      	ldr	r3, [r6, #24]
 8009448:	4607      	mov	r7, r0
 800944a:	b913      	cbnz	r3, 8009452 <__sfp+0x12>
 800944c:	4630      	mov	r0, r6
 800944e:	f7ff ffc7 	bl	80093e0 <__sinit>
 8009452:	3648      	adds	r6, #72	; 0x48
 8009454:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009458:	3b01      	subs	r3, #1
 800945a:	d503      	bpl.n	8009464 <__sfp+0x24>
 800945c:	6833      	ldr	r3, [r6, #0]
 800945e:	b133      	cbz	r3, 800946e <__sfp+0x2e>
 8009460:	6836      	ldr	r6, [r6, #0]
 8009462:	e7f7      	b.n	8009454 <__sfp+0x14>
 8009464:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009468:	b16d      	cbz	r5, 8009486 <__sfp+0x46>
 800946a:	3468      	adds	r4, #104	; 0x68
 800946c:	e7f4      	b.n	8009458 <__sfp+0x18>
 800946e:	2104      	movs	r1, #4
 8009470:	4638      	mov	r0, r7
 8009472:	f7ff ff9f 	bl	80093b4 <__sfmoreglue>
 8009476:	6030      	str	r0, [r6, #0]
 8009478:	2800      	cmp	r0, #0
 800947a:	d1f1      	bne.n	8009460 <__sfp+0x20>
 800947c:	230c      	movs	r3, #12
 800947e:	603b      	str	r3, [r7, #0]
 8009480:	4604      	mov	r4, r0
 8009482:	4620      	mov	r0, r4
 8009484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009486:	4b0b      	ldr	r3, [pc, #44]	; (80094b4 <__sfp+0x74>)
 8009488:	6665      	str	r5, [r4, #100]	; 0x64
 800948a:	e9c4 5500 	strd	r5, r5, [r4]
 800948e:	60a5      	str	r5, [r4, #8]
 8009490:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009494:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009498:	2208      	movs	r2, #8
 800949a:	4629      	mov	r1, r5
 800949c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80094a0:	f7fe fa76 	bl	8007990 <memset>
 80094a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80094a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80094ac:	e7e9      	b.n	8009482 <__sfp+0x42>
 80094ae:	bf00      	nop
 80094b0:	0800a9f0 	.word	0x0800a9f0
 80094b4:	ffff0001 	.word	0xffff0001

080094b8 <_fwalk_reent>:
 80094b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094bc:	4680      	mov	r8, r0
 80094be:	4689      	mov	r9, r1
 80094c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80094c4:	2600      	movs	r6, #0
 80094c6:	b914      	cbnz	r4, 80094ce <_fwalk_reent+0x16>
 80094c8:	4630      	mov	r0, r6
 80094ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80094d2:	3f01      	subs	r7, #1
 80094d4:	d501      	bpl.n	80094da <_fwalk_reent+0x22>
 80094d6:	6824      	ldr	r4, [r4, #0]
 80094d8:	e7f5      	b.n	80094c6 <_fwalk_reent+0xe>
 80094da:	89ab      	ldrh	r3, [r5, #12]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d907      	bls.n	80094f0 <_fwalk_reent+0x38>
 80094e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094e4:	3301      	adds	r3, #1
 80094e6:	d003      	beq.n	80094f0 <_fwalk_reent+0x38>
 80094e8:	4629      	mov	r1, r5
 80094ea:	4640      	mov	r0, r8
 80094ec:	47c8      	blx	r9
 80094ee:	4306      	orrs	r6, r0
 80094f0:	3568      	adds	r5, #104	; 0x68
 80094f2:	e7ee      	b.n	80094d2 <_fwalk_reent+0x1a>

080094f4 <_localeconv_r>:
 80094f4:	4b04      	ldr	r3, [pc, #16]	; (8009508 <_localeconv_r+0x14>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	6a18      	ldr	r0, [r3, #32]
 80094fa:	4b04      	ldr	r3, [pc, #16]	; (800950c <_localeconv_r+0x18>)
 80094fc:	2800      	cmp	r0, #0
 80094fe:	bf08      	it	eq
 8009500:	4618      	moveq	r0, r3
 8009502:	30f0      	adds	r0, #240	; 0xf0
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	2000014c 	.word	0x2000014c
 800950c:	200001b0 	.word	0x200001b0

08009510 <__swhatbuf_r>:
 8009510:	b570      	push	{r4, r5, r6, lr}
 8009512:	460e      	mov	r6, r1
 8009514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009518:	2900      	cmp	r1, #0
 800951a:	b096      	sub	sp, #88	; 0x58
 800951c:	4614      	mov	r4, r2
 800951e:	461d      	mov	r5, r3
 8009520:	da07      	bge.n	8009532 <__swhatbuf_r+0x22>
 8009522:	2300      	movs	r3, #0
 8009524:	602b      	str	r3, [r5, #0]
 8009526:	89b3      	ldrh	r3, [r6, #12]
 8009528:	061a      	lsls	r2, r3, #24
 800952a:	d410      	bmi.n	800954e <__swhatbuf_r+0x3e>
 800952c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009530:	e00e      	b.n	8009550 <__swhatbuf_r+0x40>
 8009532:	466a      	mov	r2, sp
 8009534:	f000 fefc 	bl	800a330 <_fstat_r>
 8009538:	2800      	cmp	r0, #0
 800953a:	dbf2      	blt.n	8009522 <__swhatbuf_r+0x12>
 800953c:	9a01      	ldr	r2, [sp, #4]
 800953e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009542:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009546:	425a      	negs	r2, r3
 8009548:	415a      	adcs	r2, r3
 800954a:	602a      	str	r2, [r5, #0]
 800954c:	e7ee      	b.n	800952c <__swhatbuf_r+0x1c>
 800954e:	2340      	movs	r3, #64	; 0x40
 8009550:	2000      	movs	r0, #0
 8009552:	6023      	str	r3, [r4, #0]
 8009554:	b016      	add	sp, #88	; 0x58
 8009556:	bd70      	pop	{r4, r5, r6, pc}

08009558 <__smakebuf_r>:
 8009558:	898b      	ldrh	r3, [r1, #12]
 800955a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800955c:	079d      	lsls	r5, r3, #30
 800955e:	4606      	mov	r6, r0
 8009560:	460c      	mov	r4, r1
 8009562:	d507      	bpl.n	8009574 <__smakebuf_r+0x1c>
 8009564:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	6123      	str	r3, [r4, #16]
 800956c:	2301      	movs	r3, #1
 800956e:	6163      	str	r3, [r4, #20]
 8009570:	b002      	add	sp, #8
 8009572:	bd70      	pop	{r4, r5, r6, pc}
 8009574:	ab01      	add	r3, sp, #4
 8009576:	466a      	mov	r2, sp
 8009578:	f7ff ffca 	bl	8009510 <__swhatbuf_r>
 800957c:	9900      	ldr	r1, [sp, #0]
 800957e:	4605      	mov	r5, r0
 8009580:	4630      	mov	r0, r6
 8009582:	f000 fb73 	bl	8009c6c <_malloc_r>
 8009586:	b948      	cbnz	r0, 800959c <__smakebuf_r+0x44>
 8009588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800958c:	059a      	lsls	r2, r3, #22
 800958e:	d4ef      	bmi.n	8009570 <__smakebuf_r+0x18>
 8009590:	f023 0303 	bic.w	r3, r3, #3
 8009594:	f043 0302 	orr.w	r3, r3, #2
 8009598:	81a3      	strh	r3, [r4, #12]
 800959a:	e7e3      	b.n	8009564 <__smakebuf_r+0xc>
 800959c:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <__smakebuf_r+0x7c>)
 800959e:	62b3      	str	r3, [r6, #40]	; 0x28
 80095a0:	89a3      	ldrh	r3, [r4, #12]
 80095a2:	6020      	str	r0, [r4, #0]
 80095a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a8:	81a3      	strh	r3, [r4, #12]
 80095aa:	9b00      	ldr	r3, [sp, #0]
 80095ac:	6163      	str	r3, [r4, #20]
 80095ae:	9b01      	ldr	r3, [sp, #4]
 80095b0:	6120      	str	r0, [r4, #16]
 80095b2:	b15b      	cbz	r3, 80095cc <__smakebuf_r+0x74>
 80095b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095b8:	4630      	mov	r0, r6
 80095ba:	f000 fecb 	bl	800a354 <_isatty_r>
 80095be:	b128      	cbz	r0, 80095cc <__smakebuf_r+0x74>
 80095c0:	89a3      	ldrh	r3, [r4, #12]
 80095c2:	f023 0303 	bic.w	r3, r3, #3
 80095c6:	f043 0301 	orr.w	r3, r3, #1
 80095ca:	81a3      	strh	r3, [r4, #12]
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	431d      	orrs	r5, r3
 80095d0:	81a5      	strh	r5, [r4, #12]
 80095d2:	e7cd      	b.n	8009570 <__smakebuf_r+0x18>
 80095d4:	080093a9 	.word	0x080093a9

080095d8 <malloc>:
 80095d8:	4b02      	ldr	r3, [pc, #8]	; (80095e4 <malloc+0xc>)
 80095da:	4601      	mov	r1, r0
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	f000 bb45 	b.w	8009c6c <_malloc_r>
 80095e2:	bf00      	nop
 80095e4:	2000014c 	.word	0x2000014c

080095e8 <memcpy>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	1e43      	subs	r3, r0, #1
 80095ec:	440a      	add	r2, r1
 80095ee:	4291      	cmp	r1, r2
 80095f0:	d100      	bne.n	80095f4 <memcpy+0xc>
 80095f2:	bd10      	pop	{r4, pc}
 80095f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095fc:	e7f7      	b.n	80095ee <memcpy+0x6>

080095fe <_Balloc>:
 80095fe:	b570      	push	{r4, r5, r6, lr}
 8009600:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009602:	4604      	mov	r4, r0
 8009604:	460e      	mov	r6, r1
 8009606:	b93d      	cbnz	r5, 8009618 <_Balloc+0x1a>
 8009608:	2010      	movs	r0, #16
 800960a:	f7ff ffe5 	bl	80095d8 <malloc>
 800960e:	6260      	str	r0, [r4, #36]	; 0x24
 8009610:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009614:	6005      	str	r5, [r0, #0]
 8009616:	60c5      	str	r5, [r0, #12]
 8009618:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800961a:	68eb      	ldr	r3, [r5, #12]
 800961c:	b183      	cbz	r3, 8009640 <_Balloc+0x42>
 800961e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009620:	68db      	ldr	r3, [r3, #12]
 8009622:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009626:	b9b8      	cbnz	r0, 8009658 <_Balloc+0x5a>
 8009628:	2101      	movs	r1, #1
 800962a:	fa01 f506 	lsl.w	r5, r1, r6
 800962e:	1d6a      	adds	r2, r5, #5
 8009630:	0092      	lsls	r2, r2, #2
 8009632:	4620      	mov	r0, r4
 8009634:	f000 fabe 	bl	8009bb4 <_calloc_r>
 8009638:	b160      	cbz	r0, 8009654 <_Balloc+0x56>
 800963a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800963e:	e00e      	b.n	800965e <_Balloc+0x60>
 8009640:	2221      	movs	r2, #33	; 0x21
 8009642:	2104      	movs	r1, #4
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fab5 	bl	8009bb4 <_calloc_r>
 800964a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800964c:	60e8      	str	r0, [r5, #12]
 800964e:	68db      	ldr	r3, [r3, #12]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e4      	bne.n	800961e <_Balloc+0x20>
 8009654:	2000      	movs	r0, #0
 8009656:	bd70      	pop	{r4, r5, r6, pc}
 8009658:	6802      	ldr	r2, [r0, #0]
 800965a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800965e:	2300      	movs	r3, #0
 8009660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009664:	e7f7      	b.n	8009656 <_Balloc+0x58>

08009666 <_Bfree>:
 8009666:	b570      	push	{r4, r5, r6, lr}
 8009668:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800966a:	4606      	mov	r6, r0
 800966c:	460d      	mov	r5, r1
 800966e:	b93c      	cbnz	r4, 8009680 <_Bfree+0x1a>
 8009670:	2010      	movs	r0, #16
 8009672:	f7ff ffb1 	bl	80095d8 <malloc>
 8009676:	6270      	str	r0, [r6, #36]	; 0x24
 8009678:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800967c:	6004      	str	r4, [r0, #0]
 800967e:	60c4      	str	r4, [r0, #12]
 8009680:	b13d      	cbz	r5, 8009692 <_Bfree+0x2c>
 8009682:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009684:	686a      	ldr	r2, [r5, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800968c:	6029      	str	r1, [r5, #0]
 800968e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009692:	bd70      	pop	{r4, r5, r6, pc}

08009694 <__multadd>:
 8009694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009698:	690d      	ldr	r5, [r1, #16]
 800969a:	461f      	mov	r7, r3
 800969c:	4606      	mov	r6, r0
 800969e:	460c      	mov	r4, r1
 80096a0:	f101 0c14 	add.w	ip, r1, #20
 80096a4:	2300      	movs	r3, #0
 80096a6:	f8dc 0000 	ldr.w	r0, [ip]
 80096aa:	b281      	uxth	r1, r0
 80096ac:	fb02 7101 	mla	r1, r2, r1, r7
 80096b0:	0c0f      	lsrs	r7, r1, #16
 80096b2:	0c00      	lsrs	r0, r0, #16
 80096b4:	fb02 7000 	mla	r0, r2, r0, r7
 80096b8:	b289      	uxth	r1, r1
 80096ba:	3301      	adds	r3, #1
 80096bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80096c0:	429d      	cmp	r5, r3
 80096c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80096c6:	f84c 1b04 	str.w	r1, [ip], #4
 80096ca:	dcec      	bgt.n	80096a6 <__multadd+0x12>
 80096cc:	b1d7      	cbz	r7, 8009704 <__multadd+0x70>
 80096ce:	68a3      	ldr	r3, [r4, #8]
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	dc12      	bgt.n	80096fa <__multadd+0x66>
 80096d4:	6861      	ldr	r1, [r4, #4]
 80096d6:	4630      	mov	r0, r6
 80096d8:	3101      	adds	r1, #1
 80096da:	f7ff ff90 	bl	80095fe <_Balloc>
 80096de:	6922      	ldr	r2, [r4, #16]
 80096e0:	3202      	adds	r2, #2
 80096e2:	f104 010c 	add.w	r1, r4, #12
 80096e6:	4680      	mov	r8, r0
 80096e8:	0092      	lsls	r2, r2, #2
 80096ea:	300c      	adds	r0, #12
 80096ec:	f7ff ff7c 	bl	80095e8 <memcpy>
 80096f0:	4621      	mov	r1, r4
 80096f2:	4630      	mov	r0, r6
 80096f4:	f7ff ffb7 	bl	8009666 <_Bfree>
 80096f8:	4644      	mov	r4, r8
 80096fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80096fe:	3501      	adds	r5, #1
 8009700:	615f      	str	r7, [r3, #20]
 8009702:	6125      	str	r5, [r4, #16]
 8009704:	4620      	mov	r0, r4
 8009706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800970a <__hi0bits>:
 800970a:	0c02      	lsrs	r2, r0, #16
 800970c:	0412      	lsls	r2, r2, #16
 800970e:	4603      	mov	r3, r0
 8009710:	b9b2      	cbnz	r2, 8009740 <__hi0bits+0x36>
 8009712:	0403      	lsls	r3, r0, #16
 8009714:	2010      	movs	r0, #16
 8009716:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800971a:	bf04      	itt	eq
 800971c:	021b      	lsleq	r3, r3, #8
 800971e:	3008      	addeq	r0, #8
 8009720:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009724:	bf04      	itt	eq
 8009726:	011b      	lsleq	r3, r3, #4
 8009728:	3004      	addeq	r0, #4
 800972a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800972e:	bf04      	itt	eq
 8009730:	009b      	lsleq	r3, r3, #2
 8009732:	3002      	addeq	r0, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	db06      	blt.n	8009746 <__hi0bits+0x3c>
 8009738:	005b      	lsls	r3, r3, #1
 800973a:	d503      	bpl.n	8009744 <__hi0bits+0x3a>
 800973c:	3001      	adds	r0, #1
 800973e:	4770      	bx	lr
 8009740:	2000      	movs	r0, #0
 8009742:	e7e8      	b.n	8009716 <__hi0bits+0xc>
 8009744:	2020      	movs	r0, #32
 8009746:	4770      	bx	lr

08009748 <__lo0bits>:
 8009748:	6803      	ldr	r3, [r0, #0]
 800974a:	f013 0207 	ands.w	r2, r3, #7
 800974e:	4601      	mov	r1, r0
 8009750:	d00b      	beq.n	800976a <__lo0bits+0x22>
 8009752:	07da      	lsls	r2, r3, #31
 8009754:	d423      	bmi.n	800979e <__lo0bits+0x56>
 8009756:	0798      	lsls	r0, r3, #30
 8009758:	bf49      	itett	mi
 800975a:	085b      	lsrmi	r3, r3, #1
 800975c:	089b      	lsrpl	r3, r3, #2
 800975e:	2001      	movmi	r0, #1
 8009760:	600b      	strmi	r3, [r1, #0]
 8009762:	bf5c      	itt	pl
 8009764:	600b      	strpl	r3, [r1, #0]
 8009766:	2002      	movpl	r0, #2
 8009768:	4770      	bx	lr
 800976a:	b298      	uxth	r0, r3
 800976c:	b9a8      	cbnz	r0, 800979a <__lo0bits+0x52>
 800976e:	0c1b      	lsrs	r3, r3, #16
 8009770:	2010      	movs	r0, #16
 8009772:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009776:	bf04      	itt	eq
 8009778:	0a1b      	lsreq	r3, r3, #8
 800977a:	3008      	addeq	r0, #8
 800977c:	071a      	lsls	r2, r3, #28
 800977e:	bf04      	itt	eq
 8009780:	091b      	lsreq	r3, r3, #4
 8009782:	3004      	addeq	r0, #4
 8009784:	079a      	lsls	r2, r3, #30
 8009786:	bf04      	itt	eq
 8009788:	089b      	lsreq	r3, r3, #2
 800978a:	3002      	addeq	r0, #2
 800978c:	07da      	lsls	r2, r3, #31
 800978e:	d402      	bmi.n	8009796 <__lo0bits+0x4e>
 8009790:	085b      	lsrs	r3, r3, #1
 8009792:	d006      	beq.n	80097a2 <__lo0bits+0x5a>
 8009794:	3001      	adds	r0, #1
 8009796:	600b      	str	r3, [r1, #0]
 8009798:	4770      	bx	lr
 800979a:	4610      	mov	r0, r2
 800979c:	e7e9      	b.n	8009772 <__lo0bits+0x2a>
 800979e:	2000      	movs	r0, #0
 80097a0:	4770      	bx	lr
 80097a2:	2020      	movs	r0, #32
 80097a4:	4770      	bx	lr

080097a6 <__i2b>:
 80097a6:	b510      	push	{r4, lr}
 80097a8:	460c      	mov	r4, r1
 80097aa:	2101      	movs	r1, #1
 80097ac:	f7ff ff27 	bl	80095fe <_Balloc>
 80097b0:	2201      	movs	r2, #1
 80097b2:	6144      	str	r4, [r0, #20]
 80097b4:	6102      	str	r2, [r0, #16]
 80097b6:	bd10      	pop	{r4, pc}

080097b8 <__multiply>:
 80097b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	4614      	mov	r4, r2
 80097be:	690a      	ldr	r2, [r1, #16]
 80097c0:	6923      	ldr	r3, [r4, #16]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	bfb8      	it	lt
 80097c6:	460b      	movlt	r3, r1
 80097c8:	4688      	mov	r8, r1
 80097ca:	bfbc      	itt	lt
 80097cc:	46a0      	movlt	r8, r4
 80097ce:	461c      	movlt	r4, r3
 80097d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80097d4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80097d8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80097e0:	eb07 0609 	add.w	r6, r7, r9
 80097e4:	42b3      	cmp	r3, r6
 80097e6:	bfb8      	it	lt
 80097e8:	3101      	addlt	r1, #1
 80097ea:	f7ff ff08 	bl	80095fe <_Balloc>
 80097ee:	f100 0514 	add.w	r5, r0, #20
 80097f2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80097f6:	462b      	mov	r3, r5
 80097f8:	2200      	movs	r2, #0
 80097fa:	4573      	cmp	r3, lr
 80097fc:	d316      	bcc.n	800982c <__multiply+0x74>
 80097fe:	f104 0214 	add.w	r2, r4, #20
 8009802:	f108 0114 	add.w	r1, r8, #20
 8009806:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800980a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	9b00      	ldr	r3, [sp, #0]
 8009812:	9201      	str	r2, [sp, #4]
 8009814:	4293      	cmp	r3, r2
 8009816:	d80c      	bhi.n	8009832 <__multiply+0x7a>
 8009818:	2e00      	cmp	r6, #0
 800981a:	dd03      	ble.n	8009824 <__multiply+0x6c>
 800981c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009820:	2b00      	cmp	r3, #0
 8009822:	d05d      	beq.n	80098e0 <__multiply+0x128>
 8009824:	6106      	str	r6, [r0, #16]
 8009826:	b003      	add	sp, #12
 8009828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982c:	f843 2b04 	str.w	r2, [r3], #4
 8009830:	e7e3      	b.n	80097fa <__multiply+0x42>
 8009832:	f8b2 b000 	ldrh.w	fp, [r2]
 8009836:	f1bb 0f00 	cmp.w	fp, #0
 800983a:	d023      	beq.n	8009884 <__multiply+0xcc>
 800983c:	4689      	mov	r9, r1
 800983e:	46ac      	mov	ip, r5
 8009840:	f04f 0800 	mov.w	r8, #0
 8009844:	f859 4b04 	ldr.w	r4, [r9], #4
 8009848:	f8dc a000 	ldr.w	sl, [ip]
 800984c:	b2a3      	uxth	r3, r4
 800984e:	fa1f fa8a 	uxth.w	sl, sl
 8009852:	fb0b a303 	mla	r3, fp, r3, sl
 8009856:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800985a:	f8dc 4000 	ldr.w	r4, [ip]
 800985e:	4443      	add	r3, r8
 8009860:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009864:	fb0b 840a 	mla	r4, fp, sl, r8
 8009868:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800986c:	46e2      	mov	sl, ip
 800986e:	b29b      	uxth	r3, r3
 8009870:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009874:	454f      	cmp	r7, r9
 8009876:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800987a:	f84a 3b04 	str.w	r3, [sl], #4
 800987e:	d82b      	bhi.n	80098d8 <__multiply+0x120>
 8009880:	f8cc 8004 	str.w	r8, [ip, #4]
 8009884:	9b01      	ldr	r3, [sp, #4]
 8009886:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800988a:	3204      	adds	r2, #4
 800988c:	f1ba 0f00 	cmp.w	sl, #0
 8009890:	d020      	beq.n	80098d4 <__multiply+0x11c>
 8009892:	682b      	ldr	r3, [r5, #0]
 8009894:	4689      	mov	r9, r1
 8009896:	46a8      	mov	r8, r5
 8009898:	f04f 0b00 	mov.w	fp, #0
 800989c:	f8b9 c000 	ldrh.w	ip, [r9]
 80098a0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80098a4:	fb0a 440c 	mla	r4, sl, ip, r4
 80098a8:	445c      	add	r4, fp
 80098aa:	46c4      	mov	ip, r8
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80098b2:	f84c 3b04 	str.w	r3, [ip], #4
 80098b6:	f859 3b04 	ldr.w	r3, [r9], #4
 80098ba:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80098be:	0c1b      	lsrs	r3, r3, #16
 80098c0:	fb0a b303 	mla	r3, sl, r3, fp
 80098c4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80098c8:	454f      	cmp	r7, r9
 80098ca:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80098ce:	d805      	bhi.n	80098dc <__multiply+0x124>
 80098d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80098d4:	3504      	adds	r5, #4
 80098d6:	e79b      	b.n	8009810 <__multiply+0x58>
 80098d8:	46d4      	mov	ip, sl
 80098da:	e7b3      	b.n	8009844 <__multiply+0x8c>
 80098dc:	46e0      	mov	r8, ip
 80098de:	e7dd      	b.n	800989c <__multiply+0xe4>
 80098e0:	3e01      	subs	r6, #1
 80098e2:	e799      	b.n	8009818 <__multiply+0x60>

080098e4 <__pow5mult>:
 80098e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098e8:	4615      	mov	r5, r2
 80098ea:	f012 0203 	ands.w	r2, r2, #3
 80098ee:	4606      	mov	r6, r0
 80098f0:	460f      	mov	r7, r1
 80098f2:	d007      	beq.n	8009904 <__pow5mult+0x20>
 80098f4:	3a01      	subs	r2, #1
 80098f6:	4c21      	ldr	r4, [pc, #132]	; (800997c <__pow5mult+0x98>)
 80098f8:	2300      	movs	r3, #0
 80098fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80098fe:	f7ff fec9 	bl	8009694 <__multadd>
 8009902:	4607      	mov	r7, r0
 8009904:	10ad      	asrs	r5, r5, #2
 8009906:	d035      	beq.n	8009974 <__pow5mult+0x90>
 8009908:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800990a:	b93c      	cbnz	r4, 800991c <__pow5mult+0x38>
 800990c:	2010      	movs	r0, #16
 800990e:	f7ff fe63 	bl	80095d8 <malloc>
 8009912:	6270      	str	r0, [r6, #36]	; 0x24
 8009914:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009918:	6004      	str	r4, [r0, #0]
 800991a:	60c4      	str	r4, [r0, #12]
 800991c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009920:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009924:	b94c      	cbnz	r4, 800993a <__pow5mult+0x56>
 8009926:	f240 2171 	movw	r1, #625	; 0x271
 800992a:	4630      	mov	r0, r6
 800992c:	f7ff ff3b 	bl	80097a6 <__i2b>
 8009930:	2300      	movs	r3, #0
 8009932:	f8c8 0008 	str.w	r0, [r8, #8]
 8009936:	4604      	mov	r4, r0
 8009938:	6003      	str	r3, [r0, #0]
 800993a:	f04f 0800 	mov.w	r8, #0
 800993e:	07eb      	lsls	r3, r5, #31
 8009940:	d50a      	bpl.n	8009958 <__pow5mult+0x74>
 8009942:	4639      	mov	r1, r7
 8009944:	4622      	mov	r2, r4
 8009946:	4630      	mov	r0, r6
 8009948:	f7ff ff36 	bl	80097b8 <__multiply>
 800994c:	4639      	mov	r1, r7
 800994e:	4681      	mov	r9, r0
 8009950:	4630      	mov	r0, r6
 8009952:	f7ff fe88 	bl	8009666 <_Bfree>
 8009956:	464f      	mov	r7, r9
 8009958:	106d      	asrs	r5, r5, #1
 800995a:	d00b      	beq.n	8009974 <__pow5mult+0x90>
 800995c:	6820      	ldr	r0, [r4, #0]
 800995e:	b938      	cbnz	r0, 8009970 <__pow5mult+0x8c>
 8009960:	4622      	mov	r2, r4
 8009962:	4621      	mov	r1, r4
 8009964:	4630      	mov	r0, r6
 8009966:	f7ff ff27 	bl	80097b8 <__multiply>
 800996a:	6020      	str	r0, [r4, #0]
 800996c:	f8c0 8000 	str.w	r8, [r0]
 8009970:	4604      	mov	r4, r0
 8009972:	e7e4      	b.n	800993e <__pow5mult+0x5a>
 8009974:	4638      	mov	r0, r7
 8009976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800997a:	bf00      	nop
 800997c:	0800ab88 	.word	0x0800ab88

08009980 <__lshift>:
 8009980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	460c      	mov	r4, r1
 8009986:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800998a:	6923      	ldr	r3, [r4, #16]
 800998c:	6849      	ldr	r1, [r1, #4]
 800998e:	eb0a 0903 	add.w	r9, sl, r3
 8009992:	68a3      	ldr	r3, [r4, #8]
 8009994:	4607      	mov	r7, r0
 8009996:	4616      	mov	r6, r2
 8009998:	f109 0501 	add.w	r5, r9, #1
 800999c:	42ab      	cmp	r3, r5
 800999e:	db32      	blt.n	8009a06 <__lshift+0x86>
 80099a0:	4638      	mov	r0, r7
 80099a2:	f7ff fe2c 	bl	80095fe <_Balloc>
 80099a6:	2300      	movs	r3, #0
 80099a8:	4680      	mov	r8, r0
 80099aa:	f100 0114 	add.w	r1, r0, #20
 80099ae:	461a      	mov	r2, r3
 80099b0:	4553      	cmp	r3, sl
 80099b2:	db2b      	blt.n	8009a0c <__lshift+0x8c>
 80099b4:	6920      	ldr	r0, [r4, #16]
 80099b6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80099ba:	f104 0314 	add.w	r3, r4, #20
 80099be:	f016 021f 	ands.w	r2, r6, #31
 80099c2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80099c6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80099ca:	d025      	beq.n	8009a18 <__lshift+0x98>
 80099cc:	f1c2 0e20 	rsb	lr, r2, #32
 80099d0:	2000      	movs	r0, #0
 80099d2:	681e      	ldr	r6, [r3, #0]
 80099d4:	468a      	mov	sl, r1
 80099d6:	4096      	lsls	r6, r2
 80099d8:	4330      	orrs	r0, r6
 80099da:	f84a 0b04 	str.w	r0, [sl], #4
 80099de:	f853 0b04 	ldr.w	r0, [r3], #4
 80099e2:	459c      	cmp	ip, r3
 80099e4:	fa20 f00e 	lsr.w	r0, r0, lr
 80099e8:	d814      	bhi.n	8009a14 <__lshift+0x94>
 80099ea:	6048      	str	r0, [r1, #4]
 80099ec:	b108      	cbz	r0, 80099f2 <__lshift+0x72>
 80099ee:	f109 0502 	add.w	r5, r9, #2
 80099f2:	3d01      	subs	r5, #1
 80099f4:	4638      	mov	r0, r7
 80099f6:	f8c8 5010 	str.w	r5, [r8, #16]
 80099fa:	4621      	mov	r1, r4
 80099fc:	f7ff fe33 	bl	8009666 <_Bfree>
 8009a00:	4640      	mov	r0, r8
 8009a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a06:	3101      	adds	r1, #1
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	e7c7      	b.n	800999c <__lshift+0x1c>
 8009a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009a10:	3301      	adds	r3, #1
 8009a12:	e7cd      	b.n	80099b0 <__lshift+0x30>
 8009a14:	4651      	mov	r1, sl
 8009a16:	e7dc      	b.n	80099d2 <__lshift+0x52>
 8009a18:	3904      	subs	r1, #4
 8009a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009a22:	459c      	cmp	ip, r3
 8009a24:	d8f9      	bhi.n	8009a1a <__lshift+0x9a>
 8009a26:	e7e4      	b.n	80099f2 <__lshift+0x72>

08009a28 <__mcmp>:
 8009a28:	6903      	ldr	r3, [r0, #16]
 8009a2a:	690a      	ldr	r2, [r1, #16]
 8009a2c:	1a9b      	subs	r3, r3, r2
 8009a2e:	b530      	push	{r4, r5, lr}
 8009a30:	d10c      	bne.n	8009a4c <__mcmp+0x24>
 8009a32:	0092      	lsls	r2, r2, #2
 8009a34:	3014      	adds	r0, #20
 8009a36:	3114      	adds	r1, #20
 8009a38:	1884      	adds	r4, r0, r2
 8009a3a:	4411      	add	r1, r2
 8009a3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009a40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009a44:	4295      	cmp	r5, r2
 8009a46:	d003      	beq.n	8009a50 <__mcmp+0x28>
 8009a48:	d305      	bcc.n	8009a56 <__mcmp+0x2e>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	bd30      	pop	{r4, r5, pc}
 8009a50:	42a0      	cmp	r0, r4
 8009a52:	d3f3      	bcc.n	8009a3c <__mcmp+0x14>
 8009a54:	e7fa      	b.n	8009a4c <__mcmp+0x24>
 8009a56:	f04f 33ff 	mov.w	r3, #4294967295
 8009a5a:	e7f7      	b.n	8009a4c <__mcmp+0x24>

08009a5c <__mdiff>:
 8009a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a60:	460d      	mov	r5, r1
 8009a62:	4607      	mov	r7, r0
 8009a64:	4611      	mov	r1, r2
 8009a66:	4628      	mov	r0, r5
 8009a68:	4614      	mov	r4, r2
 8009a6a:	f7ff ffdd 	bl	8009a28 <__mcmp>
 8009a6e:	1e06      	subs	r6, r0, #0
 8009a70:	d108      	bne.n	8009a84 <__mdiff+0x28>
 8009a72:	4631      	mov	r1, r6
 8009a74:	4638      	mov	r0, r7
 8009a76:	f7ff fdc2 	bl	80095fe <_Balloc>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a84:	bfa4      	itt	ge
 8009a86:	4623      	movge	r3, r4
 8009a88:	462c      	movge	r4, r5
 8009a8a:	4638      	mov	r0, r7
 8009a8c:	6861      	ldr	r1, [r4, #4]
 8009a8e:	bfa6      	itte	ge
 8009a90:	461d      	movge	r5, r3
 8009a92:	2600      	movge	r6, #0
 8009a94:	2601      	movlt	r6, #1
 8009a96:	f7ff fdb2 	bl	80095fe <_Balloc>
 8009a9a:	692b      	ldr	r3, [r5, #16]
 8009a9c:	60c6      	str	r6, [r0, #12]
 8009a9e:	6926      	ldr	r6, [r4, #16]
 8009aa0:	f105 0914 	add.w	r9, r5, #20
 8009aa4:	f104 0214 	add.w	r2, r4, #20
 8009aa8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009aac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009ab0:	f100 0514 	add.w	r5, r0, #20
 8009ab4:	f04f 0e00 	mov.w	lr, #0
 8009ab8:	f852 ab04 	ldr.w	sl, [r2], #4
 8009abc:	f859 4b04 	ldr.w	r4, [r9], #4
 8009ac0:	fa1e f18a 	uxtah	r1, lr, sl
 8009ac4:	b2a3      	uxth	r3, r4
 8009ac6:	1ac9      	subs	r1, r1, r3
 8009ac8:	0c23      	lsrs	r3, r4, #16
 8009aca:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009ace:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009ad2:	b289      	uxth	r1, r1
 8009ad4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009ad8:	45c8      	cmp	r8, r9
 8009ada:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009ade:	4694      	mov	ip, r2
 8009ae0:	f845 3b04 	str.w	r3, [r5], #4
 8009ae4:	d8e8      	bhi.n	8009ab8 <__mdiff+0x5c>
 8009ae6:	45bc      	cmp	ip, r7
 8009ae8:	d304      	bcc.n	8009af4 <__mdiff+0x98>
 8009aea:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009aee:	b183      	cbz	r3, 8009b12 <__mdiff+0xb6>
 8009af0:	6106      	str	r6, [r0, #16]
 8009af2:	e7c5      	b.n	8009a80 <__mdiff+0x24>
 8009af4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009af8:	fa1e f381 	uxtah	r3, lr, r1
 8009afc:	141a      	asrs	r2, r3, #16
 8009afe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b08:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009b0c:	f845 3b04 	str.w	r3, [r5], #4
 8009b10:	e7e9      	b.n	8009ae6 <__mdiff+0x8a>
 8009b12:	3e01      	subs	r6, #1
 8009b14:	e7e9      	b.n	8009aea <__mdiff+0x8e>

08009b16 <__d2b>:
 8009b16:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b1a:	460e      	mov	r6, r1
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	ec59 8b10 	vmov	r8, r9, d0
 8009b22:	4615      	mov	r5, r2
 8009b24:	f7ff fd6b 	bl	80095fe <_Balloc>
 8009b28:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009b2c:	4607      	mov	r7, r0
 8009b2e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009b32:	bb34      	cbnz	r4, 8009b82 <__d2b+0x6c>
 8009b34:	9301      	str	r3, [sp, #4]
 8009b36:	f1b8 0300 	subs.w	r3, r8, #0
 8009b3a:	d027      	beq.n	8009b8c <__d2b+0x76>
 8009b3c:	a802      	add	r0, sp, #8
 8009b3e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009b42:	f7ff fe01 	bl	8009748 <__lo0bits>
 8009b46:	9900      	ldr	r1, [sp, #0]
 8009b48:	b1f0      	cbz	r0, 8009b88 <__d2b+0x72>
 8009b4a:	9a01      	ldr	r2, [sp, #4]
 8009b4c:	f1c0 0320 	rsb	r3, r0, #32
 8009b50:	fa02 f303 	lsl.w	r3, r2, r3
 8009b54:	430b      	orrs	r3, r1
 8009b56:	40c2      	lsrs	r2, r0
 8009b58:	617b      	str	r3, [r7, #20]
 8009b5a:	9201      	str	r2, [sp, #4]
 8009b5c:	9b01      	ldr	r3, [sp, #4]
 8009b5e:	61bb      	str	r3, [r7, #24]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	bf14      	ite	ne
 8009b64:	2102      	movne	r1, #2
 8009b66:	2101      	moveq	r1, #1
 8009b68:	6139      	str	r1, [r7, #16]
 8009b6a:	b1c4      	cbz	r4, 8009b9e <__d2b+0x88>
 8009b6c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009b70:	4404      	add	r4, r0
 8009b72:	6034      	str	r4, [r6, #0]
 8009b74:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009b78:	6028      	str	r0, [r5, #0]
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	b003      	add	sp, #12
 8009b7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b86:	e7d5      	b.n	8009b34 <__d2b+0x1e>
 8009b88:	6179      	str	r1, [r7, #20]
 8009b8a:	e7e7      	b.n	8009b5c <__d2b+0x46>
 8009b8c:	a801      	add	r0, sp, #4
 8009b8e:	f7ff fddb 	bl	8009748 <__lo0bits>
 8009b92:	9b01      	ldr	r3, [sp, #4]
 8009b94:	617b      	str	r3, [r7, #20]
 8009b96:	2101      	movs	r1, #1
 8009b98:	6139      	str	r1, [r7, #16]
 8009b9a:	3020      	adds	r0, #32
 8009b9c:	e7e5      	b.n	8009b6a <__d2b+0x54>
 8009b9e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009ba2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009ba6:	6030      	str	r0, [r6, #0]
 8009ba8:	6918      	ldr	r0, [r3, #16]
 8009baa:	f7ff fdae 	bl	800970a <__hi0bits>
 8009bae:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009bb2:	e7e1      	b.n	8009b78 <__d2b+0x62>

08009bb4 <_calloc_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	fb02 f401 	mul.w	r4, r2, r1
 8009bba:	4621      	mov	r1, r4
 8009bbc:	f000 f856 	bl	8009c6c <_malloc_r>
 8009bc0:	4605      	mov	r5, r0
 8009bc2:	b118      	cbz	r0, 8009bcc <_calloc_r+0x18>
 8009bc4:	4622      	mov	r2, r4
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	f7fd fee2 	bl	8007990 <memset>
 8009bcc:	4628      	mov	r0, r5
 8009bce:	bd38      	pop	{r3, r4, r5, pc}

08009bd0 <_free_r>:
 8009bd0:	b538      	push	{r3, r4, r5, lr}
 8009bd2:	4605      	mov	r5, r0
 8009bd4:	2900      	cmp	r1, #0
 8009bd6:	d045      	beq.n	8009c64 <_free_r+0x94>
 8009bd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bdc:	1f0c      	subs	r4, r1, #4
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	bfb8      	it	lt
 8009be2:	18e4      	addlt	r4, r4, r3
 8009be4:	f000 fc03 	bl	800a3ee <__malloc_lock>
 8009be8:	4a1f      	ldr	r2, [pc, #124]	; (8009c68 <_free_r+0x98>)
 8009bea:	6813      	ldr	r3, [r2, #0]
 8009bec:	4610      	mov	r0, r2
 8009bee:	b933      	cbnz	r3, 8009bfe <_free_r+0x2e>
 8009bf0:	6063      	str	r3, [r4, #4]
 8009bf2:	6014      	str	r4, [r2, #0]
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bfa:	f000 bbf9 	b.w	800a3f0 <__malloc_unlock>
 8009bfe:	42a3      	cmp	r3, r4
 8009c00:	d90c      	bls.n	8009c1c <_free_r+0x4c>
 8009c02:	6821      	ldr	r1, [r4, #0]
 8009c04:	1862      	adds	r2, r4, r1
 8009c06:	4293      	cmp	r3, r2
 8009c08:	bf04      	itt	eq
 8009c0a:	681a      	ldreq	r2, [r3, #0]
 8009c0c:	685b      	ldreq	r3, [r3, #4]
 8009c0e:	6063      	str	r3, [r4, #4]
 8009c10:	bf04      	itt	eq
 8009c12:	1852      	addeq	r2, r2, r1
 8009c14:	6022      	streq	r2, [r4, #0]
 8009c16:	6004      	str	r4, [r0, #0]
 8009c18:	e7ec      	b.n	8009bf4 <_free_r+0x24>
 8009c1a:	4613      	mov	r3, r2
 8009c1c:	685a      	ldr	r2, [r3, #4]
 8009c1e:	b10a      	cbz	r2, 8009c24 <_free_r+0x54>
 8009c20:	42a2      	cmp	r2, r4
 8009c22:	d9fa      	bls.n	8009c1a <_free_r+0x4a>
 8009c24:	6819      	ldr	r1, [r3, #0]
 8009c26:	1858      	adds	r0, r3, r1
 8009c28:	42a0      	cmp	r0, r4
 8009c2a:	d10b      	bne.n	8009c44 <_free_r+0x74>
 8009c2c:	6820      	ldr	r0, [r4, #0]
 8009c2e:	4401      	add	r1, r0
 8009c30:	1858      	adds	r0, r3, r1
 8009c32:	4282      	cmp	r2, r0
 8009c34:	6019      	str	r1, [r3, #0]
 8009c36:	d1dd      	bne.n	8009bf4 <_free_r+0x24>
 8009c38:	6810      	ldr	r0, [r2, #0]
 8009c3a:	6852      	ldr	r2, [r2, #4]
 8009c3c:	605a      	str	r2, [r3, #4]
 8009c3e:	4401      	add	r1, r0
 8009c40:	6019      	str	r1, [r3, #0]
 8009c42:	e7d7      	b.n	8009bf4 <_free_r+0x24>
 8009c44:	d902      	bls.n	8009c4c <_free_r+0x7c>
 8009c46:	230c      	movs	r3, #12
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	e7d3      	b.n	8009bf4 <_free_r+0x24>
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	1821      	adds	r1, r4, r0
 8009c50:	428a      	cmp	r2, r1
 8009c52:	bf04      	itt	eq
 8009c54:	6811      	ldreq	r1, [r2, #0]
 8009c56:	6852      	ldreq	r2, [r2, #4]
 8009c58:	6062      	str	r2, [r4, #4]
 8009c5a:	bf04      	itt	eq
 8009c5c:	1809      	addeq	r1, r1, r0
 8009c5e:	6021      	streq	r1, [r4, #0]
 8009c60:	605c      	str	r4, [r3, #4]
 8009c62:	e7c7      	b.n	8009bf4 <_free_r+0x24>
 8009c64:	bd38      	pop	{r3, r4, r5, pc}
 8009c66:	bf00      	nop
 8009c68:	20000548 	.word	0x20000548

08009c6c <_malloc_r>:
 8009c6c:	b570      	push	{r4, r5, r6, lr}
 8009c6e:	1ccd      	adds	r5, r1, #3
 8009c70:	f025 0503 	bic.w	r5, r5, #3
 8009c74:	3508      	adds	r5, #8
 8009c76:	2d0c      	cmp	r5, #12
 8009c78:	bf38      	it	cc
 8009c7a:	250c      	movcc	r5, #12
 8009c7c:	2d00      	cmp	r5, #0
 8009c7e:	4606      	mov	r6, r0
 8009c80:	db01      	blt.n	8009c86 <_malloc_r+0x1a>
 8009c82:	42a9      	cmp	r1, r5
 8009c84:	d903      	bls.n	8009c8e <_malloc_r+0x22>
 8009c86:	230c      	movs	r3, #12
 8009c88:	6033      	str	r3, [r6, #0]
 8009c8a:	2000      	movs	r0, #0
 8009c8c:	bd70      	pop	{r4, r5, r6, pc}
 8009c8e:	f000 fbae 	bl	800a3ee <__malloc_lock>
 8009c92:	4a21      	ldr	r2, [pc, #132]	; (8009d18 <_malloc_r+0xac>)
 8009c94:	6814      	ldr	r4, [r2, #0]
 8009c96:	4621      	mov	r1, r4
 8009c98:	b991      	cbnz	r1, 8009cc0 <_malloc_r+0x54>
 8009c9a:	4c20      	ldr	r4, [pc, #128]	; (8009d1c <_malloc_r+0xb0>)
 8009c9c:	6823      	ldr	r3, [r4, #0]
 8009c9e:	b91b      	cbnz	r3, 8009ca8 <_malloc_r+0x3c>
 8009ca0:	4630      	mov	r0, r6
 8009ca2:	f000 facf 	bl	800a244 <_sbrk_r>
 8009ca6:	6020      	str	r0, [r4, #0]
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4630      	mov	r0, r6
 8009cac:	f000 faca 	bl	800a244 <_sbrk_r>
 8009cb0:	1c43      	adds	r3, r0, #1
 8009cb2:	d124      	bne.n	8009cfe <_malloc_r+0x92>
 8009cb4:	230c      	movs	r3, #12
 8009cb6:	6033      	str	r3, [r6, #0]
 8009cb8:	4630      	mov	r0, r6
 8009cba:	f000 fb99 	bl	800a3f0 <__malloc_unlock>
 8009cbe:	e7e4      	b.n	8009c8a <_malloc_r+0x1e>
 8009cc0:	680b      	ldr	r3, [r1, #0]
 8009cc2:	1b5b      	subs	r3, r3, r5
 8009cc4:	d418      	bmi.n	8009cf8 <_malloc_r+0x8c>
 8009cc6:	2b0b      	cmp	r3, #11
 8009cc8:	d90f      	bls.n	8009cea <_malloc_r+0x7e>
 8009cca:	600b      	str	r3, [r1, #0]
 8009ccc:	50cd      	str	r5, [r1, r3]
 8009cce:	18cc      	adds	r4, r1, r3
 8009cd0:	4630      	mov	r0, r6
 8009cd2:	f000 fb8d 	bl	800a3f0 <__malloc_unlock>
 8009cd6:	f104 000b 	add.w	r0, r4, #11
 8009cda:	1d23      	adds	r3, r4, #4
 8009cdc:	f020 0007 	bic.w	r0, r0, #7
 8009ce0:	1ac3      	subs	r3, r0, r3
 8009ce2:	d0d3      	beq.n	8009c8c <_malloc_r+0x20>
 8009ce4:	425a      	negs	r2, r3
 8009ce6:	50e2      	str	r2, [r4, r3]
 8009ce8:	e7d0      	b.n	8009c8c <_malloc_r+0x20>
 8009cea:	428c      	cmp	r4, r1
 8009cec:	684b      	ldr	r3, [r1, #4]
 8009cee:	bf16      	itet	ne
 8009cf0:	6063      	strne	r3, [r4, #4]
 8009cf2:	6013      	streq	r3, [r2, #0]
 8009cf4:	460c      	movne	r4, r1
 8009cf6:	e7eb      	b.n	8009cd0 <_malloc_r+0x64>
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	6849      	ldr	r1, [r1, #4]
 8009cfc:	e7cc      	b.n	8009c98 <_malloc_r+0x2c>
 8009cfe:	1cc4      	adds	r4, r0, #3
 8009d00:	f024 0403 	bic.w	r4, r4, #3
 8009d04:	42a0      	cmp	r0, r4
 8009d06:	d005      	beq.n	8009d14 <_malloc_r+0xa8>
 8009d08:	1a21      	subs	r1, r4, r0
 8009d0a:	4630      	mov	r0, r6
 8009d0c:	f000 fa9a 	bl	800a244 <_sbrk_r>
 8009d10:	3001      	adds	r0, #1
 8009d12:	d0cf      	beq.n	8009cb4 <_malloc_r+0x48>
 8009d14:	6025      	str	r5, [r4, #0]
 8009d16:	e7db      	b.n	8009cd0 <_malloc_r+0x64>
 8009d18:	20000548 	.word	0x20000548
 8009d1c:	2000054c 	.word	0x2000054c

08009d20 <__ssputs_r>:
 8009d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d24:	688e      	ldr	r6, [r1, #8]
 8009d26:	429e      	cmp	r6, r3
 8009d28:	4682      	mov	sl, r0
 8009d2a:	460c      	mov	r4, r1
 8009d2c:	4690      	mov	r8, r2
 8009d2e:	4699      	mov	r9, r3
 8009d30:	d837      	bhi.n	8009da2 <__ssputs_r+0x82>
 8009d32:	898a      	ldrh	r2, [r1, #12]
 8009d34:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d38:	d031      	beq.n	8009d9e <__ssputs_r+0x7e>
 8009d3a:	6825      	ldr	r5, [r4, #0]
 8009d3c:	6909      	ldr	r1, [r1, #16]
 8009d3e:	1a6f      	subs	r7, r5, r1
 8009d40:	6965      	ldr	r5, [r4, #20]
 8009d42:	2302      	movs	r3, #2
 8009d44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d48:	fb95 f5f3 	sdiv	r5, r5, r3
 8009d4c:	f109 0301 	add.w	r3, r9, #1
 8009d50:	443b      	add	r3, r7
 8009d52:	429d      	cmp	r5, r3
 8009d54:	bf38      	it	cc
 8009d56:	461d      	movcc	r5, r3
 8009d58:	0553      	lsls	r3, r2, #21
 8009d5a:	d530      	bpl.n	8009dbe <__ssputs_r+0x9e>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	f7ff ff85 	bl	8009c6c <_malloc_r>
 8009d62:	4606      	mov	r6, r0
 8009d64:	b950      	cbnz	r0, 8009d7c <__ssputs_r+0x5c>
 8009d66:	230c      	movs	r3, #12
 8009d68:	f8ca 3000 	str.w	r3, [sl]
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d72:	81a3      	strh	r3, [r4, #12]
 8009d74:	f04f 30ff 	mov.w	r0, #4294967295
 8009d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d7c:	463a      	mov	r2, r7
 8009d7e:	6921      	ldr	r1, [r4, #16]
 8009d80:	f7ff fc32 	bl	80095e8 <memcpy>
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8e:	81a3      	strh	r3, [r4, #12]
 8009d90:	6126      	str	r6, [r4, #16]
 8009d92:	6165      	str	r5, [r4, #20]
 8009d94:	443e      	add	r6, r7
 8009d96:	1bed      	subs	r5, r5, r7
 8009d98:	6026      	str	r6, [r4, #0]
 8009d9a:	60a5      	str	r5, [r4, #8]
 8009d9c:	464e      	mov	r6, r9
 8009d9e:	454e      	cmp	r6, r9
 8009da0:	d900      	bls.n	8009da4 <__ssputs_r+0x84>
 8009da2:	464e      	mov	r6, r9
 8009da4:	4632      	mov	r2, r6
 8009da6:	4641      	mov	r1, r8
 8009da8:	6820      	ldr	r0, [r4, #0]
 8009daa:	f000 fb07 	bl	800a3bc <memmove>
 8009dae:	68a3      	ldr	r3, [r4, #8]
 8009db0:	1b9b      	subs	r3, r3, r6
 8009db2:	60a3      	str	r3, [r4, #8]
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	441e      	add	r6, r3
 8009db8:	6026      	str	r6, [r4, #0]
 8009dba:	2000      	movs	r0, #0
 8009dbc:	e7dc      	b.n	8009d78 <__ssputs_r+0x58>
 8009dbe:	462a      	mov	r2, r5
 8009dc0:	f000 fb17 	bl	800a3f2 <_realloc_r>
 8009dc4:	4606      	mov	r6, r0
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d1e2      	bne.n	8009d90 <__ssputs_r+0x70>
 8009dca:	6921      	ldr	r1, [r4, #16]
 8009dcc:	4650      	mov	r0, sl
 8009dce:	f7ff feff 	bl	8009bd0 <_free_r>
 8009dd2:	e7c8      	b.n	8009d66 <__ssputs_r+0x46>

08009dd4 <_svfiprintf_r>:
 8009dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd8:	461d      	mov	r5, r3
 8009dda:	898b      	ldrh	r3, [r1, #12]
 8009ddc:	061f      	lsls	r7, r3, #24
 8009dde:	b09d      	sub	sp, #116	; 0x74
 8009de0:	4680      	mov	r8, r0
 8009de2:	460c      	mov	r4, r1
 8009de4:	4616      	mov	r6, r2
 8009de6:	d50f      	bpl.n	8009e08 <_svfiprintf_r+0x34>
 8009de8:	690b      	ldr	r3, [r1, #16]
 8009dea:	b96b      	cbnz	r3, 8009e08 <_svfiprintf_r+0x34>
 8009dec:	2140      	movs	r1, #64	; 0x40
 8009dee:	f7ff ff3d 	bl	8009c6c <_malloc_r>
 8009df2:	6020      	str	r0, [r4, #0]
 8009df4:	6120      	str	r0, [r4, #16]
 8009df6:	b928      	cbnz	r0, 8009e04 <_svfiprintf_r+0x30>
 8009df8:	230c      	movs	r3, #12
 8009dfa:	f8c8 3000 	str.w	r3, [r8]
 8009dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009e02:	e0c8      	b.n	8009f96 <_svfiprintf_r+0x1c2>
 8009e04:	2340      	movs	r3, #64	; 0x40
 8009e06:	6163      	str	r3, [r4, #20]
 8009e08:	2300      	movs	r3, #0
 8009e0a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e0c:	2320      	movs	r3, #32
 8009e0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e12:	2330      	movs	r3, #48	; 0x30
 8009e14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e18:	9503      	str	r5, [sp, #12]
 8009e1a:	f04f 0b01 	mov.w	fp, #1
 8009e1e:	4637      	mov	r7, r6
 8009e20:	463d      	mov	r5, r7
 8009e22:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e26:	b10b      	cbz	r3, 8009e2c <_svfiprintf_r+0x58>
 8009e28:	2b25      	cmp	r3, #37	; 0x25
 8009e2a:	d13e      	bne.n	8009eaa <_svfiprintf_r+0xd6>
 8009e2c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009e30:	d00b      	beq.n	8009e4a <_svfiprintf_r+0x76>
 8009e32:	4653      	mov	r3, sl
 8009e34:	4632      	mov	r2, r6
 8009e36:	4621      	mov	r1, r4
 8009e38:	4640      	mov	r0, r8
 8009e3a:	f7ff ff71 	bl	8009d20 <__ssputs_r>
 8009e3e:	3001      	adds	r0, #1
 8009e40:	f000 80a4 	beq.w	8009f8c <_svfiprintf_r+0x1b8>
 8009e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e46:	4453      	add	r3, sl
 8009e48:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4a:	783b      	ldrb	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 809d 	beq.w	8009f8c <_svfiprintf_r+0x1b8>
 8009e52:	2300      	movs	r3, #0
 8009e54:	f04f 32ff 	mov.w	r2, #4294967295
 8009e58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	9307      	str	r3, [sp, #28]
 8009e60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e64:	931a      	str	r3, [sp, #104]	; 0x68
 8009e66:	462f      	mov	r7, r5
 8009e68:	2205      	movs	r2, #5
 8009e6a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009e6e:	4850      	ldr	r0, [pc, #320]	; (8009fb0 <_svfiprintf_r+0x1dc>)
 8009e70:	f7f6 f9ce 	bl	8000210 <memchr>
 8009e74:	9b04      	ldr	r3, [sp, #16]
 8009e76:	b9d0      	cbnz	r0, 8009eae <_svfiprintf_r+0xda>
 8009e78:	06d9      	lsls	r1, r3, #27
 8009e7a:	bf44      	itt	mi
 8009e7c:	2220      	movmi	r2, #32
 8009e7e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e82:	071a      	lsls	r2, r3, #28
 8009e84:	bf44      	itt	mi
 8009e86:	222b      	movmi	r2, #43	; 0x2b
 8009e88:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009e8c:	782a      	ldrb	r2, [r5, #0]
 8009e8e:	2a2a      	cmp	r2, #42	; 0x2a
 8009e90:	d015      	beq.n	8009ebe <_svfiprintf_r+0xea>
 8009e92:	9a07      	ldr	r2, [sp, #28]
 8009e94:	462f      	mov	r7, r5
 8009e96:	2000      	movs	r0, #0
 8009e98:	250a      	movs	r5, #10
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ea0:	3b30      	subs	r3, #48	; 0x30
 8009ea2:	2b09      	cmp	r3, #9
 8009ea4:	d94d      	bls.n	8009f42 <_svfiprintf_r+0x16e>
 8009ea6:	b1b8      	cbz	r0, 8009ed8 <_svfiprintf_r+0x104>
 8009ea8:	e00f      	b.n	8009eca <_svfiprintf_r+0xf6>
 8009eaa:	462f      	mov	r7, r5
 8009eac:	e7b8      	b.n	8009e20 <_svfiprintf_r+0x4c>
 8009eae:	4a40      	ldr	r2, [pc, #256]	; (8009fb0 <_svfiprintf_r+0x1dc>)
 8009eb0:	1a80      	subs	r0, r0, r2
 8009eb2:	fa0b f000 	lsl.w	r0, fp, r0
 8009eb6:	4318      	orrs	r0, r3
 8009eb8:	9004      	str	r0, [sp, #16]
 8009eba:	463d      	mov	r5, r7
 8009ebc:	e7d3      	b.n	8009e66 <_svfiprintf_r+0x92>
 8009ebe:	9a03      	ldr	r2, [sp, #12]
 8009ec0:	1d11      	adds	r1, r2, #4
 8009ec2:	6812      	ldr	r2, [r2, #0]
 8009ec4:	9103      	str	r1, [sp, #12]
 8009ec6:	2a00      	cmp	r2, #0
 8009ec8:	db01      	blt.n	8009ece <_svfiprintf_r+0xfa>
 8009eca:	9207      	str	r2, [sp, #28]
 8009ecc:	e004      	b.n	8009ed8 <_svfiprintf_r+0x104>
 8009ece:	4252      	negs	r2, r2
 8009ed0:	f043 0302 	orr.w	r3, r3, #2
 8009ed4:	9207      	str	r2, [sp, #28]
 8009ed6:	9304      	str	r3, [sp, #16]
 8009ed8:	783b      	ldrb	r3, [r7, #0]
 8009eda:	2b2e      	cmp	r3, #46	; 0x2e
 8009edc:	d10c      	bne.n	8009ef8 <_svfiprintf_r+0x124>
 8009ede:	787b      	ldrb	r3, [r7, #1]
 8009ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee2:	d133      	bne.n	8009f4c <_svfiprintf_r+0x178>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	1d1a      	adds	r2, r3, #4
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	9203      	str	r2, [sp, #12]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	bfb8      	it	lt
 8009ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ef4:	3702      	adds	r7, #2
 8009ef6:	9305      	str	r3, [sp, #20]
 8009ef8:	4d2e      	ldr	r5, [pc, #184]	; (8009fb4 <_svfiprintf_r+0x1e0>)
 8009efa:	7839      	ldrb	r1, [r7, #0]
 8009efc:	2203      	movs	r2, #3
 8009efe:	4628      	mov	r0, r5
 8009f00:	f7f6 f986 	bl	8000210 <memchr>
 8009f04:	b138      	cbz	r0, 8009f16 <_svfiprintf_r+0x142>
 8009f06:	2340      	movs	r3, #64	; 0x40
 8009f08:	1b40      	subs	r0, r0, r5
 8009f0a:	fa03 f000 	lsl.w	r0, r3, r0
 8009f0e:	9b04      	ldr	r3, [sp, #16]
 8009f10:	4303      	orrs	r3, r0
 8009f12:	3701      	adds	r7, #1
 8009f14:	9304      	str	r3, [sp, #16]
 8009f16:	7839      	ldrb	r1, [r7, #0]
 8009f18:	4827      	ldr	r0, [pc, #156]	; (8009fb8 <_svfiprintf_r+0x1e4>)
 8009f1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f1e:	2206      	movs	r2, #6
 8009f20:	1c7e      	adds	r6, r7, #1
 8009f22:	f7f6 f975 	bl	8000210 <memchr>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d038      	beq.n	8009f9c <_svfiprintf_r+0x1c8>
 8009f2a:	4b24      	ldr	r3, [pc, #144]	; (8009fbc <_svfiprintf_r+0x1e8>)
 8009f2c:	bb13      	cbnz	r3, 8009f74 <_svfiprintf_r+0x1a0>
 8009f2e:	9b03      	ldr	r3, [sp, #12]
 8009f30:	3307      	adds	r3, #7
 8009f32:	f023 0307 	bic.w	r3, r3, #7
 8009f36:	3308      	adds	r3, #8
 8009f38:	9303      	str	r3, [sp, #12]
 8009f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f3c:	444b      	add	r3, r9
 8009f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f40:	e76d      	b.n	8009e1e <_svfiprintf_r+0x4a>
 8009f42:	fb05 3202 	mla	r2, r5, r2, r3
 8009f46:	2001      	movs	r0, #1
 8009f48:	460f      	mov	r7, r1
 8009f4a:	e7a6      	b.n	8009e9a <_svfiprintf_r+0xc6>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	3701      	adds	r7, #1
 8009f50:	9305      	str	r3, [sp, #20]
 8009f52:	4619      	mov	r1, r3
 8009f54:	250a      	movs	r5, #10
 8009f56:	4638      	mov	r0, r7
 8009f58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f5c:	3a30      	subs	r2, #48	; 0x30
 8009f5e:	2a09      	cmp	r2, #9
 8009f60:	d903      	bls.n	8009f6a <_svfiprintf_r+0x196>
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0c8      	beq.n	8009ef8 <_svfiprintf_r+0x124>
 8009f66:	9105      	str	r1, [sp, #20]
 8009f68:	e7c6      	b.n	8009ef8 <_svfiprintf_r+0x124>
 8009f6a:	fb05 2101 	mla	r1, r5, r1, r2
 8009f6e:	2301      	movs	r3, #1
 8009f70:	4607      	mov	r7, r0
 8009f72:	e7f0      	b.n	8009f56 <_svfiprintf_r+0x182>
 8009f74:	ab03      	add	r3, sp, #12
 8009f76:	9300      	str	r3, [sp, #0]
 8009f78:	4622      	mov	r2, r4
 8009f7a:	4b11      	ldr	r3, [pc, #68]	; (8009fc0 <_svfiprintf_r+0x1ec>)
 8009f7c:	a904      	add	r1, sp, #16
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f7fd fda2 	bl	8007ac8 <_printf_float>
 8009f84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009f88:	4681      	mov	r9, r0
 8009f8a:	d1d6      	bne.n	8009f3a <_svfiprintf_r+0x166>
 8009f8c:	89a3      	ldrh	r3, [r4, #12]
 8009f8e:	065b      	lsls	r3, r3, #25
 8009f90:	f53f af35 	bmi.w	8009dfe <_svfiprintf_r+0x2a>
 8009f94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f96:	b01d      	add	sp, #116	; 0x74
 8009f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f9c:	ab03      	add	r3, sp, #12
 8009f9e:	9300      	str	r3, [sp, #0]
 8009fa0:	4622      	mov	r2, r4
 8009fa2:	4b07      	ldr	r3, [pc, #28]	; (8009fc0 <_svfiprintf_r+0x1ec>)
 8009fa4:	a904      	add	r1, sp, #16
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	f7fe f844 	bl	8008034 <_printf_i>
 8009fac:	e7ea      	b.n	8009f84 <_svfiprintf_r+0x1b0>
 8009fae:	bf00      	nop
 8009fb0:	0800ab94 	.word	0x0800ab94
 8009fb4:	0800ab9a 	.word	0x0800ab9a
 8009fb8:	0800ab9e 	.word	0x0800ab9e
 8009fbc:	08007ac9 	.word	0x08007ac9
 8009fc0:	08009d21 	.word	0x08009d21

08009fc4 <__sfputc_r>:
 8009fc4:	6893      	ldr	r3, [r2, #8]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	b410      	push	{r4}
 8009fcc:	6093      	str	r3, [r2, #8]
 8009fce:	da08      	bge.n	8009fe2 <__sfputc_r+0x1e>
 8009fd0:	6994      	ldr	r4, [r2, #24]
 8009fd2:	42a3      	cmp	r3, r4
 8009fd4:	db01      	blt.n	8009fda <__sfputc_r+0x16>
 8009fd6:	290a      	cmp	r1, #10
 8009fd8:	d103      	bne.n	8009fe2 <__sfputc_r+0x1e>
 8009fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fde:	f7fe ba09 	b.w	80083f4 <__swbuf_r>
 8009fe2:	6813      	ldr	r3, [r2, #0]
 8009fe4:	1c58      	adds	r0, r3, #1
 8009fe6:	6010      	str	r0, [r2, #0]
 8009fe8:	7019      	strb	r1, [r3, #0]
 8009fea:	4608      	mov	r0, r1
 8009fec:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <__sfputs_r>:
 8009ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	460f      	mov	r7, r1
 8009ff8:	4614      	mov	r4, r2
 8009ffa:	18d5      	adds	r5, r2, r3
 8009ffc:	42ac      	cmp	r4, r5
 8009ffe:	d101      	bne.n	800a004 <__sfputs_r+0x12>
 800a000:	2000      	movs	r0, #0
 800a002:	e007      	b.n	800a014 <__sfputs_r+0x22>
 800a004:	463a      	mov	r2, r7
 800a006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00a:	4630      	mov	r0, r6
 800a00c:	f7ff ffda 	bl	8009fc4 <__sfputc_r>
 800a010:	1c43      	adds	r3, r0, #1
 800a012:	d1f3      	bne.n	8009ffc <__sfputs_r+0xa>
 800a014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a018 <_vfiprintf_r>:
 800a018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a01c:	460c      	mov	r4, r1
 800a01e:	b09d      	sub	sp, #116	; 0x74
 800a020:	4617      	mov	r7, r2
 800a022:	461d      	mov	r5, r3
 800a024:	4606      	mov	r6, r0
 800a026:	b118      	cbz	r0, 800a030 <_vfiprintf_r+0x18>
 800a028:	6983      	ldr	r3, [r0, #24]
 800a02a:	b90b      	cbnz	r3, 800a030 <_vfiprintf_r+0x18>
 800a02c:	f7ff f9d8 	bl	80093e0 <__sinit>
 800a030:	4b7c      	ldr	r3, [pc, #496]	; (800a224 <_vfiprintf_r+0x20c>)
 800a032:	429c      	cmp	r4, r3
 800a034:	d158      	bne.n	800a0e8 <_vfiprintf_r+0xd0>
 800a036:	6874      	ldr	r4, [r6, #4]
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	0718      	lsls	r0, r3, #28
 800a03c:	d55e      	bpl.n	800a0fc <_vfiprintf_r+0xe4>
 800a03e:	6923      	ldr	r3, [r4, #16]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d05b      	beq.n	800a0fc <_vfiprintf_r+0xe4>
 800a044:	2300      	movs	r3, #0
 800a046:	9309      	str	r3, [sp, #36]	; 0x24
 800a048:	2320      	movs	r3, #32
 800a04a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a04e:	2330      	movs	r3, #48	; 0x30
 800a050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a054:	9503      	str	r5, [sp, #12]
 800a056:	f04f 0b01 	mov.w	fp, #1
 800a05a:	46b8      	mov	r8, r7
 800a05c:	4645      	mov	r5, r8
 800a05e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a062:	b10b      	cbz	r3, 800a068 <_vfiprintf_r+0x50>
 800a064:	2b25      	cmp	r3, #37	; 0x25
 800a066:	d154      	bne.n	800a112 <_vfiprintf_r+0xfa>
 800a068:	ebb8 0a07 	subs.w	sl, r8, r7
 800a06c:	d00b      	beq.n	800a086 <_vfiprintf_r+0x6e>
 800a06e:	4653      	mov	r3, sl
 800a070:	463a      	mov	r2, r7
 800a072:	4621      	mov	r1, r4
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff ffbc 	bl	8009ff2 <__sfputs_r>
 800a07a:	3001      	adds	r0, #1
 800a07c:	f000 80c2 	beq.w	800a204 <_vfiprintf_r+0x1ec>
 800a080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a082:	4453      	add	r3, sl
 800a084:	9309      	str	r3, [sp, #36]	; 0x24
 800a086:	f898 3000 	ldrb.w	r3, [r8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 80ba 	beq.w	800a204 <_vfiprintf_r+0x1ec>
 800a090:	2300      	movs	r3, #0
 800a092:	f04f 32ff 	mov.w	r2, #4294967295
 800a096:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a09a:	9304      	str	r3, [sp, #16]
 800a09c:	9307      	str	r3, [sp, #28]
 800a09e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a0a4:	46a8      	mov	r8, r5
 800a0a6:	2205      	movs	r2, #5
 800a0a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800a0ac:	485e      	ldr	r0, [pc, #376]	; (800a228 <_vfiprintf_r+0x210>)
 800a0ae:	f7f6 f8af 	bl	8000210 <memchr>
 800a0b2:	9b04      	ldr	r3, [sp, #16]
 800a0b4:	bb78      	cbnz	r0, 800a116 <_vfiprintf_r+0xfe>
 800a0b6:	06d9      	lsls	r1, r3, #27
 800a0b8:	bf44      	itt	mi
 800a0ba:	2220      	movmi	r2, #32
 800a0bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0c0:	071a      	lsls	r2, r3, #28
 800a0c2:	bf44      	itt	mi
 800a0c4:	222b      	movmi	r2, #43	; 0x2b
 800a0c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a0ca:	782a      	ldrb	r2, [r5, #0]
 800a0cc:	2a2a      	cmp	r2, #42	; 0x2a
 800a0ce:	d02a      	beq.n	800a126 <_vfiprintf_r+0x10e>
 800a0d0:	9a07      	ldr	r2, [sp, #28]
 800a0d2:	46a8      	mov	r8, r5
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	250a      	movs	r5, #10
 800a0d8:	4641      	mov	r1, r8
 800a0da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0de:	3b30      	subs	r3, #48	; 0x30
 800a0e0:	2b09      	cmp	r3, #9
 800a0e2:	d969      	bls.n	800a1b8 <_vfiprintf_r+0x1a0>
 800a0e4:	b360      	cbz	r0, 800a140 <_vfiprintf_r+0x128>
 800a0e6:	e024      	b.n	800a132 <_vfiprintf_r+0x11a>
 800a0e8:	4b50      	ldr	r3, [pc, #320]	; (800a22c <_vfiprintf_r+0x214>)
 800a0ea:	429c      	cmp	r4, r3
 800a0ec:	d101      	bne.n	800a0f2 <_vfiprintf_r+0xda>
 800a0ee:	68b4      	ldr	r4, [r6, #8]
 800a0f0:	e7a2      	b.n	800a038 <_vfiprintf_r+0x20>
 800a0f2:	4b4f      	ldr	r3, [pc, #316]	; (800a230 <_vfiprintf_r+0x218>)
 800a0f4:	429c      	cmp	r4, r3
 800a0f6:	bf08      	it	eq
 800a0f8:	68f4      	ldreq	r4, [r6, #12]
 800a0fa:	e79d      	b.n	800a038 <_vfiprintf_r+0x20>
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	4630      	mov	r0, r6
 800a100:	f7fe f9ca 	bl	8008498 <__swsetup_r>
 800a104:	2800      	cmp	r0, #0
 800a106:	d09d      	beq.n	800a044 <_vfiprintf_r+0x2c>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	b01d      	add	sp, #116	; 0x74
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	46a8      	mov	r8, r5
 800a114:	e7a2      	b.n	800a05c <_vfiprintf_r+0x44>
 800a116:	4a44      	ldr	r2, [pc, #272]	; (800a228 <_vfiprintf_r+0x210>)
 800a118:	1a80      	subs	r0, r0, r2
 800a11a:	fa0b f000 	lsl.w	r0, fp, r0
 800a11e:	4318      	orrs	r0, r3
 800a120:	9004      	str	r0, [sp, #16]
 800a122:	4645      	mov	r5, r8
 800a124:	e7be      	b.n	800a0a4 <_vfiprintf_r+0x8c>
 800a126:	9a03      	ldr	r2, [sp, #12]
 800a128:	1d11      	adds	r1, r2, #4
 800a12a:	6812      	ldr	r2, [r2, #0]
 800a12c:	9103      	str	r1, [sp, #12]
 800a12e:	2a00      	cmp	r2, #0
 800a130:	db01      	blt.n	800a136 <_vfiprintf_r+0x11e>
 800a132:	9207      	str	r2, [sp, #28]
 800a134:	e004      	b.n	800a140 <_vfiprintf_r+0x128>
 800a136:	4252      	negs	r2, r2
 800a138:	f043 0302 	orr.w	r3, r3, #2
 800a13c:	9207      	str	r2, [sp, #28]
 800a13e:	9304      	str	r3, [sp, #16]
 800a140:	f898 3000 	ldrb.w	r3, [r8]
 800a144:	2b2e      	cmp	r3, #46	; 0x2e
 800a146:	d10e      	bne.n	800a166 <_vfiprintf_r+0x14e>
 800a148:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a14c:	2b2a      	cmp	r3, #42	; 0x2a
 800a14e:	d138      	bne.n	800a1c2 <_vfiprintf_r+0x1aa>
 800a150:	9b03      	ldr	r3, [sp, #12]
 800a152:	1d1a      	adds	r2, r3, #4
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	9203      	str	r2, [sp, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	bfb8      	it	lt
 800a15c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a160:	f108 0802 	add.w	r8, r8, #2
 800a164:	9305      	str	r3, [sp, #20]
 800a166:	4d33      	ldr	r5, [pc, #204]	; (800a234 <_vfiprintf_r+0x21c>)
 800a168:	f898 1000 	ldrb.w	r1, [r8]
 800a16c:	2203      	movs	r2, #3
 800a16e:	4628      	mov	r0, r5
 800a170:	f7f6 f84e 	bl	8000210 <memchr>
 800a174:	b140      	cbz	r0, 800a188 <_vfiprintf_r+0x170>
 800a176:	2340      	movs	r3, #64	; 0x40
 800a178:	1b40      	subs	r0, r0, r5
 800a17a:	fa03 f000 	lsl.w	r0, r3, r0
 800a17e:	9b04      	ldr	r3, [sp, #16]
 800a180:	4303      	orrs	r3, r0
 800a182:	f108 0801 	add.w	r8, r8, #1
 800a186:	9304      	str	r3, [sp, #16]
 800a188:	f898 1000 	ldrb.w	r1, [r8]
 800a18c:	482a      	ldr	r0, [pc, #168]	; (800a238 <_vfiprintf_r+0x220>)
 800a18e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a192:	2206      	movs	r2, #6
 800a194:	f108 0701 	add.w	r7, r8, #1
 800a198:	f7f6 f83a 	bl	8000210 <memchr>
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d037      	beq.n	800a210 <_vfiprintf_r+0x1f8>
 800a1a0:	4b26      	ldr	r3, [pc, #152]	; (800a23c <_vfiprintf_r+0x224>)
 800a1a2:	bb1b      	cbnz	r3, 800a1ec <_vfiprintf_r+0x1d4>
 800a1a4:	9b03      	ldr	r3, [sp, #12]
 800a1a6:	3307      	adds	r3, #7
 800a1a8:	f023 0307 	bic.w	r3, r3, #7
 800a1ac:	3308      	adds	r3, #8
 800a1ae:	9303      	str	r3, [sp, #12]
 800a1b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1b2:	444b      	add	r3, r9
 800a1b4:	9309      	str	r3, [sp, #36]	; 0x24
 800a1b6:	e750      	b.n	800a05a <_vfiprintf_r+0x42>
 800a1b8:	fb05 3202 	mla	r2, r5, r2, r3
 800a1bc:	2001      	movs	r0, #1
 800a1be:	4688      	mov	r8, r1
 800a1c0:	e78a      	b.n	800a0d8 <_vfiprintf_r+0xc0>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	f108 0801 	add.w	r8, r8, #1
 800a1c8:	9305      	str	r3, [sp, #20]
 800a1ca:	4619      	mov	r1, r3
 800a1cc:	250a      	movs	r5, #10
 800a1ce:	4640      	mov	r0, r8
 800a1d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1d4:	3a30      	subs	r2, #48	; 0x30
 800a1d6:	2a09      	cmp	r2, #9
 800a1d8:	d903      	bls.n	800a1e2 <_vfiprintf_r+0x1ca>
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d0c3      	beq.n	800a166 <_vfiprintf_r+0x14e>
 800a1de:	9105      	str	r1, [sp, #20]
 800a1e0:	e7c1      	b.n	800a166 <_vfiprintf_r+0x14e>
 800a1e2:	fb05 2101 	mla	r1, r5, r1, r2
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	4680      	mov	r8, r0
 800a1ea:	e7f0      	b.n	800a1ce <_vfiprintf_r+0x1b6>
 800a1ec:	ab03      	add	r3, sp, #12
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	4b13      	ldr	r3, [pc, #76]	; (800a240 <_vfiprintf_r+0x228>)
 800a1f4:	a904      	add	r1, sp, #16
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f7fd fc66 	bl	8007ac8 <_printf_float>
 800a1fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a200:	4681      	mov	r9, r0
 800a202:	d1d5      	bne.n	800a1b0 <_vfiprintf_r+0x198>
 800a204:	89a3      	ldrh	r3, [r4, #12]
 800a206:	065b      	lsls	r3, r3, #25
 800a208:	f53f af7e 	bmi.w	800a108 <_vfiprintf_r+0xf0>
 800a20c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a20e:	e77d      	b.n	800a10c <_vfiprintf_r+0xf4>
 800a210:	ab03      	add	r3, sp, #12
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	4622      	mov	r2, r4
 800a216:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <_vfiprintf_r+0x228>)
 800a218:	a904      	add	r1, sp, #16
 800a21a:	4630      	mov	r0, r6
 800a21c:	f7fd ff0a 	bl	8008034 <_printf_i>
 800a220:	e7ec      	b.n	800a1fc <_vfiprintf_r+0x1e4>
 800a222:	bf00      	nop
 800a224:	0800aa58 	.word	0x0800aa58
 800a228:	0800ab94 	.word	0x0800ab94
 800a22c:	0800aa78 	.word	0x0800aa78
 800a230:	0800aa38 	.word	0x0800aa38
 800a234:	0800ab9a 	.word	0x0800ab9a
 800a238:	0800ab9e 	.word	0x0800ab9e
 800a23c:	08007ac9 	.word	0x08007ac9
 800a240:	08009ff3 	.word	0x08009ff3

0800a244 <_sbrk_r>:
 800a244:	b538      	push	{r3, r4, r5, lr}
 800a246:	4c06      	ldr	r4, [pc, #24]	; (800a260 <_sbrk_r+0x1c>)
 800a248:	2300      	movs	r3, #0
 800a24a:	4605      	mov	r5, r0
 800a24c:	4608      	mov	r0, r1
 800a24e:	6023      	str	r3, [r4, #0]
 800a250:	f7fa f8ac 	bl	80043ac <_sbrk>
 800a254:	1c43      	adds	r3, r0, #1
 800a256:	d102      	bne.n	800a25e <_sbrk_r+0x1a>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	b103      	cbz	r3, 800a25e <_sbrk_r+0x1a>
 800a25c:	602b      	str	r3, [r5, #0]
 800a25e:	bd38      	pop	{r3, r4, r5, pc}
 800a260:	200089a8 	.word	0x200089a8

0800a264 <__sread>:
 800a264:	b510      	push	{r4, lr}
 800a266:	460c      	mov	r4, r1
 800a268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a26c:	f000 f8e8 	bl	800a440 <_read_r>
 800a270:	2800      	cmp	r0, #0
 800a272:	bfab      	itete	ge
 800a274:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a276:	89a3      	ldrhlt	r3, [r4, #12]
 800a278:	181b      	addge	r3, r3, r0
 800a27a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a27e:	bfac      	ite	ge
 800a280:	6563      	strge	r3, [r4, #84]	; 0x54
 800a282:	81a3      	strhlt	r3, [r4, #12]
 800a284:	bd10      	pop	{r4, pc}

0800a286 <__swrite>:
 800a286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a28a:	461f      	mov	r7, r3
 800a28c:	898b      	ldrh	r3, [r1, #12]
 800a28e:	05db      	lsls	r3, r3, #23
 800a290:	4605      	mov	r5, r0
 800a292:	460c      	mov	r4, r1
 800a294:	4616      	mov	r6, r2
 800a296:	d505      	bpl.n	800a2a4 <__swrite+0x1e>
 800a298:	2302      	movs	r3, #2
 800a29a:	2200      	movs	r2, #0
 800a29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a0:	f000 f868 	bl	800a374 <_lseek_r>
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2ae:	81a3      	strh	r3, [r4, #12]
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	463b      	mov	r3, r7
 800a2b4:	4628      	mov	r0, r5
 800a2b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ba:	f000 b817 	b.w	800a2ec <_write_r>

0800a2be <__sseek>:
 800a2be:	b510      	push	{r4, lr}
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2c6:	f000 f855 	bl	800a374 <_lseek_r>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	89a3      	ldrh	r3, [r4, #12]
 800a2ce:	bf15      	itete	ne
 800a2d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2da:	81a3      	strheq	r3, [r4, #12]
 800a2dc:	bf18      	it	ne
 800a2de:	81a3      	strhne	r3, [r4, #12]
 800a2e0:	bd10      	pop	{r4, pc}

0800a2e2 <__sclose>:
 800a2e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2e6:	f000 b813 	b.w	800a310 <_close_r>
	...

0800a2ec <_write_r>:
 800a2ec:	b538      	push	{r3, r4, r5, lr}
 800a2ee:	4c07      	ldr	r4, [pc, #28]	; (800a30c <_write_r+0x20>)
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	4608      	mov	r0, r1
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	6022      	str	r2, [r4, #0]
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f7fa f805 	bl	800430a <_write>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_write_r+0x1e>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	b103      	cbz	r3, 800a30a <_write_r+0x1e>
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	200089a8 	.word	0x200089a8

0800a310 <_close_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4c06      	ldr	r4, [pc, #24]	; (800a32c <_close_r+0x1c>)
 800a314:	2300      	movs	r3, #0
 800a316:	4605      	mov	r5, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	6023      	str	r3, [r4, #0]
 800a31c:	f7fa f811 	bl	8004342 <_close>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	d102      	bne.n	800a32a <_close_r+0x1a>
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	b103      	cbz	r3, 800a32a <_close_r+0x1a>
 800a328:	602b      	str	r3, [r5, #0]
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	200089a8 	.word	0x200089a8

0800a330 <_fstat_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4c07      	ldr	r4, [pc, #28]	; (800a350 <_fstat_r+0x20>)
 800a334:	2300      	movs	r3, #0
 800a336:	4605      	mov	r5, r0
 800a338:	4608      	mov	r0, r1
 800a33a:	4611      	mov	r1, r2
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	f7fa f80c 	bl	800435a <_fstat>
 800a342:	1c43      	adds	r3, r0, #1
 800a344:	d102      	bne.n	800a34c <_fstat_r+0x1c>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	b103      	cbz	r3, 800a34c <_fstat_r+0x1c>
 800a34a:	602b      	str	r3, [r5, #0]
 800a34c:	bd38      	pop	{r3, r4, r5, pc}
 800a34e:	bf00      	nop
 800a350:	200089a8 	.word	0x200089a8

0800a354 <_isatty_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4c06      	ldr	r4, [pc, #24]	; (800a370 <_isatty_r+0x1c>)
 800a358:	2300      	movs	r3, #0
 800a35a:	4605      	mov	r5, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	6023      	str	r3, [r4, #0]
 800a360:	f7fa f80b 	bl	800437a <_isatty>
 800a364:	1c43      	adds	r3, r0, #1
 800a366:	d102      	bne.n	800a36e <_isatty_r+0x1a>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	b103      	cbz	r3, 800a36e <_isatty_r+0x1a>
 800a36c:	602b      	str	r3, [r5, #0]
 800a36e:	bd38      	pop	{r3, r4, r5, pc}
 800a370:	200089a8 	.word	0x200089a8

0800a374 <_lseek_r>:
 800a374:	b538      	push	{r3, r4, r5, lr}
 800a376:	4c07      	ldr	r4, [pc, #28]	; (800a394 <_lseek_r+0x20>)
 800a378:	4605      	mov	r5, r0
 800a37a:	4608      	mov	r0, r1
 800a37c:	4611      	mov	r1, r2
 800a37e:	2200      	movs	r2, #0
 800a380:	6022      	str	r2, [r4, #0]
 800a382:	461a      	mov	r2, r3
 800a384:	f7fa f804 	bl	8004390 <_lseek>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_lseek_r+0x1e>
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_lseek_r+0x1e>
 800a390:	602b      	str	r3, [r5, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	200089a8 	.word	0x200089a8

0800a398 <__ascii_mbtowc>:
 800a398:	b082      	sub	sp, #8
 800a39a:	b901      	cbnz	r1, 800a39e <__ascii_mbtowc+0x6>
 800a39c:	a901      	add	r1, sp, #4
 800a39e:	b142      	cbz	r2, 800a3b2 <__ascii_mbtowc+0x1a>
 800a3a0:	b14b      	cbz	r3, 800a3b6 <__ascii_mbtowc+0x1e>
 800a3a2:	7813      	ldrb	r3, [r2, #0]
 800a3a4:	600b      	str	r3, [r1, #0]
 800a3a6:	7812      	ldrb	r2, [r2, #0]
 800a3a8:	1c10      	adds	r0, r2, #0
 800a3aa:	bf18      	it	ne
 800a3ac:	2001      	movne	r0, #1
 800a3ae:	b002      	add	sp, #8
 800a3b0:	4770      	bx	lr
 800a3b2:	4610      	mov	r0, r2
 800a3b4:	e7fb      	b.n	800a3ae <__ascii_mbtowc+0x16>
 800a3b6:	f06f 0001 	mvn.w	r0, #1
 800a3ba:	e7f8      	b.n	800a3ae <__ascii_mbtowc+0x16>

0800a3bc <memmove>:
 800a3bc:	4288      	cmp	r0, r1
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	eb01 0302 	add.w	r3, r1, r2
 800a3c4:	d807      	bhi.n	800a3d6 <memmove+0x1a>
 800a3c6:	1e42      	subs	r2, r0, #1
 800a3c8:	4299      	cmp	r1, r3
 800a3ca:	d00a      	beq.n	800a3e2 <memmove+0x26>
 800a3cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a3d4:	e7f8      	b.n	800a3c8 <memmove+0xc>
 800a3d6:	4283      	cmp	r3, r0
 800a3d8:	d9f5      	bls.n	800a3c6 <memmove+0xa>
 800a3da:	1881      	adds	r1, r0, r2
 800a3dc:	1ad2      	subs	r2, r2, r3
 800a3de:	42d3      	cmn	r3, r2
 800a3e0:	d100      	bne.n	800a3e4 <memmove+0x28>
 800a3e2:	bd10      	pop	{r4, pc}
 800a3e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3e8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a3ec:	e7f7      	b.n	800a3de <memmove+0x22>

0800a3ee <__malloc_lock>:
 800a3ee:	4770      	bx	lr

0800a3f0 <__malloc_unlock>:
 800a3f0:	4770      	bx	lr

0800a3f2 <_realloc_r>:
 800a3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	4614      	mov	r4, r2
 800a3f8:	460e      	mov	r6, r1
 800a3fa:	b921      	cbnz	r1, 800a406 <_realloc_r+0x14>
 800a3fc:	4611      	mov	r1, r2
 800a3fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a402:	f7ff bc33 	b.w	8009c6c <_malloc_r>
 800a406:	b922      	cbnz	r2, 800a412 <_realloc_r+0x20>
 800a408:	f7ff fbe2 	bl	8009bd0 <_free_r>
 800a40c:	4625      	mov	r5, r4
 800a40e:	4628      	mov	r0, r5
 800a410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a412:	f000 f834 	bl	800a47e <_malloc_usable_size_r>
 800a416:	42a0      	cmp	r0, r4
 800a418:	d20f      	bcs.n	800a43a <_realloc_r+0x48>
 800a41a:	4621      	mov	r1, r4
 800a41c:	4638      	mov	r0, r7
 800a41e:	f7ff fc25 	bl	8009c6c <_malloc_r>
 800a422:	4605      	mov	r5, r0
 800a424:	2800      	cmp	r0, #0
 800a426:	d0f2      	beq.n	800a40e <_realloc_r+0x1c>
 800a428:	4631      	mov	r1, r6
 800a42a:	4622      	mov	r2, r4
 800a42c:	f7ff f8dc 	bl	80095e8 <memcpy>
 800a430:	4631      	mov	r1, r6
 800a432:	4638      	mov	r0, r7
 800a434:	f7ff fbcc 	bl	8009bd0 <_free_r>
 800a438:	e7e9      	b.n	800a40e <_realloc_r+0x1c>
 800a43a:	4635      	mov	r5, r6
 800a43c:	e7e7      	b.n	800a40e <_realloc_r+0x1c>
	...

0800a440 <_read_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4c07      	ldr	r4, [pc, #28]	; (800a460 <_read_r+0x20>)
 800a444:	4605      	mov	r5, r0
 800a446:	4608      	mov	r0, r1
 800a448:	4611      	mov	r1, r2
 800a44a:	2200      	movs	r2, #0
 800a44c:	6022      	str	r2, [r4, #0]
 800a44e:	461a      	mov	r2, r3
 800a450:	f7f9 ff3e 	bl	80042d0 <_read>
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d102      	bne.n	800a45e <_read_r+0x1e>
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	b103      	cbz	r3, 800a45e <_read_r+0x1e>
 800a45c:	602b      	str	r3, [r5, #0]
 800a45e:	bd38      	pop	{r3, r4, r5, pc}
 800a460:	200089a8 	.word	0x200089a8

0800a464 <__ascii_wctomb>:
 800a464:	b149      	cbz	r1, 800a47a <__ascii_wctomb+0x16>
 800a466:	2aff      	cmp	r2, #255	; 0xff
 800a468:	bf85      	ittet	hi
 800a46a:	238a      	movhi	r3, #138	; 0x8a
 800a46c:	6003      	strhi	r3, [r0, #0]
 800a46e:	700a      	strbls	r2, [r1, #0]
 800a470:	f04f 30ff 	movhi.w	r0, #4294967295
 800a474:	bf98      	it	ls
 800a476:	2001      	movls	r0, #1
 800a478:	4770      	bx	lr
 800a47a:	4608      	mov	r0, r1
 800a47c:	4770      	bx	lr

0800a47e <_malloc_usable_size_r>:
 800a47e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a482:	1f18      	subs	r0, r3, #4
 800a484:	2b00      	cmp	r3, #0
 800a486:	bfbc      	itt	lt
 800a488:	580b      	ldrlt	r3, [r1, r0]
 800a48a:	18c0      	addlt	r0, r0, r3
 800a48c:	4770      	bx	lr
	...

0800a490 <_init>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	bf00      	nop
 800a494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a496:	bc08      	pop	{r3}
 800a498:	469e      	mov	lr, r3
 800a49a:	4770      	bx	lr

0800a49c <_fini>:
 800a49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a49e:	bf00      	nop
 800a4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a2:	bc08      	pop	{r3}
 800a4a4:	469e      	mov	lr, r3
 800a4a6:	4770      	bx	lr
