
HYAsstSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d5c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005ef8  08005ef8  00015ef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006198  08006198  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006198  08006198  00016198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061a0  080061a0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061a0  080061a0  000161a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080061a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001558  200001dc  08006384  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001734  08006384  00021734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca3b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dcb  00000000  00000000  0002cc47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a60  00000000  00000000  0002ea18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000990  00000000  00000000  0002f478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014f97  00000000  00000000  0002fe08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000095a9  00000000  00000000  00044d9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008894b  00000000  00000000  0004e348  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003354  00000000  00000000  000d6d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001dc 	.word	0x200001dc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005edc 	.word	0x08005edc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001e0 	.word	0x200001e0
 80001d4:	08005edc 	.word	0x08005edc

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000326:	f1a4 0401 	sub.w	r4, r4, #1
 800032a:	d1e9      	bne.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295
 8000b24:	f000 b972 	b.w	8000e0c <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9e08      	ldr	r6, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	4688      	mov	r8, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14b      	bne.n	8000be6 <__udivmoddi4+0xa6>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4615      	mov	r5, r2
 8000b52:	d967      	bls.n	8000c24 <__udivmoddi4+0xe4>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b14a      	cbz	r2, 8000b6e <__udivmoddi4+0x2e>
 8000b5a:	f1c2 0720 	rsb	r7, r2, #32
 8000b5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b62:	fa20 f707 	lsr.w	r7, r0, r7
 8000b66:	4095      	lsls	r5, r2
 8000b68:	ea47 0803 	orr.w	r8, r7, r3
 8000b6c:	4094      	lsls	r4, r2
 8000b6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b72:	0c23      	lsrs	r3, r4, #16
 8000b74:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b78:	fa1f fc85 	uxth.w	ip, r5
 8000b7c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b80:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b84:	fb07 f10c 	mul.w	r1, r7, ip
 8000b88:	4299      	cmp	r1, r3
 8000b8a:	d909      	bls.n	8000ba0 <__udivmoddi4+0x60>
 8000b8c:	18eb      	adds	r3, r5, r3
 8000b8e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b92:	f080 811b 	bcs.w	8000dcc <__udivmoddi4+0x28c>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 8118 	bls.w	8000dcc <__udivmoddi4+0x28c>
 8000b9c:	3f02      	subs	r7, #2
 8000b9e:	442b      	add	r3, r5
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ba8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb4:	45a4      	cmp	ip, r4
 8000bb6:	d909      	bls.n	8000bcc <__udivmoddi4+0x8c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	f080 8107 	bcs.w	8000dd0 <__udivmoddi4+0x290>
 8000bc2:	45a4      	cmp	ip, r4
 8000bc4:	f240 8104 	bls.w	8000dd0 <__udivmoddi4+0x290>
 8000bc8:	3802      	subs	r0, #2
 8000bca:	442c      	add	r4, r5
 8000bcc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	2700      	movs	r7, #0
 8000bd6:	b11e      	cbz	r6, 8000be0 <__udivmoddi4+0xa0>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c6 4300 	strd	r4, r3, [r6]
 8000be0:	4639      	mov	r1, r7
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xbe>
 8000bea:	2e00      	cmp	r6, #0
 8000bec:	f000 80eb 	beq.w	8000dc6 <__udivmoddi4+0x286>
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bf6:	4638      	mov	r0, r7
 8000bf8:	4639      	mov	r1, r7
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f783 	clz	r7, r3
 8000c02:	2f00      	cmp	r7, #0
 8000c04:	d147      	bne.n	8000c96 <__udivmoddi4+0x156>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd0>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80fa 	bhi.w	8000e04 <__udivmoddi4+0x2c4>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	4698      	mov	r8, r3
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa0>
 8000c1e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xe8>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 808f 	bne.w	8000d50 <__udivmoddi4+0x210>
 8000c32:	1b49      	subs	r1, r1, r5
 8000c34:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c38:	fa1f f885 	uxth.w	r8, r5
 8000c3c:	2701      	movs	r7, #1
 8000c3e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c42:	0c23      	lsrs	r3, r4, #16
 8000c44:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c50:	4299      	cmp	r1, r3
 8000c52:	d907      	bls.n	8000c64 <__udivmoddi4+0x124>
 8000c54:	18eb      	adds	r3, r5, r3
 8000c56:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x122>
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	f200 80cd 	bhi.w	8000dfc <__udivmoddi4+0x2bc>
 8000c62:	4684      	mov	ip, r0
 8000c64:	1a59      	subs	r1, r3, r1
 8000c66:	b2a3      	uxth	r3, r4
 8000c68:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c6c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c70:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c74:	fb08 f800 	mul.w	r8, r8, r0
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	d907      	bls.n	8000c8c <__udivmoddi4+0x14c>
 8000c7c:	192c      	adds	r4, r5, r4
 8000c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x14a>
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	f200 80b6 	bhi.w	8000df6 <__udivmoddi4+0x2b6>
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	eba4 0408 	sub.w	r4, r4, r8
 8000c90:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c94:	e79f      	b.n	8000bd6 <__udivmoddi4+0x96>
 8000c96:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9a:	40bb      	lsls	r3, r7
 8000c9c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca4:	fa01 f407 	lsl.w	r4, r1, r7
 8000ca8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cac:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb4:	4325      	orrs	r5, r4
 8000cb6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cba:	0c2c      	lsrs	r4, r5, #16
 8000cbc:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc0:	fa1f fa8e 	uxth.w	sl, lr
 8000cc4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cc8:	fb09 f40a 	mul.w	r4, r9, sl
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cd6:	d90b      	bls.n	8000cf0 <__udivmoddi4+0x1b0>
 8000cd8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce0:	f080 8087 	bcs.w	8000df2 <__udivmoddi4+0x2b2>
 8000ce4:	429c      	cmp	r4, r3
 8000ce6:	f240 8084 	bls.w	8000df2 <__udivmoddi4+0x2b2>
 8000cea:	f1a9 0902 	sub.w	r9, r9, #2
 8000cee:	4473      	add	r3, lr
 8000cf0:	1b1b      	subs	r3, r3, r4
 8000cf2:	b2ad      	uxth	r5, r5
 8000cf4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cfc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d00:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d04:	45a2      	cmp	sl, r4
 8000d06:	d908      	bls.n	8000d1a <__udivmoddi4+0x1da>
 8000d08:	eb1e 0404 	adds.w	r4, lr, r4
 8000d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d10:	d26b      	bcs.n	8000dea <__udivmoddi4+0x2aa>
 8000d12:	45a2      	cmp	sl, r4
 8000d14:	d969      	bls.n	8000dea <__udivmoddi4+0x2aa>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4474      	add	r4, lr
 8000d1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d22:	eba4 040a 	sub.w	r4, r4, sl
 8000d26:	454c      	cmp	r4, r9
 8000d28:	46c2      	mov	sl, r8
 8000d2a:	464b      	mov	r3, r9
 8000d2c:	d354      	bcc.n	8000dd8 <__udivmoddi4+0x298>
 8000d2e:	d051      	beq.n	8000dd4 <__udivmoddi4+0x294>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d069      	beq.n	8000e08 <__udivmoddi4+0x2c8>
 8000d34:	ebb1 050a 	subs.w	r5, r1, sl
 8000d38:	eb64 0403 	sbc.w	r4, r4, r3
 8000d3c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d40:	40fd      	lsrs	r5, r7
 8000d42:	40fc      	lsrs	r4, r7
 8000d44:	ea4c 0505 	orr.w	r5, ip, r5
 8000d48:	e9c6 5400 	strd	r5, r4, [r6]
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f703 	lsr.w	r7, r0, r3
 8000d58:	4095      	lsls	r5, r2
 8000d5a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d5e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d66:	4338      	orrs	r0, r7
 8000d68:	0c01      	lsrs	r1, r0, #16
 8000d6a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d6e:	fa1f f885 	uxth.w	r8, r5
 8000d72:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7a:	fb07 f308 	mul.w	r3, r7, r8
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	fa04 f402 	lsl.w	r4, r4, r2
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x256>
 8000d86:	1869      	adds	r1, r5, r1
 8000d88:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d8c:	d22f      	bcs.n	8000dee <__udivmoddi4+0x2ae>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d92d      	bls.n	8000dee <__udivmoddi4+0x2ae>
 8000d92:	3f02      	subs	r7, #2
 8000d94:	4429      	add	r1, r5
 8000d96:	1acb      	subs	r3, r1, r3
 8000d98:	b281      	uxth	r1, r0
 8000d9a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d9e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da6:	fb00 f308 	mul.w	r3, r0, r8
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x27e>
 8000dae:	1869      	adds	r1, r5, r1
 8000db0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db4:	d217      	bcs.n	8000de6 <__udivmoddi4+0x2a6>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d915      	bls.n	8000de6 <__udivmoddi4+0x2a6>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4429      	add	r1, r5
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc4:	e73b      	b.n	8000c3e <__udivmoddi4+0xfe>
 8000dc6:	4637      	mov	r7, r6
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e709      	b.n	8000be0 <__udivmoddi4+0xa0>
 8000dcc:	4607      	mov	r7, r0
 8000dce:	e6e7      	b.n	8000ba0 <__udivmoddi4+0x60>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6fb      	b.n	8000bcc <__udivmoddi4+0x8c>
 8000dd4:	4541      	cmp	r1, r8
 8000dd6:	d2ab      	bcs.n	8000d30 <__udivmoddi4+0x1f0>
 8000dd8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ddc:	eb69 020e 	sbc.w	r2, r9, lr
 8000de0:	3801      	subs	r0, #1
 8000de2:	4613      	mov	r3, r2
 8000de4:	e7a4      	b.n	8000d30 <__udivmoddi4+0x1f0>
 8000de6:	4660      	mov	r0, ip
 8000de8:	e7e9      	b.n	8000dbe <__udivmoddi4+0x27e>
 8000dea:	4618      	mov	r0, r3
 8000dec:	e795      	b.n	8000d1a <__udivmoddi4+0x1da>
 8000dee:	4667      	mov	r7, ip
 8000df0:	e7d1      	b.n	8000d96 <__udivmoddi4+0x256>
 8000df2:	4681      	mov	r9, r0
 8000df4:	e77c      	b.n	8000cf0 <__udivmoddi4+0x1b0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	442c      	add	r4, r5
 8000dfa:	e747      	b.n	8000c8c <__udivmoddi4+0x14c>
 8000dfc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e00:	442b      	add	r3, r5
 8000e02:	e72f      	b.n	8000c64 <__udivmoddi4+0x124>
 8000e04:	4638      	mov	r0, r7
 8000e06:	e708      	b.n	8000c1a <__udivmoddi4+0xda>
 8000e08:	4637      	mov	r7, r6
 8000e0a:	e6e9      	b.n	8000be0 <__udivmoddi4+0xa0>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <LED_PC13_INIT>:
  */

#include "LED_Functions/LED_OUTPUT.h"
#include "main.h"

inline void LED_PC13_INIT () {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <LED_PC13_INIT+0x60>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	4a10      	ldr	r2, [pc, #64]	; (8000e70 <LED_PC13_INIT+0x60>)
 8000e2e:	f043 0304 	orr.w	r3, r3, #4
 8000e32:	6313      	str	r3, [r2, #48]	; 0x30
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <LED_PC13_INIT+0x60>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	603b      	str	r3, [r7, #0]
 8000e3e:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <LED_PC13_INIT+0x64>)
 8000e48:	f001 f870 	bl	8001f2c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e50:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	4619      	mov	r1, r3
 8000e62:	4804      	ldr	r0, [pc, #16]	; (8000e74 <LED_PC13_INIT+0x64>)
 8000e64:	f000 fee0 	bl	8001c28 <HAL_GPIO_Init>
}
 8000e68:	bf00      	nop
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40020800 	.word	0x40020800

08000e78 <LED_PC13_BLINK>:

inline void LED_PC13_BLINK (register int delayTime) {
 8000e78:	b598      	push	{r3, r4, r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4604      	mov	r4, r0
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e82:	4809      	ldr	r0, [pc, #36]	; (8000ea8 <LED_PC13_BLINK+0x30>)
 8000e84:	f001 f86b 	bl	8001f5e <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 8000e88:	4623      	mov	r3, r4
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fd76 	bl	800197c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <LED_PC13_BLINK+0x30>)
 8000e96:	f001 f862 	bl	8001f5e <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fd6d 	bl	800197c <HAL_Delay>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd98      	pop	{r3, r4, r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40020800 	.word	0x40020800

08000eac <LED_OUTPUT_INIT>:
			LED_TEST_OFF(); HAL_Delay(4);
		}
	}
}

inline void LED_OUTPUT_INIT () {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	603b      	str	r3, [r7, #0]
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <LED_OUTPUT_INIT+0xc4>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	4a29      	ldr	r2, [pc, #164]	; (8000f70 <LED_OUTPUT_INIT+0xc4>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <LED_OUTPUT_INIT+0xc4>)
 8000ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed4:	f003 0301 	and.w	r3, r3, #1
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000edc:	2201      	movs	r2, #1
 8000ede:	2180      	movs	r1, #128	; 0x80
 8000ee0:	4824      	ldr	r0, [pc, #144]	; (8000f74 <LED_OUTPUT_INIT+0xc8>)
 8000ee2:	f001 f823 	bl	8001f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2140      	movs	r1, #64	; 0x40
 8000eea:	4822      	ldr	r0, [pc, #136]	; (8000f74 <LED_OUTPUT_INIT+0xc8>)
 8000eec:	f001 f81e 	bl	8001f2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	481f      	ldr	r0, [pc, #124]	; (8000f74 <LED_OUTPUT_INIT+0xc8>)
 8000ef6:	f001 f819 	bl	8001f2c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000efa:	2380      	movs	r3, #128	; 0x80
 8000efc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f06:	2302      	movs	r3, #2
 8000f08:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4819      	ldr	r0, [pc, #100]	; (8000f74 <LED_OUTPUT_INIT+0xc8>)
 8000f10:	f000 fe8a 	bl	8001c28 <HAL_GPIO_Init>
	LED_GPSRFS_OFF();
 8000f14:	2200      	movs	r2, #0
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	4816      	ldr	r0, [pc, #88]	; (8000f74 <LED_OUTPUT_INIT+0xc8>)
 8000f1a:	f001 f807 	bl	8001f2c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f1e:	2340      	movs	r3, #64	; 0x40
 8000f20:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4619      	mov	r1, r3
 8000f32:	4810      	ldr	r0, [pc, #64]	; (8000f74 <LED_OUTPUT_INIT+0xc8>)
 8000f34:	f000 fe78 	bl	8001c28 <HAL_GPIO_Init>
	LED_DATUPD_OFF();
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2140      	movs	r1, #64	; 0x40
 8000f3c:	480d      	ldr	r0, [pc, #52]	; (8000f74 <LED_OUTPUT_INIT+0xc8>)
 8000f3e:	f000 fff5 	bl	8001f2c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000f42:	2320      	movs	r3, #32
 8000f44:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	4619      	mov	r1, r3
 8000f56:	4807      	ldr	r0, [pc, #28]	; (8000f74 <LED_OUTPUT_INIT+0xc8>)
 8000f58:	f000 fe66 	bl	8001c28 <HAL_GPIO_Init>
	LED_ALERT_OFF();
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2120      	movs	r1, #32
 8000f60:	4804      	ldr	r0, [pc, #16]	; (8000f74 <LED_OUTPUT_INIT+0xc8>)
 8000f62:	f000 ffe3 	bl	8001f2c <HAL_GPIO_WritePin>
}
 8000f66:	bf00      	nop
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020000 	.word	0x40020000

08000f78 <LED_OUTPUT_TEST>:

inline void LED_OUTPUT_TEST () {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8000f7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f80:	f000 fcfc 	bl	800197c <HAL_Delay>

	LED_GPSRFS_ON ();
 8000f84:	2201      	movs	r2, #1
 8000f86:	2180      	movs	r1, #128	; 0x80
 8000f88:	4812      	ldr	r0, [pc, #72]	; (8000fd4 <LED_OUTPUT_TEST+0x5c>)
 8000f8a:	f000 ffcf 	bl	8001f2c <HAL_GPIO_WritePin>
	LED_DATUPD_ON ();
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	4810      	ldr	r0, [pc, #64]	; (8000fd4 <LED_OUTPUT_TEST+0x5c>)
 8000f94:	f000 ffca 	bl	8001f2c <HAL_GPIO_WritePin>
	LED_ALERT_ON  ();
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <LED_OUTPUT_TEST+0x5c>)
 8000f9e:	f000 ffc5 	bl	8001f2c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000fa2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fa6:	f000 fce9 	bl	800197c <HAL_Delay>

	LED_GPSRFS_OFF();
 8000faa:	2200      	movs	r2, #0
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <LED_OUTPUT_TEST+0x5c>)
 8000fb0:	f000 ffbc 	bl	8001f2c <HAL_GPIO_WritePin>
	LED_DATUPD_OFF();
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2140      	movs	r1, #64	; 0x40
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <LED_OUTPUT_TEST+0x5c>)
 8000fba:	f000 ffb7 	bl	8001f2c <HAL_GPIO_WritePin>
	LED_ALERT_OFF ();
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2120      	movs	r1, #32
 8000fc2:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <LED_OUTPUT_TEST+0x5c>)
 8000fc4:	f000 ffb2 	bl	8001f2c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fcc:	f000 fcd6 	bl	800197c <HAL_Delay>
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <accidentMonitorSetup>:

#define ACCIDENT_ACCE            2          //Minimal acceleration to trigger accident report
#define ACCIDENT_ANGLE          90       	//Minimal dip angle to trigger accident report
#define ACCIDENT_ALERT_SPEED	25

void accidentMonitorSetup (void) {MPU_Init();}
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	f000 f802 	bl	8000fe4 <MPU_Init>
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <MPU_Init>:

#include "MPU6050/MPU6050.h"

u8 MPU_Init(void) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	u8 res;
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Init(&hi2c1);
 8000fea:	481f      	ldr	r0, [pc, #124]	; (8001068 <MPU_Init+0x84>)
 8000fec:	f000 ffd2 	bl	8001f94 <HAL_I2C_Init>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X80);
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	206b      	movs	r0, #107	; 0x6b
 8000ff4:	f000 f8b8 	bl	8001168 <MPU_Write_Byte>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X00);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	206b      	movs	r0, #107	; 0x6b
 8000ffc:	f000 f8b4 	bl	8001168 <MPU_Write_Byte>
	MPU_Set_Gyro_Fsr(3);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f833 	bl	800106c <MPU_Set_Gyro_Fsr>
	MPU_Set_Accel_Fsr(0);
 8001006:	2000      	movs	r0, #0
 8001008:	f000 f841 	bl	800108e <MPU_Set_Accel_Fsr>
	MPU_Set_Rate(50);
 800100c:	2032      	movs	r0, #50	; 0x32
 800100e:	f000 f880 	bl	8001112 <MPU_Set_Rate>
	MPU_Write_Byte(MPU_INT_EN_REG, 0X00);
 8001012:	2100      	movs	r1, #0
 8001014:	2038      	movs	r0, #56	; 0x38
 8001016:	f000 f8a7 	bl	8001168 <MPU_Write_Byte>
	MPU_Write_Byte(MPU_USER_CTRL_REG, 0X00);
 800101a:	2100      	movs	r1, #0
 800101c:	206a      	movs	r0, #106	; 0x6a
 800101e:	f000 f8a3 	bl	8001168 <MPU_Write_Byte>
	MPU_Write_Byte(MPU_FIFO_EN_REG, 0X00);
 8001022:	2100      	movs	r1, #0
 8001024:	2023      	movs	r0, #35	; 0x23
 8001026:	f000 f89f 	bl	8001168 <MPU_Write_Byte>
	MPU_Write_Byte(MPU_INTBP_CFG_REG, 0X80);
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	2037      	movs	r0, #55	; 0x37
 800102e:	f000 f89b 	bl	8001168 <MPU_Write_Byte>
	res = MPU_Read_Byte(MPU_DEVICE_ID_REG);
 8001032:	2075      	movs	r0, #117	; 0x75
 8001034:	f000 f8bc 	bl	80011b0 <MPU_Read_Byte>
 8001038:	4603      	mov	r3, r0
 800103a:	71fb      	strb	r3, [r7, #7]
	if (res == MPU_ADDR) {
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b68      	cmp	r3, #104	; 0x68
 8001040:	d10c      	bne.n	800105c <MPU_Init+0x78>
		MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X01);
 8001042:	2101      	movs	r1, #1
 8001044:	206b      	movs	r0, #107	; 0x6b
 8001046:	f000 f88f 	bl	8001168 <MPU_Write_Byte>
		MPU_Write_Byte(MPU_PWR_MGMT2_REG, 0X00);
 800104a:	2100      	movs	r1, #0
 800104c:	206c      	movs	r0, #108	; 0x6c
 800104e:	f000 f88b 	bl	8001168 <MPU_Write_Byte>
		MPU_Set_Rate(50);
 8001052:	2032      	movs	r0, #50	; 0x32
 8001054:	f000 f85d 	bl	8001112 <MPU_Set_Rate>
	} else return 1;
	return 0;
 8001058:	2300      	movs	r3, #0
 800105a:	e000      	b.n	800105e <MPU_Init+0x7a>
	} else return 1;
 800105c:	2301      	movs	r3, #1
}
 800105e:	4618      	mov	r0, r3
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000204 	.word	0x20000204

0800106c <MPU_Set_Gyro_Fsr>:

u8 MPU_Set_Gyro_Fsr(u8 fsr) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_GYRO_CFG_REG, fsr<<3);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	b2db      	uxtb	r3, r3
 800107c:	4619      	mov	r1, r3
 800107e:	201b      	movs	r0, #27
 8001080:	f000 f872 	bl	8001168 <MPU_Write_Byte>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <MPU_Set_Accel_Fsr>:

u8 MPU_Set_Accel_Fsr(u8 fsr) {
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG, fsr<<3);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4619      	mov	r1, r3
 80010a0:	201c      	movs	r0, #28
 80010a2:	f000 f861 	bl	8001168 <MPU_Write_Byte>
 80010a6:	4603      	mov	r3, r0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <MPU_Set_LPF>:

u8 MPU_Set_LPF(u16 lpf) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
	u8 data = 0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	73fb      	strb	r3, [r7, #15]
	if (lpf >= 188)  data = 1;
 80010be:	88fb      	ldrh	r3, [r7, #6]
 80010c0:	2bbb      	cmp	r3, #187	; 0xbb
 80010c2:	d902      	bls.n	80010ca <MPU_Set_LPF+0x1a>
 80010c4:	2301      	movs	r3, #1
 80010c6:	73fb      	strb	r3, [r7, #15]
 80010c8:	e019      	b.n	80010fe <MPU_Set_LPF+0x4e>
	else if(lpf>=98) data = 2;
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	2b61      	cmp	r3, #97	; 0x61
 80010ce:	d902      	bls.n	80010d6 <MPU_Set_LPF+0x26>
 80010d0:	2302      	movs	r3, #2
 80010d2:	73fb      	strb	r3, [r7, #15]
 80010d4:	e013      	b.n	80010fe <MPU_Set_LPF+0x4e>
	else if(lpf>=42) data = 3;
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	2b29      	cmp	r3, #41	; 0x29
 80010da:	d902      	bls.n	80010e2 <MPU_Set_LPF+0x32>
 80010dc:	2303      	movs	r3, #3
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e00d      	b.n	80010fe <MPU_Set_LPF+0x4e>
	else if(lpf>=20) data = 4;
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	2b13      	cmp	r3, #19
 80010e6:	d902      	bls.n	80010ee <MPU_Set_LPF+0x3e>
 80010e8:	2304      	movs	r3, #4
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e007      	b.n	80010fe <MPU_Set_LPF+0x4e>
	else if(lpf>=10) data = 5;
 80010ee:	88fb      	ldrh	r3, [r7, #6]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	d902      	bls.n	80010fa <MPU_Set_LPF+0x4a>
 80010f4:	2305      	movs	r3, #5
 80010f6:	73fb      	strb	r3, [r7, #15]
 80010f8:	e001      	b.n	80010fe <MPU_Set_LPF+0x4e>
	else data = 6;
 80010fa:	2306      	movs	r3, #6
 80010fc:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG, data);
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4619      	mov	r1, r3
 8001102:	201a      	movs	r0, #26
 8001104:	f000 f830 	bl	8001168 <MPU_Write_Byte>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <MPU_Set_Rate>:

u8 MPU_Set_Rate(u16 rate) {
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	80fb      	strh	r3, [r7, #6]
	u8 data;
	if (rate > 1000) rate = 1000;
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001122:	d902      	bls.n	800112a <MPU_Set_Rate+0x18>
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	80fb      	strh	r3, [r7, #6]
	if (rate < 4)    rate = 4;
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d801      	bhi.n	8001134 <MPU_Set_Rate+0x22>
 8001130:	2304      	movs	r3, #4
 8001132:	80fb      	strh	r3, [r7, #6]
	data = 1000/rate - 1;
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800113a:	fb92 f3f3 	sdiv	r3, r2, r3
 800113e:	b2db      	uxtb	r3, r3
 8001140:	3b01      	subs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
	data = MPU_Write_Byte(MPU_SAMPLE_RATE_REG, data);
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	4619      	mov	r1, r3
 8001148:	2019      	movs	r0, #25
 800114a:	f000 f80d 	bl	8001168 <MPU_Write_Byte>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
 	return MPU_Set_LPF(rate/2);
 8001152:	88fb      	ldrh	r3, [r7, #6]
 8001154:	085b      	lsrs	r3, r3, #1
 8001156:	b29b      	uxth	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ffa9 	bl	80010b0 <MPU_Set_LPF>
 800115e:	4603      	mov	r3, r0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3710      	adds	r7, #16
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <MPU_Write_Byte>:
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Read  (&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 0xfff);
	HAL_Delay(100); return 0;
}

u8 MPU_Write_Byte(u8 reg, u8 data) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af04      	add	r7, sp, #16
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char W_Data = data;
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, &W_Data, 1, 0xfff);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	b29a      	uxth	r2, r3
 8001180:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	2301      	movs	r3, #1
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	f107 030f 	add.w	r3, r7, #15
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2301      	movs	r3, #1
 8001192:	21d0      	movs	r1, #208	; 0xd0
 8001194:	4805      	ldr	r0, [pc, #20]	; (80011ac <MPU_Write_Byte+0x44>)
 8001196:	f001 f835 	bl	8002204 <HAL_I2C_Mem_Write>
	HAL_Delay(100); return 0;
 800119a:	2064      	movs	r0, #100	; 0x64
 800119c:	f000 fbee 	bl	800197c <HAL_Delay>
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000204 	.word	0x20000204

080011b0 <MPU_Read_Byte>:

u8 MPU_Read_Byte(u8 reg) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char R_Data = 0;
 80011ba:	2300      	movs	r3, #0
 80011bc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, &R_Data, 1, 0xfff);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	f640 73ff 	movw	r3, #4095	; 0xfff
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	2301      	movs	r3, #1
 80011ca:	9301      	str	r3, [sp, #4]
 80011cc:	f107 030f 	add.w	r3, r7, #15
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	21d1      	movs	r1, #209	; 0xd1
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MPU_Read_Byte+0x3c>)
 80011d8:	f001 f90e 	bl	80023f8 <HAL_I2C_Mem_Read>
	HAL_Delay(100); return R_Data;
 80011dc:	2064      	movs	r0, #100	; 0x64
 80011de:	f000 fbcd 	bl	800197c <HAL_Delay>
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	20000204 	.word	0x20000204

080011f0 <main>:

#undef GPS_Delay_Time

// main

signed main(void) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

	HAL_Init();
 80011f4:	f000 fb50 	bl	8001898 <HAL_Init>

	SystemClock_Config();
 80011f8:	f000 f81c 	bl	8001234 <SystemClock_Config>

	MX_GPIO_Init();
 80011fc:	f000 f924 	bl	8001448 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001200:	f000 f876 	bl	80012f0 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8001204:	f000 f8cc 	bl	80013a0 <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 8001208:	f000 f8f4 	bl	80013f4 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 800120c:	f000 f89e 	bl	800134c <MX_USART1_UART_Init>

	accidentMonitorSetup();
 8001210:	f7ff fee2 	bl	8000fd8 <accidentMonitorSetup>

	LED_OUTPUT_INIT();
 8001214:	f7ff fe4a 	bl	8000eac <LED_OUTPUT_INIT>
	LED_PC13_INIT();
 8001218:	f7ff fdfa 	bl	8000e10 <LED_PC13_INIT>

	LED_OUTPUT_TEST();
 800121c:	f7ff feac 	bl	8000f78 <LED_OUTPUT_TEST>

	HAL_UART_Receive_IT(&huart2, &gps_init, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	4902      	ldr	r1, [pc, #8]	; (800122c <main+0x3c>)
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <main+0x40>)
 8001226:	f002 faf2 	bl	800380e <HAL_UART_Receive_IT>
		printf("\r\nFLOAT TEST\r\n%f\r\n", nnnnn);
		nnnnn = 1919.810;
		printf("%f\r\n\r\n", nnnnn);
	#endif

	while (1) {
 800122a:	e7fe      	b.n	800122a <main+0x3a>
 800122c:	20000399 	.word	0x20000399
 8001230:	200002d8 	.word	0x200002d8

08001234 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b094      	sub	sp, #80	; 0x50
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	2230      	movs	r2, #48	; 0x30
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f003 f91e 	bl	8004484 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 030c 	add.w	r3, r7, #12
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8001258:	2300      	movs	r3, #0
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <SystemClock_Config+0xb4>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a21      	ldr	r2, [pc, #132]	; (80012e8 <SystemClock_Config+0xb4>)
 8001262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <SystemClock_Config+0xb4>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001274:	2300      	movs	r3, #0
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	4b1c      	ldr	r3, [pc, #112]	; (80012ec <SystemClock_Config+0xb8>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <SystemClock_Config+0xb8>)
 800127e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b19      	ldr	r3, [pc, #100]	; (80012ec <SystemClock_Config+0xb8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001290:	2302      	movs	r3, #2
 8001292:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001294:	2301      	movs	r3, #1
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001298:	2310      	movs	r3, #16
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fe29 	bl	8002efc <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x80>
		Error_Handler();
 80012b0:	f000 f8f2 	bl	8001498 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60fb      	str	r3, [r7, #12]
															|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f002 f884 	bl	80033dc <HAL_RCC_ClockConfig>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <SystemClock_Config+0xaa>
		Error_Handler();
 80012da:	f000 f8dd 	bl	8001498 <Error_Handler>
	}
}
 80012de:	bf00      	nop
 80012e0:	3750      	adds	r7, #80	; 0x50
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40023800 	.word	0x40023800
 80012ec:	40007000 	.word	0x40007000

080012f0 <MX_I2C1_Init>:
/**
	* @brief I2C1 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_I2C1_Init(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_I2C1_Init+0x50>)
 80012f6:	4a13      	ldr	r2, [pc, #76]	; (8001344 <MX_I2C1_Init+0x54>)
 80012f8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_I2C1_Init+0x50>)
 80012fc:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_I2C1_Init+0x58>)
 80012fe:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_I2C1_Init+0x50>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_I2C1_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_I2C1_Init+0x50>)
 800130e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001312:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_I2C1_Init+0x50>)
 8001316:	2200      	movs	r2, #0
 8001318:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_I2C1_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_I2C1_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_I2C1_Init+0x50>)
 8001328:	2200      	movs	r2, #0
 800132a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_I2C1_Init+0x50>)
 800132e:	f000 fe31 	bl	8001f94 <HAL_I2C_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001338:	f000 f8ae 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000204 	.word	0x20000204
 8001344:	40005400 	.word	0x40005400
 8001348:	00061a80 	.word	0x00061a80

0800134c <MX_USART1_UART_Init>:
/**
	* @brief USART1 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART1_UART_Init(void) {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_USART1_UART_Init+0x50>)
 8001354:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001358:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800135c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001364:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001372:	220c      	movs	r2, #12
 8001374:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	4b08      	ldr	r3, [pc, #32]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	; (8001398 <MX_USART1_UART_Init+0x4c>)
 8001384:	f002 f9f6 	bl	8003774 <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800138e:	f000 f883 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000258 	.word	0x20000258
 800139c:	40011000 	.word	0x40011000

080013a0 <MX_USART2_UART_Init>:
/**
	* @brief USART2 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART2_UART_Init(void) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART2_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART2_UART_Init+0x4c>)
 80013d8:	f002 f9cc 	bl	8003774 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80013e2:	f000 f859 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200002d8 	.word	0x200002d8
 80013f0:	40004400 	.word	0x40004400

080013f4 <MX_USART6_UART_Init>:
/**
	* @brief USART6 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART6_UART_Init(void) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <MX_USART6_UART_Init+0x50>)
 80013fc:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001404:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001408:	2200      	movs	r2, #0
 800140a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800140c:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 800140e:	2200      	movs	r2, #0
 8001410:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001418:	4b09      	ldr	r3, [pc, #36]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 800141a:	220c      	movs	r2, #12
 800141c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001420:	2200      	movs	r2, #0
 8001422:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 8001426:	2200      	movs	r2, #0
 8001428:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_USART6_UART_Init+0x4c>)
 800142c:	f002 f9a2 	bl	8003774 <HAL_UART_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001436:	f000 f82f 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000298 	.word	0x20000298
 8001444:	40011400 	.word	0x40011400

08001448 <MX_GPIO_Init>:
/**
	* @brief GPIO Initialization Function
	* @param None
	* @retval None
	*/
static void MX_GPIO_Init(void) {
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <MX_GPIO_Init+0x4c>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_GPIO_Init+0x4c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	683b      	ldr	r3, [r7, #0]

}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800

08001498 <Error_Handler>:

/**
	* @brief	This function is executed in case of error occurrence.
	* @retval None
	*/
void Error_Handler(void) {
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		LED_PC13_BLINK(1000);
 800149e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014a2:	f7ff fce9 	bl	8000e78 <LED_PC13_BLINK>
 80014a6:	e7fa      	b.n	800149e <Error_Handler+0x6>

080014a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <HAL_MspInit+0x4c>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <HAL_MspInit+0x4c>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_MspInit+0x4c>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e6:	bf00      	nop
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40023800 	.word	0x40023800

080014f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08a      	sub	sp, #40	; 0x28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a19      	ldr	r2, [pc, #100]	; (800157c <HAL_I2C_MspInit+0x84>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d12b      	bne.n	8001572 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
 800151e:	4b18      	ldr	r3, [pc, #96]	; (8001580 <HAL_I2C_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a17      	ldr	r2, [pc, #92]	; (8001580 <HAL_I2C_MspInit+0x88>)
 8001524:	f043 0302 	orr.w	r3, r3, #2
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <HAL_I2C_MspInit+0x88>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001536:	23c0      	movs	r3, #192	; 0xc0
 8001538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800153a:	2312      	movs	r3, #18
 800153c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001546:	2304      	movs	r3, #4
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 0314 	add.w	r3, r7, #20
 800154e:	4619      	mov	r1, r3
 8001550:	480c      	ldr	r0, [pc, #48]	; (8001584 <HAL_I2C_MspInit+0x8c>)
 8001552:	f000 fb69 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_I2C_MspInit+0x88>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_I2C_MspInit+0x88>)
 8001560:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_I2C_MspInit+0x88>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001572:	bf00      	nop
 8001574:	3728      	adds	r7, #40	; 0x28
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40005400 	.word	0x40005400
 8001580:	40023800 	.word	0x40023800
 8001584:	40020400 	.word	0x40020400

08001588 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a58      	ldr	r2, [pc, #352]	; (8001708 <HAL_UART_MspInit+0x180>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d135      	bne.n	8001616 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <HAL_UART_MspInit+0x184>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a56      	ldr	r2, [pc, #344]	; (800170c <HAL_UART_MspInit+0x184>)
 80015b4:	f043 0310 	orr.w	r3, r3, #16
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b54      	ldr	r3, [pc, #336]	; (800170c <HAL_UART_MspInit+0x184>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	623b      	str	r3, [r7, #32]
 80015c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
 80015ca:	4b50      	ldr	r3, [pc, #320]	; (800170c <HAL_UART_MspInit+0x184>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_UART_MspInit+0x184>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b4d      	ldr	r3, [pc, #308]	; (800170c <HAL_UART_MspInit+0x184>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	61fb      	str	r3, [r7, #28]
 80015e0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015f4:	2307      	movs	r3, #7
 80015f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4844      	ldr	r0, [pc, #272]	; (8001710 <HAL_UART_MspInit+0x188>)
 8001600:	f000 fb12 	bl	8001c28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	2025      	movs	r0, #37	; 0x25
 800160a:	f000 fab4 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800160e:	2025      	movs	r0, #37	; 0x25
 8001610:	f000 facd 	bl	8001bae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001614:	e073      	b.n	80016fe <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a3e      	ldr	r2, [pc, #248]	; (8001714 <HAL_UART_MspInit+0x18c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d134      	bne.n	800168a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001620:	2300      	movs	r3, #0
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <HAL_UART_MspInit+0x184>)
 8001626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001628:	4a38      	ldr	r2, [pc, #224]	; (800170c <HAL_UART_MspInit+0x184>)
 800162a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162e:	6413      	str	r3, [r2, #64]	; 0x40
 8001630:	4b36      	ldr	r3, [pc, #216]	; (800170c <HAL_UART_MspInit+0x184>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001634:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001638:	61bb      	str	r3, [r7, #24]
 800163a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	4b32      	ldr	r3, [pc, #200]	; (800170c <HAL_UART_MspInit+0x184>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	4a31      	ldr	r2, [pc, #196]	; (800170c <HAL_UART_MspInit+0x184>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
 800164c:	4b2f      	ldr	r3, [pc, #188]	; (800170c <HAL_UART_MspInit+0x184>)
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001658:	230c      	movs	r3, #12
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001668:	2307      	movs	r3, #7
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001670:	4619      	mov	r1, r3
 8001672:	4827      	ldr	r0, [pc, #156]	; (8001710 <HAL_UART_MspInit+0x188>)
 8001674:	f000 fad8 	bl	8001c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001678:	2200      	movs	r2, #0
 800167a:	2100      	movs	r1, #0
 800167c:	2026      	movs	r0, #38	; 0x26
 800167e:	f000 fa7a 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001682:	2026      	movs	r0, #38	; 0x26
 8001684:	f000 fa93 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 8001688:	e039      	b.n	80016fe <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a22      	ldr	r2, [pc, #136]	; (8001718 <HAL_UART_MspInit+0x190>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d134      	bne.n	80016fe <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_UART_MspInit+0x184>)
 800169a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169c:	4a1b      	ldr	r2, [pc, #108]	; (800170c <HAL_UART_MspInit+0x184>)
 800169e:	f043 0320 	orr.w	r3, r3, #32
 80016a2:	6453      	str	r3, [r2, #68]	; 0x44
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_UART_MspInit+0x184>)
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	f003 0320 	and.w	r3, r3, #32
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <HAL_UART_MspInit+0x184>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a14      	ldr	r2, [pc, #80]	; (800170c <HAL_UART_MspInit+0x184>)
 80016ba:	f043 0301 	orr.w	r3, r3, #1
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <HAL_UART_MspInit+0x184>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016cc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016de:	2308      	movs	r3, #8
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016e6:	4619      	mov	r1, r3
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <HAL_UART_MspInit+0x188>)
 80016ea:	f000 fa9d 	bl	8001c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	2047      	movs	r0, #71	; 0x47
 80016f4:	f000 fa3f 	bl	8001b76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80016f8:	2047      	movs	r0, #71	; 0x47
 80016fa:	f000 fa58 	bl	8001bae <HAL_NVIC_EnableIRQ>
}
 80016fe:	bf00      	nop
 8001700:	3738      	adds	r7, #56	; 0x38
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40011000 	.word	0x40011000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	40004400 	.word	0x40004400
 8001718:	40011400 	.word	0x40011400

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <NMI_Handler+0x4>

08001722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <MemManage_Handler+0x4>

0800172e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <UsageFault_Handler+0x4>

0800173a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001768:	f000 f8e8 	bl	800193c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <USART1_IRQHandler+0x10>)
 8001776:	f002 f89f 	bl	80038b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000258 	.word	0x20000258

08001784 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001788:	4802      	ldr	r0, [pc, #8]	; (8001794 <USART2_IRQHandler+0x10>)
 800178a:	f002 f895 	bl	80038b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	200002d8 	.word	0x200002d8

08001798 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800179c:	4802      	ldr	r0, [pc, #8]	; (80017a8 <USART6_IRQHandler+0x10>)
 800179e:	f002 f88b 	bl	80038b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000298 	.word	0x20000298

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f002 fe28 	bl	8004430 <__errno>
 80017e0:	4602      	mov	r2, r0
 80017e2:	230c      	movs	r3, #12
 80017e4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20020000 	.word	0x20020000
 800180c:	00000400 	.word	0x00000400
 8001810:	200001f8 	.word	0x200001f8
 8001814:	20001738 	.word	0x20001738

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <SystemInit+0x28>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a07      	ldr	r2, [pc, #28]	; (8001840 <SystemInit+0x28>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800182c:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SystemInit+0x28>)
 800182e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001832:	609a      	str	r2, [r3, #8]
#endif
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800187c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001848:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800184a:	e003      	b.n	8001854 <LoopCopyDataInit>

0800184c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800184e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001850:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001852:	3104      	adds	r1, #4

08001854 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001858:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800185a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800185c:	d3f6      	bcc.n	800184c <CopyDataInit>
  ldr  r2, =_sbss
 800185e:	4a0b      	ldr	r2, [pc, #44]	; (800188c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001860:	e002      	b.n	8001868 <LoopFillZerobss>

08001862 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001862:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001864:	f842 3b04 	str.w	r3, [r2], #4

08001868 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800186a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800186c:	d3f9      	bcc.n	8001862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800186e:	f7ff ffd3 	bl	8001818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001872:	f002 fde3 	bl	800443c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001876:	f7ff fcbb 	bl	80011f0 <main>
  bx  lr    
 800187a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800187c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001880:	080061a8 	.word	0x080061a8
  ldr  r0, =_sdata
 8001884:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001888:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800188c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001890:	20001734 	.word	0x20001734

08001894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001894:	e7fe      	b.n	8001894 <ADC_IRQHandler>
	...

08001898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_Init+0x40>)
 80018a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_Init+0x40>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_Init+0x40>)
 80018ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c0:	2003      	movs	r0, #3
 80018c2:	f000 f94d 	bl	8001b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f000 f808 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018cc:	f7ff fdec 	bl	80014a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	40023c00 	.word	0x40023c00

080018dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e4:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_InitTick+0x54>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_InitTick+0x58>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	4619      	mov	r1, r3
 80018ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f965 	bl	8001bca <HAL_SYSTICK_Config>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00e      	b.n	8001928 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2b0f      	cmp	r3, #15
 800190e:	d80a      	bhi.n	8001926 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001910:	2200      	movs	r2, #0
 8001912:	6879      	ldr	r1, [r7, #4]
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f000 f92d 	bl	8001b76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800191c:	4a06      	ldr	r2, [pc, #24]	; (8001938 <HAL_InitTick+0x5c>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
 8001924:	e000      	b.n	8001928 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000000 	.word	0x20000000
 8001934:	20000008 	.word	0x20000008
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_IncTick+0x20>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_IncTick+0x24>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4413      	add	r3, r2
 800194c:	4a04      	ldr	r2, [pc, #16]	; (8001960 <HAL_IncTick+0x24>)
 800194e:	6013      	str	r3, [r2, #0]
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000008 	.word	0x20000008
 8001960:	2000172c 	.word	0x2000172c

08001964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  return uwTick;
 8001968:	4b03      	ldr	r3, [pc, #12]	; (8001978 <HAL_GetTick+0x14>)
 800196a:	681b      	ldr	r3, [r3, #0]
}
 800196c:	4618      	mov	r0, r3
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	2000172c 	.word	0x2000172c

0800197c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001984:	f7ff ffee 	bl	8001964 <HAL_GetTick>
 8001988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001994:	d005      	beq.n	80019a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_Delay+0x40>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019a2:	bf00      	nop
 80019a4:	f7ff ffde 	bl	8001964 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d8f7      	bhi.n	80019a4 <HAL_Delay+0x28>
  {
  }
}
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	20000008 	.word	0x20000008

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	db0b      	blt.n	8001a4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	f003 021f 	and.w	r2, r3, #31
 8001a3c:	4907      	ldr	r1, [pc, #28]	; (8001a5c <__NVIC_EnableIRQ+0x38>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	095b      	lsrs	r3, r3, #5
 8001a44:	2001      	movs	r0, #1
 8001a46:	fa00 f202 	lsl.w	r2, r0, r2
 8001a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a4e:	bf00      	nop
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000e100 	.word	0xe000e100

08001a60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	db0a      	blt.n	8001a8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	490c      	ldr	r1, [pc, #48]	; (8001aac <__NVIC_SetPriority+0x4c>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	0112      	lsls	r2, r2, #4
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	440b      	add	r3, r1
 8001a84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a88:	e00a      	b.n	8001aa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4908      	ldr	r1, [pc, #32]	; (8001ab0 <__NVIC_SetPriority+0x50>)
 8001a90:	79fb      	ldrb	r3, [r7, #7]
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	3b04      	subs	r3, #4
 8001a98:	0112      	lsls	r2, r2, #4
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	761a      	strb	r2, [r3, #24]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000e100 	.word	0xe000e100
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b089      	sub	sp, #36	; 0x24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 0307 	and.w	r3, r3, #7
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f1c3 0307 	rsb	r3, r3, #7
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	bf28      	it	cs
 8001ad2:	2304      	movcs	r3, #4
 8001ad4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3304      	adds	r3, #4
 8001ada:	2b06      	cmp	r3, #6
 8001adc:	d902      	bls.n	8001ae4 <NVIC_EncodePriority+0x30>
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b03      	subs	r3, #3
 8001ae2:	e000      	b.n	8001ae6 <NVIC_EncodePriority+0x32>
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	43da      	mvns	r2, r3
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	401a      	ands	r2, r3
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43d9      	mvns	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	4313      	orrs	r3, r2
         );
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3724      	adds	r7, #36	; 0x24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
	...

08001b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b2c:	d301      	bcc.n	8001b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e00f      	b.n	8001b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <SysTick_Config+0x40>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b3a:	210f      	movs	r1, #15
 8001b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b40:	f7ff ff8e 	bl	8001a60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <SysTick_Config+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b4a:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <SysTick_Config+0x40>)
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	e000e010 	.word	0xe000e010

08001b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ff29 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b086      	sub	sp, #24
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b88:	f7ff ff3e 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68b9      	ldr	r1, [r7, #8]
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff ff8e 	bl	8001ab4 <NVIC_EncodePriority>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff ff5d 	bl	8001a60 <__NVIC_SetPriority>
}
 8001ba6:	bf00      	nop
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff31 	bl	8001a24 <__NVIC_EnableIRQ>
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffa2 	bl	8001b1c <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d004      	beq.n	8001c00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e00c      	b.n	8001c1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2205      	movs	r2, #5
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e159      	b.n	8001ef8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 8148 	bne.w	8001ef2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d00b      	beq.n	8001c82 <HAL_GPIO_Init+0x5a>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c76:	2b11      	cmp	r3, #17
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b12      	cmp	r3, #18
 8001c80:	d130      	bne.n	8001ce4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb8:	2201      	movs	r2, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	091b      	lsrs	r3, r3, #4
 8001cce:	f003 0201 	and.w	r2, r3, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d003      	beq.n	8001d24 <HAL_GPIO_Init+0xfc>
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b12      	cmp	r3, #18
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80a2 	beq.w	8001ef2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b56      	ldr	r3, [pc, #344]	; (8001f0c <HAL_GPIO_Init+0x2e4>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a55      	ldr	r2, [pc, #340]	; (8001f0c <HAL_GPIO_Init+0x2e4>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_GPIO_Init+0x2e4>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dca:	4a51      	ldr	r2, [pc, #324]	; (8001f10 <HAL_GPIO_Init+0x2e8>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a48      	ldr	r2, [pc, #288]	; (8001f14 <HAL_GPIO_Init+0x2ec>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d019      	beq.n	8001e2a <HAL_GPIO_Init+0x202>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a47      	ldr	r2, [pc, #284]	; (8001f18 <HAL_GPIO_Init+0x2f0>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d013      	beq.n	8001e26 <HAL_GPIO_Init+0x1fe>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a46      	ldr	r2, [pc, #280]	; (8001f1c <HAL_GPIO_Init+0x2f4>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d00d      	beq.n	8001e22 <HAL_GPIO_Init+0x1fa>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a45      	ldr	r2, [pc, #276]	; (8001f20 <HAL_GPIO_Init+0x2f8>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d007      	beq.n	8001e1e <HAL_GPIO_Init+0x1f6>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a44      	ldr	r2, [pc, #272]	; (8001f24 <HAL_GPIO_Init+0x2fc>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_GPIO_Init+0x1f2>
 8001e16:	2304      	movs	r3, #4
 8001e18:	e008      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e004      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x204>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4093      	lsls	r3, r2
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3c:	4934      	ldr	r1, [pc, #208]	; (8001f10 <HAL_GPIO_Init+0x2e8>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e4a:	4b37      	ldr	r3, [pc, #220]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e6e:	4a2e      	ldr	r2, [pc, #184]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e74:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e9e:	4b22      	ldr	r3, [pc, #136]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ec8:	4b17      	ldr	r3, [pc, #92]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001eec:	4a0e      	ldr	r2, [pc, #56]	; (8001f28 <HAL_GPIO_Init+0x300>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	f67f aea2 	bls.w	8001c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	3724      	adds	r7, #36	; 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40013800 	.word	0x40013800
 8001f14:	40020000 	.word	0x40020000
 8001f18:	40020400 	.word	0x40020400
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	40020c00 	.word	0x40020c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40013c00 	.word	0x40013c00

08001f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	807b      	strh	r3, [r7, #2]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f3c:	787b      	ldrb	r3, [r7, #1]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f48:	e003      	b.n	8001f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f4a:	887b      	ldrh	r3, [r7, #2]
 8001f4c:	041a      	lsls	r2, r3, #16
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	619a      	str	r2, [r3, #24]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695a      	ldr	r2, [r3, #20]
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	401a      	ands	r2, r3
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d104      	bne.n	8001f82 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f78:	887b      	ldrh	r3, [r7, #2]
 8001f7a:	041a      	lsls	r2, r3, #16
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001f80:	e002      	b.n	8001f88 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e11f      	b.n	80021e6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d106      	bne.n	8001fc0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fa9c 	bl	80014f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2224      	movs	r2, #36	; 0x24
 8001fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fe6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ff6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff8:	f001 fb94 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8001ffc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4a7b      	ldr	r2, [pc, #492]	; (80021f0 <HAL_I2C_Init+0x25c>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d807      	bhi.n	8002018 <HAL_I2C_Init+0x84>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a7a      	ldr	r2, [pc, #488]	; (80021f4 <HAL_I2C_Init+0x260>)
 800200c:	4293      	cmp	r3, r2
 800200e:	bf94      	ite	ls
 8002010:	2301      	movls	r3, #1
 8002012:	2300      	movhi	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	e006      	b.n	8002026 <HAL_I2C_Init+0x92>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4a77      	ldr	r2, [pc, #476]	; (80021f8 <HAL_I2C_Init+0x264>)
 800201c:	4293      	cmp	r3, r2
 800201e:	bf94      	ite	ls
 8002020:	2301      	movls	r3, #1
 8002022:	2300      	movhi	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e0db      	b.n	80021e6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4a72      	ldr	r2, [pc, #456]	; (80021fc <HAL_I2C_Init+0x268>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	0c9b      	lsrs	r3, r3, #18
 8002038:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	4a64      	ldr	r2, [pc, #400]	; (80021f0 <HAL_I2C_Init+0x25c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d802      	bhi.n	8002068 <HAL_I2C_Init+0xd4>
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	3301      	adds	r3, #1
 8002066:	e009      	b.n	800207c <HAL_I2C_Init+0xe8>
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800206e:	fb02 f303 	mul.w	r3, r2, r3
 8002072:	4a63      	ldr	r2, [pc, #396]	; (8002200 <HAL_I2C_Init+0x26c>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	3301      	adds	r3, #1
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	430b      	orrs	r3, r1
 8002082:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800208e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	4956      	ldr	r1, [pc, #344]	; (80021f0 <HAL_I2C_Init+0x25c>)
 8002098:	428b      	cmp	r3, r1
 800209a:	d80d      	bhi.n	80020b8 <HAL_I2C_Init+0x124>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e59      	subs	r1, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80020aa:	3301      	adds	r3, #1
 80020ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	bf38      	it	cc
 80020b4:	2304      	movcc	r3, #4
 80020b6:	e04f      	b.n	8002158 <HAL_I2C_Init+0x1c4>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d111      	bne.n	80020e4 <HAL_I2C_Init+0x150>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	1e58      	subs	r0, r3, #1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	460b      	mov	r3, r1
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	440b      	add	r3, r1
 80020ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d2:	3301      	adds	r3, #1
 80020d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d8:	2b00      	cmp	r3, #0
 80020da:	bf0c      	ite	eq
 80020dc:	2301      	moveq	r3, #1
 80020de:	2300      	movne	r3, #0
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	e012      	b.n	800210a <HAL_I2C_Init+0x176>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1e58      	subs	r0, r3, #1
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	460b      	mov	r3, r1
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	0099      	lsls	r1, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020fa:	3301      	adds	r3, #1
 80020fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	bf0c      	ite	eq
 8002104:	2301      	moveq	r3, #1
 8002106:	2300      	movne	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <HAL_I2C_Init+0x17e>
 800210e:	2301      	movs	r3, #1
 8002110:	e022      	b.n	8002158 <HAL_I2C_Init+0x1c4>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10e      	bne.n	8002138 <HAL_I2C_Init+0x1a4>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	1e58      	subs	r0, r3, #1
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6859      	ldr	r1, [r3, #4]
 8002122:	460b      	mov	r3, r1
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	440b      	add	r3, r1
 8002128:	fbb0 f3f3 	udiv	r3, r0, r3
 800212c:	3301      	adds	r3, #1
 800212e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002132:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002136:	e00f      	b.n	8002158 <HAL_I2C_Init+0x1c4>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	1e58      	subs	r0, r3, #1
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6859      	ldr	r1, [r3, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	0099      	lsls	r1, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	fbb0 f3f3 	udiv	r3, r0, r3
 800214e:	3301      	adds	r3, #1
 8002150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002154:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	6809      	ldr	r1, [r1, #0]
 800215c:	4313      	orrs	r3, r2
 800215e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69da      	ldr	r2, [r3, #28]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002186:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	6911      	ldr	r1, [r2, #16]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	68d2      	ldr	r2, [r2, #12]
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6812      	ldr	r2, [r2, #0]
 8002198:	430b      	orrs	r3, r1
 800219a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695a      	ldr	r2, [r3, #20]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	430a      	orrs	r2, r1
 80021b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0201 	orr.w	r2, r2, #1
 80021c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2220      	movs	r2, #32
 80021d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	000186a0 	.word	0x000186a0
 80021f4:	001e847f 	.word	0x001e847f
 80021f8:	003d08ff 	.word	0x003d08ff
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	10624dd3 	.word	0x10624dd3

08002204 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	4608      	mov	r0, r1
 800220e:	4611      	mov	r1, r2
 8002210:	461a      	mov	r2, r3
 8002212:	4603      	mov	r3, r0
 8002214:	817b      	strh	r3, [r7, #10]
 8002216:	460b      	mov	r3, r1
 8002218:	813b      	strh	r3, [r7, #8]
 800221a:	4613      	mov	r3, r2
 800221c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800221e:	f7ff fba1 	bl	8001964 <HAL_GetTick>
 8002222:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b20      	cmp	r3, #32
 800222e:	f040 80d9 	bne.w	80023e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2319      	movs	r3, #25
 8002238:	2201      	movs	r2, #1
 800223a:	496d      	ldr	r1, [pc, #436]	; (80023f0 <HAL_I2C_Mem_Write+0x1ec>)
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fc7f 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002248:	2302      	movs	r3, #2
 800224a:	e0cc      	b.n	80023e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_I2C_Mem_Write+0x56>
 8002256:	2302      	movs	r3, #2
 8002258:	e0c5      	b.n	80023e6 <HAL_I2C_Mem_Write+0x1e2>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b01      	cmp	r3, #1
 800226e:	d007      	beq.n	8002280 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800228e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2221      	movs	r2, #33	; 0x21
 8002294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a3a      	ldr	r2, [r7, #32]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4a4d      	ldr	r2, [pc, #308]	; (80023f4 <HAL_I2C_Mem_Write+0x1f0>)
 80022c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022c2:	88f8      	ldrh	r0, [r7, #6]
 80022c4:	893a      	ldrh	r2, [r7, #8]
 80022c6:	8979      	ldrh	r1, [r7, #10]
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	4603      	mov	r3, r0
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fab6 	bl	8002844 <I2C_RequestMemoryWrite>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d052      	beq.n	8002384 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e081      	b.n	80023e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e2:	697a      	ldr	r2, [r7, #20]
 80022e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f000 fd00 	bl	8002cec <I2C_WaitOnTXEFlagUntilTimeout>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00d      	beq.n	800230e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d107      	bne.n	800230a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002308:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e06b      	b.n	80023e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b04      	cmp	r3, #4
 800234a:	d11b      	bne.n	8002384 <HAL_I2C_Mem_Write+0x180>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	d017      	beq.n	8002384 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800236e:	3b01      	subs	r3, #1
 8002370:	b29a      	uxth	r2, r3
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1aa      	bne.n	80022e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fcec 	bl	8002d6e <I2C_WaitOnBTFFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00d      	beq.n	80023b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d107      	bne.n	80023b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e016      	b.n	80023e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	00100002 	.word	0x00100002
 80023f4:	ffff0000 	.word	0xffff0000

080023f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08c      	sub	sp, #48	; 0x30
 80023fc:	af02      	add	r7, sp, #8
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	461a      	mov	r2, r3
 8002406:	4603      	mov	r3, r0
 8002408:	817b      	strh	r3, [r7, #10]
 800240a:	460b      	mov	r3, r1
 800240c:	813b      	strh	r3, [r7, #8]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002412:	f7ff faa7 	bl	8001964 <HAL_GetTick>
 8002416:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b20      	cmp	r3, #32
 8002422:	f040 8208 	bne.w	8002836 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2319      	movs	r3, #25
 800242c:	2201      	movs	r2, #1
 800242e:	497b      	ldr	r1, [pc, #492]	; (800261c <HAL_I2C_Mem_Read+0x224>)
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 fb85 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800243c:	2302      	movs	r3, #2
 800243e:	e1fb      	b.n	8002838 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_I2C_Mem_Read+0x56>
 800244a:	2302      	movs	r3, #2
 800244c:	e1f4      	b.n	8002838 <HAL_I2C_Mem_Read+0x440>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b01      	cmp	r3, #1
 8002462:	d007      	beq.n	8002474 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002482:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2222      	movs	r2, #34	; 0x22
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2240      	movs	r2, #64	; 0x40
 8002490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800249e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80024a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4a5b      	ldr	r2, [pc, #364]	; (8002620 <HAL_I2C_Mem_Read+0x228>)
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024b6:	88f8      	ldrh	r0, [r7, #6]
 80024b8:	893a      	ldrh	r2, [r7, #8]
 80024ba:	8979      	ldrh	r1, [r7, #10]
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	4603      	mov	r3, r0
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 fa52 	bl	8002970 <I2C_RequestMemoryRead>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e1b0      	b.n	8002838 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d113      	bne.n	8002506 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	623b      	str	r3, [r7, #32]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e184      	b.n	8002810 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	2b01      	cmp	r3, #1
 800250c:	d11b      	bne.n	8002546 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e164      	b.n	8002810 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254a:	2b02      	cmp	r3, #2
 800254c:	d11b      	bne.n	8002586 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800256c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256e:	2300      	movs	r3, #0
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	695b      	ldr	r3, [r3, #20]
 8002578:	61bb      	str	r3, [r7, #24]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	e144      	b.n	8002810 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800259c:	e138      	b.n	8002810 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	2b03      	cmp	r3, #3
 80025a4:	f200 80f1 	bhi.w	800278a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d123      	bne.n	80025f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f000 fc1b 	bl	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e139      	b.n	8002838 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025f6:	e10b      	b.n	8002810 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d14e      	bne.n	800269e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002606:	2200      	movs	r2, #0
 8002608:	4906      	ldr	r1, [pc, #24]	; (8002624 <HAL_I2C_Mem_Read+0x22c>)
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fa98 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d008      	beq.n	8002628 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e10e      	b.n	8002838 <HAL_I2C_Mem_Read+0x440>
 800261a:	bf00      	nop
 800261c:	00100002 	.word	0x00100002
 8002620:	ffff0000 	.word	0xffff0000
 8002624:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	691a      	ldr	r2, [r3, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264a:	1c5a      	adds	r2, r3, #1
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002654:	3b01      	subs	r3, #1
 8002656:	b29a      	uxth	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b29a      	uxth	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800269c:	e0b8      	b.n	8002810 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	2200      	movs	r2, #0
 80026a6:	4966      	ldr	r1, [pc, #408]	; (8002840 <HAL_I2C_Mem_Read+0x448>)
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fa49 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e0bf      	b.n	8002838 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	691a      	ldr	r2, [r3, #16]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	1c5a      	adds	r2, r3, #1
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002700:	2200      	movs	r2, #0
 8002702:	494f      	ldr	r1, [pc, #316]	; (8002840 <HAL_I2C_Mem_Read+0x448>)
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 fa1b 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e091      	b.n	8002838 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002772:	3b01      	subs	r3, #1
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002788:	e042      	b.n	8002810 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fb2e 	bl	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e04c      	b.n	8002838 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a8:	b2d2      	uxtb	r2, r2
 80027aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	1c5a      	adds	r2, r3, #1
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0304 	and.w	r3, r3, #4
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d118      	bne.n	8002810 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691a      	ldr	r2, [r3, #16]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002806:	b29b      	uxth	r3, r3
 8002808:	3b01      	subs	r3, #1
 800280a:	b29a      	uxth	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002814:	2b00      	cmp	r3, #0
 8002816:	f47f aec2 	bne.w	800259e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002836:	2302      	movs	r3, #2
  }
}
 8002838:	4618      	mov	r0, r3
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	00010004 	.word	0x00010004

08002844 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af02      	add	r7, sp, #8
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	4608      	mov	r0, r1
 800284e:	4611      	mov	r1, r2
 8002850:	461a      	mov	r2, r3
 8002852:	4603      	mov	r3, r0
 8002854:	817b      	strh	r3, [r7, #10]
 8002856:	460b      	mov	r3, r1
 8002858:	813b      	strh	r3, [r7, #8]
 800285a:	4613      	mov	r3, r2
 800285c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800286c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	6a3b      	ldr	r3, [r7, #32]
 8002874:	2200      	movs	r2, #0
 8002876:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f960 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00d      	beq.n	80028a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002894:	d103      	bne.n	800289e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f44f 7200 	mov.w	r2, #512	; 0x200
 800289c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e05f      	b.n	8002962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028a2:	897b      	ldrh	r3, [r7, #10]
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	461a      	mov	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	6a3a      	ldr	r2, [r7, #32]
 80028b6:	492d      	ldr	r1, [pc, #180]	; (800296c <I2C_RequestMemoryWrite+0x128>)
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f998 	bl	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e04c      	b.n	8002962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	617b      	str	r3, [r7, #20]
 80028dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e0:	6a39      	ldr	r1, [r7, #32]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fa02 	bl	8002cec <I2C_WaitOnTXEFlagUntilTimeout>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d107      	bne.n	8002906 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002904:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e02b      	b.n	8002962 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800290a:	88fb      	ldrh	r3, [r7, #6]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002910:	893b      	ldrh	r3, [r7, #8]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	611a      	str	r2, [r3, #16]
 800291a:	e021      	b.n	8002960 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800291c:	893b      	ldrh	r3, [r7, #8]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	b29b      	uxth	r3, r3
 8002922:	b2da      	uxtb	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800292a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292c:	6a39      	ldr	r1, [r7, #32]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 f9dc 	bl	8002cec <I2C_WaitOnTXEFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00d      	beq.n	8002956 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293e:	2b04      	cmp	r3, #4
 8002940:	d107      	bne.n	8002952 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002950:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e005      	b.n	8002962 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002956:	893b      	ldrh	r3, [r7, #8]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	00010002 	.word	0x00010002

08002970 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	4608      	mov	r0, r1
 800297a:	4611      	mov	r1, r2
 800297c:	461a      	mov	r2, r3
 800297e:	4603      	mov	r3, r0
 8002980:	817b      	strh	r3, [r7, #10]
 8002982:	460b      	mov	r3, r1
 8002984:	813b      	strh	r3, [r7, #8]
 8002986:	4613      	mov	r3, r2
 8002988:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002998:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f8c2 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00d      	beq.n	80029de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d0:	d103      	bne.n	80029da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e0aa      	b.n	8002b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029de:	897b      	ldrh	r3, [r7, #10]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	6a3a      	ldr	r2, [r7, #32]
 80029f2:	4952      	ldr	r1, [pc, #328]	; (8002b3c <I2C_RequestMemoryRead+0x1cc>)
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f000 f8fa 	bl	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029fa:	4603      	mov	r3, r0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e097      	b.n	8002b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	6a39      	ldr	r1, [r7, #32]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f964 	bl	8002cec <I2C_WaitOnTXEFlagUntilTimeout>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00d      	beq.n	8002a46 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d107      	bne.n	8002a42 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e076      	b.n	8002b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a4c:	893b      	ldrh	r3, [r7, #8]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	611a      	str	r2, [r3, #16]
 8002a56:	e021      	b.n	8002a9c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a58:	893b      	ldrh	r3, [r7, #8]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a68:	6a39      	ldr	r1, [r7, #32]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f93e 	bl	8002cec <I2C_WaitOnTXEFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d107      	bne.n	8002a8e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e050      	b.n	8002b34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a92:	893b      	ldrh	r3, [r7, #8]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	6a39      	ldr	r1, [r7, #32]
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f923 	bl	8002cec <I2C_WaitOnTXEFlagUntilTimeout>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d107      	bne.n	8002ac4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e035      	b.n	8002b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	6a3b      	ldr	r3, [r7, #32]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f82b 	bl	8002b40 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00d      	beq.n	8002b0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afe:	d103      	bne.n	8002b08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b06:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e013      	b.n	8002b34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b0c:	897b      	ldrh	r3, [r7, #10]
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	6a3a      	ldr	r2, [r7, #32]
 8002b20:	4906      	ldr	r1, [pc, #24]	; (8002b3c <I2C_RequestMemoryRead+0x1cc>)
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f000 f863 	bl	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	00010002 	.word	0x00010002

08002b40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b50:	e025      	b.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b58:	d021      	beq.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5a:	f7fe ff03 	bl	8001964 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d302      	bcc.n	8002b70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d116      	bne.n	8002b9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	f043 0220 	orr.w	r2, r3, #32
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e023      	b.n	8002be6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10d      	bne.n	8002bc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	e00c      	b.n	8002bde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	b29b      	uxth	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	bf0c      	ite	eq
 8002bd6:	2301      	moveq	r3, #1
 8002bd8:	2300      	movne	r3, #0
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	461a      	mov	r2, r3
 8002bde:	79fb      	ldrb	r3, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d0b6      	beq.n	8002b52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bfc:	e051      	b.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0c:	d123      	bne.n	8002c56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c42:	f043 0204 	orr.w	r2, r3, #4
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e046      	b.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c5c:	d021      	beq.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c5e:	f7fe fe81 	bl	8001964 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d116      	bne.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e020      	b.n	8002ce4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d10c      	bne.n	8002cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	bf14      	ite	ne
 8002cbe:	2301      	movne	r3, #1
 8002cc0:	2300      	moveq	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e00b      	b.n	8002cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	bf14      	ite	ne
 8002cd8:	2301      	movne	r3, #1
 8002cda:	2300      	moveq	r3, #0
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d18d      	bne.n	8002bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3710      	adds	r7, #16
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cf8:	e02d      	b.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f8ce 	bl	8002e9c <I2C_IsAcknowledgeFailed>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e02d      	b.n	8002d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d10:	d021      	beq.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d12:	f7fe fe27 	bl	8001964 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d116      	bne.n	8002d56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f043 0220 	orr.w	r2, r3, #32
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e007      	b.n	8002d66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b80      	cmp	r3, #128	; 0x80
 8002d62:	d1ca      	bne.n	8002cfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b084      	sub	sp, #16
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	60f8      	str	r0, [r7, #12]
 8002d76:	60b9      	str	r1, [r7, #8]
 8002d78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d7a:	e02d      	b.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f88d 	bl	8002e9c <I2C_IsAcknowledgeFailed>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e02d      	b.n	8002de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d021      	beq.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d94:	f7fe fde6 	bl	8001964 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d302      	bcc.n	8002daa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d116      	bne.n	8002dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e007      	b.n	8002de8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d1ca      	bne.n	8002d7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002dfc:	e042      	b.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	695b      	ldr	r3, [r3, #20]
 8002e04:	f003 0310 	and.w	r3, r3, #16
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d119      	bne.n	8002e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0210 	mvn.w	r2, #16
 8002e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2220      	movs	r2, #32
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e029      	b.n	8002e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e40:	f7fe fd90 	bl	8001964 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d302      	bcc.n	8002e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d116      	bne.n	8002e84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2220      	movs	r2, #32
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e70:	f043 0220 	orr.w	r2, r3, #32
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e007      	b.n	8002e94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8e:	2b40      	cmp	r3, #64	; 0x40
 8002e90:	d1b5      	bne.n	8002dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb2:	d11b      	bne.n	8002eec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ebc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	f043 0204 	orr.w	r2, r3, #4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e000      	b.n	8002eee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e25b      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d075      	beq.n	8003006 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f1a:	4ba3      	ldr	r3, [pc, #652]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4ba0      	ldr	r3, [pc, #640]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f2e:	2b08      	cmp	r3, #8
 8002f30:	d112      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f32:	4b9d      	ldr	r3, [pc, #628]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	4b99      	ldr	r3, [pc, #612]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05b      	beq.n	8003004 <HAL_RCC_OscConfig+0x108>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d157      	bne.n	8003004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e236      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x74>
 8002f62:	4b91      	ldr	r3, [pc, #580]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a90      	ldr	r2, [pc, #576]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b8b      	ldr	r3, [pc, #556]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a8a      	ldr	r2, [pc, #552]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a87      	ldr	r2, [pc, #540]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xb0>
 8002f94:	4b84      	ldr	r3, [pc, #528]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a83      	ldr	r2, [pc, #524]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b81      	ldr	r3, [pc, #516]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a80      	ldr	r2, [pc, #512]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fcd6 	bl	8001964 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fcd2 	bl	8001964 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	; 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e1fb      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xc0>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fcc2 	bl	8001964 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fcbe 	bl	8001964 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e1e7      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b6c      	ldr	r3, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0xe8>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d063      	beq.n	80030da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003012:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00b      	beq.n	8003036 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800301e:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003026:	2b08      	cmp	r3, #8
 8003028:	d11c      	bne.n	8003064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302a:	4b5f      	ldr	r3, [pc, #380]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d116      	bne.n	8003064 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003036:	4b5c      	ldr	r3, [pc, #368]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_RCC_OscConfig+0x152>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d001      	beq.n	800304e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e1bb      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800304e:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4952      	ldr	r1, [pc, #328]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	e03a      	b.n	80030da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d020      	beq.n	80030ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800306c:	4b4f      	ldr	r3, [pc, #316]	; (80031ac <HAL_RCC_OscConfig+0x2b0>)
 800306e:	2201      	movs	r2, #1
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe fc77 	bl	8001964 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800307a:	f7fe fc73 	bl	8001964 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e19c      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	4b46      	ldr	r3, [pc, #280]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d0f0      	beq.n	800307a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003098:	4b43      	ldr	r3, [pc, #268]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4940      	ldr	r1, [pc, #256]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	600b      	str	r3, [r1, #0]
 80030ac:	e015      	b.n	80030da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ae:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <HAL_RCC_OscConfig+0x2b0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b4:	f7fe fc56 	bl	8001964 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030bc:	f7fe fc52 	bl	8001964 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e17b      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	4b36      	ldr	r3, [pc, #216]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d030      	beq.n	8003148 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ee:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_RCC_OscConfig+0x2b4>)
 80030f0:	2201      	movs	r2, #1
 80030f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f4:	f7fe fc36 	bl	8001964 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030fc:	f7fe fc32 	bl	8001964 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e15b      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x200>
 800311a:	e015      	b.n	8003148 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800311c:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <HAL_RCC_OscConfig+0x2b4>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003122:	f7fe fc1f 	bl	8001964 <HAL_GetTick>
 8003126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003128:	e008      	b.n	800313c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800312a:	f7fe fc1b 	bl	8001964 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d901      	bls.n	800313c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e144      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800313e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1f0      	bne.n	800312a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a0 	beq.w	8003296 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003156:	2300      	movs	r3, #0
 8003158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10f      	bne.n	8003186 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003166:	2300      	movs	r3, #0
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	4b0f      	ldr	r3, [pc, #60]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	4a0e      	ldr	r2, [pc, #56]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003174:	6413      	str	r3, [r2, #64]	; 0x40
 8003176:	4b0c      	ldr	r3, [pc, #48]	; (80031a8 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317e:	60bb      	str	r3, [r7, #8]
 8003180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003182:	2301      	movs	r3, #1
 8003184:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003186:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_RCC_OscConfig+0x2b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318e:	2b00      	cmp	r3, #0
 8003190:	d121      	bne.n	80031d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_RCC_OscConfig+0x2b8>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <HAL_RCC_OscConfig+0x2b8>)
 8003198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800319e:	f7fe fbe1 	bl	8001964 <HAL_GetTick>
 80031a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a4:	e011      	b.n	80031ca <HAL_RCC_OscConfig+0x2ce>
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	42470000 	.word	0x42470000
 80031b0:	42470e80 	.word	0x42470e80
 80031b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b8:	f7fe fbd4 	bl	8001964 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0fd      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ca:	4b81      	ldr	r3, [pc, #516]	; (80033d0 <HAL_RCC_OscConfig+0x4d4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d0f0      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d106      	bne.n	80031ec <HAL_RCC_OscConfig+0x2f0>
 80031de:	4b7d      	ldr	r3, [pc, #500]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	4a7c      	ldr	r2, [pc, #496]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	6713      	str	r3, [r2, #112]	; 0x70
 80031ea:	e01c      	b.n	8003226 <HAL_RCC_OscConfig+0x32a>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b05      	cmp	r3, #5
 80031f2:	d10c      	bne.n	800320e <HAL_RCC_OscConfig+0x312>
 80031f4:	4b77      	ldr	r3, [pc, #476]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f8:	4a76      	ldr	r2, [pc, #472]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 80031fa:	f043 0304 	orr.w	r3, r3, #4
 80031fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003200:	4b74      	ldr	r3, [pc, #464]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 8003202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003204:	4a73      	ldr	r2, [pc, #460]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6713      	str	r3, [r2, #112]	; 0x70
 800320c:	e00b      	b.n	8003226 <HAL_RCC_OscConfig+0x32a>
 800320e:	4b71      	ldr	r3, [pc, #452]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 8003210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003212:	4a70      	ldr	r2, [pc, #448]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 8003214:	f023 0301 	bic.w	r3, r3, #1
 8003218:	6713      	str	r3, [r2, #112]	; 0x70
 800321a:	4b6e      	ldr	r3, [pc, #440]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a6d      	ldr	r2, [pc, #436]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d015      	beq.n	800325a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800322e:	f7fe fb99 	bl	8001964 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003234:	e00a      	b.n	800324c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003236:	f7fe fb95 	bl	8001964 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	f241 3288 	movw	r2, #5000	; 0x1388
 8003244:	4293      	cmp	r3, r2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e0bc      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 800324e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ee      	beq.n	8003236 <HAL_RCC_OscConfig+0x33a>
 8003258:	e014      	b.n	8003284 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800325a:	f7fe fb83 	bl	8001964 <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003260:	e00a      	b.n	8003278 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003262:	f7fe fb7f 	bl	8001964 <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003270:	4293      	cmp	r3, r2
 8003272:	d901      	bls.n	8003278 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e0a6      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003278:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 800327a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1ee      	bne.n	8003262 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003284:	7dfb      	ldrb	r3, [r7, #23]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d105      	bne.n	8003296 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800328a:	4b52      	ldr	r3, [pc, #328]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a51      	ldr	r2, [pc, #324]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 8003290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 8092 	beq.w	80033c4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032a0:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 030c 	and.w	r3, r3, #12
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d05c      	beq.n	8003366 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d141      	bne.n	8003338 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b4:	4b48      	ldr	r3, [pc, #288]	; (80033d8 <HAL_RCC_OscConfig+0x4dc>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ba:	f7fe fb53 	bl	8001964 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fe fb4f 	bl	8001964 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e078      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d4:	4b3f      	ldr	r3, [pc, #252]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	431a      	orrs	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	019b      	lsls	r3, r3, #6
 80032f0:	431a      	orrs	r2, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	085b      	lsrs	r3, r3, #1
 80032f8:	3b01      	subs	r3, #1
 80032fa:	041b      	lsls	r3, r3, #16
 80032fc:	431a      	orrs	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	061b      	lsls	r3, r3, #24
 8003304:	4933      	ldr	r1, [pc, #204]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 8003306:	4313      	orrs	r3, r2
 8003308:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800330a:	4b33      	ldr	r3, [pc, #204]	; (80033d8 <HAL_RCC_OscConfig+0x4dc>)
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fb28 	bl	8001964 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003318:	f7fe fb24 	bl	8001964 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e04d      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332a:	4b2a      	ldr	r3, [pc, #168]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0x41c>
 8003336:	e045      	b.n	80033c4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003338:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <HAL_RCC_OscConfig+0x4dc>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333e:	f7fe fb11 	bl	8001964 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003346:	f7fe fb0d 	bl	8001964 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e036      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003358:	4b1e      	ldr	r3, [pc, #120]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCC_OscConfig+0x44a>
 8003364:	e02e      	b.n	80033c4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d101      	bne.n	8003372 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e029      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003372:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_RCC_OscConfig+0x4d8>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	429a      	cmp	r2, r3
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d115      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800339a:	4013      	ands	r3, r2
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d10d      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d106      	bne.n	80033c0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d001      	beq.n	80033c4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40007000 	.word	0x40007000
 80033d4:	40023800 	.word	0x40023800
 80033d8:	42470060 	.word	0x42470060

080033dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0cc      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033f0:	4b68      	ldr	r3, [pc, #416]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 030f 	and.w	r3, r3, #15
 80033f8:	683a      	ldr	r2, [r7, #0]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d90c      	bls.n	8003418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fe:	4b65      	ldr	r3, [pc, #404]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003406:	4b63      	ldr	r3, [pc, #396]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 030f 	and.w	r3, r3, #15
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	429a      	cmp	r2, r3
 8003412:	d001      	beq.n	8003418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e0b8      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d020      	beq.n	8003466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003430:	4b59      	ldr	r3, [pc, #356]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	4a58      	ldr	r2, [pc, #352]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800343a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 0308 	and.w	r3, r3, #8
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003448:	4b53      	ldr	r3, [pc, #332]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	4a52      	ldr	r2, [pc, #328]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003454:	4b50      	ldr	r3, [pc, #320]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	494d      	ldr	r1, [pc, #308]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	2b00      	cmp	r3, #0
 8003470:	d044      	beq.n	80034fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d107      	bne.n	800348a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347a:	4b47      	ldr	r3, [pc, #284]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d119      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e07f      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d003      	beq.n	800349a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003496:	2b03      	cmp	r3, #3
 8003498:	d107      	bne.n	80034aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800349a:	4b3f      	ldr	r3, [pc, #252]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e06f      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034aa:	4b3b      	ldr	r3, [pc, #236]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e067      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ba:	4b37      	ldr	r3, [pc, #220]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f023 0203 	bic.w	r2, r3, #3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4934      	ldr	r1, [pc, #208]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	4313      	orrs	r3, r2
 80034ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034cc:	f7fe fa4a 	bl	8001964 <HAL_GetTick>
 80034d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034d2:	e00a      	b.n	80034ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034d4:	f7fe fa46 	bl	8001964 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	f241 3288 	movw	r2, #5000	; 0x1388
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e04f      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ea:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 020c 	and.w	r2, r3, #12
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d1eb      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034fc:	4b25      	ldr	r3, [pc, #148]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d20c      	bcs.n	8003524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b22      	ldr	r3, [pc, #136]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCC_ClockConfig+0x1b8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	429a      	cmp	r2, r3
 800351e:	d001      	beq.n	8003524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e032      	b.n	800358a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0304 	and.w	r3, r3, #4
 800352c:	2b00      	cmp	r3, #0
 800352e:	d008      	beq.n	8003542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003530:	4b19      	ldr	r3, [pc, #100]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	4916      	ldr	r1, [pc, #88]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	4313      	orrs	r3, r2
 8003540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	490e      	ldr	r1, [pc, #56]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003562:	f000 f821 	bl	80035a8 <HAL_RCC_GetSysClockFreq>
 8003566:	4601      	mov	r1, r0
 8003568:	4b0b      	ldr	r3, [pc, #44]	; (8003598 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <HAL_RCC_ClockConfig+0x1c0>)
 8003574:	5cd3      	ldrb	r3, [r2, r3]
 8003576:	fa21 f303 	lsr.w	r3, r1, r3
 800357a:	4a09      	ldr	r2, [pc, #36]	; (80035a0 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_RCC_ClockConfig+0x1c8>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7fe f9aa 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023c00 	.word	0x40023c00
 8003598:	40023800 	.word	0x40023800
 800359c:	08005ef8 	.word	0x08005ef8
 80035a0:	20000000 	.word	0x20000000
 80035a4:	20000004 	.word	0x20000004

080035a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035aa:	b085      	sub	sp, #20
 80035ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035ae:	2300      	movs	r3, #0
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	2300      	movs	r3, #0
 80035b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035be:	4b50      	ldr	r3, [pc, #320]	; (8003700 <HAL_RCC_GetSysClockFreq+0x158>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d007      	beq.n	80035da <HAL_RCC_GetSysClockFreq+0x32>
 80035ca:	2b08      	cmp	r3, #8
 80035cc:	d008      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0x38>
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 808d 	bne.w	80036ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b4b      	ldr	r3, [pc, #300]	; (8003704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80035d6:	60bb      	str	r3, [r7, #8]
       break;
 80035d8:	e08c      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035da:	4b4b      	ldr	r3, [pc, #300]	; (8003708 <HAL_RCC_GetSysClockFreq+0x160>)
 80035dc:	60bb      	str	r3, [r7, #8]
      break;
 80035de:	e089      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035e0:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCC_GetSysClockFreq+0x158>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035ea:	4b45      	ldr	r3, [pc, #276]	; (8003700 <HAL_RCC_GetSysClockFreq+0x158>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d023      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f6:	4b42      	ldr	r3, [pc, #264]	; (8003700 <HAL_RCC_GetSysClockFreq+0x158>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	099b      	lsrs	r3, r3, #6
 80035fc:	f04f 0400 	mov.w	r4, #0
 8003600:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003604:	f04f 0200 	mov.w	r2, #0
 8003608:	ea03 0501 	and.w	r5, r3, r1
 800360c:	ea04 0602 	and.w	r6, r4, r2
 8003610:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <HAL_RCC_GetSysClockFreq+0x160>)
 8003612:	fb02 f106 	mul.w	r1, r2, r6
 8003616:	2200      	movs	r2, #0
 8003618:	fb02 f205 	mul.w	r2, r2, r5
 800361c:	440a      	add	r2, r1
 800361e:	493a      	ldr	r1, [pc, #232]	; (8003708 <HAL_RCC_GetSysClockFreq+0x160>)
 8003620:	fba5 0101 	umull	r0, r1, r5, r1
 8003624:	1853      	adds	r3, r2, r1
 8003626:	4619      	mov	r1, r3
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f04f 0400 	mov.w	r4, #0
 800362e:	461a      	mov	r2, r3
 8003630:	4623      	mov	r3, r4
 8003632:	f7fd fa6d 	bl	8000b10 <__aeabi_uldivmod>
 8003636:	4603      	mov	r3, r0
 8003638:	460c      	mov	r4, r1
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e049      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363e:	4b30      	ldr	r3, [pc, #192]	; (8003700 <HAL_RCC_GetSysClockFreq+0x158>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	099b      	lsrs	r3, r3, #6
 8003644:	f04f 0400 	mov.w	r4, #0
 8003648:	f240 11ff 	movw	r1, #511	; 0x1ff
 800364c:	f04f 0200 	mov.w	r2, #0
 8003650:	ea03 0501 	and.w	r5, r3, r1
 8003654:	ea04 0602 	and.w	r6, r4, r2
 8003658:	4629      	mov	r1, r5
 800365a:	4632      	mov	r2, r6
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	f04f 0400 	mov.w	r4, #0
 8003664:	0154      	lsls	r4, r2, #5
 8003666:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800366a:	014b      	lsls	r3, r1, #5
 800366c:	4619      	mov	r1, r3
 800366e:	4622      	mov	r2, r4
 8003670:	1b49      	subs	r1, r1, r5
 8003672:	eb62 0206 	sbc.w	r2, r2, r6
 8003676:	f04f 0300 	mov.w	r3, #0
 800367a:	f04f 0400 	mov.w	r4, #0
 800367e:	0194      	lsls	r4, r2, #6
 8003680:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003684:	018b      	lsls	r3, r1, #6
 8003686:	1a5b      	subs	r3, r3, r1
 8003688:	eb64 0402 	sbc.w	r4, r4, r2
 800368c:	f04f 0100 	mov.w	r1, #0
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	00e2      	lsls	r2, r4, #3
 8003696:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800369a:	00d9      	lsls	r1, r3, #3
 800369c:	460b      	mov	r3, r1
 800369e:	4614      	mov	r4, r2
 80036a0:	195b      	adds	r3, r3, r5
 80036a2:	eb44 0406 	adc.w	r4, r4, r6
 80036a6:	f04f 0100 	mov.w	r1, #0
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	02a2      	lsls	r2, r4, #10
 80036b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036b4:	0299      	lsls	r1, r3, #10
 80036b6:	460b      	mov	r3, r1
 80036b8:	4614      	mov	r4, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	4621      	mov	r1, r4
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f04f 0400 	mov.w	r4, #0
 80036c4:	461a      	mov	r2, r3
 80036c6:	4623      	mov	r3, r4
 80036c8:	f7fd fa22 	bl	8000b10 <__aeabi_uldivmod>
 80036cc:	4603      	mov	r3, r0
 80036ce:	460c      	mov	r4, r1
 80036d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_GetSysClockFreq+0x158>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	0c1b      	lsrs	r3, r3, #16
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	3301      	adds	r3, #1
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ea:	60bb      	str	r3, [r7, #8]
      break;
 80036ec:	e002      	b.n	80036f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036ee:	4b05      	ldr	r3, [pc, #20]	; (8003704 <HAL_RCC_GetSysClockFreq+0x15c>)
 80036f0:	60bb      	str	r3, [r7, #8]
      break;
 80036f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036f4:	68bb      	ldr	r3, [r7, #8]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036fe:	bf00      	nop
 8003700:	40023800 	.word	0x40023800
 8003704:	00f42400 	.word	0x00f42400
 8003708:	017d7840 	.word	0x017d7840

0800370c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003710:	4b03      	ldr	r3, [pc, #12]	; (8003720 <HAL_RCC_GetHCLKFreq+0x14>)
 8003712:	681b      	ldr	r3, [r3, #0]
}
 8003714:	4618      	mov	r0, r3
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	20000000 	.word	0x20000000

08003724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003728:	f7ff fff0 	bl	800370c <HAL_RCC_GetHCLKFreq>
 800372c:	4601      	mov	r1, r0
 800372e:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	0a9b      	lsrs	r3, r3, #10
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	4a03      	ldr	r2, [pc, #12]	; (8003748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800373a:	5cd3      	ldrb	r3, [r2, r3]
 800373c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40023800 	.word	0x40023800
 8003748:	08005f08 	.word	0x08005f08

0800374c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003750:	f7ff ffdc 	bl	800370c <HAL_RCC_GetHCLKFreq>
 8003754:	4601      	mov	r1, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0b5b      	lsrs	r3, r3, #13
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4a03      	ldr	r2, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	08005f08 	.word	0x08005f08

08003774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e03f      	b.n	8003806 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d106      	bne.n	80037a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f7fd fef4 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2224      	movs	r2, #36	; 0x24
 80037a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fabd 	bl	8003d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2220      	movs	r2, #32
 80037f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	4613      	mov	r3, r2
 800381a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b20      	cmp	r3, #32
 8003826:	d140      	bne.n	80038aa <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d002      	beq.n	8003834 <HAL_UART_Receive_IT+0x26>
 800382e:	88fb      	ldrh	r3, [r7, #6]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d101      	bne.n	8003838 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e039      	b.n	80038ac <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_UART_Receive_IT+0x38>
 8003842:	2302      	movs	r3, #2
 8003844:	e032      	b.n	80038ac <HAL_UART_Receive_IT+0x9e>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	88fa      	ldrh	r2, [r7, #6]
 8003858:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	88fa      	ldrh	r2, [r7, #6]
 800385e:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2222      	movs	r2, #34	; 0x22
 800386a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003884:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f042 0220 	orr.w	r2, r2, #32
 80038a4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80038a6:	2300      	movs	r3, #0
 80038a8:	e000      	b.n	80038ac <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80038aa:	2302      	movs	r3, #2
  }
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b088      	sub	sp, #32
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80038dc:	2300      	movs	r3, #0
 80038de:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	f003 0320 	and.w	r3, r3, #32
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d008      	beq.n	800390a <HAL_UART_IRQHandler+0x52>
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f996 	bl	8003c34 <UART_Receive_IT>
      return;
 8003908:	e0d1      	b.n	8003aae <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	f000 80b0 	beq.w	8003a72 <HAL_UART_IRQHandler+0x1ba>
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	2b00      	cmp	r3, #0
 800391a:	d105      	bne.n	8003928 <HAL_UART_IRQHandler+0x70>
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80a5 	beq.w	8003a72 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00a      	beq.n	8003948 <HAL_UART_IRQHandler+0x90>
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d005      	beq.n	8003948 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <HAL_UART_IRQHandler+0xb0>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003960:	f043 0202 	orr.w	r2, r3, #2
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_UART_IRQHandler+0xd0>
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	d005      	beq.n	8003988 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	f043 0204 	orr.w	r2, r3, #4
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f003 0308 	and.w	r3, r3, #8
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00f      	beq.n	80039b2 <HAL_UART_IRQHandler+0xfa>
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d104      	bne.n	80039a6 <HAL_UART_IRQHandler+0xee>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d005      	beq.n	80039b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	f043 0208 	orr.w	r2, r3, #8
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d078      	beq.n	8003aac <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0320 	and.w	r3, r3, #32
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d007      	beq.n	80039d4 <HAL_UART_IRQHandler+0x11c>
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f930 	bl	8003c34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	bf0c      	ite	eq
 80039e2:	2301      	moveq	r3, #1
 80039e4:	2300      	movne	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d102      	bne.n	80039fc <HAL_UART_IRQHandler+0x144>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d031      	beq.n	8003a60 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f879 	bl	8003af4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d123      	bne.n	8003a58 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695a      	ldr	r2, [r3, #20]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a1e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d013      	beq.n	8003a50 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a2c:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <HAL_UART_IRQHandler+0x1fc>)
 8003a2e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe f8d4 	bl	8001be2 <HAL_DMA_Abort_IT>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d016      	beq.n	8003a6e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a4e:	e00e      	b.n	8003a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f845 	bl	8003ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a56:	e00a      	b.n	8003a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 f841 	bl	8003ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a5e:	e006      	b.n	8003a6e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f83d 	bl	8003ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003a6c:	e01e      	b.n	8003aac <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a6e:	bf00      	nop
    return;
 8003a70:	e01c      	b.n	8003aac <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1d6>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f866 	bl	8003b58 <UART_Transmit_IT>
    return;
 8003a8c:	e00f      	b.n	8003aae <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_UART_IRQHandler+0x1f6>
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f8ae 	bl	8003c04 <UART_EndTransmit_IT>
    return;
 8003aa8:	bf00      	nop
 8003aaa:	e000      	b.n	8003aae <HAL_UART_IRQHandler+0x1f6>
    return;
 8003aac:	bf00      	nop
  }
}
 8003aae:	3720      	adds	r7, #32
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	08003b31 	.word	0x08003b31

08003ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003b0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff ffc8 	bl	8003ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b21      	cmp	r3, #33	; 0x21
 8003b6a:	d144      	bne.n	8003bf6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	d11a      	bne.n	8003bac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b8a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d105      	bne.n	8003ba0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	1c9a      	adds	r2, r3, #2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	621a      	str	r2, [r3, #32]
 8003b9e:	e00e      	b.n	8003bbe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	621a      	str	r2, [r3, #32]
 8003baa:	e008      	b.n	8003bbe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a1b      	ldr	r3, [r3, #32]
 8003bb0:	1c59      	adds	r1, r3, #1
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6211      	str	r1, [r2, #32]
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	3b01      	subs	r3, #1
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10f      	bne.n	8003bf2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68da      	ldr	r2, [r3, #12]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003be0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bf0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e000      	b.n	8003bf8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
  }
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68da      	ldr	r2, [r3, #12]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff47 	bl	8003ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b22      	cmp	r3, #34	; 0x22
 8003c46:	d171      	bne.n	8003d2c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c50:	d123      	bne.n	8003c9a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c56:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10e      	bne.n	8003c7e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c76:	1c9a      	adds	r2, r3, #2
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c7c:	e029      	b.n	8003cd2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28
 8003c98:	e01b      	b.n	8003cd2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	691b      	ldr	r3, [r3, #16]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6858      	ldr	r0, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cac:	1c59      	adds	r1, r3, #1
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6291      	str	r1, [r2, #40]	; 0x28
 8003cb2:	b2c2      	uxtb	r2, r0
 8003cb4:	701a      	strb	r2, [r3, #0]
 8003cb6:	e00c      	b.n	8003cd2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cc4:	1c58      	adds	r0, r3, #1
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	6288      	str	r0, [r1, #40]	; 0x28
 8003cca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d120      	bne.n	8003d28 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0220 	bic.w	r2, r2, #32
 8003cf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0201 	bic.w	r2, r2, #1
 8003d14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff fed4 	bl	8003acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e002      	b.n	8003d2e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e000      	b.n	8003d2e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
  }
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68da      	ldr	r2, [r3, #12]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	689a      	ldr	r2, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003d7a:	f023 030c 	bic.w	r3, r3, #12
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	68f9      	ldr	r1, [r7, #12]
 8003d84:	430b      	orrs	r3, r1
 8003d86:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699a      	ldr	r2, [r3, #24]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da6:	f040 818b 	bne.w	80040c0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4ac1      	ldr	r2, [pc, #772]	; (80040b4 <UART_SetConfig+0x37c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d005      	beq.n	8003dc0 <UART_SetConfig+0x88>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4abf      	ldr	r2, [pc, #764]	; (80040b8 <UART_SetConfig+0x380>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	f040 80bd 	bne.w	8003f3a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dc0:	f7ff fcc4 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 8003dc4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	461d      	mov	r5, r3
 8003dca:	f04f 0600 	mov.w	r6, #0
 8003dce:	46a8      	mov	r8, r5
 8003dd0:	46b1      	mov	r9, r6
 8003dd2:	eb18 0308 	adds.w	r3, r8, r8
 8003dd6:	eb49 0409 	adc.w	r4, r9, r9
 8003dda:	4698      	mov	r8, r3
 8003ddc:	46a1      	mov	r9, r4
 8003dde:	eb18 0805 	adds.w	r8, r8, r5
 8003de2:	eb49 0906 	adc.w	r9, r9, r6
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003df2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003df6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dfa:	4688      	mov	r8, r1
 8003dfc:	4691      	mov	r9, r2
 8003dfe:	eb18 0005 	adds.w	r0, r8, r5
 8003e02:	eb49 0106 	adc.w	r1, r9, r6
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	f04f 0600 	mov.w	r6, #0
 8003e10:	196b      	adds	r3, r5, r5
 8003e12:	eb46 0406 	adc.w	r4, r6, r6
 8003e16:	461a      	mov	r2, r3
 8003e18:	4623      	mov	r3, r4
 8003e1a:	f7fc fe79 	bl	8000b10 <__aeabi_uldivmod>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	460c      	mov	r4, r1
 8003e22:	461a      	mov	r2, r3
 8003e24:	4ba5      	ldr	r3, [pc, #660]	; (80040bc <UART_SetConfig+0x384>)
 8003e26:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	461d      	mov	r5, r3
 8003e34:	f04f 0600 	mov.w	r6, #0
 8003e38:	46a9      	mov	r9, r5
 8003e3a:	46b2      	mov	sl, r6
 8003e3c:	eb19 0309 	adds.w	r3, r9, r9
 8003e40:	eb4a 040a 	adc.w	r4, sl, sl
 8003e44:	4699      	mov	r9, r3
 8003e46:	46a2      	mov	sl, r4
 8003e48:	eb19 0905 	adds.w	r9, r9, r5
 8003e4c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e50:	f04f 0100 	mov.w	r1, #0
 8003e54:	f04f 0200 	mov.w	r2, #0
 8003e58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e5c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e60:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e64:	4689      	mov	r9, r1
 8003e66:	4692      	mov	sl, r2
 8003e68:	eb19 0005 	adds.w	r0, r9, r5
 8003e6c:	eb4a 0106 	adc.w	r1, sl, r6
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	461d      	mov	r5, r3
 8003e76:	f04f 0600 	mov.w	r6, #0
 8003e7a:	196b      	adds	r3, r5, r5
 8003e7c:	eb46 0406 	adc.w	r4, r6, r6
 8003e80:	461a      	mov	r2, r3
 8003e82:	4623      	mov	r3, r4
 8003e84:	f7fc fe44 	bl	8000b10 <__aeabi_uldivmod>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	460c      	mov	r4, r1
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4b8b      	ldr	r3, [pc, #556]	; (80040bc <UART_SetConfig+0x384>)
 8003e90:	fba3 1302 	umull	r1, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	2164      	movs	r1, #100	; 0x64
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	3332      	adds	r3, #50	; 0x32
 8003ea2:	4a86      	ldr	r2, [pc, #536]	; (80040bc <UART_SetConfig+0x384>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eb0:	4498      	add	r8, r3
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	461d      	mov	r5, r3
 8003eb6:	f04f 0600 	mov.w	r6, #0
 8003eba:	46a9      	mov	r9, r5
 8003ebc:	46b2      	mov	sl, r6
 8003ebe:	eb19 0309 	adds.w	r3, r9, r9
 8003ec2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ec6:	4699      	mov	r9, r3
 8003ec8:	46a2      	mov	sl, r4
 8003eca:	eb19 0905 	adds.w	r9, r9, r5
 8003ece:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ede:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ee2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ee6:	4689      	mov	r9, r1
 8003ee8:	4692      	mov	sl, r2
 8003eea:	eb19 0005 	adds.w	r0, r9, r5
 8003eee:	eb4a 0106 	adc.w	r1, sl, r6
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	461d      	mov	r5, r3
 8003ef8:	f04f 0600 	mov.w	r6, #0
 8003efc:	196b      	adds	r3, r5, r5
 8003efe:	eb46 0406 	adc.w	r4, r6, r6
 8003f02:	461a      	mov	r2, r3
 8003f04:	4623      	mov	r3, r4
 8003f06:	f7fc fe03 	bl	8000b10 <__aeabi_uldivmod>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b6a      	ldr	r3, [pc, #424]	; (80040bc <UART_SetConfig+0x384>)
 8003f12:	fba3 1302 	umull	r1, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2164      	movs	r1, #100	; 0x64
 8003f1a:	fb01 f303 	mul.w	r3, r1, r3
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	3332      	adds	r3, #50	; 0x32
 8003f24:	4a65      	ldr	r2, [pc, #404]	; (80040bc <UART_SetConfig+0x384>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	f003 0207 	and.w	r2, r3, #7
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4442      	add	r2, r8
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	e26f      	b.n	800441a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f3a:	f7ff fbf3 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 8003f3e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	461d      	mov	r5, r3
 8003f44:	f04f 0600 	mov.w	r6, #0
 8003f48:	46a8      	mov	r8, r5
 8003f4a:	46b1      	mov	r9, r6
 8003f4c:	eb18 0308 	adds.w	r3, r8, r8
 8003f50:	eb49 0409 	adc.w	r4, r9, r9
 8003f54:	4698      	mov	r8, r3
 8003f56:	46a1      	mov	r9, r4
 8003f58:	eb18 0805 	adds.w	r8, r8, r5
 8003f5c:	eb49 0906 	adc.w	r9, r9, r6
 8003f60:	f04f 0100 	mov.w	r1, #0
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f6c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f70:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f74:	4688      	mov	r8, r1
 8003f76:	4691      	mov	r9, r2
 8003f78:	eb18 0005 	adds.w	r0, r8, r5
 8003f7c:	eb49 0106 	adc.w	r1, r9, r6
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	461d      	mov	r5, r3
 8003f86:	f04f 0600 	mov.w	r6, #0
 8003f8a:	196b      	adds	r3, r5, r5
 8003f8c:	eb46 0406 	adc.w	r4, r6, r6
 8003f90:	461a      	mov	r2, r3
 8003f92:	4623      	mov	r3, r4
 8003f94:	f7fc fdbc 	bl	8000b10 <__aeabi_uldivmod>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	4b47      	ldr	r3, [pc, #284]	; (80040bc <UART_SetConfig+0x384>)
 8003fa0:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa4:	095b      	lsrs	r3, r3, #5
 8003fa6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	461d      	mov	r5, r3
 8003fae:	f04f 0600 	mov.w	r6, #0
 8003fb2:	46a9      	mov	r9, r5
 8003fb4:	46b2      	mov	sl, r6
 8003fb6:	eb19 0309 	adds.w	r3, r9, r9
 8003fba:	eb4a 040a 	adc.w	r4, sl, sl
 8003fbe:	4699      	mov	r9, r3
 8003fc0:	46a2      	mov	sl, r4
 8003fc2:	eb19 0905 	adds.w	r9, r9, r5
 8003fc6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fca:	f04f 0100 	mov.w	r1, #0
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fda:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fde:	4689      	mov	r9, r1
 8003fe0:	4692      	mov	sl, r2
 8003fe2:	eb19 0005 	adds.w	r0, r9, r5
 8003fe6:	eb4a 0106 	adc.w	r1, sl, r6
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	461d      	mov	r5, r3
 8003ff0:	f04f 0600 	mov.w	r6, #0
 8003ff4:	196b      	adds	r3, r5, r5
 8003ff6:	eb46 0406 	adc.w	r4, r6, r6
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	f7fc fd87 	bl	8000b10 <__aeabi_uldivmod>
 8004002:	4603      	mov	r3, r0
 8004004:	460c      	mov	r4, r1
 8004006:	461a      	mov	r2, r3
 8004008:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <UART_SetConfig+0x384>)
 800400a:	fba3 1302 	umull	r1, r3, r3, r2
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	2164      	movs	r1, #100	; 0x64
 8004012:	fb01 f303 	mul.w	r3, r1, r3
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	3332      	adds	r3, #50	; 0x32
 800401c:	4a27      	ldr	r2, [pc, #156]	; (80040bc <UART_SetConfig+0x384>)
 800401e:	fba2 2303 	umull	r2, r3, r2, r3
 8004022:	095b      	lsrs	r3, r3, #5
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800402a:	4498      	add	r8, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	461d      	mov	r5, r3
 8004030:	f04f 0600 	mov.w	r6, #0
 8004034:	46a9      	mov	r9, r5
 8004036:	46b2      	mov	sl, r6
 8004038:	eb19 0309 	adds.w	r3, r9, r9
 800403c:	eb4a 040a 	adc.w	r4, sl, sl
 8004040:	4699      	mov	r9, r3
 8004042:	46a2      	mov	sl, r4
 8004044:	eb19 0905 	adds.w	r9, r9, r5
 8004048:	eb4a 0a06 	adc.w	sl, sl, r6
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004058:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004060:	4689      	mov	r9, r1
 8004062:	4692      	mov	sl, r2
 8004064:	eb19 0005 	adds.w	r0, r9, r5
 8004068:	eb4a 0106 	adc.w	r1, sl, r6
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	461d      	mov	r5, r3
 8004072:	f04f 0600 	mov.w	r6, #0
 8004076:	196b      	adds	r3, r5, r5
 8004078:	eb46 0406 	adc.w	r4, r6, r6
 800407c:	461a      	mov	r2, r3
 800407e:	4623      	mov	r3, r4
 8004080:	f7fc fd46 	bl	8000b10 <__aeabi_uldivmod>
 8004084:	4603      	mov	r3, r0
 8004086:	460c      	mov	r4, r1
 8004088:	461a      	mov	r2, r3
 800408a:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <UART_SetConfig+0x384>)
 800408c:	fba3 1302 	umull	r1, r3, r3, r2
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	2164      	movs	r1, #100	; 0x64
 8004094:	fb01 f303 	mul.w	r3, r1, r3
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	3332      	adds	r3, #50	; 0x32
 800409e:	4a07      	ldr	r2, [pc, #28]	; (80040bc <UART_SetConfig+0x384>)
 80040a0:	fba2 2303 	umull	r2, r3, r2, r3
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	f003 0207 	and.w	r2, r3, #7
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4442      	add	r2, r8
 80040b0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80040b2:	e1b2      	b.n	800441a <UART_SetConfig+0x6e2>
 80040b4:	40011000 	.word	0x40011000
 80040b8:	40011400 	.word	0x40011400
 80040bc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4ad7      	ldr	r2, [pc, #860]	; (8004424 <UART_SetConfig+0x6ec>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d005      	beq.n	80040d6 <UART_SetConfig+0x39e>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4ad6      	ldr	r2, [pc, #856]	; (8004428 <UART_SetConfig+0x6f0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	f040 80d1 	bne.w	8004278 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80040d6:	f7ff fb39 	bl	800374c <HAL_RCC_GetPCLK2Freq>
 80040da:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	469a      	mov	sl, r3
 80040e0:	f04f 0b00 	mov.w	fp, #0
 80040e4:	46d0      	mov	r8, sl
 80040e6:	46d9      	mov	r9, fp
 80040e8:	eb18 0308 	adds.w	r3, r8, r8
 80040ec:	eb49 0409 	adc.w	r4, r9, r9
 80040f0:	4698      	mov	r8, r3
 80040f2:	46a1      	mov	r9, r4
 80040f4:	eb18 080a 	adds.w	r8, r8, sl
 80040f8:	eb49 090b 	adc.w	r9, r9, fp
 80040fc:	f04f 0100 	mov.w	r1, #0
 8004100:	f04f 0200 	mov.w	r2, #0
 8004104:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004108:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800410c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004110:	4688      	mov	r8, r1
 8004112:	4691      	mov	r9, r2
 8004114:	eb1a 0508 	adds.w	r5, sl, r8
 8004118:	eb4b 0609 	adc.w	r6, fp, r9
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4619      	mov	r1, r3
 8004122:	f04f 0200 	mov.w	r2, #0
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	f04f 0400 	mov.w	r4, #0
 800412e:	0094      	lsls	r4, r2, #2
 8004130:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004134:	008b      	lsls	r3, r1, #2
 8004136:	461a      	mov	r2, r3
 8004138:	4623      	mov	r3, r4
 800413a:	4628      	mov	r0, r5
 800413c:	4631      	mov	r1, r6
 800413e:	f7fc fce7 	bl	8000b10 <__aeabi_uldivmod>
 8004142:	4603      	mov	r3, r0
 8004144:	460c      	mov	r4, r1
 8004146:	461a      	mov	r2, r3
 8004148:	4bb8      	ldr	r3, [pc, #736]	; (800442c <UART_SetConfig+0x6f4>)
 800414a:	fba3 2302 	umull	r2, r3, r3, r2
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	469b      	mov	fp, r3
 8004158:	f04f 0c00 	mov.w	ip, #0
 800415c:	46d9      	mov	r9, fp
 800415e:	46e2      	mov	sl, ip
 8004160:	eb19 0309 	adds.w	r3, r9, r9
 8004164:	eb4a 040a 	adc.w	r4, sl, sl
 8004168:	4699      	mov	r9, r3
 800416a:	46a2      	mov	sl, r4
 800416c:	eb19 090b 	adds.w	r9, r9, fp
 8004170:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004180:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004184:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004188:	4689      	mov	r9, r1
 800418a:	4692      	mov	sl, r2
 800418c:	eb1b 0509 	adds.w	r5, fp, r9
 8004190:	eb4c 060a 	adc.w	r6, ip, sl
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4619      	mov	r1, r3
 800419a:	f04f 0200 	mov.w	r2, #0
 800419e:	f04f 0300 	mov.w	r3, #0
 80041a2:	f04f 0400 	mov.w	r4, #0
 80041a6:	0094      	lsls	r4, r2, #2
 80041a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041ac:	008b      	lsls	r3, r1, #2
 80041ae:	461a      	mov	r2, r3
 80041b0:	4623      	mov	r3, r4
 80041b2:	4628      	mov	r0, r5
 80041b4:	4631      	mov	r1, r6
 80041b6:	f7fc fcab 	bl	8000b10 <__aeabi_uldivmod>
 80041ba:	4603      	mov	r3, r0
 80041bc:	460c      	mov	r4, r1
 80041be:	461a      	mov	r2, r3
 80041c0:	4b9a      	ldr	r3, [pc, #616]	; (800442c <UART_SetConfig+0x6f4>)
 80041c2:	fba3 1302 	umull	r1, r3, r3, r2
 80041c6:	095b      	lsrs	r3, r3, #5
 80041c8:	2164      	movs	r1, #100	; 0x64
 80041ca:	fb01 f303 	mul.w	r3, r1, r3
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	011b      	lsls	r3, r3, #4
 80041d2:	3332      	adds	r3, #50	; 0x32
 80041d4:	4a95      	ldr	r2, [pc, #596]	; (800442c <UART_SetConfig+0x6f4>)
 80041d6:	fba2 2303 	umull	r2, r3, r2, r3
 80041da:	095b      	lsrs	r3, r3, #5
 80041dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e0:	4498      	add	r8, r3
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	469b      	mov	fp, r3
 80041e6:	f04f 0c00 	mov.w	ip, #0
 80041ea:	46d9      	mov	r9, fp
 80041ec:	46e2      	mov	sl, ip
 80041ee:	eb19 0309 	adds.w	r3, r9, r9
 80041f2:	eb4a 040a 	adc.w	r4, sl, sl
 80041f6:	4699      	mov	r9, r3
 80041f8:	46a2      	mov	sl, r4
 80041fa:	eb19 090b 	adds.w	r9, r9, fp
 80041fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004202:	f04f 0100 	mov.w	r1, #0
 8004206:	f04f 0200 	mov.w	r2, #0
 800420a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800420e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004212:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004216:	4689      	mov	r9, r1
 8004218:	4692      	mov	sl, r2
 800421a:	eb1b 0509 	adds.w	r5, fp, r9
 800421e:	eb4c 060a 	adc.w	r6, ip, sl
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4619      	mov	r1, r3
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	f04f 0300 	mov.w	r3, #0
 8004230:	f04f 0400 	mov.w	r4, #0
 8004234:	0094      	lsls	r4, r2, #2
 8004236:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800423a:	008b      	lsls	r3, r1, #2
 800423c:	461a      	mov	r2, r3
 800423e:	4623      	mov	r3, r4
 8004240:	4628      	mov	r0, r5
 8004242:	4631      	mov	r1, r6
 8004244:	f7fc fc64 	bl	8000b10 <__aeabi_uldivmod>
 8004248:	4603      	mov	r3, r0
 800424a:	460c      	mov	r4, r1
 800424c:	461a      	mov	r2, r3
 800424e:	4b77      	ldr	r3, [pc, #476]	; (800442c <UART_SetConfig+0x6f4>)
 8004250:	fba3 1302 	umull	r1, r3, r3, r2
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	2164      	movs	r1, #100	; 0x64
 8004258:	fb01 f303 	mul.w	r3, r1, r3
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	3332      	adds	r3, #50	; 0x32
 8004262:	4a72      	ldr	r2, [pc, #456]	; (800442c <UART_SetConfig+0x6f4>)
 8004264:	fba2 2303 	umull	r2, r3, r2, r3
 8004268:	095b      	lsrs	r3, r3, #5
 800426a:	f003 020f 	and.w	r2, r3, #15
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4442      	add	r2, r8
 8004274:	609a      	str	r2, [r3, #8]
 8004276:	e0d0      	b.n	800441a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004278:	f7ff fa54 	bl	8003724 <HAL_RCC_GetPCLK1Freq>
 800427c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	469a      	mov	sl, r3
 8004282:	f04f 0b00 	mov.w	fp, #0
 8004286:	46d0      	mov	r8, sl
 8004288:	46d9      	mov	r9, fp
 800428a:	eb18 0308 	adds.w	r3, r8, r8
 800428e:	eb49 0409 	adc.w	r4, r9, r9
 8004292:	4698      	mov	r8, r3
 8004294:	46a1      	mov	r9, r4
 8004296:	eb18 080a 	adds.w	r8, r8, sl
 800429a:	eb49 090b 	adc.w	r9, r9, fp
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80042aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80042ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80042b2:	4688      	mov	r8, r1
 80042b4:	4691      	mov	r9, r2
 80042b6:	eb1a 0508 	adds.w	r5, sl, r8
 80042ba:	eb4b 0609 	adc.w	r6, fp, r9
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	4619      	mov	r1, r3
 80042c4:	f04f 0200 	mov.w	r2, #0
 80042c8:	f04f 0300 	mov.w	r3, #0
 80042cc:	f04f 0400 	mov.w	r4, #0
 80042d0:	0094      	lsls	r4, r2, #2
 80042d2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042d6:	008b      	lsls	r3, r1, #2
 80042d8:	461a      	mov	r2, r3
 80042da:	4623      	mov	r3, r4
 80042dc:	4628      	mov	r0, r5
 80042de:	4631      	mov	r1, r6
 80042e0:	f7fc fc16 	bl	8000b10 <__aeabi_uldivmod>
 80042e4:	4603      	mov	r3, r0
 80042e6:	460c      	mov	r4, r1
 80042e8:	461a      	mov	r2, r3
 80042ea:	4b50      	ldr	r3, [pc, #320]	; (800442c <UART_SetConfig+0x6f4>)
 80042ec:	fba3 2302 	umull	r2, r3, r3, r2
 80042f0:	095b      	lsrs	r3, r3, #5
 80042f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	469b      	mov	fp, r3
 80042fa:	f04f 0c00 	mov.w	ip, #0
 80042fe:	46d9      	mov	r9, fp
 8004300:	46e2      	mov	sl, ip
 8004302:	eb19 0309 	adds.w	r3, r9, r9
 8004306:	eb4a 040a 	adc.w	r4, sl, sl
 800430a:	4699      	mov	r9, r3
 800430c:	46a2      	mov	sl, r4
 800430e:	eb19 090b 	adds.w	r9, r9, fp
 8004312:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004316:	f04f 0100 	mov.w	r1, #0
 800431a:	f04f 0200 	mov.w	r2, #0
 800431e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004322:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004326:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800432a:	4689      	mov	r9, r1
 800432c:	4692      	mov	sl, r2
 800432e:	eb1b 0509 	adds.w	r5, fp, r9
 8004332:	eb4c 060a 	adc.w	r6, ip, sl
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	4619      	mov	r1, r3
 800433c:	f04f 0200 	mov.w	r2, #0
 8004340:	f04f 0300 	mov.w	r3, #0
 8004344:	f04f 0400 	mov.w	r4, #0
 8004348:	0094      	lsls	r4, r2, #2
 800434a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800434e:	008b      	lsls	r3, r1, #2
 8004350:	461a      	mov	r2, r3
 8004352:	4623      	mov	r3, r4
 8004354:	4628      	mov	r0, r5
 8004356:	4631      	mov	r1, r6
 8004358:	f7fc fbda 	bl	8000b10 <__aeabi_uldivmod>
 800435c:	4603      	mov	r3, r0
 800435e:	460c      	mov	r4, r1
 8004360:	461a      	mov	r2, r3
 8004362:	4b32      	ldr	r3, [pc, #200]	; (800442c <UART_SetConfig+0x6f4>)
 8004364:	fba3 1302 	umull	r1, r3, r3, r2
 8004368:	095b      	lsrs	r3, r3, #5
 800436a:	2164      	movs	r1, #100	; 0x64
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	3332      	adds	r3, #50	; 0x32
 8004376:	4a2d      	ldr	r2, [pc, #180]	; (800442c <UART_SetConfig+0x6f4>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004382:	4498      	add	r8, r3
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	469b      	mov	fp, r3
 8004388:	f04f 0c00 	mov.w	ip, #0
 800438c:	46d9      	mov	r9, fp
 800438e:	46e2      	mov	sl, ip
 8004390:	eb19 0309 	adds.w	r3, r9, r9
 8004394:	eb4a 040a 	adc.w	r4, sl, sl
 8004398:	4699      	mov	r9, r3
 800439a:	46a2      	mov	sl, r4
 800439c:	eb19 090b 	adds.w	r9, r9, fp
 80043a0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80043a4:	f04f 0100 	mov.w	r1, #0
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80043b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80043b8:	4689      	mov	r9, r1
 80043ba:	4692      	mov	sl, r2
 80043bc:	eb1b 0509 	adds.w	r5, fp, r9
 80043c0:	eb4c 060a 	adc.w	r6, ip, sl
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	4619      	mov	r1, r3
 80043ca:	f04f 0200 	mov.w	r2, #0
 80043ce:	f04f 0300 	mov.w	r3, #0
 80043d2:	f04f 0400 	mov.w	r4, #0
 80043d6:	0094      	lsls	r4, r2, #2
 80043d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043dc:	008b      	lsls	r3, r1, #2
 80043de:	461a      	mov	r2, r3
 80043e0:	4623      	mov	r3, r4
 80043e2:	4628      	mov	r0, r5
 80043e4:	4631      	mov	r1, r6
 80043e6:	f7fc fb93 	bl	8000b10 <__aeabi_uldivmod>
 80043ea:	4603      	mov	r3, r0
 80043ec:	460c      	mov	r4, r1
 80043ee:	461a      	mov	r2, r3
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <UART_SetConfig+0x6f4>)
 80043f2:	fba3 1302 	umull	r1, r3, r3, r2
 80043f6:	095b      	lsrs	r3, r3, #5
 80043f8:	2164      	movs	r1, #100	; 0x64
 80043fa:	fb01 f303 	mul.w	r3, r1, r3
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	3332      	adds	r3, #50	; 0x32
 8004404:	4a09      	ldr	r2, [pc, #36]	; (800442c <UART_SetConfig+0x6f4>)
 8004406:	fba2 2303 	umull	r2, r3, r2, r3
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	f003 020f 	and.w	r2, r3, #15
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4442      	add	r2, r8
 8004416:	609a      	str	r2, [r3, #8]
}
 8004418:	e7ff      	b.n	800441a <UART_SetConfig+0x6e2>
 800441a:	bf00      	nop
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004424:	40011000 	.word	0x40011000
 8004428:	40011400 	.word	0x40011400
 800442c:	51eb851f 	.word	0x51eb851f

08004430 <__errno>:
 8004430:	4b01      	ldr	r3, [pc, #4]	; (8004438 <__errno+0x8>)
 8004432:	6818      	ldr	r0, [r3, #0]
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	2000000c 	.word	0x2000000c

0800443c <__libc_init_array>:
 800443c:	b570      	push	{r4, r5, r6, lr}
 800443e:	4e0d      	ldr	r6, [pc, #52]	; (8004474 <__libc_init_array+0x38>)
 8004440:	4c0d      	ldr	r4, [pc, #52]	; (8004478 <__libc_init_array+0x3c>)
 8004442:	1ba4      	subs	r4, r4, r6
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	2500      	movs	r5, #0
 8004448:	42a5      	cmp	r5, r4
 800444a:	d109      	bne.n	8004460 <__libc_init_array+0x24>
 800444c:	4e0b      	ldr	r6, [pc, #44]	; (800447c <__libc_init_array+0x40>)
 800444e:	4c0c      	ldr	r4, [pc, #48]	; (8004480 <__libc_init_array+0x44>)
 8004450:	f001 fd44 	bl	8005edc <_init>
 8004454:	1ba4      	subs	r4, r4, r6
 8004456:	10a4      	asrs	r4, r4, #2
 8004458:	2500      	movs	r5, #0
 800445a:	42a5      	cmp	r5, r4
 800445c:	d105      	bne.n	800446a <__libc_init_array+0x2e>
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004464:	4798      	blx	r3
 8004466:	3501      	adds	r5, #1
 8004468:	e7ee      	b.n	8004448 <__libc_init_array+0xc>
 800446a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800446e:	4798      	blx	r3
 8004470:	3501      	adds	r5, #1
 8004472:	e7f2      	b.n	800445a <__libc_init_array+0x1e>
 8004474:	080061a0 	.word	0x080061a0
 8004478:	080061a0 	.word	0x080061a0
 800447c:	080061a0 	.word	0x080061a0
 8004480:	080061a4 	.word	0x080061a4

08004484 <memset>:
 8004484:	4402      	add	r2, r0
 8004486:	4603      	mov	r3, r0
 8004488:	4293      	cmp	r3, r2
 800448a:	d100      	bne.n	800448e <memset+0xa>
 800448c:	4770      	bx	lr
 800448e:	f803 1b01 	strb.w	r1, [r3], #1
 8004492:	e7f9      	b.n	8004488 <memset+0x4>

08004494 <__cvt>:
 8004494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004498:	ec55 4b10 	vmov	r4, r5, d0
 800449c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800449e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044a2:	2d00      	cmp	r5, #0
 80044a4:	460e      	mov	r6, r1
 80044a6:	4691      	mov	r9, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	bfb8      	it	lt
 80044ac:	4622      	movlt	r2, r4
 80044ae:	462b      	mov	r3, r5
 80044b0:	f027 0720 	bic.w	r7, r7, #32
 80044b4:	bfbb      	ittet	lt
 80044b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044ba:	461d      	movlt	r5, r3
 80044bc:	2300      	movge	r3, #0
 80044be:	232d      	movlt	r3, #45	; 0x2d
 80044c0:	bfb8      	it	lt
 80044c2:	4614      	movlt	r4, r2
 80044c4:	2f46      	cmp	r7, #70	; 0x46
 80044c6:	700b      	strb	r3, [r1, #0]
 80044c8:	d004      	beq.n	80044d4 <__cvt+0x40>
 80044ca:	2f45      	cmp	r7, #69	; 0x45
 80044cc:	d100      	bne.n	80044d0 <__cvt+0x3c>
 80044ce:	3601      	adds	r6, #1
 80044d0:	2102      	movs	r1, #2
 80044d2:	e000      	b.n	80044d6 <__cvt+0x42>
 80044d4:	2103      	movs	r1, #3
 80044d6:	ab03      	add	r3, sp, #12
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	ab02      	add	r3, sp, #8
 80044dc:	9300      	str	r3, [sp, #0]
 80044de:	4632      	mov	r2, r6
 80044e0:	4653      	mov	r3, sl
 80044e2:	ec45 4b10 	vmov	d0, r4, r5
 80044e6:	f000 fbab 	bl	8004c40 <_dtoa_r>
 80044ea:	2f47      	cmp	r7, #71	; 0x47
 80044ec:	4680      	mov	r8, r0
 80044ee:	d102      	bne.n	80044f6 <__cvt+0x62>
 80044f0:	f019 0f01 	tst.w	r9, #1
 80044f4:	d026      	beq.n	8004544 <__cvt+0xb0>
 80044f6:	2f46      	cmp	r7, #70	; 0x46
 80044f8:	eb08 0906 	add.w	r9, r8, r6
 80044fc:	d111      	bne.n	8004522 <__cvt+0x8e>
 80044fe:	f898 3000 	ldrb.w	r3, [r8]
 8004502:	2b30      	cmp	r3, #48	; 0x30
 8004504:	d10a      	bne.n	800451c <__cvt+0x88>
 8004506:	2200      	movs	r2, #0
 8004508:	2300      	movs	r3, #0
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f7fc fa8f 	bl	8000a30 <__aeabi_dcmpeq>
 8004512:	b918      	cbnz	r0, 800451c <__cvt+0x88>
 8004514:	f1c6 0601 	rsb	r6, r6, #1
 8004518:	f8ca 6000 	str.w	r6, [sl]
 800451c:	f8da 3000 	ldr.w	r3, [sl]
 8004520:	4499      	add	r9, r3
 8004522:	2200      	movs	r2, #0
 8004524:	2300      	movs	r3, #0
 8004526:	4620      	mov	r0, r4
 8004528:	4629      	mov	r1, r5
 800452a:	f7fc fa81 	bl	8000a30 <__aeabi_dcmpeq>
 800452e:	b938      	cbnz	r0, 8004540 <__cvt+0xac>
 8004530:	2230      	movs	r2, #48	; 0x30
 8004532:	9b03      	ldr	r3, [sp, #12]
 8004534:	454b      	cmp	r3, r9
 8004536:	d205      	bcs.n	8004544 <__cvt+0xb0>
 8004538:	1c59      	adds	r1, r3, #1
 800453a:	9103      	str	r1, [sp, #12]
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e7f8      	b.n	8004532 <__cvt+0x9e>
 8004540:	f8cd 900c 	str.w	r9, [sp, #12]
 8004544:	9b03      	ldr	r3, [sp, #12]
 8004546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004548:	eba3 0308 	sub.w	r3, r3, r8
 800454c:	4640      	mov	r0, r8
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	b004      	add	sp, #16
 8004552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004556 <__exponent>:
 8004556:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004558:	2900      	cmp	r1, #0
 800455a:	4604      	mov	r4, r0
 800455c:	bfba      	itte	lt
 800455e:	4249      	neglt	r1, r1
 8004560:	232d      	movlt	r3, #45	; 0x2d
 8004562:	232b      	movge	r3, #43	; 0x2b
 8004564:	2909      	cmp	r1, #9
 8004566:	f804 2b02 	strb.w	r2, [r4], #2
 800456a:	7043      	strb	r3, [r0, #1]
 800456c:	dd20      	ble.n	80045b0 <__exponent+0x5a>
 800456e:	f10d 0307 	add.w	r3, sp, #7
 8004572:	461f      	mov	r7, r3
 8004574:	260a      	movs	r6, #10
 8004576:	fb91 f5f6 	sdiv	r5, r1, r6
 800457a:	fb06 1115 	mls	r1, r6, r5, r1
 800457e:	3130      	adds	r1, #48	; 0x30
 8004580:	2d09      	cmp	r5, #9
 8004582:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004586:	f103 32ff 	add.w	r2, r3, #4294967295
 800458a:	4629      	mov	r1, r5
 800458c:	dc09      	bgt.n	80045a2 <__exponent+0x4c>
 800458e:	3130      	adds	r1, #48	; 0x30
 8004590:	3b02      	subs	r3, #2
 8004592:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004596:	42bb      	cmp	r3, r7
 8004598:	4622      	mov	r2, r4
 800459a:	d304      	bcc.n	80045a6 <__exponent+0x50>
 800459c:	1a10      	subs	r0, r2, r0
 800459e:	b003      	add	sp, #12
 80045a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a2:	4613      	mov	r3, r2
 80045a4:	e7e7      	b.n	8004576 <__exponent+0x20>
 80045a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045aa:	f804 2b01 	strb.w	r2, [r4], #1
 80045ae:	e7f2      	b.n	8004596 <__exponent+0x40>
 80045b0:	2330      	movs	r3, #48	; 0x30
 80045b2:	4419      	add	r1, r3
 80045b4:	7083      	strb	r3, [r0, #2]
 80045b6:	1d02      	adds	r2, r0, #4
 80045b8:	70c1      	strb	r1, [r0, #3]
 80045ba:	e7ef      	b.n	800459c <__exponent+0x46>

080045bc <_printf_float>:
 80045bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045c0:	b08d      	sub	sp, #52	; 0x34
 80045c2:	460c      	mov	r4, r1
 80045c4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80045c8:	4616      	mov	r6, r2
 80045ca:	461f      	mov	r7, r3
 80045cc:	4605      	mov	r5, r0
 80045ce:	f001 f8ef 	bl	80057b0 <_localeconv_r>
 80045d2:	6803      	ldr	r3, [r0, #0]
 80045d4:	9304      	str	r3, [sp, #16]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7fb fdfe 	bl	80001d8 <strlen>
 80045dc:	2300      	movs	r3, #0
 80045de:	930a      	str	r3, [sp, #40]	; 0x28
 80045e0:	f8d8 3000 	ldr.w	r3, [r8]
 80045e4:	9005      	str	r0, [sp, #20]
 80045e6:	3307      	adds	r3, #7
 80045e8:	f023 0307 	bic.w	r3, r3, #7
 80045ec:	f103 0208 	add.w	r2, r3, #8
 80045f0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80045f4:	f8d4 b000 	ldr.w	fp, [r4]
 80045f8:	f8c8 2000 	str.w	r2, [r8]
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004604:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004608:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800460c:	9307      	str	r3, [sp, #28]
 800460e:	f8cd 8018 	str.w	r8, [sp, #24]
 8004612:	f04f 32ff 	mov.w	r2, #4294967295
 8004616:	4ba7      	ldr	r3, [pc, #668]	; (80048b4 <_printf_float+0x2f8>)
 8004618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800461c:	f7fc fa3a 	bl	8000a94 <__aeabi_dcmpun>
 8004620:	bb70      	cbnz	r0, 8004680 <_printf_float+0xc4>
 8004622:	f04f 32ff 	mov.w	r2, #4294967295
 8004626:	4ba3      	ldr	r3, [pc, #652]	; (80048b4 <_printf_float+0x2f8>)
 8004628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800462c:	f7fc fa14 	bl	8000a58 <__aeabi_dcmple>
 8004630:	bb30      	cbnz	r0, 8004680 <_printf_float+0xc4>
 8004632:	2200      	movs	r2, #0
 8004634:	2300      	movs	r3, #0
 8004636:	4640      	mov	r0, r8
 8004638:	4649      	mov	r1, r9
 800463a:	f7fc fa03 	bl	8000a44 <__aeabi_dcmplt>
 800463e:	b110      	cbz	r0, 8004646 <_printf_float+0x8a>
 8004640:	232d      	movs	r3, #45	; 0x2d
 8004642:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004646:	4a9c      	ldr	r2, [pc, #624]	; (80048b8 <_printf_float+0x2fc>)
 8004648:	4b9c      	ldr	r3, [pc, #624]	; (80048bc <_printf_float+0x300>)
 800464a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800464e:	bf8c      	ite	hi
 8004650:	4690      	movhi	r8, r2
 8004652:	4698      	movls	r8, r3
 8004654:	2303      	movs	r3, #3
 8004656:	f02b 0204 	bic.w	r2, fp, #4
 800465a:	6123      	str	r3, [r4, #16]
 800465c:	6022      	str	r2, [r4, #0]
 800465e:	f04f 0900 	mov.w	r9, #0
 8004662:	9700      	str	r7, [sp, #0]
 8004664:	4633      	mov	r3, r6
 8004666:	aa0b      	add	r2, sp, #44	; 0x2c
 8004668:	4621      	mov	r1, r4
 800466a:	4628      	mov	r0, r5
 800466c:	f000 f9e6 	bl	8004a3c <_printf_common>
 8004670:	3001      	adds	r0, #1
 8004672:	f040 808d 	bne.w	8004790 <_printf_float+0x1d4>
 8004676:	f04f 30ff 	mov.w	r0, #4294967295
 800467a:	b00d      	add	sp, #52	; 0x34
 800467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004680:	4642      	mov	r2, r8
 8004682:	464b      	mov	r3, r9
 8004684:	4640      	mov	r0, r8
 8004686:	4649      	mov	r1, r9
 8004688:	f7fc fa04 	bl	8000a94 <__aeabi_dcmpun>
 800468c:	b110      	cbz	r0, 8004694 <_printf_float+0xd8>
 800468e:	4a8c      	ldr	r2, [pc, #560]	; (80048c0 <_printf_float+0x304>)
 8004690:	4b8c      	ldr	r3, [pc, #560]	; (80048c4 <_printf_float+0x308>)
 8004692:	e7da      	b.n	800464a <_printf_float+0x8e>
 8004694:	6861      	ldr	r1, [r4, #4]
 8004696:	1c4b      	adds	r3, r1, #1
 8004698:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800469c:	a80a      	add	r0, sp, #40	; 0x28
 800469e:	d13e      	bne.n	800471e <_printf_float+0x162>
 80046a0:	2306      	movs	r3, #6
 80046a2:	6063      	str	r3, [r4, #4]
 80046a4:	2300      	movs	r3, #0
 80046a6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80046aa:	ab09      	add	r3, sp, #36	; 0x24
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	ec49 8b10 	vmov	d0, r8, r9
 80046b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80046b6:	6022      	str	r2, [r4, #0]
 80046b8:	f8cd a004 	str.w	sl, [sp, #4]
 80046bc:	6861      	ldr	r1, [r4, #4]
 80046be:	4628      	mov	r0, r5
 80046c0:	f7ff fee8 	bl	8004494 <__cvt>
 80046c4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80046c8:	2b47      	cmp	r3, #71	; 0x47
 80046ca:	4680      	mov	r8, r0
 80046cc:	d109      	bne.n	80046e2 <_printf_float+0x126>
 80046ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d0:	1cd8      	adds	r0, r3, #3
 80046d2:	db02      	blt.n	80046da <_printf_float+0x11e>
 80046d4:	6862      	ldr	r2, [r4, #4]
 80046d6:	4293      	cmp	r3, r2
 80046d8:	dd47      	ble.n	800476a <_printf_float+0x1ae>
 80046da:	f1aa 0a02 	sub.w	sl, sl, #2
 80046de:	fa5f fa8a 	uxtb.w	sl, sl
 80046e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80046e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046e8:	d824      	bhi.n	8004734 <_printf_float+0x178>
 80046ea:	3901      	subs	r1, #1
 80046ec:	4652      	mov	r2, sl
 80046ee:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80046f2:	9109      	str	r1, [sp, #36]	; 0x24
 80046f4:	f7ff ff2f 	bl	8004556 <__exponent>
 80046f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046fa:	1813      	adds	r3, r2, r0
 80046fc:	2a01      	cmp	r2, #1
 80046fe:	4681      	mov	r9, r0
 8004700:	6123      	str	r3, [r4, #16]
 8004702:	dc02      	bgt.n	800470a <_printf_float+0x14e>
 8004704:	6822      	ldr	r2, [r4, #0]
 8004706:	07d1      	lsls	r1, r2, #31
 8004708:	d501      	bpl.n	800470e <_printf_float+0x152>
 800470a:	3301      	adds	r3, #1
 800470c:	6123      	str	r3, [r4, #16]
 800470e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004712:	2b00      	cmp	r3, #0
 8004714:	d0a5      	beq.n	8004662 <_printf_float+0xa6>
 8004716:	232d      	movs	r3, #45	; 0x2d
 8004718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800471c:	e7a1      	b.n	8004662 <_printf_float+0xa6>
 800471e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004722:	f000 8177 	beq.w	8004a14 <_printf_float+0x458>
 8004726:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800472a:	d1bb      	bne.n	80046a4 <_printf_float+0xe8>
 800472c:	2900      	cmp	r1, #0
 800472e:	d1b9      	bne.n	80046a4 <_printf_float+0xe8>
 8004730:	2301      	movs	r3, #1
 8004732:	e7b6      	b.n	80046a2 <_printf_float+0xe6>
 8004734:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004738:	d119      	bne.n	800476e <_printf_float+0x1b2>
 800473a:	2900      	cmp	r1, #0
 800473c:	6863      	ldr	r3, [r4, #4]
 800473e:	dd0c      	ble.n	800475a <_printf_float+0x19e>
 8004740:	6121      	str	r1, [r4, #16]
 8004742:	b913      	cbnz	r3, 800474a <_printf_float+0x18e>
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	07d2      	lsls	r2, r2, #31
 8004748:	d502      	bpl.n	8004750 <_printf_float+0x194>
 800474a:	3301      	adds	r3, #1
 800474c:	440b      	add	r3, r1
 800474e:	6123      	str	r3, [r4, #16]
 8004750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004752:	65a3      	str	r3, [r4, #88]	; 0x58
 8004754:	f04f 0900 	mov.w	r9, #0
 8004758:	e7d9      	b.n	800470e <_printf_float+0x152>
 800475a:	b913      	cbnz	r3, 8004762 <_printf_float+0x1a6>
 800475c:	6822      	ldr	r2, [r4, #0]
 800475e:	07d0      	lsls	r0, r2, #31
 8004760:	d501      	bpl.n	8004766 <_printf_float+0x1aa>
 8004762:	3302      	adds	r3, #2
 8004764:	e7f3      	b.n	800474e <_printf_float+0x192>
 8004766:	2301      	movs	r3, #1
 8004768:	e7f1      	b.n	800474e <_printf_float+0x192>
 800476a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800476e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004772:	4293      	cmp	r3, r2
 8004774:	db05      	blt.n	8004782 <_printf_float+0x1c6>
 8004776:	6822      	ldr	r2, [r4, #0]
 8004778:	6123      	str	r3, [r4, #16]
 800477a:	07d1      	lsls	r1, r2, #31
 800477c:	d5e8      	bpl.n	8004750 <_printf_float+0x194>
 800477e:	3301      	adds	r3, #1
 8004780:	e7e5      	b.n	800474e <_printf_float+0x192>
 8004782:	2b00      	cmp	r3, #0
 8004784:	bfd4      	ite	le
 8004786:	f1c3 0302 	rsble	r3, r3, #2
 800478a:	2301      	movgt	r3, #1
 800478c:	4413      	add	r3, r2
 800478e:	e7de      	b.n	800474e <_printf_float+0x192>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	055a      	lsls	r2, r3, #21
 8004794:	d407      	bmi.n	80047a6 <_printf_float+0x1ea>
 8004796:	6923      	ldr	r3, [r4, #16]
 8004798:	4642      	mov	r2, r8
 800479a:	4631      	mov	r1, r6
 800479c:	4628      	mov	r0, r5
 800479e:	47b8      	blx	r7
 80047a0:	3001      	adds	r0, #1
 80047a2:	d12b      	bne.n	80047fc <_printf_float+0x240>
 80047a4:	e767      	b.n	8004676 <_printf_float+0xba>
 80047a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80047aa:	f240 80dc 	bls.w	8004966 <_printf_float+0x3aa>
 80047ae:	2200      	movs	r2, #0
 80047b0:	2300      	movs	r3, #0
 80047b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047b6:	f7fc f93b 	bl	8000a30 <__aeabi_dcmpeq>
 80047ba:	2800      	cmp	r0, #0
 80047bc:	d033      	beq.n	8004826 <_printf_float+0x26a>
 80047be:	2301      	movs	r3, #1
 80047c0:	4a41      	ldr	r2, [pc, #260]	; (80048c8 <_printf_float+0x30c>)
 80047c2:	4631      	mov	r1, r6
 80047c4:	4628      	mov	r0, r5
 80047c6:	47b8      	blx	r7
 80047c8:	3001      	adds	r0, #1
 80047ca:	f43f af54 	beq.w	8004676 <_printf_float+0xba>
 80047ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d2:	429a      	cmp	r2, r3
 80047d4:	db02      	blt.n	80047dc <_printf_float+0x220>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	07d8      	lsls	r0, r3, #31
 80047da:	d50f      	bpl.n	80047fc <_printf_float+0x240>
 80047dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80047e0:	4631      	mov	r1, r6
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b8      	blx	r7
 80047e6:	3001      	adds	r0, #1
 80047e8:	f43f af45 	beq.w	8004676 <_printf_float+0xba>
 80047ec:	f04f 0800 	mov.w	r8, #0
 80047f0:	f104 091a 	add.w	r9, r4, #26
 80047f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047f6:	3b01      	subs	r3, #1
 80047f8:	4543      	cmp	r3, r8
 80047fa:	dc09      	bgt.n	8004810 <_printf_float+0x254>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	079b      	lsls	r3, r3, #30
 8004800:	f100 8103 	bmi.w	8004a0a <_printf_float+0x44e>
 8004804:	68e0      	ldr	r0, [r4, #12]
 8004806:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004808:	4298      	cmp	r0, r3
 800480a:	bfb8      	it	lt
 800480c:	4618      	movlt	r0, r3
 800480e:	e734      	b.n	800467a <_printf_float+0xbe>
 8004810:	2301      	movs	r3, #1
 8004812:	464a      	mov	r2, r9
 8004814:	4631      	mov	r1, r6
 8004816:	4628      	mov	r0, r5
 8004818:	47b8      	blx	r7
 800481a:	3001      	adds	r0, #1
 800481c:	f43f af2b 	beq.w	8004676 <_printf_float+0xba>
 8004820:	f108 0801 	add.w	r8, r8, #1
 8004824:	e7e6      	b.n	80047f4 <_printf_float+0x238>
 8004826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	dc2b      	bgt.n	8004884 <_printf_float+0x2c8>
 800482c:	2301      	movs	r3, #1
 800482e:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <_printf_float+0x30c>)
 8004830:	4631      	mov	r1, r6
 8004832:	4628      	mov	r0, r5
 8004834:	47b8      	blx	r7
 8004836:	3001      	adds	r0, #1
 8004838:	f43f af1d 	beq.w	8004676 <_printf_float+0xba>
 800483c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800483e:	b923      	cbnz	r3, 800484a <_printf_float+0x28e>
 8004840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004842:	b913      	cbnz	r3, 800484a <_printf_float+0x28e>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	07d9      	lsls	r1, r3, #31
 8004848:	d5d8      	bpl.n	80047fc <_printf_float+0x240>
 800484a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800484e:	4631      	mov	r1, r6
 8004850:	4628      	mov	r0, r5
 8004852:	47b8      	blx	r7
 8004854:	3001      	adds	r0, #1
 8004856:	f43f af0e 	beq.w	8004676 <_printf_float+0xba>
 800485a:	f04f 0900 	mov.w	r9, #0
 800485e:	f104 0a1a 	add.w	sl, r4, #26
 8004862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004864:	425b      	negs	r3, r3
 8004866:	454b      	cmp	r3, r9
 8004868:	dc01      	bgt.n	800486e <_printf_float+0x2b2>
 800486a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800486c:	e794      	b.n	8004798 <_printf_float+0x1dc>
 800486e:	2301      	movs	r3, #1
 8004870:	4652      	mov	r2, sl
 8004872:	4631      	mov	r1, r6
 8004874:	4628      	mov	r0, r5
 8004876:	47b8      	blx	r7
 8004878:	3001      	adds	r0, #1
 800487a:	f43f aefc 	beq.w	8004676 <_printf_float+0xba>
 800487e:	f109 0901 	add.w	r9, r9, #1
 8004882:	e7ee      	b.n	8004862 <_printf_float+0x2a6>
 8004884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004886:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004888:	429a      	cmp	r2, r3
 800488a:	bfa8      	it	ge
 800488c:	461a      	movge	r2, r3
 800488e:	2a00      	cmp	r2, #0
 8004890:	4691      	mov	r9, r2
 8004892:	dd07      	ble.n	80048a4 <_printf_float+0x2e8>
 8004894:	4613      	mov	r3, r2
 8004896:	4631      	mov	r1, r6
 8004898:	4642      	mov	r2, r8
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f aee9 	beq.w	8004676 <_printf_float+0xba>
 80048a4:	f104 031a 	add.w	r3, r4, #26
 80048a8:	f04f 0b00 	mov.w	fp, #0
 80048ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80048b0:	9306      	str	r3, [sp, #24]
 80048b2:	e015      	b.n	80048e0 <_printf_float+0x324>
 80048b4:	7fefffff 	.word	0x7fefffff
 80048b8:	08005f14 	.word	0x08005f14
 80048bc:	08005f10 	.word	0x08005f10
 80048c0:	08005f1c 	.word	0x08005f1c
 80048c4:	08005f18 	.word	0x08005f18
 80048c8:	08005f20 	.word	0x08005f20
 80048cc:	2301      	movs	r3, #1
 80048ce:	9a06      	ldr	r2, [sp, #24]
 80048d0:	4631      	mov	r1, r6
 80048d2:	4628      	mov	r0, r5
 80048d4:	47b8      	blx	r7
 80048d6:	3001      	adds	r0, #1
 80048d8:	f43f aecd 	beq.w	8004676 <_printf_float+0xba>
 80048dc:	f10b 0b01 	add.w	fp, fp, #1
 80048e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80048e4:	ebaa 0309 	sub.w	r3, sl, r9
 80048e8:	455b      	cmp	r3, fp
 80048ea:	dcef      	bgt.n	80048cc <_printf_float+0x310>
 80048ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048f0:	429a      	cmp	r2, r3
 80048f2:	44d0      	add	r8, sl
 80048f4:	db15      	blt.n	8004922 <_printf_float+0x366>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	07da      	lsls	r2, r3, #31
 80048fa:	d412      	bmi.n	8004922 <_printf_float+0x366>
 80048fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004900:	eba3 020a 	sub.w	r2, r3, sl
 8004904:	eba3 0a01 	sub.w	sl, r3, r1
 8004908:	4592      	cmp	sl, r2
 800490a:	bfa8      	it	ge
 800490c:	4692      	movge	sl, r2
 800490e:	f1ba 0f00 	cmp.w	sl, #0
 8004912:	dc0e      	bgt.n	8004932 <_printf_float+0x376>
 8004914:	f04f 0800 	mov.w	r8, #0
 8004918:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800491c:	f104 091a 	add.w	r9, r4, #26
 8004920:	e019      	b.n	8004956 <_printf_float+0x39a>
 8004922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004926:	4631      	mov	r1, r6
 8004928:	4628      	mov	r0, r5
 800492a:	47b8      	blx	r7
 800492c:	3001      	adds	r0, #1
 800492e:	d1e5      	bne.n	80048fc <_printf_float+0x340>
 8004930:	e6a1      	b.n	8004676 <_printf_float+0xba>
 8004932:	4653      	mov	r3, sl
 8004934:	4642      	mov	r2, r8
 8004936:	4631      	mov	r1, r6
 8004938:	4628      	mov	r0, r5
 800493a:	47b8      	blx	r7
 800493c:	3001      	adds	r0, #1
 800493e:	d1e9      	bne.n	8004914 <_printf_float+0x358>
 8004940:	e699      	b.n	8004676 <_printf_float+0xba>
 8004942:	2301      	movs	r3, #1
 8004944:	464a      	mov	r2, r9
 8004946:	4631      	mov	r1, r6
 8004948:	4628      	mov	r0, r5
 800494a:	47b8      	blx	r7
 800494c:	3001      	adds	r0, #1
 800494e:	f43f ae92 	beq.w	8004676 <_printf_float+0xba>
 8004952:	f108 0801 	add.w	r8, r8, #1
 8004956:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800495a:	1a9b      	subs	r3, r3, r2
 800495c:	eba3 030a 	sub.w	r3, r3, sl
 8004960:	4543      	cmp	r3, r8
 8004962:	dcee      	bgt.n	8004942 <_printf_float+0x386>
 8004964:	e74a      	b.n	80047fc <_printf_float+0x240>
 8004966:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004968:	2a01      	cmp	r2, #1
 800496a:	dc01      	bgt.n	8004970 <_printf_float+0x3b4>
 800496c:	07db      	lsls	r3, r3, #31
 800496e:	d53a      	bpl.n	80049e6 <_printf_float+0x42a>
 8004970:	2301      	movs	r3, #1
 8004972:	4642      	mov	r2, r8
 8004974:	4631      	mov	r1, r6
 8004976:	4628      	mov	r0, r5
 8004978:	47b8      	blx	r7
 800497a:	3001      	adds	r0, #1
 800497c:	f43f ae7b 	beq.w	8004676 <_printf_float+0xba>
 8004980:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004984:	4631      	mov	r1, r6
 8004986:	4628      	mov	r0, r5
 8004988:	47b8      	blx	r7
 800498a:	3001      	adds	r0, #1
 800498c:	f108 0801 	add.w	r8, r8, #1
 8004990:	f43f ae71 	beq.w	8004676 <_printf_float+0xba>
 8004994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004996:	2200      	movs	r2, #0
 8004998:	f103 3aff 	add.w	sl, r3, #4294967295
 800499c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049a0:	2300      	movs	r3, #0
 80049a2:	f7fc f845 	bl	8000a30 <__aeabi_dcmpeq>
 80049a6:	b9c8      	cbnz	r0, 80049dc <_printf_float+0x420>
 80049a8:	4653      	mov	r3, sl
 80049aa:	4642      	mov	r2, r8
 80049ac:	4631      	mov	r1, r6
 80049ae:	4628      	mov	r0, r5
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	d10e      	bne.n	80049d4 <_printf_float+0x418>
 80049b6:	e65e      	b.n	8004676 <_printf_float+0xba>
 80049b8:	2301      	movs	r3, #1
 80049ba:	4652      	mov	r2, sl
 80049bc:	4631      	mov	r1, r6
 80049be:	4628      	mov	r0, r5
 80049c0:	47b8      	blx	r7
 80049c2:	3001      	adds	r0, #1
 80049c4:	f43f ae57 	beq.w	8004676 <_printf_float+0xba>
 80049c8:	f108 0801 	add.w	r8, r8, #1
 80049cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	4543      	cmp	r3, r8
 80049d2:	dcf1      	bgt.n	80049b8 <_printf_float+0x3fc>
 80049d4:	464b      	mov	r3, r9
 80049d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80049da:	e6de      	b.n	800479a <_printf_float+0x1de>
 80049dc:	f04f 0800 	mov.w	r8, #0
 80049e0:	f104 0a1a 	add.w	sl, r4, #26
 80049e4:	e7f2      	b.n	80049cc <_printf_float+0x410>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e7df      	b.n	80049aa <_printf_float+0x3ee>
 80049ea:	2301      	movs	r3, #1
 80049ec:	464a      	mov	r2, r9
 80049ee:	4631      	mov	r1, r6
 80049f0:	4628      	mov	r0, r5
 80049f2:	47b8      	blx	r7
 80049f4:	3001      	adds	r0, #1
 80049f6:	f43f ae3e 	beq.w	8004676 <_printf_float+0xba>
 80049fa:	f108 0801 	add.w	r8, r8, #1
 80049fe:	68e3      	ldr	r3, [r4, #12]
 8004a00:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a02:	1a9b      	subs	r3, r3, r2
 8004a04:	4543      	cmp	r3, r8
 8004a06:	dcf0      	bgt.n	80049ea <_printf_float+0x42e>
 8004a08:	e6fc      	b.n	8004804 <_printf_float+0x248>
 8004a0a:	f04f 0800 	mov.w	r8, #0
 8004a0e:	f104 0919 	add.w	r9, r4, #25
 8004a12:	e7f4      	b.n	80049fe <_printf_float+0x442>
 8004a14:	2900      	cmp	r1, #0
 8004a16:	f43f ae8b 	beq.w	8004730 <_printf_float+0x174>
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004a20:	ab09      	add	r3, sp, #36	; 0x24
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	ec49 8b10 	vmov	d0, r8, r9
 8004a28:	6022      	str	r2, [r4, #0]
 8004a2a:	f8cd a004 	str.w	sl, [sp, #4]
 8004a2e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004a32:	4628      	mov	r0, r5
 8004a34:	f7ff fd2e 	bl	8004494 <__cvt>
 8004a38:	4680      	mov	r8, r0
 8004a3a:	e648      	b.n	80046ce <_printf_float+0x112>

08004a3c <_printf_common>:
 8004a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a40:	4691      	mov	r9, r2
 8004a42:	461f      	mov	r7, r3
 8004a44:	688a      	ldr	r2, [r1, #8]
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	bfb8      	it	lt
 8004a50:	4613      	movlt	r3, r2
 8004a52:	f8c9 3000 	str.w	r3, [r9]
 8004a56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a5a:	4606      	mov	r6, r0
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	b112      	cbz	r2, 8004a66 <_printf_common+0x2a>
 8004a60:	3301      	adds	r3, #1
 8004a62:	f8c9 3000 	str.w	r3, [r9]
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	0699      	lsls	r1, r3, #26
 8004a6a:	bf42      	ittt	mi
 8004a6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a70:	3302      	addmi	r3, #2
 8004a72:	f8c9 3000 	strmi.w	r3, [r9]
 8004a76:	6825      	ldr	r5, [r4, #0]
 8004a78:	f015 0506 	ands.w	r5, r5, #6
 8004a7c:	d107      	bne.n	8004a8e <_printf_common+0x52>
 8004a7e:	f104 0a19 	add.w	sl, r4, #25
 8004a82:	68e3      	ldr	r3, [r4, #12]
 8004a84:	f8d9 2000 	ldr.w	r2, [r9]
 8004a88:	1a9b      	subs	r3, r3, r2
 8004a8a:	42ab      	cmp	r3, r5
 8004a8c:	dc28      	bgt.n	8004ae0 <_printf_common+0xa4>
 8004a8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a92:	6822      	ldr	r2, [r4, #0]
 8004a94:	3300      	adds	r3, #0
 8004a96:	bf18      	it	ne
 8004a98:	2301      	movne	r3, #1
 8004a9a:	0692      	lsls	r2, r2, #26
 8004a9c:	d42d      	bmi.n	8004afa <_printf_common+0xbe>
 8004a9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aa2:	4639      	mov	r1, r7
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	47c0      	blx	r8
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d020      	beq.n	8004aee <_printf_common+0xb2>
 8004aac:	6823      	ldr	r3, [r4, #0]
 8004aae:	68e5      	ldr	r5, [r4, #12]
 8004ab0:	f8d9 2000 	ldr.w	r2, [r9]
 8004ab4:	f003 0306 	and.w	r3, r3, #6
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	bf08      	it	eq
 8004abc:	1aad      	subeq	r5, r5, r2
 8004abe:	68a3      	ldr	r3, [r4, #8]
 8004ac0:	6922      	ldr	r2, [r4, #16]
 8004ac2:	bf0c      	ite	eq
 8004ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ac8:	2500      	movne	r5, #0
 8004aca:	4293      	cmp	r3, r2
 8004acc:	bfc4      	itt	gt
 8004ace:	1a9b      	subgt	r3, r3, r2
 8004ad0:	18ed      	addgt	r5, r5, r3
 8004ad2:	f04f 0900 	mov.w	r9, #0
 8004ad6:	341a      	adds	r4, #26
 8004ad8:	454d      	cmp	r5, r9
 8004ada:	d11a      	bne.n	8004b12 <_printf_common+0xd6>
 8004adc:	2000      	movs	r0, #0
 8004ade:	e008      	b.n	8004af2 <_printf_common+0xb6>
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	4652      	mov	r2, sl
 8004ae4:	4639      	mov	r1, r7
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	47c0      	blx	r8
 8004aea:	3001      	adds	r0, #1
 8004aec:	d103      	bne.n	8004af6 <_printf_common+0xba>
 8004aee:	f04f 30ff 	mov.w	r0, #4294967295
 8004af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004af6:	3501      	adds	r5, #1
 8004af8:	e7c3      	b.n	8004a82 <_printf_common+0x46>
 8004afa:	18e1      	adds	r1, r4, r3
 8004afc:	1c5a      	adds	r2, r3, #1
 8004afe:	2030      	movs	r0, #48	; 0x30
 8004b00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b04:	4422      	add	r2, r4
 8004b06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b0e:	3302      	adds	r3, #2
 8004b10:	e7c5      	b.n	8004a9e <_printf_common+0x62>
 8004b12:	2301      	movs	r3, #1
 8004b14:	4622      	mov	r2, r4
 8004b16:	4639      	mov	r1, r7
 8004b18:	4630      	mov	r0, r6
 8004b1a:	47c0      	blx	r8
 8004b1c:	3001      	adds	r0, #1
 8004b1e:	d0e6      	beq.n	8004aee <_printf_common+0xb2>
 8004b20:	f109 0901 	add.w	r9, r9, #1
 8004b24:	e7d8      	b.n	8004ad8 <_printf_common+0x9c>

08004b26 <quorem>:
 8004b26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2a:	6903      	ldr	r3, [r0, #16]
 8004b2c:	690c      	ldr	r4, [r1, #16]
 8004b2e:	42a3      	cmp	r3, r4
 8004b30:	4680      	mov	r8, r0
 8004b32:	f2c0 8082 	blt.w	8004c3a <quorem+0x114>
 8004b36:	3c01      	subs	r4, #1
 8004b38:	f101 0714 	add.w	r7, r1, #20
 8004b3c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b40:	f100 0614 	add.w	r6, r0, #20
 8004b44:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b48:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b4c:	eb06 030c 	add.w	r3, r6, ip
 8004b50:	3501      	adds	r5, #1
 8004b52:	eb07 090c 	add.w	r9, r7, ip
 8004b56:	9301      	str	r3, [sp, #4]
 8004b58:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b5c:	b395      	cbz	r5, 8004bc4 <quorem+0x9e>
 8004b5e:	f04f 0a00 	mov.w	sl, #0
 8004b62:	4638      	mov	r0, r7
 8004b64:	46b6      	mov	lr, r6
 8004b66:	46d3      	mov	fp, sl
 8004b68:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b6c:	b293      	uxth	r3, r2
 8004b6e:	fb05 a303 	mla	r3, r5, r3, sl
 8004b72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	ebab 0303 	sub.w	r3, fp, r3
 8004b7c:	0c12      	lsrs	r2, r2, #16
 8004b7e:	f8de b000 	ldr.w	fp, [lr]
 8004b82:	fb05 a202 	mla	r2, r5, r2, sl
 8004b86:	fa13 f38b 	uxtah	r3, r3, fp
 8004b8a:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b8e:	fa1f fb82 	uxth.w	fp, r2
 8004b92:	f8de 2000 	ldr.w	r2, [lr]
 8004b96:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004b9a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ba4:	4581      	cmp	r9, r0
 8004ba6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004baa:	f84e 3b04 	str.w	r3, [lr], #4
 8004bae:	d2db      	bcs.n	8004b68 <quorem+0x42>
 8004bb0:	f856 300c 	ldr.w	r3, [r6, ip]
 8004bb4:	b933      	cbnz	r3, 8004bc4 <quorem+0x9e>
 8004bb6:	9b01      	ldr	r3, [sp, #4]
 8004bb8:	3b04      	subs	r3, #4
 8004bba:	429e      	cmp	r6, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	d330      	bcc.n	8004c22 <quorem+0xfc>
 8004bc0:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bc4:	4640      	mov	r0, r8
 8004bc6:	f001 f829 	bl	8005c1c <__mcmp>
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	db25      	blt.n	8004c1a <quorem+0xf4>
 8004bce:	3501      	adds	r5, #1
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f04f 0c00 	mov.w	ip, #0
 8004bd6:	f857 2b04 	ldr.w	r2, [r7], #4
 8004bda:	f8d0 e000 	ldr.w	lr, [r0]
 8004bde:	b293      	uxth	r3, r2
 8004be0:	ebac 0303 	sub.w	r3, ip, r3
 8004be4:	0c12      	lsrs	r2, r2, #16
 8004be6:	fa13 f38e 	uxtah	r3, r3, lr
 8004bea:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bf8:	45b9      	cmp	r9, r7
 8004bfa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004bfe:	f840 3b04 	str.w	r3, [r0], #4
 8004c02:	d2e8      	bcs.n	8004bd6 <quorem+0xb0>
 8004c04:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c08:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c0c:	b92a      	cbnz	r2, 8004c1a <quorem+0xf4>
 8004c0e:	3b04      	subs	r3, #4
 8004c10:	429e      	cmp	r6, r3
 8004c12:	461a      	mov	r2, r3
 8004c14:	d30b      	bcc.n	8004c2e <quorem+0x108>
 8004c16:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c1a:	4628      	mov	r0, r5
 8004c1c:	b003      	add	sp, #12
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	6812      	ldr	r2, [r2, #0]
 8004c24:	3b04      	subs	r3, #4
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	d1ca      	bne.n	8004bc0 <quorem+0x9a>
 8004c2a:	3c01      	subs	r4, #1
 8004c2c:	e7c5      	b.n	8004bba <quorem+0x94>
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	3b04      	subs	r3, #4
 8004c32:	2a00      	cmp	r2, #0
 8004c34:	d1ef      	bne.n	8004c16 <quorem+0xf0>
 8004c36:	3c01      	subs	r4, #1
 8004c38:	e7ea      	b.n	8004c10 <quorem+0xea>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e7ee      	b.n	8004c1c <quorem+0xf6>
	...

08004c40 <_dtoa_r>:
 8004c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c44:	ec57 6b10 	vmov	r6, r7, d0
 8004c48:	b097      	sub	sp, #92	; 0x5c
 8004c4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c4c:	9106      	str	r1, [sp, #24]
 8004c4e:	4604      	mov	r4, r0
 8004c50:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c52:	9312      	str	r3, [sp, #72]	; 0x48
 8004c54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c58:	e9cd 6700 	strd	r6, r7, [sp]
 8004c5c:	b93d      	cbnz	r5, 8004c6e <_dtoa_r+0x2e>
 8004c5e:	2010      	movs	r0, #16
 8004c60:	f000 fdb4 	bl	80057cc <malloc>
 8004c64:	6260      	str	r0, [r4, #36]	; 0x24
 8004c66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c6a:	6005      	str	r5, [r0, #0]
 8004c6c:	60c5      	str	r5, [r0, #12]
 8004c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c70:	6819      	ldr	r1, [r3, #0]
 8004c72:	b151      	cbz	r1, 8004c8a <_dtoa_r+0x4a>
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	604a      	str	r2, [r1, #4]
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4093      	lsls	r3, r2
 8004c7c:	608b      	str	r3, [r1, #8]
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f000 fdeb 	bl	800585a <_Bfree>
 8004c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	1e3b      	subs	r3, r7, #0
 8004c8c:	bfbb      	ittet	lt
 8004c8e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004c92:	9301      	strlt	r3, [sp, #4]
 8004c94:	2300      	movge	r3, #0
 8004c96:	2201      	movlt	r2, #1
 8004c98:	bfac      	ite	ge
 8004c9a:	f8c8 3000 	strge.w	r3, [r8]
 8004c9e:	f8c8 2000 	strlt.w	r2, [r8]
 8004ca2:	4baf      	ldr	r3, [pc, #700]	; (8004f60 <_dtoa_r+0x320>)
 8004ca4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004ca8:	ea33 0308 	bics.w	r3, r3, r8
 8004cac:	d114      	bne.n	8004cd8 <_dtoa_r+0x98>
 8004cae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	9b00      	ldr	r3, [sp, #0]
 8004cb8:	b923      	cbnz	r3, 8004cc4 <_dtoa_r+0x84>
 8004cba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	f000 8542 	beq.w	8005748 <_dtoa_r+0xb08>
 8004cc4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cc6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004f74 <_dtoa_r+0x334>
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f000 8544 	beq.w	8005758 <_dtoa_r+0xb18>
 8004cd0:	f10b 0303 	add.w	r3, fp, #3
 8004cd4:	f000 bd3e 	b.w	8005754 <_dtoa_r+0xb14>
 8004cd8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2300      	movs	r3, #0
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	4639      	mov	r1, r7
 8004ce4:	f7fb fea4 	bl	8000a30 <__aeabi_dcmpeq>
 8004ce8:	4681      	mov	r9, r0
 8004cea:	b168      	cbz	r0, 8004d08 <_dtoa_r+0xc8>
 8004cec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cee:	2301      	movs	r3, #1
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8524 	beq.w	8005742 <_dtoa_r+0xb02>
 8004cfa:	4b9a      	ldr	r3, [pc, #616]	; (8004f64 <_dtoa_r+0x324>)
 8004cfc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cfe:	f103 3bff 	add.w	fp, r3, #4294967295
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	f000 bd28 	b.w	8005758 <_dtoa_r+0xb18>
 8004d08:	aa14      	add	r2, sp, #80	; 0x50
 8004d0a:	a915      	add	r1, sp, #84	; 0x54
 8004d0c:	ec47 6b10 	vmov	d0, r6, r7
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 fffa 	bl	8005d0a <__d2b>
 8004d16:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d1a:	9004      	str	r0, [sp, #16]
 8004d1c:	2d00      	cmp	r5, #0
 8004d1e:	d07c      	beq.n	8004e1a <_dtoa_r+0x1da>
 8004d20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d24:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004d28:	46b2      	mov	sl, r6
 8004d2a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004d2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d32:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004d36:	2200      	movs	r2, #0
 8004d38:	4b8b      	ldr	r3, [pc, #556]	; (8004f68 <_dtoa_r+0x328>)
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	4659      	mov	r1, fp
 8004d3e:	f7fb fa57 	bl	80001f0 <__aeabi_dsub>
 8004d42:	a381      	add	r3, pc, #516	; (adr r3, 8004f48 <_dtoa_r+0x308>)
 8004d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d48:	f7fb fc0a 	bl	8000560 <__aeabi_dmul>
 8004d4c:	a380      	add	r3, pc, #512	; (adr r3, 8004f50 <_dtoa_r+0x310>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fa4f 	bl	80001f4 <__adddf3>
 8004d56:	4606      	mov	r6, r0
 8004d58:	4628      	mov	r0, r5
 8004d5a:	460f      	mov	r7, r1
 8004d5c:	f7fb fb96 	bl	800048c <__aeabi_i2d>
 8004d60:	a37d      	add	r3, pc, #500	; (adr r3, 8004f58 <_dtoa_r+0x318>)
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	f7fb fbfb 	bl	8000560 <__aeabi_dmul>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4630      	mov	r0, r6
 8004d70:	4639      	mov	r1, r7
 8004d72:	f7fb fa3f 	bl	80001f4 <__adddf3>
 8004d76:	4606      	mov	r6, r0
 8004d78:	460f      	mov	r7, r1
 8004d7a:	f7fb fea1 	bl	8000ac0 <__aeabi_d2iz>
 8004d7e:	2200      	movs	r2, #0
 8004d80:	4682      	mov	sl, r0
 8004d82:	2300      	movs	r3, #0
 8004d84:	4630      	mov	r0, r6
 8004d86:	4639      	mov	r1, r7
 8004d88:	f7fb fe5c 	bl	8000a44 <__aeabi_dcmplt>
 8004d8c:	b148      	cbz	r0, 8004da2 <_dtoa_r+0x162>
 8004d8e:	4650      	mov	r0, sl
 8004d90:	f7fb fb7c 	bl	800048c <__aeabi_i2d>
 8004d94:	4632      	mov	r2, r6
 8004d96:	463b      	mov	r3, r7
 8004d98:	f7fb fe4a 	bl	8000a30 <__aeabi_dcmpeq>
 8004d9c:	b908      	cbnz	r0, 8004da2 <_dtoa_r+0x162>
 8004d9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004da2:	f1ba 0f16 	cmp.w	sl, #22
 8004da6:	d859      	bhi.n	8004e5c <_dtoa_r+0x21c>
 8004da8:	4970      	ldr	r1, [pc, #448]	; (8004f6c <_dtoa_r+0x32c>)
 8004daa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004dae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004db2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004db6:	f7fb fe63 	bl	8000a80 <__aeabi_dcmpgt>
 8004dba:	2800      	cmp	r0, #0
 8004dbc:	d050      	beq.n	8004e60 <_dtoa_r+0x220>
 8004dbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004dc8:	1b5d      	subs	r5, r3, r5
 8004dca:	f1b5 0801 	subs.w	r8, r5, #1
 8004dce:	bf49      	itett	mi
 8004dd0:	f1c5 0301 	rsbmi	r3, r5, #1
 8004dd4:	2300      	movpl	r3, #0
 8004dd6:	9305      	strmi	r3, [sp, #20]
 8004dd8:	f04f 0800 	movmi.w	r8, #0
 8004ddc:	bf58      	it	pl
 8004dde:	9305      	strpl	r3, [sp, #20]
 8004de0:	f1ba 0f00 	cmp.w	sl, #0
 8004de4:	db3e      	blt.n	8004e64 <_dtoa_r+0x224>
 8004de6:	2300      	movs	r3, #0
 8004de8:	44d0      	add	r8, sl
 8004dea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004dee:	9307      	str	r3, [sp, #28]
 8004df0:	9b06      	ldr	r3, [sp, #24]
 8004df2:	2b09      	cmp	r3, #9
 8004df4:	f200 8090 	bhi.w	8004f18 <_dtoa_r+0x2d8>
 8004df8:	2b05      	cmp	r3, #5
 8004dfa:	bfc4      	itt	gt
 8004dfc:	3b04      	subgt	r3, #4
 8004dfe:	9306      	strgt	r3, [sp, #24]
 8004e00:	9b06      	ldr	r3, [sp, #24]
 8004e02:	f1a3 0302 	sub.w	r3, r3, #2
 8004e06:	bfcc      	ite	gt
 8004e08:	2500      	movgt	r5, #0
 8004e0a:	2501      	movle	r5, #1
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	f200 808f 	bhi.w	8004f30 <_dtoa_r+0x2f0>
 8004e12:	e8df f003 	tbb	[pc, r3]
 8004e16:	7f7d      	.short	0x7f7d
 8004e18:	7131      	.short	0x7131
 8004e1a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004e1e:	441d      	add	r5, r3
 8004e20:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004e24:	2820      	cmp	r0, #32
 8004e26:	dd13      	ble.n	8004e50 <_dtoa_r+0x210>
 8004e28:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e2c:	9b00      	ldr	r3, [sp, #0]
 8004e2e:	fa08 f800 	lsl.w	r8, r8, r0
 8004e32:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e36:	fa23 f000 	lsr.w	r0, r3, r0
 8004e3a:	ea48 0000 	orr.w	r0, r8, r0
 8004e3e:	f7fb fb15 	bl	800046c <__aeabi_ui2d>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4682      	mov	sl, r0
 8004e46:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004e4a:	3d01      	subs	r5, #1
 8004e4c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e4e:	e772      	b.n	8004d36 <_dtoa_r+0xf6>
 8004e50:	9b00      	ldr	r3, [sp, #0]
 8004e52:	f1c0 0020 	rsb	r0, r0, #32
 8004e56:	fa03 f000 	lsl.w	r0, r3, r0
 8004e5a:	e7f0      	b.n	8004e3e <_dtoa_r+0x1fe>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e7b1      	b.n	8004dc4 <_dtoa_r+0x184>
 8004e60:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e62:	e7b0      	b.n	8004dc6 <_dtoa_r+0x186>
 8004e64:	9b05      	ldr	r3, [sp, #20]
 8004e66:	eba3 030a 	sub.w	r3, r3, sl
 8004e6a:	9305      	str	r3, [sp, #20]
 8004e6c:	f1ca 0300 	rsb	r3, sl, #0
 8004e70:	9307      	str	r3, [sp, #28]
 8004e72:	2300      	movs	r3, #0
 8004e74:	930e      	str	r3, [sp, #56]	; 0x38
 8004e76:	e7bb      	b.n	8004df0 <_dtoa_r+0x1b0>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	dd59      	ble.n	8004f36 <_dtoa_r+0x2f6>
 8004e82:	9302      	str	r3, [sp, #8]
 8004e84:	4699      	mov	r9, r3
 8004e86:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e88:	2200      	movs	r2, #0
 8004e8a:	6072      	str	r2, [r6, #4]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	f102 0014 	add.w	r0, r2, #20
 8004e92:	4298      	cmp	r0, r3
 8004e94:	6871      	ldr	r1, [r6, #4]
 8004e96:	d953      	bls.n	8004f40 <_dtoa_r+0x300>
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f000 fcaa 	bl	80057f2 <_Balloc>
 8004e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ea0:	6030      	str	r0, [r6, #0]
 8004ea2:	f1b9 0f0e 	cmp.w	r9, #14
 8004ea6:	f8d3 b000 	ldr.w	fp, [r3]
 8004eaa:	f200 80e6 	bhi.w	800507a <_dtoa_r+0x43a>
 8004eae:	2d00      	cmp	r5, #0
 8004eb0:	f000 80e3 	beq.w	800507a <_dtoa_r+0x43a>
 8004eb4:	ed9d 7b00 	vldr	d7, [sp]
 8004eb8:	f1ba 0f00 	cmp.w	sl, #0
 8004ebc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004ec0:	dd74      	ble.n	8004fac <_dtoa_r+0x36c>
 8004ec2:	4a2a      	ldr	r2, [pc, #168]	; (8004f6c <_dtoa_r+0x32c>)
 8004ec4:	f00a 030f 	and.w	r3, sl, #15
 8004ec8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004ecc:	ed93 7b00 	vldr	d7, [r3]
 8004ed0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004ed4:	06f0      	lsls	r0, r6, #27
 8004ed6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004eda:	d565      	bpl.n	8004fa8 <_dtoa_r+0x368>
 8004edc:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <_dtoa_r+0x330>)
 8004ede:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ee2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ee6:	f7fb fc65 	bl	80007b4 <__aeabi_ddiv>
 8004eea:	e9cd 0100 	strd	r0, r1, [sp]
 8004eee:	f006 060f 	and.w	r6, r6, #15
 8004ef2:	2503      	movs	r5, #3
 8004ef4:	4f1e      	ldr	r7, [pc, #120]	; (8004f70 <_dtoa_r+0x330>)
 8004ef6:	e04c      	b.n	8004f92 <_dtoa_r+0x352>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	930a      	str	r3, [sp, #40]	; 0x28
 8004efc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004efe:	4453      	add	r3, sl
 8004f00:	f103 0901 	add.w	r9, r3, #1
 8004f04:	9302      	str	r3, [sp, #8]
 8004f06:	464b      	mov	r3, r9
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	bfb8      	it	lt
 8004f0c:	2301      	movlt	r3, #1
 8004f0e:	e7ba      	b.n	8004e86 <_dtoa_r+0x246>
 8004f10:	2300      	movs	r3, #0
 8004f12:	e7b2      	b.n	8004e7a <_dtoa_r+0x23a>
 8004f14:	2300      	movs	r3, #0
 8004f16:	e7f0      	b.n	8004efa <_dtoa_r+0x2ba>
 8004f18:	2501      	movs	r5, #1
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	9306      	str	r3, [sp, #24]
 8004f1e:	950a      	str	r5, [sp, #40]	; 0x28
 8004f20:	f04f 33ff 	mov.w	r3, #4294967295
 8004f24:	9302      	str	r3, [sp, #8]
 8004f26:	4699      	mov	r9, r3
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2312      	movs	r3, #18
 8004f2c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f2e:	e7aa      	b.n	8004e86 <_dtoa_r+0x246>
 8004f30:	2301      	movs	r3, #1
 8004f32:	930a      	str	r3, [sp, #40]	; 0x28
 8004f34:	e7f4      	b.n	8004f20 <_dtoa_r+0x2e0>
 8004f36:	2301      	movs	r3, #1
 8004f38:	9302      	str	r3, [sp, #8]
 8004f3a:	4699      	mov	r9, r3
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	e7f5      	b.n	8004f2c <_dtoa_r+0x2ec>
 8004f40:	3101      	adds	r1, #1
 8004f42:	6071      	str	r1, [r6, #4]
 8004f44:	0052      	lsls	r2, r2, #1
 8004f46:	e7a2      	b.n	8004e8e <_dtoa_r+0x24e>
 8004f48:	636f4361 	.word	0x636f4361
 8004f4c:	3fd287a7 	.word	0x3fd287a7
 8004f50:	8b60c8b3 	.word	0x8b60c8b3
 8004f54:	3fc68a28 	.word	0x3fc68a28
 8004f58:	509f79fb 	.word	0x509f79fb
 8004f5c:	3fd34413 	.word	0x3fd34413
 8004f60:	7ff00000 	.word	0x7ff00000
 8004f64:	08005f21 	.word	0x08005f21
 8004f68:	3ff80000 	.word	0x3ff80000
 8004f6c:	08005fb8 	.word	0x08005fb8
 8004f70:	08005f90 	.word	0x08005f90
 8004f74:	08005f2b 	.word	0x08005f2b
 8004f78:	07f1      	lsls	r1, r6, #31
 8004f7a:	d508      	bpl.n	8004f8e <_dtoa_r+0x34e>
 8004f7c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f84:	f7fb faec 	bl	8000560 <__aeabi_dmul>
 8004f88:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f8c:	3501      	adds	r5, #1
 8004f8e:	1076      	asrs	r6, r6, #1
 8004f90:	3708      	adds	r7, #8
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	d1f0      	bne.n	8004f78 <_dtoa_r+0x338>
 8004f96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f9e:	f7fb fc09 	bl	80007b4 <__aeabi_ddiv>
 8004fa2:	e9cd 0100 	strd	r0, r1, [sp]
 8004fa6:	e01a      	b.n	8004fde <_dtoa_r+0x39e>
 8004fa8:	2502      	movs	r5, #2
 8004faa:	e7a3      	b.n	8004ef4 <_dtoa_r+0x2b4>
 8004fac:	f000 80a0 	beq.w	80050f0 <_dtoa_r+0x4b0>
 8004fb0:	f1ca 0600 	rsb	r6, sl, #0
 8004fb4:	4b9f      	ldr	r3, [pc, #636]	; (8005234 <_dtoa_r+0x5f4>)
 8004fb6:	4fa0      	ldr	r7, [pc, #640]	; (8005238 <_dtoa_r+0x5f8>)
 8004fb8:	f006 020f 	and.w	r2, r6, #15
 8004fbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fc8:	f7fb faca 	bl	8000560 <__aeabi_dmul>
 8004fcc:	e9cd 0100 	strd	r0, r1, [sp]
 8004fd0:	1136      	asrs	r6, r6, #4
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	2502      	movs	r5, #2
 8004fd6:	2e00      	cmp	r6, #0
 8004fd8:	d17f      	bne.n	80050da <_dtoa_r+0x49a>
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1e1      	bne.n	8004fa2 <_dtoa_r+0x362>
 8004fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8087 	beq.w	80050f4 <_dtoa_r+0x4b4>
 8004fe6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004fea:	2200      	movs	r2, #0
 8004fec:	4b93      	ldr	r3, [pc, #588]	; (800523c <_dtoa_r+0x5fc>)
 8004fee:	4630      	mov	r0, r6
 8004ff0:	4639      	mov	r1, r7
 8004ff2:	f7fb fd27 	bl	8000a44 <__aeabi_dcmplt>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d07c      	beq.n	80050f4 <_dtoa_r+0x4b4>
 8004ffa:	f1b9 0f00 	cmp.w	r9, #0
 8004ffe:	d079      	beq.n	80050f4 <_dtoa_r+0x4b4>
 8005000:	9b02      	ldr	r3, [sp, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	dd35      	ble.n	8005072 <_dtoa_r+0x432>
 8005006:	f10a 33ff 	add.w	r3, sl, #4294967295
 800500a:	9308      	str	r3, [sp, #32]
 800500c:	4639      	mov	r1, r7
 800500e:	2200      	movs	r2, #0
 8005010:	4b8b      	ldr	r3, [pc, #556]	; (8005240 <_dtoa_r+0x600>)
 8005012:	4630      	mov	r0, r6
 8005014:	f7fb faa4 	bl	8000560 <__aeabi_dmul>
 8005018:	e9cd 0100 	strd	r0, r1, [sp]
 800501c:	9f02      	ldr	r7, [sp, #8]
 800501e:	3501      	adds	r5, #1
 8005020:	4628      	mov	r0, r5
 8005022:	f7fb fa33 	bl	800048c <__aeabi_i2d>
 8005026:	e9dd 2300 	ldrd	r2, r3, [sp]
 800502a:	f7fb fa99 	bl	8000560 <__aeabi_dmul>
 800502e:	2200      	movs	r2, #0
 8005030:	4b84      	ldr	r3, [pc, #528]	; (8005244 <_dtoa_r+0x604>)
 8005032:	f7fb f8df 	bl	80001f4 <__adddf3>
 8005036:	4605      	mov	r5, r0
 8005038:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800503c:	2f00      	cmp	r7, #0
 800503e:	d15d      	bne.n	80050fc <_dtoa_r+0x4bc>
 8005040:	2200      	movs	r2, #0
 8005042:	4b81      	ldr	r3, [pc, #516]	; (8005248 <_dtoa_r+0x608>)
 8005044:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005048:	f7fb f8d2 	bl	80001f0 <__aeabi_dsub>
 800504c:	462a      	mov	r2, r5
 800504e:	4633      	mov	r3, r6
 8005050:	e9cd 0100 	strd	r0, r1, [sp]
 8005054:	f7fb fd14 	bl	8000a80 <__aeabi_dcmpgt>
 8005058:	2800      	cmp	r0, #0
 800505a:	f040 8288 	bne.w	800556e <_dtoa_r+0x92e>
 800505e:	462a      	mov	r2, r5
 8005060:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005064:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005068:	f7fb fcec 	bl	8000a44 <__aeabi_dcmplt>
 800506c:	2800      	cmp	r0, #0
 800506e:	f040 827c 	bne.w	800556a <_dtoa_r+0x92a>
 8005072:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005076:	e9cd 2300 	strd	r2, r3, [sp]
 800507a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800507c:	2b00      	cmp	r3, #0
 800507e:	f2c0 8150 	blt.w	8005322 <_dtoa_r+0x6e2>
 8005082:	f1ba 0f0e 	cmp.w	sl, #14
 8005086:	f300 814c 	bgt.w	8005322 <_dtoa_r+0x6e2>
 800508a:	4b6a      	ldr	r3, [pc, #424]	; (8005234 <_dtoa_r+0x5f4>)
 800508c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005090:	ed93 7b00 	vldr	d7, [r3]
 8005094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005096:	2b00      	cmp	r3, #0
 8005098:	ed8d 7b02 	vstr	d7, [sp, #8]
 800509c:	f280 80d8 	bge.w	8005250 <_dtoa_r+0x610>
 80050a0:	f1b9 0f00 	cmp.w	r9, #0
 80050a4:	f300 80d4 	bgt.w	8005250 <_dtoa_r+0x610>
 80050a8:	f040 825e 	bne.w	8005568 <_dtoa_r+0x928>
 80050ac:	2200      	movs	r2, #0
 80050ae:	4b66      	ldr	r3, [pc, #408]	; (8005248 <_dtoa_r+0x608>)
 80050b0:	ec51 0b17 	vmov	r0, r1, d7
 80050b4:	f7fb fa54 	bl	8000560 <__aeabi_dmul>
 80050b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050bc:	f7fb fcd6 	bl	8000a6c <__aeabi_dcmpge>
 80050c0:	464f      	mov	r7, r9
 80050c2:	464e      	mov	r6, r9
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f040 8234 	bne.w	8005532 <_dtoa_r+0x8f2>
 80050ca:	2331      	movs	r3, #49	; 0x31
 80050cc:	f10b 0501 	add.w	r5, fp, #1
 80050d0:	f88b 3000 	strb.w	r3, [fp]
 80050d4:	f10a 0a01 	add.w	sl, sl, #1
 80050d8:	e22f      	b.n	800553a <_dtoa_r+0x8fa>
 80050da:	07f2      	lsls	r2, r6, #31
 80050dc:	d505      	bpl.n	80050ea <_dtoa_r+0x4aa>
 80050de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050e2:	f7fb fa3d 	bl	8000560 <__aeabi_dmul>
 80050e6:	3501      	adds	r5, #1
 80050e8:	2301      	movs	r3, #1
 80050ea:	1076      	asrs	r6, r6, #1
 80050ec:	3708      	adds	r7, #8
 80050ee:	e772      	b.n	8004fd6 <_dtoa_r+0x396>
 80050f0:	2502      	movs	r5, #2
 80050f2:	e774      	b.n	8004fde <_dtoa_r+0x39e>
 80050f4:	f8cd a020 	str.w	sl, [sp, #32]
 80050f8:	464f      	mov	r7, r9
 80050fa:	e791      	b.n	8005020 <_dtoa_r+0x3e0>
 80050fc:	4b4d      	ldr	r3, [pc, #308]	; (8005234 <_dtoa_r+0x5f4>)
 80050fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005102:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005108:	2b00      	cmp	r3, #0
 800510a:	d047      	beq.n	800519c <_dtoa_r+0x55c>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	2000      	movs	r0, #0
 8005112:	494e      	ldr	r1, [pc, #312]	; (800524c <_dtoa_r+0x60c>)
 8005114:	f7fb fb4e 	bl	80007b4 <__aeabi_ddiv>
 8005118:	462a      	mov	r2, r5
 800511a:	4633      	mov	r3, r6
 800511c:	f7fb f868 	bl	80001f0 <__aeabi_dsub>
 8005120:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005124:	465d      	mov	r5, fp
 8005126:	e9dd 0100 	ldrd	r0, r1, [sp]
 800512a:	f7fb fcc9 	bl	8000ac0 <__aeabi_d2iz>
 800512e:	4606      	mov	r6, r0
 8005130:	f7fb f9ac 	bl	800048c <__aeabi_i2d>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800513c:	f7fb f858 	bl	80001f0 <__aeabi_dsub>
 8005140:	3630      	adds	r6, #48	; 0x30
 8005142:	f805 6b01 	strb.w	r6, [r5], #1
 8005146:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800514a:	e9cd 0100 	strd	r0, r1, [sp]
 800514e:	f7fb fc79 	bl	8000a44 <__aeabi_dcmplt>
 8005152:	2800      	cmp	r0, #0
 8005154:	d163      	bne.n	800521e <_dtoa_r+0x5de>
 8005156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800515a:	2000      	movs	r0, #0
 800515c:	4937      	ldr	r1, [pc, #220]	; (800523c <_dtoa_r+0x5fc>)
 800515e:	f7fb f847 	bl	80001f0 <__aeabi_dsub>
 8005162:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005166:	f7fb fc6d 	bl	8000a44 <__aeabi_dcmplt>
 800516a:	2800      	cmp	r0, #0
 800516c:	f040 80b7 	bne.w	80052de <_dtoa_r+0x69e>
 8005170:	eba5 030b 	sub.w	r3, r5, fp
 8005174:	429f      	cmp	r7, r3
 8005176:	f77f af7c 	ble.w	8005072 <_dtoa_r+0x432>
 800517a:	2200      	movs	r2, #0
 800517c:	4b30      	ldr	r3, [pc, #192]	; (8005240 <_dtoa_r+0x600>)
 800517e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005182:	f7fb f9ed 	bl	8000560 <__aeabi_dmul>
 8005186:	2200      	movs	r2, #0
 8005188:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800518c:	4b2c      	ldr	r3, [pc, #176]	; (8005240 <_dtoa_r+0x600>)
 800518e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005192:	f7fb f9e5 	bl	8000560 <__aeabi_dmul>
 8005196:	e9cd 0100 	strd	r0, r1, [sp]
 800519a:	e7c4      	b.n	8005126 <_dtoa_r+0x4e6>
 800519c:	462a      	mov	r2, r5
 800519e:	4633      	mov	r3, r6
 80051a0:	f7fb f9de 	bl	8000560 <__aeabi_dmul>
 80051a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051a8:	eb0b 0507 	add.w	r5, fp, r7
 80051ac:	465e      	mov	r6, fp
 80051ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051b2:	f7fb fc85 	bl	8000ac0 <__aeabi_d2iz>
 80051b6:	4607      	mov	r7, r0
 80051b8:	f7fb f968 	bl	800048c <__aeabi_i2d>
 80051bc:	3730      	adds	r7, #48	; 0x30
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051c6:	f7fb f813 	bl	80001f0 <__aeabi_dsub>
 80051ca:	f806 7b01 	strb.w	r7, [r6], #1
 80051ce:	42ae      	cmp	r6, r5
 80051d0:	e9cd 0100 	strd	r0, r1, [sp]
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	d126      	bne.n	8005228 <_dtoa_r+0x5e8>
 80051da:	4b1c      	ldr	r3, [pc, #112]	; (800524c <_dtoa_r+0x60c>)
 80051dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051e0:	f7fb f808 	bl	80001f4 <__adddf3>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051ec:	f7fb fc48 	bl	8000a80 <__aeabi_dcmpgt>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d174      	bne.n	80052de <_dtoa_r+0x69e>
 80051f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80051f8:	2000      	movs	r0, #0
 80051fa:	4914      	ldr	r1, [pc, #80]	; (800524c <_dtoa_r+0x60c>)
 80051fc:	f7fa fff8 	bl	80001f0 <__aeabi_dsub>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005208:	f7fb fc1c 	bl	8000a44 <__aeabi_dcmplt>
 800520c:	2800      	cmp	r0, #0
 800520e:	f43f af30 	beq.w	8005072 <_dtoa_r+0x432>
 8005212:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005216:	2b30      	cmp	r3, #48	; 0x30
 8005218:	f105 32ff 	add.w	r2, r5, #4294967295
 800521c:	d002      	beq.n	8005224 <_dtoa_r+0x5e4>
 800521e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005222:	e04a      	b.n	80052ba <_dtoa_r+0x67a>
 8005224:	4615      	mov	r5, r2
 8005226:	e7f4      	b.n	8005212 <_dtoa_r+0x5d2>
 8005228:	4b05      	ldr	r3, [pc, #20]	; (8005240 <_dtoa_r+0x600>)
 800522a:	f7fb f999 	bl	8000560 <__aeabi_dmul>
 800522e:	e9cd 0100 	strd	r0, r1, [sp]
 8005232:	e7bc      	b.n	80051ae <_dtoa_r+0x56e>
 8005234:	08005fb8 	.word	0x08005fb8
 8005238:	08005f90 	.word	0x08005f90
 800523c:	3ff00000 	.word	0x3ff00000
 8005240:	40240000 	.word	0x40240000
 8005244:	401c0000 	.word	0x401c0000
 8005248:	40140000 	.word	0x40140000
 800524c:	3fe00000 	.word	0x3fe00000
 8005250:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005254:	465d      	mov	r5, fp
 8005256:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800525a:	4630      	mov	r0, r6
 800525c:	4639      	mov	r1, r7
 800525e:	f7fb faa9 	bl	80007b4 <__aeabi_ddiv>
 8005262:	f7fb fc2d 	bl	8000ac0 <__aeabi_d2iz>
 8005266:	4680      	mov	r8, r0
 8005268:	f7fb f910 	bl	800048c <__aeabi_i2d>
 800526c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005270:	f7fb f976 	bl	8000560 <__aeabi_dmul>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4630      	mov	r0, r6
 800527a:	4639      	mov	r1, r7
 800527c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005280:	f7fa ffb6 	bl	80001f0 <__aeabi_dsub>
 8005284:	f805 6b01 	strb.w	r6, [r5], #1
 8005288:	eba5 060b 	sub.w	r6, r5, fp
 800528c:	45b1      	cmp	r9, r6
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	d139      	bne.n	8005308 <_dtoa_r+0x6c8>
 8005294:	f7fa ffae 	bl	80001f4 <__adddf3>
 8005298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800529c:	4606      	mov	r6, r0
 800529e:	460f      	mov	r7, r1
 80052a0:	f7fb fbee 	bl	8000a80 <__aeabi_dcmpgt>
 80052a4:	b9c8      	cbnz	r0, 80052da <_dtoa_r+0x69a>
 80052a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052aa:	4630      	mov	r0, r6
 80052ac:	4639      	mov	r1, r7
 80052ae:	f7fb fbbf 	bl	8000a30 <__aeabi_dcmpeq>
 80052b2:	b110      	cbz	r0, 80052ba <_dtoa_r+0x67a>
 80052b4:	f018 0f01 	tst.w	r8, #1
 80052b8:	d10f      	bne.n	80052da <_dtoa_r+0x69a>
 80052ba:	9904      	ldr	r1, [sp, #16]
 80052bc:	4620      	mov	r0, r4
 80052be:	f000 facc 	bl	800585a <_Bfree>
 80052c2:	2300      	movs	r3, #0
 80052c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052c6:	702b      	strb	r3, [r5, #0]
 80052c8:	f10a 0301 	add.w	r3, sl, #1
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 8241 	beq.w	8005758 <_dtoa_r+0xb18>
 80052d6:	601d      	str	r5, [r3, #0]
 80052d8:	e23e      	b.n	8005758 <_dtoa_r+0xb18>
 80052da:	f8cd a020 	str.w	sl, [sp, #32]
 80052de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052e2:	2a39      	cmp	r2, #57	; 0x39
 80052e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80052e8:	d108      	bne.n	80052fc <_dtoa_r+0x6bc>
 80052ea:	459b      	cmp	fp, r3
 80052ec:	d10a      	bne.n	8005304 <_dtoa_r+0x6c4>
 80052ee:	9b08      	ldr	r3, [sp, #32]
 80052f0:	3301      	adds	r3, #1
 80052f2:	9308      	str	r3, [sp, #32]
 80052f4:	2330      	movs	r3, #48	; 0x30
 80052f6:	f88b 3000 	strb.w	r3, [fp]
 80052fa:	465b      	mov	r3, fp
 80052fc:	781a      	ldrb	r2, [r3, #0]
 80052fe:	3201      	adds	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e78c      	b.n	800521e <_dtoa_r+0x5de>
 8005304:	461d      	mov	r5, r3
 8005306:	e7ea      	b.n	80052de <_dtoa_r+0x69e>
 8005308:	2200      	movs	r2, #0
 800530a:	4b9b      	ldr	r3, [pc, #620]	; (8005578 <_dtoa_r+0x938>)
 800530c:	f7fb f928 	bl	8000560 <__aeabi_dmul>
 8005310:	2200      	movs	r2, #0
 8005312:	2300      	movs	r3, #0
 8005314:	4606      	mov	r6, r0
 8005316:	460f      	mov	r7, r1
 8005318:	f7fb fb8a 	bl	8000a30 <__aeabi_dcmpeq>
 800531c:	2800      	cmp	r0, #0
 800531e:	d09a      	beq.n	8005256 <_dtoa_r+0x616>
 8005320:	e7cb      	b.n	80052ba <_dtoa_r+0x67a>
 8005322:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005324:	2a00      	cmp	r2, #0
 8005326:	f000 808b 	beq.w	8005440 <_dtoa_r+0x800>
 800532a:	9a06      	ldr	r2, [sp, #24]
 800532c:	2a01      	cmp	r2, #1
 800532e:	dc6e      	bgt.n	800540e <_dtoa_r+0x7ce>
 8005330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005332:	2a00      	cmp	r2, #0
 8005334:	d067      	beq.n	8005406 <_dtoa_r+0x7c6>
 8005336:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800533a:	9f07      	ldr	r7, [sp, #28]
 800533c:	9d05      	ldr	r5, [sp, #20]
 800533e:	9a05      	ldr	r2, [sp, #20]
 8005340:	2101      	movs	r1, #1
 8005342:	441a      	add	r2, r3
 8005344:	4620      	mov	r0, r4
 8005346:	9205      	str	r2, [sp, #20]
 8005348:	4498      	add	r8, r3
 800534a:	f000 fb26 	bl	800599a <__i2b>
 800534e:	4606      	mov	r6, r0
 8005350:	2d00      	cmp	r5, #0
 8005352:	dd0c      	ble.n	800536e <_dtoa_r+0x72e>
 8005354:	f1b8 0f00 	cmp.w	r8, #0
 8005358:	dd09      	ble.n	800536e <_dtoa_r+0x72e>
 800535a:	4545      	cmp	r5, r8
 800535c:	9a05      	ldr	r2, [sp, #20]
 800535e:	462b      	mov	r3, r5
 8005360:	bfa8      	it	ge
 8005362:	4643      	movge	r3, r8
 8005364:	1ad2      	subs	r2, r2, r3
 8005366:	9205      	str	r2, [sp, #20]
 8005368:	1aed      	subs	r5, r5, r3
 800536a:	eba8 0803 	sub.w	r8, r8, r3
 800536e:	9b07      	ldr	r3, [sp, #28]
 8005370:	b1eb      	cbz	r3, 80053ae <_dtoa_r+0x76e>
 8005372:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005374:	2b00      	cmp	r3, #0
 8005376:	d067      	beq.n	8005448 <_dtoa_r+0x808>
 8005378:	b18f      	cbz	r7, 800539e <_dtoa_r+0x75e>
 800537a:	4631      	mov	r1, r6
 800537c:	463a      	mov	r2, r7
 800537e:	4620      	mov	r0, r4
 8005380:	f000 fbaa 	bl	8005ad8 <__pow5mult>
 8005384:	9a04      	ldr	r2, [sp, #16]
 8005386:	4601      	mov	r1, r0
 8005388:	4606      	mov	r6, r0
 800538a:	4620      	mov	r0, r4
 800538c:	f000 fb0e 	bl	80059ac <__multiply>
 8005390:	9904      	ldr	r1, [sp, #16]
 8005392:	9008      	str	r0, [sp, #32]
 8005394:	4620      	mov	r0, r4
 8005396:	f000 fa60 	bl	800585a <_Bfree>
 800539a:	9b08      	ldr	r3, [sp, #32]
 800539c:	9304      	str	r3, [sp, #16]
 800539e:	9b07      	ldr	r3, [sp, #28]
 80053a0:	1bda      	subs	r2, r3, r7
 80053a2:	d004      	beq.n	80053ae <_dtoa_r+0x76e>
 80053a4:	9904      	ldr	r1, [sp, #16]
 80053a6:	4620      	mov	r0, r4
 80053a8:	f000 fb96 	bl	8005ad8 <__pow5mult>
 80053ac:	9004      	str	r0, [sp, #16]
 80053ae:	2101      	movs	r1, #1
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 faf2 	bl	800599a <__i2b>
 80053b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053b8:	4607      	mov	r7, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 81d0 	beq.w	8005760 <_dtoa_r+0xb20>
 80053c0:	461a      	mov	r2, r3
 80053c2:	4601      	mov	r1, r0
 80053c4:	4620      	mov	r0, r4
 80053c6:	f000 fb87 	bl	8005ad8 <__pow5mult>
 80053ca:	9b06      	ldr	r3, [sp, #24]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	4607      	mov	r7, r0
 80053d0:	dc40      	bgt.n	8005454 <_dtoa_r+0x814>
 80053d2:	9b00      	ldr	r3, [sp, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d139      	bne.n	800544c <_dtoa_r+0x80c>
 80053d8:	9b01      	ldr	r3, [sp, #4]
 80053da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d136      	bne.n	8005450 <_dtoa_r+0x810>
 80053e2:	9b01      	ldr	r3, [sp, #4]
 80053e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053e8:	0d1b      	lsrs	r3, r3, #20
 80053ea:	051b      	lsls	r3, r3, #20
 80053ec:	b12b      	cbz	r3, 80053fa <_dtoa_r+0x7ba>
 80053ee:	9b05      	ldr	r3, [sp, #20]
 80053f0:	3301      	adds	r3, #1
 80053f2:	9305      	str	r3, [sp, #20]
 80053f4:	f108 0801 	add.w	r8, r8, #1
 80053f8:	2301      	movs	r3, #1
 80053fa:	9307      	str	r3, [sp, #28]
 80053fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d12a      	bne.n	8005458 <_dtoa_r+0x818>
 8005402:	2001      	movs	r0, #1
 8005404:	e030      	b.n	8005468 <_dtoa_r+0x828>
 8005406:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005408:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800540c:	e795      	b.n	800533a <_dtoa_r+0x6fa>
 800540e:	9b07      	ldr	r3, [sp, #28]
 8005410:	f109 37ff 	add.w	r7, r9, #4294967295
 8005414:	42bb      	cmp	r3, r7
 8005416:	bfbf      	itttt	lt
 8005418:	9b07      	ldrlt	r3, [sp, #28]
 800541a:	9707      	strlt	r7, [sp, #28]
 800541c:	1afa      	sublt	r2, r7, r3
 800541e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005420:	bfbb      	ittet	lt
 8005422:	189b      	addlt	r3, r3, r2
 8005424:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005426:	1bdf      	subge	r7, r3, r7
 8005428:	2700      	movlt	r7, #0
 800542a:	f1b9 0f00 	cmp.w	r9, #0
 800542e:	bfb5      	itete	lt
 8005430:	9b05      	ldrlt	r3, [sp, #20]
 8005432:	9d05      	ldrge	r5, [sp, #20]
 8005434:	eba3 0509 	sublt.w	r5, r3, r9
 8005438:	464b      	movge	r3, r9
 800543a:	bfb8      	it	lt
 800543c:	2300      	movlt	r3, #0
 800543e:	e77e      	b.n	800533e <_dtoa_r+0x6fe>
 8005440:	9f07      	ldr	r7, [sp, #28]
 8005442:	9d05      	ldr	r5, [sp, #20]
 8005444:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005446:	e783      	b.n	8005350 <_dtoa_r+0x710>
 8005448:	9a07      	ldr	r2, [sp, #28]
 800544a:	e7ab      	b.n	80053a4 <_dtoa_r+0x764>
 800544c:	2300      	movs	r3, #0
 800544e:	e7d4      	b.n	80053fa <_dtoa_r+0x7ba>
 8005450:	9b00      	ldr	r3, [sp, #0]
 8005452:	e7d2      	b.n	80053fa <_dtoa_r+0x7ba>
 8005454:	2300      	movs	r3, #0
 8005456:	9307      	str	r3, [sp, #28]
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800545e:	6918      	ldr	r0, [r3, #16]
 8005460:	f000 fa4d 	bl	80058fe <__hi0bits>
 8005464:	f1c0 0020 	rsb	r0, r0, #32
 8005468:	4440      	add	r0, r8
 800546a:	f010 001f 	ands.w	r0, r0, #31
 800546e:	d047      	beq.n	8005500 <_dtoa_r+0x8c0>
 8005470:	f1c0 0320 	rsb	r3, r0, #32
 8005474:	2b04      	cmp	r3, #4
 8005476:	dd3b      	ble.n	80054f0 <_dtoa_r+0x8b0>
 8005478:	9b05      	ldr	r3, [sp, #20]
 800547a:	f1c0 001c 	rsb	r0, r0, #28
 800547e:	4403      	add	r3, r0
 8005480:	9305      	str	r3, [sp, #20]
 8005482:	4405      	add	r5, r0
 8005484:	4480      	add	r8, r0
 8005486:	9b05      	ldr	r3, [sp, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	dd05      	ble.n	8005498 <_dtoa_r+0x858>
 800548c:	461a      	mov	r2, r3
 800548e:	9904      	ldr	r1, [sp, #16]
 8005490:	4620      	mov	r0, r4
 8005492:	f000 fb6f 	bl	8005b74 <__lshift>
 8005496:	9004      	str	r0, [sp, #16]
 8005498:	f1b8 0f00 	cmp.w	r8, #0
 800549c:	dd05      	ble.n	80054aa <_dtoa_r+0x86a>
 800549e:	4639      	mov	r1, r7
 80054a0:	4642      	mov	r2, r8
 80054a2:	4620      	mov	r0, r4
 80054a4:	f000 fb66 	bl	8005b74 <__lshift>
 80054a8:	4607      	mov	r7, r0
 80054aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054ac:	b353      	cbz	r3, 8005504 <_dtoa_r+0x8c4>
 80054ae:	4639      	mov	r1, r7
 80054b0:	9804      	ldr	r0, [sp, #16]
 80054b2:	f000 fbb3 	bl	8005c1c <__mcmp>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	da24      	bge.n	8005504 <_dtoa_r+0x8c4>
 80054ba:	2300      	movs	r3, #0
 80054bc:	220a      	movs	r2, #10
 80054be:	9904      	ldr	r1, [sp, #16]
 80054c0:	4620      	mov	r0, r4
 80054c2:	f000 f9e1 	bl	8005888 <__multadd>
 80054c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c8:	9004      	str	r0, [sp, #16]
 80054ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f000 814d 	beq.w	800576e <_dtoa_r+0xb2e>
 80054d4:	2300      	movs	r3, #0
 80054d6:	4631      	mov	r1, r6
 80054d8:	220a      	movs	r2, #10
 80054da:	4620      	mov	r0, r4
 80054dc:	f000 f9d4 	bl	8005888 <__multadd>
 80054e0:	9b02      	ldr	r3, [sp, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	4606      	mov	r6, r0
 80054e6:	dc4f      	bgt.n	8005588 <_dtoa_r+0x948>
 80054e8:	9b06      	ldr	r3, [sp, #24]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	dd4c      	ble.n	8005588 <_dtoa_r+0x948>
 80054ee:	e011      	b.n	8005514 <_dtoa_r+0x8d4>
 80054f0:	d0c9      	beq.n	8005486 <_dtoa_r+0x846>
 80054f2:	9a05      	ldr	r2, [sp, #20]
 80054f4:	331c      	adds	r3, #28
 80054f6:	441a      	add	r2, r3
 80054f8:	9205      	str	r2, [sp, #20]
 80054fa:	441d      	add	r5, r3
 80054fc:	4498      	add	r8, r3
 80054fe:	e7c2      	b.n	8005486 <_dtoa_r+0x846>
 8005500:	4603      	mov	r3, r0
 8005502:	e7f6      	b.n	80054f2 <_dtoa_r+0x8b2>
 8005504:	f1b9 0f00 	cmp.w	r9, #0
 8005508:	dc38      	bgt.n	800557c <_dtoa_r+0x93c>
 800550a:	9b06      	ldr	r3, [sp, #24]
 800550c:	2b02      	cmp	r3, #2
 800550e:	dd35      	ble.n	800557c <_dtoa_r+0x93c>
 8005510:	f8cd 9008 	str.w	r9, [sp, #8]
 8005514:	9b02      	ldr	r3, [sp, #8]
 8005516:	b963      	cbnz	r3, 8005532 <_dtoa_r+0x8f2>
 8005518:	4639      	mov	r1, r7
 800551a:	2205      	movs	r2, #5
 800551c:	4620      	mov	r0, r4
 800551e:	f000 f9b3 	bl	8005888 <__multadd>
 8005522:	4601      	mov	r1, r0
 8005524:	4607      	mov	r7, r0
 8005526:	9804      	ldr	r0, [sp, #16]
 8005528:	f000 fb78 	bl	8005c1c <__mcmp>
 800552c:	2800      	cmp	r0, #0
 800552e:	f73f adcc 	bgt.w	80050ca <_dtoa_r+0x48a>
 8005532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005534:	465d      	mov	r5, fp
 8005536:	ea6f 0a03 	mvn.w	sl, r3
 800553a:	f04f 0900 	mov.w	r9, #0
 800553e:	4639      	mov	r1, r7
 8005540:	4620      	mov	r0, r4
 8005542:	f000 f98a 	bl	800585a <_Bfree>
 8005546:	2e00      	cmp	r6, #0
 8005548:	f43f aeb7 	beq.w	80052ba <_dtoa_r+0x67a>
 800554c:	f1b9 0f00 	cmp.w	r9, #0
 8005550:	d005      	beq.n	800555e <_dtoa_r+0x91e>
 8005552:	45b1      	cmp	r9, r6
 8005554:	d003      	beq.n	800555e <_dtoa_r+0x91e>
 8005556:	4649      	mov	r1, r9
 8005558:	4620      	mov	r0, r4
 800555a:	f000 f97e 	bl	800585a <_Bfree>
 800555e:	4631      	mov	r1, r6
 8005560:	4620      	mov	r0, r4
 8005562:	f000 f97a 	bl	800585a <_Bfree>
 8005566:	e6a8      	b.n	80052ba <_dtoa_r+0x67a>
 8005568:	2700      	movs	r7, #0
 800556a:	463e      	mov	r6, r7
 800556c:	e7e1      	b.n	8005532 <_dtoa_r+0x8f2>
 800556e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005572:	463e      	mov	r6, r7
 8005574:	e5a9      	b.n	80050ca <_dtoa_r+0x48a>
 8005576:	bf00      	nop
 8005578:	40240000 	.word	0x40240000
 800557c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800557e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005582:	2b00      	cmp	r3, #0
 8005584:	f000 80fa 	beq.w	800577c <_dtoa_r+0xb3c>
 8005588:	2d00      	cmp	r5, #0
 800558a:	dd05      	ble.n	8005598 <_dtoa_r+0x958>
 800558c:	4631      	mov	r1, r6
 800558e:	462a      	mov	r2, r5
 8005590:	4620      	mov	r0, r4
 8005592:	f000 faef 	bl	8005b74 <__lshift>
 8005596:	4606      	mov	r6, r0
 8005598:	9b07      	ldr	r3, [sp, #28]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d04c      	beq.n	8005638 <_dtoa_r+0x9f8>
 800559e:	6871      	ldr	r1, [r6, #4]
 80055a0:	4620      	mov	r0, r4
 80055a2:	f000 f926 	bl	80057f2 <_Balloc>
 80055a6:	6932      	ldr	r2, [r6, #16]
 80055a8:	3202      	adds	r2, #2
 80055aa:	4605      	mov	r5, r0
 80055ac:	0092      	lsls	r2, r2, #2
 80055ae:	f106 010c 	add.w	r1, r6, #12
 80055b2:	300c      	adds	r0, #12
 80055b4:	f000 f912 	bl	80057dc <memcpy>
 80055b8:	2201      	movs	r2, #1
 80055ba:	4629      	mov	r1, r5
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 fad9 	bl	8005b74 <__lshift>
 80055c2:	9b00      	ldr	r3, [sp, #0]
 80055c4:	f8cd b014 	str.w	fp, [sp, #20]
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	46b1      	mov	r9, r6
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	4606      	mov	r6, r0
 80055d2:	4639      	mov	r1, r7
 80055d4:	9804      	ldr	r0, [sp, #16]
 80055d6:	f7ff faa6 	bl	8004b26 <quorem>
 80055da:	4649      	mov	r1, r9
 80055dc:	4605      	mov	r5, r0
 80055de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055e2:	9804      	ldr	r0, [sp, #16]
 80055e4:	f000 fb1a 	bl	8005c1c <__mcmp>
 80055e8:	4632      	mov	r2, r6
 80055ea:	9000      	str	r0, [sp, #0]
 80055ec:	4639      	mov	r1, r7
 80055ee:	4620      	mov	r0, r4
 80055f0:	f000 fb2e 	bl	8005c50 <__mdiff>
 80055f4:	68c3      	ldr	r3, [r0, #12]
 80055f6:	4602      	mov	r2, r0
 80055f8:	bb03      	cbnz	r3, 800563c <_dtoa_r+0x9fc>
 80055fa:	4601      	mov	r1, r0
 80055fc:	9008      	str	r0, [sp, #32]
 80055fe:	9804      	ldr	r0, [sp, #16]
 8005600:	f000 fb0c 	bl	8005c1c <__mcmp>
 8005604:	9a08      	ldr	r2, [sp, #32]
 8005606:	4603      	mov	r3, r0
 8005608:	4611      	mov	r1, r2
 800560a:	4620      	mov	r0, r4
 800560c:	9308      	str	r3, [sp, #32]
 800560e:	f000 f924 	bl	800585a <_Bfree>
 8005612:	9b08      	ldr	r3, [sp, #32]
 8005614:	b9a3      	cbnz	r3, 8005640 <_dtoa_r+0xa00>
 8005616:	9a06      	ldr	r2, [sp, #24]
 8005618:	b992      	cbnz	r2, 8005640 <_dtoa_r+0xa00>
 800561a:	9a07      	ldr	r2, [sp, #28]
 800561c:	b982      	cbnz	r2, 8005640 <_dtoa_r+0xa00>
 800561e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005622:	d029      	beq.n	8005678 <_dtoa_r+0xa38>
 8005624:	9b00      	ldr	r3, [sp, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	dd01      	ble.n	800562e <_dtoa_r+0x9ee>
 800562a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800562e:	9b05      	ldr	r3, [sp, #20]
 8005630:	1c5d      	adds	r5, r3, #1
 8005632:	f883 8000 	strb.w	r8, [r3]
 8005636:	e782      	b.n	800553e <_dtoa_r+0x8fe>
 8005638:	4630      	mov	r0, r6
 800563a:	e7c2      	b.n	80055c2 <_dtoa_r+0x982>
 800563c:	2301      	movs	r3, #1
 800563e:	e7e3      	b.n	8005608 <_dtoa_r+0x9c8>
 8005640:	9a00      	ldr	r2, [sp, #0]
 8005642:	2a00      	cmp	r2, #0
 8005644:	db04      	blt.n	8005650 <_dtoa_r+0xa10>
 8005646:	d125      	bne.n	8005694 <_dtoa_r+0xa54>
 8005648:	9a06      	ldr	r2, [sp, #24]
 800564a:	bb1a      	cbnz	r2, 8005694 <_dtoa_r+0xa54>
 800564c:	9a07      	ldr	r2, [sp, #28]
 800564e:	bb0a      	cbnz	r2, 8005694 <_dtoa_r+0xa54>
 8005650:	2b00      	cmp	r3, #0
 8005652:	ddec      	ble.n	800562e <_dtoa_r+0x9ee>
 8005654:	2201      	movs	r2, #1
 8005656:	9904      	ldr	r1, [sp, #16]
 8005658:	4620      	mov	r0, r4
 800565a:	f000 fa8b 	bl	8005b74 <__lshift>
 800565e:	4639      	mov	r1, r7
 8005660:	9004      	str	r0, [sp, #16]
 8005662:	f000 fadb 	bl	8005c1c <__mcmp>
 8005666:	2800      	cmp	r0, #0
 8005668:	dc03      	bgt.n	8005672 <_dtoa_r+0xa32>
 800566a:	d1e0      	bne.n	800562e <_dtoa_r+0x9ee>
 800566c:	f018 0f01 	tst.w	r8, #1
 8005670:	d0dd      	beq.n	800562e <_dtoa_r+0x9ee>
 8005672:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005676:	d1d8      	bne.n	800562a <_dtoa_r+0x9ea>
 8005678:	9b05      	ldr	r3, [sp, #20]
 800567a:	9a05      	ldr	r2, [sp, #20]
 800567c:	1c5d      	adds	r5, r3, #1
 800567e:	2339      	movs	r3, #57	; 0x39
 8005680:	7013      	strb	r3, [r2, #0]
 8005682:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005686:	2b39      	cmp	r3, #57	; 0x39
 8005688:	f105 32ff 	add.w	r2, r5, #4294967295
 800568c:	d04f      	beq.n	800572e <_dtoa_r+0xaee>
 800568e:	3301      	adds	r3, #1
 8005690:	7013      	strb	r3, [r2, #0]
 8005692:	e754      	b.n	800553e <_dtoa_r+0x8fe>
 8005694:	9a05      	ldr	r2, [sp, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	f102 0501 	add.w	r5, r2, #1
 800569c:	dd06      	ble.n	80056ac <_dtoa_r+0xa6c>
 800569e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056a2:	d0e9      	beq.n	8005678 <_dtoa_r+0xa38>
 80056a4:	f108 0801 	add.w	r8, r8, #1
 80056a8:	9b05      	ldr	r3, [sp, #20]
 80056aa:	e7c2      	b.n	8005632 <_dtoa_r+0x9f2>
 80056ac:	9a02      	ldr	r2, [sp, #8]
 80056ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80056b2:	eba5 030b 	sub.w	r3, r5, fp
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d021      	beq.n	80056fe <_dtoa_r+0xabe>
 80056ba:	2300      	movs	r3, #0
 80056bc:	220a      	movs	r2, #10
 80056be:	9904      	ldr	r1, [sp, #16]
 80056c0:	4620      	mov	r0, r4
 80056c2:	f000 f8e1 	bl	8005888 <__multadd>
 80056c6:	45b1      	cmp	r9, r6
 80056c8:	9004      	str	r0, [sp, #16]
 80056ca:	f04f 0300 	mov.w	r3, #0
 80056ce:	f04f 020a 	mov.w	r2, #10
 80056d2:	4649      	mov	r1, r9
 80056d4:	4620      	mov	r0, r4
 80056d6:	d105      	bne.n	80056e4 <_dtoa_r+0xaa4>
 80056d8:	f000 f8d6 	bl	8005888 <__multadd>
 80056dc:	4681      	mov	r9, r0
 80056de:	4606      	mov	r6, r0
 80056e0:	9505      	str	r5, [sp, #20]
 80056e2:	e776      	b.n	80055d2 <_dtoa_r+0x992>
 80056e4:	f000 f8d0 	bl	8005888 <__multadd>
 80056e8:	4631      	mov	r1, r6
 80056ea:	4681      	mov	r9, r0
 80056ec:	2300      	movs	r3, #0
 80056ee:	220a      	movs	r2, #10
 80056f0:	4620      	mov	r0, r4
 80056f2:	f000 f8c9 	bl	8005888 <__multadd>
 80056f6:	4606      	mov	r6, r0
 80056f8:	e7f2      	b.n	80056e0 <_dtoa_r+0xaa0>
 80056fa:	f04f 0900 	mov.w	r9, #0
 80056fe:	2201      	movs	r2, #1
 8005700:	9904      	ldr	r1, [sp, #16]
 8005702:	4620      	mov	r0, r4
 8005704:	f000 fa36 	bl	8005b74 <__lshift>
 8005708:	4639      	mov	r1, r7
 800570a:	9004      	str	r0, [sp, #16]
 800570c:	f000 fa86 	bl	8005c1c <__mcmp>
 8005710:	2800      	cmp	r0, #0
 8005712:	dcb6      	bgt.n	8005682 <_dtoa_r+0xa42>
 8005714:	d102      	bne.n	800571c <_dtoa_r+0xadc>
 8005716:	f018 0f01 	tst.w	r8, #1
 800571a:	d1b2      	bne.n	8005682 <_dtoa_r+0xa42>
 800571c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005720:	2b30      	cmp	r3, #48	; 0x30
 8005722:	f105 32ff 	add.w	r2, r5, #4294967295
 8005726:	f47f af0a 	bne.w	800553e <_dtoa_r+0x8fe>
 800572a:	4615      	mov	r5, r2
 800572c:	e7f6      	b.n	800571c <_dtoa_r+0xadc>
 800572e:	4593      	cmp	fp, r2
 8005730:	d105      	bne.n	800573e <_dtoa_r+0xafe>
 8005732:	2331      	movs	r3, #49	; 0x31
 8005734:	f10a 0a01 	add.w	sl, sl, #1
 8005738:	f88b 3000 	strb.w	r3, [fp]
 800573c:	e6ff      	b.n	800553e <_dtoa_r+0x8fe>
 800573e:	4615      	mov	r5, r2
 8005740:	e79f      	b.n	8005682 <_dtoa_r+0xa42>
 8005742:	f8df b064 	ldr.w	fp, [pc, #100]	; 80057a8 <_dtoa_r+0xb68>
 8005746:	e007      	b.n	8005758 <_dtoa_r+0xb18>
 8005748:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800574a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80057ac <_dtoa_r+0xb6c>
 800574e:	b11b      	cbz	r3, 8005758 <_dtoa_r+0xb18>
 8005750:	f10b 0308 	add.w	r3, fp, #8
 8005754:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	4658      	mov	r0, fp
 800575a:	b017      	add	sp, #92	; 0x5c
 800575c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005760:	9b06      	ldr	r3, [sp, #24]
 8005762:	2b01      	cmp	r3, #1
 8005764:	f77f ae35 	ble.w	80053d2 <_dtoa_r+0x792>
 8005768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800576a:	9307      	str	r3, [sp, #28]
 800576c:	e649      	b.n	8005402 <_dtoa_r+0x7c2>
 800576e:	9b02      	ldr	r3, [sp, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	dc03      	bgt.n	800577c <_dtoa_r+0xb3c>
 8005774:	9b06      	ldr	r3, [sp, #24]
 8005776:	2b02      	cmp	r3, #2
 8005778:	f73f aecc 	bgt.w	8005514 <_dtoa_r+0x8d4>
 800577c:	465d      	mov	r5, fp
 800577e:	4639      	mov	r1, r7
 8005780:	9804      	ldr	r0, [sp, #16]
 8005782:	f7ff f9d0 	bl	8004b26 <quorem>
 8005786:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800578a:	f805 8b01 	strb.w	r8, [r5], #1
 800578e:	9a02      	ldr	r2, [sp, #8]
 8005790:	eba5 030b 	sub.w	r3, r5, fp
 8005794:	429a      	cmp	r2, r3
 8005796:	ddb0      	ble.n	80056fa <_dtoa_r+0xaba>
 8005798:	2300      	movs	r3, #0
 800579a:	220a      	movs	r2, #10
 800579c:	9904      	ldr	r1, [sp, #16]
 800579e:	4620      	mov	r0, r4
 80057a0:	f000 f872 	bl	8005888 <__multadd>
 80057a4:	9004      	str	r0, [sp, #16]
 80057a6:	e7ea      	b.n	800577e <_dtoa_r+0xb3e>
 80057a8:	08005f20 	.word	0x08005f20
 80057ac:	08005f22 	.word	0x08005f22

080057b0 <_localeconv_r>:
 80057b0:	4b04      	ldr	r3, [pc, #16]	; (80057c4 <_localeconv_r+0x14>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	6a18      	ldr	r0, [r3, #32]
 80057b6:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <_localeconv_r+0x18>)
 80057b8:	2800      	cmp	r0, #0
 80057ba:	bf08      	it	eq
 80057bc:	4618      	moveq	r0, r3
 80057be:	30f0      	adds	r0, #240	; 0xf0
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	2000000c 	.word	0x2000000c
 80057c8:	20000070 	.word	0x20000070

080057cc <malloc>:
 80057cc:	4b02      	ldr	r3, [pc, #8]	; (80057d8 <malloc+0xc>)
 80057ce:	4601      	mov	r1, r0
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	f000 baf7 	b.w	8005dc4 <_malloc_r>
 80057d6:	bf00      	nop
 80057d8:	2000000c 	.word	0x2000000c

080057dc <memcpy>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	1e43      	subs	r3, r0, #1
 80057e0:	440a      	add	r2, r1
 80057e2:	4291      	cmp	r1, r2
 80057e4:	d100      	bne.n	80057e8 <memcpy+0xc>
 80057e6:	bd10      	pop	{r4, pc}
 80057e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057f0:	e7f7      	b.n	80057e2 <memcpy+0x6>

080057f2 <_Balloc>:
 80057f2:	b570      	push	{r4, r5, r6, lr}
 80057f4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057f6:	4604      	mov	r4, r0
 80057f8:	460e      	mov	r6, r1
 80057fa:	b93d      	cbnz	r5, 800580c <_Balloc+0x1a>
 80057fc:	2010      	movs	r0, #16
 80057fe:	f7ff ffe5 	bl	80057cc <malloc>
 8005802:	6260      	str	r0, [r4, #36]	; 0x24
 8005804:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005808:	6005      	str	r5, [r0, #0]
 800580a:	60c5      	str	r5, [r0, #12]
 800580c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800580e:	68eb      	ldr	r3, [r5, #12]
 8005810:	b183      	cbz	r3, 8005834 <_Balloc+0x42>
 8005812:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800581a:	b9b8      	cbnz	r0, 800584c <_Balloc+0x5a>
 800581c:	2101      	movs	r1, #1
 800581e:	fa01 f506 	lsl.w	r5, r1, r6
 8005822:	1d6a      	adds	r2, r5, #5
 8005824:	0092      	lsls	r2, r2, #2
 8005826:	4620      	mov	r0, r4
 8005828:	f000 fabe 	bl	8005da8 <_calloc_r>
 800582c:	b160      	cbz	r0, 8005848 <_Balloc+0x56>
 800582e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005832:	e00e      	b.n	8005852 <_Balloc+0x60>
 8005834:	2221      	movs	r2, #33	; 0x21
 8005836:	2104      	movs	r1, #4
 8005838:	4620      	mov	r0, r4
 800583a:	f000 fab5 	bl	8005da8 <_calloc_r>
 800583e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005840:	60e8      	str	r0, [r5, #12]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e4      	bne.n	8005812 <_Balloc+0x20>
 8005848:	2000      	movs	r0, #0
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	6802      	ldr	r2, [r0, #0]
 800584e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005852:	2300      	movs	r3, #0
 8005854:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005858:	e7f7      	b.n	800584a <_Balloc+0x58>

0800585a <_Bfree>:
 800585a:	b570      	push	{r4, r5, r6, lr}
 800585c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800585e:	4606      	mov	r6, r0
 8005860:	460d      	mov	r5, r1
 8005862:	b93c      	cbnz	r4, 8005874 <_Bfree+0x1a>
 8005864:	2010      	movs	r0, #16
 8005866:	f7ff ffb1 	bl	80057cc <malloc>
 800586a:	6270      	str	r0, [r6, #36]	; 0x24
 800586c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005870:	6004      	str	r4, [r0, #0]
 8005872:	60c4      	str	r4, [r0, #12]
 8005874:	b13d      	cbz	r5, 8005886 <_Bfree+0x2c>
 8005876:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005878:	686a      	ldr	r2, [r5, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005880:	6029      	str	r1, [r5, #0]
 8005882:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005886:	bd70      	pop	{r4, r5, r6, pc}

08005888 <__multadd>:
 8005888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800588c:	690d      	ldr	r5, [r1, #16]
 800588e:	461f      	mov	r7, r3
 8005890:	4606      	mov	r6, r0
 8005892:	460c      	mov	r4, r1
 8005894:	f101 0c14 	add.w	ip, r1, #20
 8005898:	2300      	movs	r3, #0
 800589a:	f8dc 0000 	ldr.w	r0, [ip]
 800589e:	b281      	uxth	r1, r0
 80058a0:	fb02 7101 	mla	r1, r2, r1, r7
 80058a4:	0c0f      	lsrs	r7, r1, #16
 80058a6:	0c00      	lsrs	r0, r0, #16
 80058a8:	fb02 7000 	mla	r0, r2, r0, r7
 80058ac:	b289      	uxth	r1, r1
 80058ae:	3301      	adds	r3, #1
 80058b0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80058b4:	429d      	cmp	r5, r3
 80058b6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80058ba:	f84c 1b04 	str.w	r1, [ip], #4
 80058be:	dcec      	bgt.n	800589a <__multadd+0x12>
 80058c0:	b1d7      	cbz	r7, 80058f8 <__multadd+0x70>
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	42ab      	cmp	r3, r5
 80058c6:	dc12      	bgt.n	80058ee <__multadd+0x66>
 80058c8:	6861      	ldr	r1, [r4, #4]
 80058ca:	4630      	mov	r0, r6
 80058cc:	3101      	adds	r1, #1
 80058ce:	f7ff ff90 	bl	80057f2 <_Balloc>
 80058d2:	6922      	ldr	r2, [r4, #16]
 80058d4:	3202      	adds	r2, #2
 80058d6:	f104 010c 	add.w	r1, r4, #12
 80058da:	4680      	mov	r8, r0
 80058dc:	0092      	lsls	r2, r2, #2
 80058de:	300c      	adds	r0, #12
 80058e0:	f7ff ff7c 	bl	80057dc <memcpy>
 80058e4:	4621      	mov	r1, r4
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7ff ffb7 	bl	800585a <_Bfree>
 80058ec:	4644      	mov	r4, r8
 80058ee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80058f2:	3501      	adds	r5, #1
 80058f4:	615f      	str	r7, [r3, #20]
 80058f6:	6125      	str	r5, [r4, #16]
 80058f8:	4620      	mov	r0, r4
 80058fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080058fe <__hi0bits>:
 80058fe:	0c02      	lsrs	r2, r0, #16
 8005900:	0412      	lsls	r2, r2, #16
 8005902:	4603      	mov	r3, r0
 8005904:	b9b2      	cbnz	r2, 8005934 <__hi0bits+0x36>
 8005906:	0403      	lsls	r3, r0, #16
 8005908:	2010      	movs	r0, #16
 800590a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800590e:	bf04      	itt	eq
 8005910:	021b      	lsleq	r3, r3, #8
 8005912:	3008      	addeq	r0, #8
 8005914:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005918:	bf04      	itt	eq
 800591a:	011b      	lsleq	r3, r3, #4
 800591c:	3004      	addeq	r0, #4
 800591e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005922:	bf04      	itt	eq
 8005924:	009b      	lsleq	r3, r3, #2
 8005926:	3002      	addeq	r0, #2
 8005928:	2b00      	cmp	r3, #0
 800592a:	db06      	blt.n	800593a <__hi0bits+0x3c>
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	d503      	bpl.n	8005938 <__hi0bits+0x3a>
 8005930:	3001      	adds	r0, #1
 8005932:	4770      	bx	lr
 8005934:	2000      	movs	r0, #0
 8005936:	e7e8      	b.n	800590a <__hi0bits+0xc>
 8005938:	2020      	movs	r0, #32
 800593a:	4770      	bx	lr

0800593c <__lo0bits>:
 800593c:	6803      	ldr	r3, [r0, #0]
 800593e:	f013 0207 	ands.w	r2, r3, #7
 8005942:	4601      	mov	r1, r0
 8005944:	d00b      	beq.n	800595e <__lo0bits+0x22>
 8005946:	07da      	lsls	r2, r3, #31
 8005948:	d423      	bmi.n	8005992 <__lo0bits+0x56>
 800594a:	0798      	lsls	r0, r3, #30
 800594c:	bf49      	itett	mi
 800594e:	085b      	lsrmi	r3, r3, #1
 8005950:	089b      	lsrpl	r3, r3, #2
 8005952:	2001      	movmi	r0, #1
 8005954:	600b      	strmi	r3, [r1, #0]
 8005956:	bf5c      	itt	pl
 8005958:	600b      	strpl	r3, [r1, #0]
 800595a:	2002      	movpl	r0, #2
 800595c:	4770      	bx	lr
 800595e:	b298      	uxth	r0, r3
 8005960:	b9a8      	cbnz	r0, 800598e <__lo0bits+0x52>
 8005962:	0c1b      	lsrs	r3, r3, #16
 8005964:	2010      	movs	r0, #16
 8005966:	f013 0fff 	tst.w	r3, #255	; 0xff
 800596a:	bf04      	itt	eq
 800596c:	0a1b      	lsreq	r3, r3, #8
 800596e:	3008      	addeq	r0, #8
 8005970:	071a      	lsls	r2, r3, #28
 8005972:	bf04      	itt	eq
 8005974:	091b      	lsreq	r3, r3, #4
 8005976:	3004      	addeq	r0, #4
 8005978:	079a      	lsls	r2, r3, #30
 800597a:	bf04      	itt	eq
 800597c:	089b      	lsreq	r3, r3, #2
 800597e:	3002      	addeq	r0, #2
 8005980:	07da      	lsls	r2, r3, #31
 8005982:	d402      	bmi.n	800598a <__lo0bits+0x4e>
 8005984:	085b      	lsrs	r3, r3, #1
 8005986:	d006      	beq.n	8005996 <__lo0bits+0x5a>
 8005988:	3001      	adds	r0, #1
 800598a:	600b      	str	r3, [r1, #0]
 800598c:	4770      	bx	lr
 800598e:	4610      	mov	r0, r2
 8005990:	e7e9      	b.n	8005966 <__lo0bits+0x2a>
 8005992:	2000      	movs	r0, #0
 8005994:	4770      	bx	lr
 8005996:	2020      	movs	r0, #32
 8005998:	4770      	bx	lr

0800599a <__i2b>:
 800599a:	b510      	push	{r4, lr}
 800599c:	460c      	mov	r4, r1
 800599e:	2101      	movs	r1, #1
 80059a0:	f7ff ff27 	bl	80057f2 <_Balloc>
 80059a4:	2201      	movs	r2, #1
 80059a6:	6144      	str	r4, [r0, #20]
 80059a8:	6102      	str	r2, [r0, #16]
 80059aa:	bd10      	pop	{r4, pc}

080059ac <__multiply>:
 80059ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b0:	4614      	mov	r4, r2
 80059b2:	690a      	ldr	r2, [r1, #16]
 80059b4:	6923      	ldr	r3, [r4, #16]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	bfb8      	it	lt
 80059ba:	460b      	movlt	r3, r1
 80059bc:	4688      	mov	r8, r1
 80059be:	bfbc      	itt	lt
 80059c0:	46a0      	movlt	r8, r4
 80059c2:	461c      	movlt	r4, r3
 80059c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80059c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80059cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80059d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80059d4:	eb07 0609 	add.w	r6, r7, r9
 80059d8:	42b3      	cmp	r3, r6
 80059da:	bfb8      	it	lt
 80059dc:	3101      	addlt	r1, #1
 80059de:	f7ff ff08 	bl	80057f2 <_Balloc>
 80059e2:	f100 0514 	add.w	r5, r0, #20
 80059e6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80059ea:	462b      	mov	r3, r5
 80059ec:	2200      	movs	r2, #0
 80059ee:	4573      	cmp	r3, lr
 80059f0:	d316      	bcc.n	8005a20 <__multiply+0x74>
 80059f2:	f104 0214 	add.w	r2, r4, #20
 80059f6:	f108 0114 	add.w	r1, r8, #20
 80059fa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80059fe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	9b00      	ldr	r3, [sp, #0]
 8005a06:	9201      	str	r2, [sp, #4]
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d80c      	bhi.n	8005a26 <__multiply+0x7a>
 8005a0c:	2e00      	cmp	r6, #0
 8005a0e:	dd03      	ble.n	8005a18 <__multiply+0x6c>
 8005a10:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d05d      	beq.n	8005ad4 <__multiply+0x128>
 8005a18:	6106      	str	r6, [r0, #16]
 8005a1a:	b003      	add	sp, #12
 8005a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a20:	f843 2b04 	str.w	r2, [r3], #4
 8005a24:	e7e3      	b.n	80059ee <__multiply+0x42>
 8005a26:	f8b2 b000 	ldrh.w	fp, [r2]
 8005a2a:	f1bb 0f00 	cmp.w	fp, #0
 8005a2e:	d023      	beq.n	8005a78 <__multiply+0xcc>
 8005a30:	4689      	mov	r9, r1
 8005a32:	46ac      	mov	ip, r5
 8005a34:	f04f 0800 	mov.w	r8, #0
 8005a38:	f859 4b04 	ldr.w	r4, [r9], #4
 8005a3c:	f8dc a000 	ldr.w	sl, [ip]
 8005a40:	b2a3      	uxth	r3, r4
 8005a42:	fa1f fa8a 	uxth.w	sl, sl
 8005a46:	fb0b a303 	mla	r3, fp, r3, sl
 8005a4a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005a4e:	f8dc 4000 	ldr.w	r4, [ip]
 8005a52:	4443      	add	r3, r8
 8005a54:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005a58:	fb0b 840a 	mla	r4, fp, sl, r8
 8005a5c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005a60:	46e2      	mov	sl, ip
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005a68:	454f      	cmp	r7, r9
 8005a6a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005a6e:	f84a 3b04 	str.w	r3, [sl], #4
 8005a72:	d82b      	bhi.n	8005acc <__multiply+0x120>
 8005a74:	f8cc 8004 	str.w	r8, [ip, #4]
 8005a78:	9b01      	ldr	r3, [sp, #4]
 8005a7a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005a7e:	3204      	adds	r2, #4
 8005a80:	f1ba 0f00 	cmp.w	sl, #0
 8005a84:	d020      	beq.n	8005ac8 <__multiply+0x11c>
 8005a86:	682b      	ldr	r3, [r5, #0]
 8005a88:	4689      	mov	r9, r1
 8005a8a:	46a8      	mov	r8, r5
 8005a8c:	f04f 0b00 	mov.w	fp, #0
 8005a90:	f8b9 c000 	ldrh.w	ip, [r9]
 8005a94:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005a98:	fb0a 440c 	mla	r4, sl, ip, r4
 8005a9c:	445c      	add	r4, fp
 8005a9e:	46c4      	mov	ip, r8
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005aa6:	f84c 3b04 	str.w	r3, [ip], #4
 8005aaa:	f859 3b04 	ldr.w	r3, [r9], #4
 8005aae:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005ab2:	0c1b      	lsrs	r3, r3, #16
 8005ab4:	fb0a b303 	mla	r3, sl, r3, fp
 8005ab8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005abc:	454f      	cmp	r7, r9
 8005abe:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005ac2:	d805      	bhi.n	8005ad0 <__multiply+0x124>
 8005ac4:	f8c8 3004 	str.w	r3, [r8, #4]
 8005ac8:	3504      	adds	r5, #4
 8005aca:	e79b      	b.n	8005a04 <__multiply+0x58>
 8005acc:	46d4      	mov	ip, sl
 8005ace:	e7b3      	b.n	8005a38 <__multiply+0x8c>
 8005ad0:	46e0      	mov	r8, ip
 8005ad2:	e7dd      	b.n	8005a90 <__multiply+0xe4>
 8005ad4:	3e01      	subs	r6, #1
 8005ad6:	e799      	b.n	8005a0c <__multiply+0x60>

08005ad8 <__pow5mult>:
 8005ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005adc:	4615      	mov	r5, r2
 8005ade:	f012 0203 	ands.w	r2, r2, #3
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	460f      	mov	r7, r1
 8005ae6:	d007      	beq.n	8005af8 <__pow5mult+0x20>
 8005ae8:	3a01      	subs	r2, #1
 8005aea:	4c21      	ldr	r4, [pc, #132]	; (8005b70 <__pow5mult+0x98>)
 8005aec:	2300      	movs	r3, #0
 8005aee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005af2:	f7ff fec9 	bl	8005888 <__multadd>
 8005af6:	4607      	mov	r7, r0
 8005af8:	10ad      	asrs	r5, r5, #2
 8005afa:	d035      	beq.n	8005b68 <__pow5mult+0x90>
 8005afc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005afe:	b93c      	cbnz	r4, 8005b10 <__pow5mult+0x38>
 8005b00:	2010      	movs	r0, #16
 8005b02:	f7ff fe63 	bl	80057cc <malloc>
 8005b06:	6270      	str	r0, [r6, #36]	; 0x24
 8005b08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005b0c:	6004      	str	r4, [r0, #0]
 8005b0e:	60c4      	str	r4, [r0, #12]
 8005b10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005b14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005b18:	b94c      	cbnz	r4, 8005b2e <__pow5mult+0x56>
 8005b1a:	f240 2171 	movw	r1, #625	; 0x271
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7ff ff3b 	bl	800599a <__i2b>
 8005b24:	2300      	movs	r3, #0
 8005b26:	f8c8 0008 	str.w	r0, [r8, #8]
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	6003      	str	r3, [r0, #0]
 8005b2e:	f04f 0800 	mov.w	r8, #0
 8005b32:	07eb      	lsls	r3, r5, #31
 8005b34:	d50a      	bpl.n	8005b4c <__pow5mult+0x74>
 8005b36:	4639      	mov	r1, r7
 8005b38:	4622      	mov	r2, r4
 8005b3a:	4630      	mov	r0, r6
 8005b3c:	f7ff ff36 	bl	80059ac <__multiply>
 8005b40:	4639      	mov	r1, r7
 8005b42:	4681      	mov	r9, r0
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff fe88 	bl	800585a <_Bfree>
 8005b4a:	464f      	mov	r7, r9
 8005b4c:	106d      	asrs	r5, r5, #1
 8005b4e:	d00b      	beq.n	8005b68 <__pow5mult+0x90>
 8005b50:	6820      	ldr	r0, [r4, #0]
 8005b52:	b938      	cbnz	r0, 8005b64 <__pow5mult+0x8c>
 8005b54:	4622      	mov	r2, r4
 8005b56:	4621      	mov	r1, r4
 8005b58:	4630      	mov	r0, r6
 8005b5a:	f7ff ff27 	bl	80059ac <__multiply>
 8005b5e:	6020      	str	r0, [r4, #0]
 8005b60:	f8c0 8000 	str.w	r8, [r0]
 8005b64:	4604      	mov	r4, r0
 8005b66:	e7e4      	b.n	8005b32 <__pow5mult+0x5a>
 8005b68:	4638      	mov	r0, r7
 8005b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6e:	bf00      	nop
 8005b70:	08006080 	.word	0x08006080

08005b74 <__lshift>:
 8005b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b78:	460c      	mov	r4, r1
 8005b7a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005b7e:	6923      	ldr	r3, [r4, #16]
 8005b80:	6849      	ldr	r1, [r1, #4]
 8005b82:	eb0a 0903 	add.w	r9, sl, r3
 8005b86:	68a3      	ldr	r3, [r4, #8]
 8005b88:	4607      	mov	r7, r0
 8005b8a:	4616      	mov	r6, r2
 8005b8c:	f109 0501 	add.w	r5, r9, #1
 8005b90:	42ab      	cmp	r3, r5
 8005b92:	db32      	blt.n	8005bfa <__lshift+0x86>
 8005b94:	4638      	mov	r0, r7
 8005b96:	f7ff fe2c 	bl	80057f2 <_Balloc>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	4680      	mov	r8, r0
 8005b9e:	f100 0114 	add.w	r1, r0, #20
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4553      	cmp	r3, sl
 8005ba6:	db2b      	blt.n	8005c00 <__lshift+0x8c>
 8005ba8:	6920      	ldr	r0, [r4, #16]
 8005baa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005bae:	f104 0314 	add.w	r3, r4, #20
 8005bb2:	f016 021f 	ands.w	r2, r6, #31
 8005bb6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005bba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005bbe:	d025      	beq.n	8005c0c <__lshift+0x98>
 8005bc0:	f1c2 0e20 	rsb	lr, r2, #32
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	681e      	ldr	r6, [r3, #0]
 8005bc8:	468a      	mov	sl, r1
 8005bca:	4096      	lsls	r6, r2
 8005bcc:	4330      	orrs	r0, r6
 8005bce:	f84a 0b04 	str.w	r0, [sl], #4
 8005bd2:	f853 0b04 	ldr.w	r0, [r3], #4
 8005bd6:	459c      	cmp	ip, r3
 8005bd8:	fa20 f00e 	lsr.w	r0, r0, lr
 8005bdc:	d814      	bhi.n	8005c08 <__lshift+0x94>
 8005bde:	6048      	str	r0, [r1, #4]
 8005be0:	b108      	cbz	r0, 8005be6 <__lshift+0x72>
 8005be2:	f109 0502 	add.w	r5, r9, #2
 8005be6:	3d01      	subs	r5, #1
 8005be8:	4638      	mov	r0, r7
 8005bea:	f8c8 5010 	str.w	r5, [r8, #16]
 8005bee:	4621      	mov	r1, r4
 8005bf0:	f7ff fe33 	bl	800585a <_Bfree>
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bfa:	3101      	adds	r1, #1
 8005bfc:	005b      	lsls	r3, r3, #1
 8005bfe:	e7c7      	b.n	8005b90 <__lshift+0x1c>
 8005c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005c04:	3301      	adds	r3, #1
 8005c06:	e7cd      	b.n	8005ba4 <__lshift+0x30>
 8005c08:	4651      	mov	r1, sl
 8005c0a:	e7dc      	b.n	8005bc6 <__lshift+0x52>
 8005c0c:	3904      	subs	r1, #4
 8005c0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c12:	f841 2f04 	str.w	r2, [r1, #4]!
 8005c16:	459c      	cmp	ip, r3
 8005c18:	d8f9      	bhi.n	8005c0e <__lshift+0x9a>
 8005c1a:	e7e4      	b.n	8005be6 <__lshift+0x72>

08005c1c <__mcmp>:
 8005c1c:	6903      	ldr	r3, [r0, #16]
 8005c1e:	690a      	ldr	r2, [r1, #16]
 8005c20:	1a9b      	subs	r3, r3, r2
 8005c22:	b530      	push	{r4, r5, lr}
 8005c24:	d10c      	bne.n	8005c40 <__mcmp+0x24>
 8005c26:	0092      	lsls	r2, r2, #2
 8005c28:	3014      	adds	r0, #20
 8005c2a:	3114      	adds	r1, #20
 8005c2c:	1884      	adds	r4, r0, r2
 8005c2e:	4411      	add	r1, r2
 8005c30:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005c34:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005c38:	4295      	cmp	r5, r2
 8005c3a:	d003      	beq.n	8005c44 <__mcmp+0x28>
 8005c3c:	d305      	bcc.n	8005c4a <__mcmp+0x2e>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd30      	pop	{r4, r5, pc}
 8005c44:	42a0      	cmp	r0, r4
 8005c46:	d3f3      	bcc.n	8005c30 <__mcmp+0x14>
 8005c48:	e7fa      	b.n	8005c40 <__mcmp+0x24>
 8005c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4e:	e7f7      	b.n	8005c40 <__mcmp+0x24>

08005c50 <__mdiff>:
 8005c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	460d      	mov	r5, r1
 8005c56:	4607      	mov	r7, r0
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	4614      	mov	r4, r2
 8005c5e:	f7ff ffdd 	bl	8005c1c <__mcmp>
 8005c62:	1e06      	subs	r6, r0, #0
 8005c64:	d108      	bne.n	8005c78 <__mdiff+0x28>
 8005c66:	4631      	mov	r1, r6
 8005c68:	4638      	mov	r0, r7
 8005c6a:	f7ff fdc2 	bl	80057f2 <_Balloc>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c78:	bfa4      	itt	ge
 8005c7a:	4623      	movge	r3, r4
 8005c7c:	462c      	movge	r4, r5
 8005c7e:	4638      	mov	r0, r7
 8005c80:	6861      	ldr	r1, [r4, #4]
 8005c82:	bfa6      	itte	ge
 8005c84:	461d      	movge	r5, r3
 8005c86:	2600      	movge	r6, #0
 8005c88:	2601      	movlt	r6, #1
 8005c8a:	f7ff fdb2 	bl	80057f2 <_Balloc>
 8005c8e:	692b      	ldr	r3, [r5, #16]
 8005c90:	60c6      	str	r6, [r0, #12]
 8005c92:	6926      	ldr	r6, [r4, #16]
 8005c94:	f105 0914 	add.w	r9, r5, #20
 8005c98:	f104 0214 	add.w	r2, r4, #20
 8005c9c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005ca0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005ca4:	f100 0514 	add.w	r5, r0, #20
 8005ca8:	f04f 0e00 	mov.w	lr, #0
 8005cac:	f852 ab04 	ldr.w	sl, [r2], #4
 8005cb0:	f859 4b04 	ldr.w	r4, [r9], #4
 8005cb4:	fa1e f18a 	uxtah	r1, lr, sl
 8005cb8:	b2a3      	uxth	r3, r4
 8005cba:	1ac9      	subs	r1, r1, r3
 8005cbc:	0c23      	lsrs	r3, r4, #16
 8005cbe:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005cc2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005cc6:	b289      	uxth	r1, r1
 8005cc8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005ccc:	45c8      	cmp	r8, r9
 8005cce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005cd2:	4694      	mov	ip, r2
 8005cd4:	f845 3b04 	str.w	r3, [r5], #4
 8005cd8:	d8e8      	bhi.n	8005cac <__mdiff+0x5c>
 8005cda:	45bc      	cmp	ip, r7
 8005cdc:	d304      	bcc.n	8005ce8 <__mdiff+0x98>
 8005cde:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005ce2:	b183      	cbz	r3, 8005d06 <__mdiff+0xb6>
 8005ce4:	6106      	str	r6, [r0, #16]
 8005ce6:	e7c5      	b.n	8005c74 <__mdiff+0x24>
 8005ce8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005cec:	fa1e f381 	uxtah	r3, lr, r1
 8005cf0:	141a      	asrs	r2, r3, #16
 8005cf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cfc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005d00:	f845 3b04 	str.w	r3, [r5], #4
 8005d04:	e7e9      	b.n	8005cda <__mdiff+0x8a>
 8005d06:	3e01      	subs	r6, #1
 8005d08:	e7e9      	b.n	8005cde <__mdiff+0x8e>

08005d0a <__d2b>:
 8005d0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005d0e:	460e      	mov	r6, r1
 8005d10:	2101      	movs	r1, #1
 8005d12:	ec59 8b10 	vmov	r8, r9, d0
 8005d16:	4615      	mov	r5, r2
 8005d18:	f7ff fd6b 	bl	80057f2 <_Balloc>
 8005d1c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005d20:	4607      	mov	r7, r0
 8005d22:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d26:	bb34      	cbnz	r4, 8005d76 <__d2b+0x6c>
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	f1b8 0300 	subs.w	r3, r8, #0
 8005d2e:	d027      	beq.n	8005d80 <__d2b+0x76>
 8005d30:	a802      	add	r0, sp, #8
 8005d32:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005d36:	f7ff fe01 	bl	800593c <__lo0bits>
 8005d3a:	9900      	ldr	r1, [sp, #0]
 8005d3c:	b1f0      	cbz	r0, 8005d7c <__d2b+0x72>
 8005d3e:	9a01      	ldr	r2, [sp, #4]
 8005d40:	f1c0 0320 	rsb	r3, r0, #32
 8005d44:	fa02 f303 	lsl.w	r3, r2, r3
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	40c2      	lsrs	r2, r0
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	9201      	str	r2, [sp, #4]
 8005d50:	9b01      	ldr	r3, [sp, #4]
 8005d52:	61bb      	str	r3, [r7, #24]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bf14      	ite	ne
 8005d58:	2102      	movne	r1, #2
 8005d5a:	2101      	moveq	r1, #1
 8005d5c:	6139      	str	r1, [r7, #16]
 8005d5e:	b1c4      	cbz	r4, 8005d92 <__d2b+0x88>
 8005d60:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005d64:	4404      	add	r4, r0
 8005d66:	6034      	str	r4, [r6, #0]
 8005d68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005d6c:	6028      	str	r0, [r5, #0]
 8005d6e:	4638      	mov	r0, r7
 8005d70:	b003      	add	sp, #12
 8005d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d7a:	e7d5      	b.n	8005d28 <__d2b+0x1e>
 8005d7c:	6179      	str	r1, [r7, #20]
 8005d7e:	e7e7      	b.n	8005d50 <__d2b+0x46>
 8005d80:	a801      	add	r0, sp, #4
 8005d82:	f7ff fddb 	bl	800593c <__lo0bits>
 8005d86:	9b01      	ldr	r3, [sp, #4]
 8005d88:	617b      	str	r3, [r7, #20]
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	6139      	str	r1, [r7, #16]
 8005d8e:	3020      	adds	r0, #32
 8005d90:	e7e5      	b.n	8005d5e <__d2b+0x54>
 8005d92:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005d96:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005d9a:	6030      	str	r0, [r6, #0]
 8005d9c:	6918      	ldr	r0, [r3, #16]
 8005d9e:	f7ff fdae 	bl	80058fe <__hi0bits>
 8005da2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005da6:	e7e1      	b.n	8005d6c <__d2b+0x62>

08005da8 <_calloc_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	fb02 f401 	mul.w	r4, r2, r1
 8005dae:	4621      	mov	r1, r4
 8005db0:	f000 f808 	bl	8005dc4 <_malloc_r>
 8005db4:	4605      	mov	r5, r0
 8005db6:	b118      	cbz	r0, 8005dc0 <_calloc_r+0x18>
 8005db8:	4622      	mov	r2, r4
 8005dba:	2100      	movs	r1, #0
 8005dbc:	f7fe fb62 	bl	8004484 <memset>
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	bd38      	pop	{r3, r4, r5, pc}

08005dc4 <_malloc_r>:
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	1ccd      	adds	r5, r1, #3
 8005dc8:	f025 0503 	bic.w	r5, r5, #3
 8005dcc:	3508      	adds	r5, #8
 8005dce:	2d0c      	cmp	r5, #12
 8005dd0:	bf38      	it	cc
 8005dd2:	250c      	movcc	r5, #12
 8005dd4:	2d00      	cmp	r5, #0
 8005dd6:	4606      	mov	r6, r0
 8005dd8:	db01      	blt.n	8005dde <_malloc_r+0x1a>
 8005dda:	42a9      	cmp	r1, r5
 8005ddc:	d903      	bls.n	8005de6 <_malloc_r+0x22>
 8005dde:	230c      	movs	r3, #12
 8005de0:	6033      	str	r3, [r6, #0]
 8005de2:	2000      	movs	r0, #0
 8005de4:	bd70      	pop	{r4, r5, r6, pc}
 8005de6:	f000 f869 	bl	8005ebc <__malloc_lock>
 8005dea:	4a21      	ldr	r2, [pc, #132]	; (8005e70 <_malloc_r+0xac>)
 8005dec:	6814      	ldr	r4, [r2, #0]
 8005dee:	4621      	mov	r1, r4
 8005df0:	b991      	cbnz	r1, 8005e18 <_malloc_r+0x54>
 8005df2:	4c20      	ldr	r4, [pc, #128]	; (8005e74 <_malloc_r+0xb0>)
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	b91b      	cbnz	r3, 8005e00 <_malloc_r+0x3c>
 8005df8:	4630      	mov	r0, r6
 8005dfa:	f000 f83d 	bl	8005e78 <_sbrk_r>
 8005dfe:	6020      	str	r0, [r4, #0]
 8005e00:	4629      	mov	r1, r5
 8005e02:	4630      	mov	r0, r6
 8005e04:	f000 f838 	bl	8005e78 <_sbrk_r>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d124      	bne.n	8005e56 <_malloc_r+0x92>
 8005e0c:	230c      	movs	r3, #12
 8005e0e:	6033      	str	r3, [r6, #0]
 8005e10:	4630      	mov	r0, r6
 8005e12:	f000 f854 	bl	8005ebe <__malloc_unlock>
 8005e16:	e7e4      	b.n	8005de2 <_malloc_r+0x1e>
 8005e18:	680b      	ldr	r3, [r1, #0]
 8005e1a:	1b5b      	subs	r3, r3, r5
 8005e1c:	d418      	bmi.n	8005e50 <_malloc_r+0x8c>
 8005e1e:	2b0b      	cmp	r3, #11
 8005e20:	d90f      	bls.n	8005e42 <_malloc_r+0x7e>
 8005e22:	600b      	str	r3, [r1, #0]
 8005e24:	50cd      	str	r5, [r1, r3]
 8005e26:	18cc      	adds	r4, r1, r3
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f000 f848 	bl	8005ebe <__malloc_unlock>
 8005e2e:	f104 000b 	add.w	r0, r4, #11
 8005e32:	1d23      	adds	r3, r4, #4
 8005e34:	f020 0007 	bic.w	r0, r0, #7
 8005e38:	1ac3      	subs	r3, r0, r3
 8005e3a:	d0d3      	beq.n	8005de4 <_malloc_r+0x20>
 8005e3c:	425a      	negs	r2, r3
 8005e3e:	50e2      	str	r2, [r4, r3]
 8005e40:	e7d0      	b.n	8005de4 <_malloc_r+0x20>
 8005e42:	428c      	cmp	r4, r1
 8005e44:	684b      	ldr	r3, [r1, #4]
 8005e46:	bf16      	itet	ne
 8005e48:	6063      	strne	r3, [r4, #4]
 8005e4a:	6013      	streq	r3, [r2, #0]
 8005e4c:	460c      	movne	r4, r1
 8005e4e:	e7eb      	b.n	8005e28 <_malloc_r+0x64>
 8005e50:	460c      	mov	r4, r1
 8005e52:	6849      	ldr	r1, [r1, #4]
 8005e54:	e7cc      	b.n	8005df0 <_malloc_r+0x2c>
 8005e56:	1cc4      	adds	r4, r0, #3
 8005e58:	f024 0403 	bic.w	r4, r4, #3
 8005e5c:	42a0      	cmp	r0, r4
 8005e5e:	d005      	beq.n	8005e6c <_malloc_r+0xa8>
 8005e60:	1a21      	subs	r1, r4, r0
 8005e62:	4630      	mov	r0, r6
 8005e64:	f000 f808 	bl	8005e78 <_sbrk_r>
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d0cf      	beq.n	8005e0c <_malloc_r+0x48>
 8005e6c:	6025      	str	r5, [r4, #0]
 8005e6e:	e7db      	b.n	8005e28 <_malloc_r+0x64>
 8005e70:	200001fc 	.word	0x200001fc
 8005e74:	20000200 	.word	0x20000200

08005e78 <_sbrk_r>:
 8005e78:	b538      	push	{r3, r4, r5, lr}
 8005e7a:	4c06      	ldr	r4, [pc, #24]	; (8005e94 <_sbrk_r+0x1c>)
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	4605      	mov	r5, r0
 8005e80:	4608      	mov	r0, r1
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	f7fb fc92 	bl	80017ac <_sbrk>
 8005e88:	1c43      	adds	r3, r0, #1
 8005e8a:	d102      	bne.n	8005e92 <_sbrk_r+0x1a>
 8005e8c:	6823      	ldr	r3, [r4, #0]
 8005e8e:	b103      	cbz	r3, 8005e92 <_sbrk_r+0x1a>
 8005e90:	602b      	str	r3, [r5, #0]
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	20001730 	.word	0x20001730

08005e98 <__ascii_mbtowc>:
 8005e98:	b082      	sub	sp, #8
 8005e9a:	b901      	cbnz	r1, 8005e9e <__ascii_mbtowc+0x6>
 8005e9c:	a901      	add	r1, sp, #4
 8005e9e:	b142      	cbz	r2, 8005eb2 <__ascii_mbtowc+0x1a>
 8005ea0:	b14b      	cbz	r3, 8005eb6 <__ascii_mbtowc+0x1e>
 8005ea2:	7813      	ldrb	r3, [r2, #0]
 8005ea4:	600b      	str	r3, [r1, #0]
 8005ea6:	7812      	ldrb	r2, [r2, #0]
 8005ea8:	1c10      	adds	r0, r2, #0
 8005eaa:	bf18      	it	ne
 8005eac:	2001      	movne	r0, #1
 8005eae:	b002      	add	sp, #8
 8005eb0:	4770      	bx	lr
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	e7fb      	b.n	8005eae <__ascii_mbtowc+0x16>
 8005eb6:	f06f 0001 	mvn.w	r0, #1
 8005eba:	e7f8      	b.n	8005eae <__ascii_mbtowc+0x16>

08005ebc <__malloc_lock>:
 8005ebc:	4770      	bx	lr

08005ebe <__malloc_unlock>:
 8005ebe:	4770      	bx	lr

08005ec0 <__ascii_wctomb>:
 8005ec0:	b149      	cbz	r1, 8005ed6 <__ascii_wctomb+0x16>
 8005ec2:	2aff      	cmp	r2, #255	; 0xff
 8005ec4:	bf85      	ittet	hi
 8005ec6:	238a      	movhi	r3, #138	; 0x8a
 8005ec8:	6003      	strhi	r3, [r0, #0]
 8005eca:	700a      	strbls	r2, [r1, #0]
 8005ecc:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ed0:	bf98      	it	ls
 8005ed2:	2001      	movls	r0, #1
 8005ed4:	4770      	bx	lr
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	4770      	bx	lr
	...

08005edc <_init>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr

08005ee8 <_fini>:
 8005ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eea:	bf00      	nop
 8005eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eee:	bc08      	pop	{r3}
 8005ef0:	469e      	mov	lr, r3
 8005ef2:	4770      	bx	lr
