
HYAsstSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033a0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003538  08003538  00013538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035b8  080035b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080035b8  080035b8  000135b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035c0  080035c0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c0  080035c0  000135c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080035c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  08003638  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003638  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b098  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a6d  00000000  00000000  0002b138  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a18  00000000  00000000  0002cba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  0002d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000315e  00000000  00000000  0002df28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008510  00000000  00000000  00031086  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088d7b  00000000  00000000  00039596  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2311  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f00  00000000  00000000  000c238c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000070 	.word	0x20000070
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003520 	.word	0x08003520

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000074 	.word	0x20000074
 80001d4:	08003520 	.word	0x08003520

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80004e0:	1d39      	adds	r1, r7, #4
 80004e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e6:	2201      	movs	r2, #1
 80004e8:	4803      	ldr	r0, [pc, #12]	; (80004f8 <__io_putchar+0x20>)
 80004ea:	f001 fce0 	bl	8001eae <HAL_UART_Transmit>
	return ch;
 80004ee:	687b      	ldr	r3, [r7, #4]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	200000ec 	.word	0x200000ec

080004fc <main>:

signed main(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000500:	f000 fbca 	bl	8000c98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000504:	f000 f814 	bl	8000530 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000508:	f000 f91c 	bl	8000744 <MX_GPIO_Init>
	MX_I2C1_Init();
 800050c:	f000 f86e 	bl	80005ec <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8000510:	f000 f8c4 	bl	800069c <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 8000514:	f000 f8ec 	bl	80006f0 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 8000518:	f000 f896 	bl	8000648 <MX_USART1_UART_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		printf("FAQ\n");
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <main+0x30>)
 800051e:	f002 fbf3 	bl	8002d08 <puts>
		HAL_Delay(1000);
 8000522:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000526:	f000 fc29 	bl	8000d7c <HAL_Delay>
		printf("FAQ\n");
 800052a:	e7f7      	b.n	800051c <main+0x20>
 800052c:	08003538 	.word	0x08003538

08000530 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fb7e 	bl	8002c40 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <SystemClock_Config+0xb4>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a21      	ldr	r2, [pc, #132]	; (80005e4 <SystemClock_Config+0xb4>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <SystemClock_Config+0xb4>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <SystemClock_Config+0xb8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1b      	ldr	r2, [pc, #108]	; (80005e8 <SystemClock_Config+0xb8>)
 800057a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <SystemClock_Config+0xb8>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	2301      	movs	r3, #1
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000594:	2310      	movs	r3, #16
 8000596:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000598:	2300      	movs	r3, #0
 800059a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800059c:	f107 0320 	add.w	r3, r7, #32
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fffb 	bl	800159c <HAL_RCC_OscConfig>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x80>
		Error_Handler();
 80005ac:	f000 f90a 	bl	80007c4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b0:	230f      	movs	r3, #15
 80005b2:	60fb      	str	r3, [r7, #12]
                                 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fa56 	bl	8001a7c <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xaa>
		Error_Handler();
 80005d6:	f000 f8f5 	bl	80007c4 <Error_Handler>
	}
}
 80005da:	bf00      	nop
 80005dc:	3750      	adds	r7, #80	; 0x50
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_I2C1_Init+0x50>)
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <MX_I2C1_Init+0x54>)
 80005f4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80005f6:	4b11      	ldr	r3, [pc, #68]	; (800063c <MX_I2C1_Init+0x50>)
 80005f8:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_I2C1_Init+0x58>)
 80005fa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_I2C1_Init+0x50>)
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000602:	4b0e      	ldr	r3, [pc, #56]	; (800063c <MX_I2C1_Init+0x50>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <MX_I2C1_Init+0x50>)
 800060a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800060e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000610:	4b0a      	ldr	r3, [pc, #40]	; (800063c <MX_I2C1_Init+0x50>)
 8000612:	2200      	movs	r2, #0
 8000614:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000616:	4b09      	ldr	r3, [pc, #36]	; (800063c <MX_I2C1_Init+0x50>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800061c:	4b07      	ldr	r3, [pc, #28]	; (800063c <MX_I2C1_Init+0x50>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000622:	4b06      	ldr	r3, [pc, #24]	; (800063c <MX_I2C1_Init+0x50>)
 8000624:	2200      	movs	r2, #0
 8000626:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000628:	4804      	ldr	r0, [pc, #16]	; (800063c <MX_I2C1_Init+0x50>)
 800062a:	f000 fe7f 	bl	800132c <HAL_I2C_Init>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000634:	f000 f8c6 	bl	80007c4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}
 800063c:	20000098 	.word	0x20000098
 8000640:	40005400 	.word	0x40005400
 8000644:	000186a0 	.word	0x000186a0

08000648 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_USART1_UART_Init+0x50>)
 8000650:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000658:	605a      	str	r2, [r3, #4]
  	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  	huart1.Init.StopBits = UART_STOPBITS_1;
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000662:	2200      	movs	r2, #0
 8000664:	60da      	str	r2, [r3, #12]
  	huart1.Init.Parity = UART_PARITY_NONE;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000668:	2200      	movs	r2, #0
 800066a:	611a      	str	r2, [r3, #16]
  	huart1.Init.Mode = UART_MODE_TX_RX;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800066e:	220c      	movs	r2, #12
 8000670:	615a      	str	r2, [r3, #20]
  	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]
  	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_USART1_UART_Init+0x4c>)
 8000680:	f001 fbc8 	bl	8001e14 <HAL_UART_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_USART1_UART_Init+0x46>
  		Error_Handler();
 800068a:	f000 f89b 	bl	80007c4 <Error_Handler>
  	}
  	/* USER CODE BEGIN USART1_Init 2 */

  	/* USER CODE END USART1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000ec 	.word	0x200000ec
 8000698:	40011000 	.word	0x40011000

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <MX_USART2_UART_Init+0x50>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b10      	ldr	r3, [pc, #64]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART2_UART_Init+0x4c>)
 80006d4:	f001 fb9e 	bl	8001e14 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006de:	f000 f871 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000016c 	.word	0x2000016c
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_USART6_UART_Init+0x4c>)
 80006f6:	4a12      	ldr	r2, [pc, #72]	; (8000740 <MX_USART6_UART_Init+0x50>)
 80006f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <MX_USART6_UART_Init+0x4c>)
 80006fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000700:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_USART6_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_USART6_UART_Init+0x4c>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	; (800073c <MX_USART6_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000714:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_USART6_UART_Init+0x4c>)
 8000716:	220c      	movs	r2, #12
 8000718:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <MX_USART6_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_USART6_UART_Init+0x4c>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART6_UART_Init+0x4c>)
 8000728:	f001 fb74 	bl	8001e14 <HAL_UART_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000732:	f000 f847 	bl	80007c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000012c 	.word	0x2000012c
 8000740:	40011400 	.word	0x40011400

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_GPIO_Init+0x78>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a16      	ldr	r2, [pc, #88]	; (80007bc <MX_GPIO_Init+0x78>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_GPIO_Init+0x78>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_GPIO_Init+0x78>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a0f      	ldr	r2, [pc, #60]	; (80007bc <MX_GPIO_Init+0x78>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b0d      	ldr	r3, [pc, #52]	; (80007bc <MX_GPIO_Init+0x78>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000796:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000798:	2302      	movs	r3, #2
 800079a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0x7c>)
 80007b0:	f000 fc3a 	bl	8001028 <HAL_GPIO_Init>

}
 80007b4:	bf00      	nop
 80007b6:	3720      	adds	r7, #32
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40020000 	.word	0x40020000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ca:	e7fe      	b.n	80007ca <Error_Handler+0x6>

080007cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <HAL_MspInit+0x4c>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <HAL_MspInit+0x4c>)
 80007dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e0:	6453      	str	r3, [r2, #68]	; 0x44
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	4b09      	ldr	r3, [pc, #36]	; (8000818 <HAL_MspInit+0x4c>)
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	4a08      	ldr	r2, [pc, #32]	; (8000818 <HAL_MspInit+0x4c>)
 80007f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007fc:	6413      	str	r3, [r2, #64]	; 0x40
 80007fe:	4b06      	ldr	r3, [pc, #24]	; (8000818 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	40023800 	.word	0x40023800

0800081c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08a      	sub	sp, #40	; 0x28
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
 8000832:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a19      	ldr	r2, [pc, #100]	; (80008a0 <HAL_I2C_MspInit+0x84>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d12b      	bne.n	8000896 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
 8000842:	4b18      	ldr	r3, [pc, #96]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b15      	ldr	r3, [pc, #84]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800085a:	23c0      	movs	r3, #192	; 0xc0
 800085c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800085e:	2312      	movs	r3, #18
 8000860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000862:	2301      	movs	r3, #1
 8000864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800086a:	2304      	movs	r3, #4
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	4619      	mov	r1, r3
 8000874:	480c      	ldr	r0, [pc, #48]	; (80008a8 <HAL_I2C_MspInit+0x8c>)
 8000876:	f000 fbd7 	bl	8001028 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 8000884:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_I2C_MspInit+0x88>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40005400 	.word	0x40005400
 80008a4:	40023800 	.word	0x40023800
 80008a8:	40020400 	.word	0x40020400

080008ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08e      	sub	sp, #56	; 0x38
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a58      	ldr	r2, [pc, #352]	; (8000a2c <HAL_UART_MspInit+0x180>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d135      	bne.n	800093a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
 80008d2:	4b57      	ldr	r3, [pc, #348]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a56      	ldr	r2, [pc, #344]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b54      	ldr	r3, [pc, #336]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	623b      	str	r3, [r7, #32]
 80008e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
 80008ee:	4b50      	ldr	r3, [pc, #320]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a4f      	ldr	r2, [pc, #316]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b4d      	ldr	r3, [pc, #308]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
 8000904:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000906:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090c:	2302      	movs	r3, #2
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000918:	2307      	movs	r3, #7
 800091a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000920:	4619      	mov	r1, r3
 8000922:	4844      	ldr	r0, [pc, #272]	; (8000a34 <HAL_UART_MspInit+0x188>)
 8000924:	f000 fb80 	bl	8001028 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000928:	2200      	movs	r2, #0
 800092a:	2100      	movs	r1, #0
 800092c:	2025      	movs	r0, #37	; 0x25
 800092e:	f000 fb22 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000932:	2025      	movs	r0, #37	; 0x25
 8000934:	f000 fb3b 	bl	8000fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000938:	e073      	b.n	8000a22 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a3e      	ldr	r2, [pc, #248]	; (8000a38 <HAL_UART_MspInit+0x18c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d134      	bne.n	80009ae <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	4b39      	ldr	r3, [pc, #228]	; (8000a30 <HAL_UART_MspInit+0x184>)
 800094a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094c:	4a38      	ldr	r2, [pc, #224]	; (8000a30 <HAL_UART_MspInit+0x184>)
 800094e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000952:	6413      	str	r3, [r2, #64]	; 0x40
 8000954:	4b36      	ldr	r3, [pc, #216]	; (8000a30 <HAL_UART_MspInit+0x184>)
 8000956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800095c:	61bb      	str	r3, [r7, #24]
 800095e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	4b32      	ldr	r3, [pc, #200]	; (8000a30 <HAL_UART_MspInit+0x184>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a31      	ldr	r2, [pc, #196]	; (8000a30 <HAL_UART_MspInit+0x184>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b2f      	ldr	r3, [pc, #188]	; (8000a30 <HAL_UART_MspInit+0x184>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800097c:	230c      	movs	r3, #12
 800097e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000988:	2303      	movs	r3, #3
 800098a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800098c:	2307      	movs	r3, #7
 800098e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	4827      	ldr	r0, [pc, #156]	; (8000a34 <HAL_UART_MspInit+0x188>)
 8000998:	f000 fb46 	bl	8001028 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2100      	movs	r1, #0
 80009a0:	2026      	movs	r0, #38	; 0x26
 80009a2:	f000 fae8 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009a6:	2026      	movs	r0, #38	; 0x26
 80009a8:	f000 fb01 	bl	8000fae <HAL_NVIC_EnableIRQ>
}
 80009ac:	e039      	b.n	8000a22 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <HAL_UART_MspInit+0x190>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d134      	bne.n	8000a22 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80009be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c0:	4a1b      	ldr	r2, [pc, #108]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80009c2:	f043 0320 	orr.w	r3, r3, #32
 80009c6:	6453      	str	r3, [r2, #68]	; 0x44
 80009c8:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80009ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009cc:	f003 0320 	and.w	r3, r3, #32
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6313      	str	r3, [r2, #48]	; 0x30
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_UART_MspInit+0x184>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80009f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000a02:	2308      	movs	r3, #8
 8000a04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <HAL_UART_MspInit+0x188>)
 8000a0e:	f000 fb0b 	bl	8001028 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	2047      	movs	r0, #71	; 0x47
 8000a18:	f000 faad 	bl	8000f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000a1c:	2047      	movs	r0, #71	; 0x47
 8000a1e:	f000 fac6 	bl	8000fae <HAL_NVIC_EnableIRQ>
}
 8000a22:	bf00      	nop
 8000a24:	3738      	adds	r7, #56	; 0x38
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40011000 	.word	0x40011000
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40004400 	.word	0x40004400
 8000a3c:	40011400 	.word	0x40011400

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <NMI_Handler+0x4>

08000a46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4a:	e7fe      	b.n	8000a4a <HardFault_Handler+0x4>

08000a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <MemManage_Handler+0x4>

08000a52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a56:	e7fe      	b.n	8000a56 <BusFault_Handler+0x4>

08000a58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <UsageFault_Handler+0x4>

08000a5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a8c:	f000 f956 	bl	8000d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a98:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <USART1_IRQHandler+0x10>)
 8000a9a:	f001 faa1 	bl	8001fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	200000ec 	.word	0x200000ec

08000aa8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000aac:	4802      	ldr	r0, [pc, #8]	; (8000ab8 <USART2_IRQHandler+0x10>)
 8000aae:	f001 fa97 	bl	8001fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	2000016c 	.word	0x2000016c

08000abc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000ac0:	4802      	ldr	r0, [pc, #8]	; (8000acc <USART6_IRQHandler+0x10>)
 8000ac2:	f001 fa8d 	bl	8001fe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	2000012c 	.word	0x2000012c

08000ad0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000adc:	2300      	movs	r3, #0
 8000ade:	617b      	str	r3, [r7, #20]
 8000ae0:	e00a      	b.n	8000af8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ae2:	f3af 8000 	nop.w
 8000ae6:	4601      	mov	r1, r0
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	1c5a      	adds	r2, r3, #1
 8000aec:	60ba      	str	r2, [r7, #8]
 8000aee:	b2ca      	uxtb	r2, r1
 8000af0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	3301      	adds	r3, #1
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697a      	ldr	r2, [r7, #20]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	429a      	cmp	r2, r3
 8000afe:	dbf0      	blt.n	8000ae2 <_read+0x12>
	}

return len;
 8000b00:	687b      	ldr	r3, [r7, #4]
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3718      	adds	r7, #24
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b086      	sub	sp, #24
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e009      	b.n	8000b30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	60ba      	str	r2, [r7, #8]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff fcd7 	bl	80004d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbf1      	blt.n	8000b1c <_write+0x12>
	}
	return len;
 8000b38:	687b      	ldr	r3, [r7, #4]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3718      	adds	r7, #24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <_close>:

int _close(int file)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b083      	sub	sp, #12
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
	return -1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_isatty>:

int _isatty(int file)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	b083      	sub	sp, #12
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
	return 1;
 8000b82:	2301      	movs	r3, #1
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
	...

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f002 f806 	bl	8002bec <__errno>
 8000be0:	4602      	mov	r2, r0
 8000be2:	230c      	movs	r3, #12
 8000be4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20020000 	.word	0x20020000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	2000008c 	.word	0x2000008c
 8000c14:	200001b8 	.word	0x200001b8

08000c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <SystemInit+0x28>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <SystemInit+0x28>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <SystemInit+0x28>)
 8000c2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c32:	609a      	str	r2, [r3, #8]
#endif
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c4a:	e003      	b.n	8000c54 <LoopCopyDataInit>

08000c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c52:	3104      	adds	r1, #4

08000c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c5c:	d3f6      	bcc.n	8000c4c <CopyDataInit>
  ldr  r2, =_sbss
 8000c5e:	4a0b      	ldr	r2, [pc, #44]	; (8000c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c60:	e002      	b.n	8000c68 <LoopFillZerobss>

08000c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c64:	f842 3b04 	str.w	r3, [r2], #4

08000c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c6c:	d3f9      	bcc.n	8000c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c6e:	f7ff ffd3 	bl	8000c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c72:	f001 ffc1 	bl	8002bf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c76:	f7ff fc41 	bl	80004fc <main>
  bx  lr    
 8000c7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c80:	080035c8 	.word	0x080035c8
  ldr  r0, =_sdata
 8000c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c88:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000c8c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000c90:	200001b4 	.word	0x200001b4

08000c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c94:	e7fe      	b.n	8000c94 <ADC_IRQHandler>
	...

08000c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <HAL_Init+0x40>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <HAL_Init+0x40>)
 8000ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <HAL_Init+0x40>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x40>)
 8000cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb4:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <HAL_Init+0x40>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a07      	ldr	r2, [pc, #28]	; (8000cd8 <HAL_Init+0x40>)
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc0:	2003      	movs	r0, #3
 8000cc2:	f000 f94d 	bl	8000f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 f808 	bl	8000cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ccc:	f7ff fd7e 	bl	80007cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40023c00 	.word	0x40023c00

08000cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_InitTick+0x54>)
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b12      	ldr	r3, [pc, #72]	; (8000d34 <HAL_InitTick+0x58>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f965 	bl	8000fca <HAL_SYSTICK_Config>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e00e      	b.n	8000d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d80a      	bhi.n	8000d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d10:	2200      	movs	r2, #0
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	f04f 30ff 	mov.w	r0, #4294967295
 8000d18:	f000 f92d 	bl	8000f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d1c:	4a06      	ldr	r2, [pc, #24]	; (8000d38 <HAL_InitTick+0x5c>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
 8000d24:	e000      	b.n	8000d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000008 	.word	0x20000008
 8000d38:	20000004 	.word	0x20000004

08000d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_IncTick+0x20>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_IncTick+0x24>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <HAL_IncTick+0x24>)
 8000d4e:	6013      	str	r3, [r2, #0]
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	200001ac 	.word	0x200001ac

08000d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return uwTick;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_GetTick+0x14>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	200001ac 	.word	0x200001ac

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff ffee 	bl	8000d64 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_Delay+0x40>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffde 	bl	8000d64 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dd6:	68ba      	ldr	r2, [r7, #8]
 8000dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ddc:	4013      	ands	r3, r2
 8000dde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000df2:	4a04      	ldr	r2, [pc, #16]	; (8000e04 <__NVIC_SetPriorityGrouping+0x44>)
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	60d3      	str	r3, [r2, #12]
}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e0c:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <__NVIC_GetPriorityGrouping+0x18>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	f003 0307 	and.w	r3, r3, #7
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db0b      	blt.n	8000e4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	f003 021f 	and.w	r2, r3, #31
 8000e3c:	4907      	ldr	r1, [pc, #28]	; (8000e5c <__NVIC_EnableIRQ+0x38>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	095b      	lsrs	r3, r3, #5
 8000e44:	2001      	movs	r0, #1
 8000e46:	fa00 f202 	lsl.w	r2, r0, r2
 8000e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000e100 	.word	0xe000e100

08000e60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	6039      	str	r1, [r7, #0]
 8000e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	db0a      	blt.n	8000e8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	490c      	ldr	r1, [pc, #48]	; (8000eac <__NVIC_SetPriority+0x4c>)
 8000e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7e:	0112      	lsls	r2, r2, #4
 8000e80:	b2d2      	uxtb	r2, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e88:	e00a      	b.n	8000ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4908      	ldr	r1, [pc, #32]	; (8000eb0 <__NVIC_SetPriority+0x50>)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 030f 	and.w	r3, r3, #15
 8000e96:	3b04      	subs	r3, #4
 8000e98:	0112      	lsls	r2, r2, #4
 8000e9a:	b2d2      	uxtb	r2, r2
 8000e9c:	440b      	add	r3, r1
 8000e9e:	761a      	strb	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b089      	sub	sp, #36	; 0x24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f1c3 0307 	rsb	r3, r3, #7
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	bf28      	it	cs
 8000ed2:	2304      	movcs	r3, #4
 8000ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3304      	adds	r3, #4
 8000eda:	2b06      	cmp	r3, #6
 8000edc:	d902      	bls.n	8000ee4 <NVIC_EncodePriority+0x30>
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3b03      	subs	r3, #3
 8000ee2:	e000      	b.n	8000ee6 <NVIC_EncodePriority+0x32>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eec:	69bb      	ldr	r3, [r7, #24]
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efc:	f04f 31ff 	mov.w	r1, #4294967295
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	fa01 f303 	lsl.w	r3, r1, r3
 8000f06:	43d9      	mvns	r1, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f0c:	4313      	orrs	r3, r2
         );
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3724      	adds	r7, #36	; 0x24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f2c:	d301      	bcc.n	8000f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00f      	b.n	8000f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <SysTick_Config+0x40>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f3a:	210f      	movs	r1, #15
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f7ff ff8e 	bl	8000e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <SysTick_Config+0x40>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <SysTick_Config+0x40>)
 8000f4c:	2207      	movs	r2, #7
 8000f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	e000e010 	.word	0xe000e010

08000f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ff29 	bl	8000dc0 <__NVIC_SetPriorityGrouping>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b086      	sub	sp, #24
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	60b9      	str	r1, [r7, #8]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f88:	f7ff ff3e 	bl	8000e08 <__NVIC_GetPriorityGrouping>
 8000f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	6978      	ldr	r0, [r7, #20]
 8000f94:	f7ff ff8e 	bl	8000eb4 <NVIC_EncodePriority>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	4611      	mov	r1, r2
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff ff5d 	bl	8000e60 <__NVIC_SetPriority>
}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff31 	bl	8000e24 <__NVIC_EnableIRQ>
}
 8000fc2:	bf00      	nop
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ffa2 	bl	8000f1c <SysTick_Config>
 8000fd8:	4603      	mov	r3, r0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d004      	beq.n	8001000 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2280      	movs	r2, #128	; 0x80
 8000ffa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e00c      	b.n	800101a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2205      	movs	r2, #5
 8001004:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f022 0201 	bic.w	r2, r2, #1
 8001016:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	2300      	movs	r3, #0
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e159      	b.n	80012f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001044:	2201      	movs	r2, #1
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	429a      	cmp	r2, r3
 800105e:	f040 8148 	bne.w	80012f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d00b      	beq.n	8001082 <HAL_GPIO_Init+0x5a>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d007      	beq.n	8001082 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001076:	2b11      	cmp	r3, #17
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2b12      	cmp	r3, #18
 8001080:	d130      	bne.n	80010e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	2203      	movs	r2, #3
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68da      	ldr	r2, [r3, #12]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b8:	2201      	movs	r2, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	4013      	ands	r3, r2
 80010c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	091b      	lsrs	r3, r3, #4
 80010ce:	f003 0201 	and.w	r2, r3, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	689a      	ldr	r2, [r3, #8]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0xfc>
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b12      	cmp	r3, #18
 8001122:	d123      	bne.n	800116c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	08da      	lsrs	r2, r3, #3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3208      	adds	r2, #8
 800112c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	220f      	movs	r2, #15
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	691a      	ldr	r2, [r3, #16]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	69b9      	ldr	r1, [r7, #24]
 8001168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	2203      	movs	r2, #3
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43db      	mvns	r3, r3
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4013      	ands	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 0203 	and.w	r2, r3, #3
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4313      	orrs	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 80a2 	beq.w	80012f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b56      	ldr	r3, [pc, #344]	; (800130c <HAL_GPIO_Init+0x2e4>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	4a55      	ldr	r2, [pc, #340]	; (800130c <HAL_GPIO_Init+0x2e4>)
 80011b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011bc:	6453      	str	r3, [r2, #68]	; 0x44
 80011be:	4b53      	ldr	r3, [pc, #332]	; (800130c <HAL_GPIO_Init+0x2e4>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ca:	4a51      	ldr	r2, [pc, #324]	; (8001310 <HAL_GPIO_Init+0x2e8>)
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	3302      	adds	r3, #2
 80011d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	f003 0303 	and.w	r3, r3, #3
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	220f      	movs	r2, #15
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a48      	ldr	r2, [pc, #288]	; (8001314 <HAL_GPIO_Init+0x2ec>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d019      	beq.n	800122a <HAL_GPIO_Init+0x202>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4a47      	ldr	r2, [pc, #284]	; (8001318 <HAL_GPIO_Init+0x2f0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d013      	beq.n	8001226 <HAL_GPIO_Init+0x1fe>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a46      	ldr	r2, [pc, #280]	; (800131c <HAL_GPIO_Init+0x2f4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d00d      	beq.n	8001222 <HAL_GPIO_Init+0x1fa>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4a45      	ldr	r2, [pc, #276]	; (8001320 <HAL_GPIO_Init+0x2f8>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d007      	beq.n	800121e <HAL_GPIO_Init+0x1f6>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4a44      	ldr	r2, [pc, #272]	; (8001324 <HAL_GPIO_Init+0x2fc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d101      	bne.n	800121a <HAL_GPIO_Init+0x1f2>
 8001216:	2304      	movs	r3, #4
 8001218:	e008      	b.n	800122c <HAL_GPIO_Init+0x204>
 800121a:	2307      	movs	r3, #7
 800121c:	e006      	b.n	800122c <HAL_GPIO_Init+0x204>
 800121e:	2303      	movs	r3, #3
 8001220:	e004      	b.n	800122c <HAL_GPIO_Init+0x204>
 8001222:	2302      	movs	r3, #2
 8001224:	e002      	b.n	800122c <HAL_GPIO_Init+0x204>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <HAL_GPIO_Init+0x204>
 800122a:	2300      	movs	r3, #0
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	0092      	lsls	r2, r2, #2
 8001234:	4093      	lsls	r3, r2
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123c:	4934      	ldr	r1, [pc, #208]	; (8001310 <HAL_GPIO_Init+0x2e8>)
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	089b      	lsrs	r3, r3, #2
 8001242:	3302      	adds	r3, #2
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800124a:	4b37      	ldr	r3, [pc, #220]	; (8001328 <HAL_GPIO_Init+0x300>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	43db      	mvns	r3, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4013      	ands	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800126e:	4a2e      	ldr	r2, [pc, #184]	; (8001328 <HAL_GPIO_Init+0x300>)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001274:	4b2c      	ldr	r3, [pc, #176]	; (8001328 <HAL_GPIO_Init+0x300>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4313      	orrs	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001298:	4a23      	ldr	r2, [pc, #140]	; (8001328 <HAL_GPIO_Init+0x300>)
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b22      	ldr	r3, [pc, #136]	; (8001328 <HAL_GPIO_Init+0x300>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a19      	ldr	r2, [pc, #100]	; (8001328 <HAL_GPIO_Init+0x300>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b17      	ldr	r3, [pc, #92]	; (8001328 <HAL_GPIO_Init+0x300>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a0e      	ldr	r2, [pc, #56]	; (8001328 <HAL_GPIO_Init+0x300>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3301      	adds	r3, #1
 80012f6:	61fb      	str	r3, [r7, #28]
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	2b0f      	cmp	r3, #15
 80012fc:	f67f aea2 	bls.w	8001044 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001300:	bf00      	nop
 8001302:	3724      	adds	r7, #36	; 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	40023800 	.word	0x40023800
 8001310:	40013800 	.word	0x40013800
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40020800 	.word	0x40020800
 8001320:	40020c00 	.word	0x40020c00
 8001324:	40021000 	.word	0x40021000
 8001328:	40013c00 	.word	0x40013c00

0800132c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d101      	bne.n	800133e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e11f      	b.n	800157e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d106      	bne.n	8001358 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fa62 	bl	800081c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2224      	movs	r2, #36	; 0x24
 800135c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f022 0201 	bic.w	r2, r2, #1
 800136e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800137e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800138e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001390:	f000 fd18 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8001394:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4a7b      	ldr	r2, [pc, #492]	; (8001588 <HAL_I2C_Init+0x25c>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d807      	bhi.n	80013b0 <HAL_I2C_Init+0x84>
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4a7a      	ldr	r2, [pc, #488]	; (800158c <HAL_I2C_Init+0x260>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	bf94      	ite	ls
 80013a8:	2301      	movls	r3, #1
 80013aa:	2300      	movhi	r3, #0
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	e006      	b.n	80013be <HAL_I2C_Init+0x92>
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4a77      	ldr	r2, [pc, #476]	; (8001590 <HAL_I2C_Init+0x264>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	bf94      	ite	ls
 80013b8:	2301      	movls	r3, #1
 80013ba:	2300      	movhi	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0db      	b.n	800157e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	4a72      	ldr	r2, [pc, #456]	; (8001594 <HAL_I2C_Init+0x268>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0c9b      	lsrs	r3, r3, #18
 80013d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68ba      	ldr	r2, [r7, #8]
 80013e2:	430a      	orrs	r2, r1
 80013e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6a1b      	ldr	r3, [r3, #32]
 80013ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4a64      	ldr	r2, [pc, #400]	; (8001588 <HAL_I2C_Init+0x25c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d802      	bhi.n	8001400 <HAL_I2C_Init+0xd4>
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3301      	adds	r3, #1
 80013fe:	e009      	b.n	8001414 <HAL_I2C_Init+0xe8>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001406:	fb02 f303 	mul.w	r3, r2, r3
 800140a:	4a63      	ldr	r2, [pc, #396]	; (8001598 <HAL_I2C_Init+0x26c>)
 800140c:	fba2 2303 	umull	r2, r3, r2, r3
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	3301      	adds	r3, #1
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6812      	ldr	r2, [r2, #0]
 8001418:	430b      	orrs	r3, r1
 800141a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001426:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	4956      	ldr	r1, [pc, #344]	; (8001588 <HAL_I2C_Init+0x25c>)
 8001430:	428b      	cmp	r3, r1
 8001432:	d80d      	bhi.n	8001450 <HAL_I2C_Init+0x124>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1e59      	subs	r1, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001442:	3301      	adds	r3, #1
 8001444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001448:	2b04      	cmp	r3, #4
 800144a:	bf38      	it	cc
 800144c:	2304      	movcc	r3, #4
 800144e:	e04f      	b.n	80014f0 <HAL_I2C_Init+0x1c4>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d111      	bne.n	800147c <HAL_I2C_Init+0x150>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1e58      	subs	r0, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	440b      	add	r3, r1
 8001466:	fbb0 f3f3 	udiv	r3, r0, r3
 800146a:	3301      	adds	r3, #1
 800146c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001470:	2b00      	cmp	r3, #0
 8001472:	bf0c      	ite	eq
 8001474:	2301      	moveq	r3, #1
 8001476:	2300      	movne	r3, #0
 8001478:	b2db      	uxtb	r3, r3
 800147a:	e012      	b.n	80014a2 <HAL_I2C_Init+0x176>
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	1e58      	subs	r0, r3, #1
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6859      	ldr	r1, [r3, #4]
 8001484:	460b      	mov	r3, r1
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	0099      	lsls	r1, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001492:	3301      	adds	r3, #1
 8001494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001498:	2b00      	cmp	r3, #0
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Init+0x17e>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e022      	b.n	80014f0 <HAL_I2C_Init+0x1c4>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10e      	bne.n	80014d0 <HAL_I2C_Init+0x1a4>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	1e58      	subs	r0, r3, #1
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6859      	ldr	r1, [r3, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	440b      	add	r3, r1
 80014c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ce:	e00f      	b.n	80014f0 <HAL_I2C_Init+0x1c4>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e58      	subs	r0, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	0099      	lsls	r1, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	6809      	ldr	r1, [r1, #0]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69da      	ldr	r2, [r3, #28]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	430a      	orrs	r2, r1
 8001512:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800151e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6911      	ldr	r1, [r2, #16]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68d2      	ldr	r2, [r2, #12]
 800152a:	4311      	orrs	r1, r2
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	430b      	orrs	r3, r1
 8001532:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f042 0201 	orr.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2220      	movs	r2, #32
 800156a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	000186a0 	.word	0x000186a0
 800158c:	001e847f 	.word	0x001e847f
 8001590:	003d08ff 	.word	0x003d08ff
 8001594:	431bde83 	.word	0x431bde83
 8001598:	10624dd3 	.word	0x10624dd3

0800159c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e25b      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0301 	and.w	r3, r3, #1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d075      	beq.n	80016a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ba:	4ba3      	ldr	r3, [pc, #652]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 030c 	and.w	r3, r3, #12
 80015c2:	2b04      	cmp	r3, #4
 80015c4:	d00c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015c6:	4ba0      	ldr	r3, [pc, #640]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	2b08      	cmp	r3, #8
 80015d0:	d112      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015d2:	4b9d      	ldr	r3, [pc, #628]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015de:	d10b      	bne.n	80015f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4b99      	ldr	r3, [pc, #612]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d05b      	beq.n	80016a4 <HAL_RCC_OscConfig+0x108>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d157      	bne.n	80016a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e236      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x74>
 8001602:	4b91      	ldr	r3, [pc, #580]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a90      	ldr	r2, [pc, #576]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e01d      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001618:	d10c      	bne.n	8001634 <HAL_RCC_OscConfig+0x98>
 800161a:	4b8b      	ldr	r3, [pc, #556]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a8a      	ldr	r2, [pc, #552]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b88      	ldr	r3, [pc, #544]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a87      	ldr	r2, [pc, #540]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e00b      	b.n	800164c <HAL_RCC_OscConfig+0xb0>
 8001634:	4b84      	ldr	r3, [pc, #528]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a83      	ldr	r2, [pc, #524]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800163a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800163e:	6013      	str	r3, [r2, #0]
 8001640:	4b81      	ldr	r3, [pc, #516]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a80      	ldr	r2, [pc, #512]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001646:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d013      	beq.n	800167c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fb86 	bl	8000d64 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165c:	f7ff fb82 	bl	8000d64 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b64      	cmp	r3, #100	; 0x64
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e1fb      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	4b76      	ldr	r3, [pc, #472]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0xc0>
 800167a:	e014      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb72 	bl	8000d64 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fb6e 	bl	8000d64 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e1e7      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	4b6c      	ldr	r3, [pc, #432]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0xe8>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d063      	beq.n	800177a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016b2:	4b65      	ldr	r3, [pc, #404]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d00b      	beq.n	80016d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016be:	4b62      	ldr	r3, [pc, #392]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d11c      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016ca:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d116      	bne.n	8001704 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d6:	4b5c      	ldr	r3, [pc, #368]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	68db      	ldr	r3, [r3, #12]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d001      	beq.n	80016ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e1bb      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4b56      	ldr	r3, [pc, #344]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	4952      	ldr	r1, [pc, #328]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	e03a      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170c:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_RCC_OscConfig+0x2b0>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001712:	f7ff fb27 	bl	8000d64 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800171a:	f7ff fb23 	bl	8000d64 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e19c      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001738:	4b43      	ldr	r3, [pc, #268]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	4940      	ldr	r1, [pc, #256]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_RCC_OscConfig+0x2b0>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001754:	f7ff fb06 	bl	8000d64 <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800175c:	f7ff fb02 	bl	8000d64 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e17b      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1f0      	bne.n	800175c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d030      	beq.n	80017e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d016      	beq.n	80017bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800178e:	4b30      	ldr	r3, [pc, #192]	; (8001850 <HAL_RCC_OscConfig+0x2b4>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001794:	f7ff fae6 	bl	8000d64 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800179c:	f7ff fae2 	bl	8000d64 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e15b      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0x200>
 80017ba:	e015      	b.n	80017e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_RCC_OscConfig+0x2b4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c2:	f7ff facf 	bl	8000d64 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ca:	f7ff facb 	bl	8000d64 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e144      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 80a0 	beq.w	8001936 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017f6:	2300      	movs	r3, #0
 80017f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <HAL_RCC_OscConfig+0x2ac>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001822:	2301      	movs	r3, #1
 8001824:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_OscConfig+0x2b8>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d121      	bne.n	8001876 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_RCC_OscConfig+0x2b8>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HAL_RCC_OscConfig+0x2b8>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800183e:	f7ff fa91 	bl	8000d64 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001844:	e011      	b.n	800186a <HAL_RCC_OscConfig+0x2ce>
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	42470000 	.word	0x42470000
 8001850:	42470e80 	.word	0x42470e80
 8001854:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001858:	f7ff fa84 	bl	8000d64 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0fd      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186a:	4b81      	ldr	r3, [pc, #516]	; (8001a70 <HAL_RCC_OscConfig+0x4d4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d106      	bne.n	800188c <HAL_RCC_OscConfig+0x2f0>
 800187e:	4b7d      	ldr	r3, [pc, #500]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 8001880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001882:	4a7c      	ldr	r2, [pc, #496]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6713      	str	r3, [r2, #112]	; 0x70
 800188a:	e01c      	b.n	80018c6 <HAL_RCC_OscConfig+0x32a>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b05      	cmp	r3, #5
 8001892:	d10c      	bne.n	80018ae <HAL_RCC_OscConfig+0x312>
 8001894:	4b77      	ldr	r3, [pc, #476]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 8001896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001898:	4a76      	ldr	r2, [pc, #472]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 800189a:	f043 0304 	orr.w	r3, r3, #4
 800189e:	6713      	str	r3, [r2, #112]	; 0x70
 80018a0:	4b74      	ldr	r3, [pc, #464]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80018a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a4:	4a73      	ldr	r2, [pc, #460]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6713      	str	r3, [r2, #112]	; 0x70
 80018ac:	e00b      	b.n	80018c6 <HAL_RCC_OscConfig+0x32a>
 80018ae:	4b71      	ldr	r3, [pc, #452]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a70      	ldr	r2, [pc, #448]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	4b6e      	ldr	r3, [pc, #440]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80018bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018be:	4a6d      	ldr	r2, [pc, #436]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80018c0:	f023 0304 	bic.w	r3, r3, #4
 80018c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d015      	beq.n	80018fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ce:	f7ff fa49 	bl	8000d64 <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff fa45 	bl	8000d64 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e0bc      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	4b61      	ldr	r3, [pc, #388]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80018ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0ee      	beq.n	80018d6 <HAL_RCC_OscConfig+0x33a>
 80018f8:	e014      	b.n	8001924 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fa:	f7ff fa33 	bl	8000d64 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001900:	e00a      	b.n	8001918 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001902:	f7ff fa2f 	bl	8000d64 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001910:	4293      	cmp	r3, r2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e0a6      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001918:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 800191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d105      	bne.n	8001936 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800192a:	4b52      	ldr	r3, [pc, #328]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	4a51      	ldr	r2, [pc, #324]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 8001930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001934:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	2b00      	cmp	r3, #0
 800193c:	f000 8092 	beq.w	8001a64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001940:	4b4c      	ldr	r3, [pc, #304]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 030c 	and.w	r3, r3, #12
 8001948:	2b08      	cmp	r3, #8
 800194a:	d05c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d141      	bne.n	80019d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001954:	4b48      	ldr	r3, [pc, #288]	; (8001a78 <HAL_RCC_OscConfig+0x4dc>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195a:	f7ff fa03 	bl	8000d64 <HAL_GetTick>
 800195e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001960:	e008      	b.n	8001974 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001962:	f7ff f9ff 	bl	8000d64 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e078      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001974:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f0      	bne.n	8001962 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69da      	ldr	r2, [r3, #28]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
 8001988:	431a      	orrs	r2, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	019b      	lsls	r3, r3, #6
 8001990:	431a      	orrs	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	3b01      	subs	r3, #1
 800199a:	041b      	lsls	r3, r3, #16
 800199c:	431a      	orrs	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a2:	061b      	lsls	r3, r3, #24
 80019a4:	4933      	ldr	r1, [pc, #204]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019aa:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <HAL_RCC_OscConfig+0x4dc>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff f9d8 	bl	8000d64 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b8:	f7ff f9d4 	bl	8000d64 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e04d      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0x41c>
 80019d6:	e045      	b.n	8001a64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d8:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <HAL_RCC_OscConfig+0x4dc>)
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff f9c1 	bl	8000d64 <HAL_GetTick>
 80019e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e6:	f7ff f9bd 	bl	8000d64 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e036      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1f0      	bne.n	80019e6 <HAL_RCC_OscConfig+0x44a>
 8001a04:	e02e      	b.n	8001a64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e029      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <HAL_RCC_OscConfig+0x4d8>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	69db      	ldr	r3, [r3, #28]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d11c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d115      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d10d      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d106      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40007000 	.word	0x40007000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	42470060 	.word	0x42470060

08001a7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0cc      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d90c      	bls.n	8001ab8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b65      	ldr	r3, [pc, #404]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e0b8      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d020      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d005      	beq.n	8001adc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad0:	4b59      	ldr	r3, [pc, #356]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a58      	ldr	r2, [pc, #352]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ada:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0308 	and.w	r3, r3, #8
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d005      	beq.n	8001af4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae8:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af4:	4b50      	ldr	r3, [pc, #320]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	494d      	ldr	r1, [pc, #308]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d044      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d107      	bne.n	8001b2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1a:	4b47      	ldr	r3, [pc, #284]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d119      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e07f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d003      	beq.n	8001b3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d107      	bne.n	8001b4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d109      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e06f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b4a:	4b3b      	ldr	r3, [pc, #236]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e067      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b5a:	4b37      	ldr	r3, [pc, #220]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f023 0203 	bic.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	4934      	ldr	r1, [pc, #208]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b6c:	f7ff f8fa 	bl	8000d64 <HAL_GetTick>
 8001b70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b72:	e00a      	b.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b74:	f7ff f8f6 	bl	8000d64 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e04f      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 020c 	and.w	r2, r3, #12
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d1eb      	bne.n	8001b74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b9c:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d20c      	bcs.n	8001bc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb2:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_RCC_ClockConfig+0x1b8>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d001      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e032      	b.n	8001c2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	4916      	ldr	r1, [pc, #88]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d009      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	490e      	ldr	r1, [pc, #56]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c02:	f000 f821 	bl	8001c48 <HAL_RCC_GetSysClockFreq>
 8001c06:	4601      	mov	r1, r0
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	5cd3      	ldrb	r3, [r2, r3]
 8001c16:	fa21 f303 	lsr.w	r3, r1, r3
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c1e:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff f85a 	bl	8000cdc <HAL_InitTick>

  return HAL_OK;
 8001c28:	2300      	movs	r3, #0
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023c00 	.word	0x40023c00
 8001c38:	40023800 	.word	0x40023800
 8001c3c:	0800353c 	.word	0x0800353c
 8001c40:	20000000 	.word	0x20000000
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c5e:	4b50      	ldr	r3, [pc, #320]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d007      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x32>
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d008      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x38>
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 808d 	bne.w	8001d8e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c76:	60bb      	str	r3, [r7, #8]
       break;
 8001c78:	e08c      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7a:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c7c:	60bb      	str	r3, [r7, #8]
      break;
 8001c7e:	e089      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c80:	4b47      	ldr	r3, [pc, #284]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8a:	4b45      	ldr	r3, [pc, #276]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d023      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b42      	ldr	r3, [pc, #264]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	f04f 0400 	mov.w	r4, #0
 8001ca0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	ea03 0501 	and.w	r5, r3, r1
 8001cac:	ea04 0602 	and.w	r6, r4, r2
 8001cb0:	4a3d      	ldr	r2, [pc, #244]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cb2:	fb02 f106 	mul.w	r1, r2, r6
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	fb02 f205 	mul.w	r2, r2, r5
 8001cbc:	440a      	add	r2, r1
 8001cbe:	493a      	ldr	r1, [pc, #232]	; (8001da8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cc0:	fba5 0101 	umull	r0, r1, r5, r1
 8001cc4:	1853      	adds	r3, r2, r1
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f04f 0400 	mov.w	r4, #0
 8001cce:	461a      	mov	r2, r3
 8001cd0:	4623      	mov	r3, r4
 8001cd2:	f7fe fa81 	bl	80001d8 <__aeabi_uldivmod>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	460c      	mov	r4, r1
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	e049      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cde:	4b30      	ldr	r3, [pc, #192]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	099b      	lsrs	r3, r3, #6
 8001ce4:	f04f 0400 	mov.w	r4, #0
 8001ce8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cec:	f04f 0200 	mov.w	r2, #0
 8001cf0:	ea03 0501 	and.w	r5, r3, r1
 8001cf4:	ea04 0602 	and.w	r6, r4, r2
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	4632      	mov	r2, r6
 8001cfc:	f04f 0300 	mov.w	r3, #0
 8001d00:	f04f 0400 	mov.w	r4, #0
 8001d04:	0154      	lsls	r4, r2, #5
 8001d06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d0a:	014b      	lsls	r3, r1, #5
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4622      	mov	r2, r4
 8001d10:	1b49      	subs	r1, r1, r5
 8001d12:	eb62 0206 	sbc.w	r2, r2, r6
 8001d16:	f04f 0300 	mov.w	r3, #0
 8001d1a:	f04f 0400 	mov.w	r4, #0
 8001d1e:	0194      	lsls	r4, r2, #6
 8001d20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d24:	018b      	lsls	r3, r1, #6
 8001d26:	1a5b      	subs	r3, r3, r1
 8001d28:	eb64 0402 	sbc.w	r4, r4, r2
 8001d2c:	f04f 0100 	mov.w	r1, #0
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	00e2      	lsls	r2, r4, #3
 8001d36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d3a:	00d9      	lsls	r1, r3, #3
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4614      	mov	r4, r2
 8001d40:	195b      	adds	r3, r3, r5
 8001d42:	eb44 0406 	adc.w	r4, r4, r6
 8001d46:	f04f 0100 	mov.w	r1, #0
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	02a2      	lsls	r2, r4, #10
 8001d50:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d54:	0299      	lsls	r1, r3, #10
 8001d56:	460b      	mov	r3, r1
 8001d58:	4614      	mov	r4, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	4621      	mov	r1, r4
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f04f 0400 	mov.w	r4, #0
 8001d64:	461a      	mov	r2, r3
 8001d66:	4623      	mov	r3, r4
 8001d68:	f7fe fa36 	bl	80001d8 <__aeabi_uldivmod>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	460c      	mov	r4, r1
 8001d70:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d72:	4b0b      	ldr	r3, [pc, #44]	; (8001da0 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	0c1b      	lsrs	r3, r3, #16
 8001d78:	f003 0303 	and.w	r3, r3, #3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	60bb      	str	r3, [r7, #8]
      break;
 8001d8c:	e002      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d90:	60bb      	str	r3, [r7, #8]
      break;
 8001d92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d94:	68bb      	ldr	r3, [r7, #8]
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	00f42400 	.word	0x00f42400
 8001da8:	017d7840 	.word	0x017d7840

08001dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db0:	4b03      	ldr	r3, [pc, #12]	; (8001dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001db2:	681b      	ldr	r3, [r3, #0]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	20000000 	.word	0x20000000

08001dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dc8:	f7ff fff0 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001dcc:	4601      	mov	r1, r0
 8001dce:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	0a9b      	lsrs	r3, r3, #10
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	4a03      	ldr	r2, [pc, #12]	; (8001de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40023800 	.word	0x40023800
 8001de8:	0800354c 	.word	0x0800354c

08001dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001df0:	f7ff ffdc 	bl	8001dac <HAL_RCC_GetHCLKFreq>
 8001df4:	4601      	mov	r1, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	; (8001e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0b5b      	lsrs	r3, r3, #13
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	0800354c 	.word	0x0800354c

08001e14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d101      	bne.n	8001e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e03f      	b.n	8001ea6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7fe fd36 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2224      	movs	r2, #36	; 0x24
 8001e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fb4b 	bl	80024f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	691a      	ldr	r2, [r3, #16]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695a      	ldr	r2, [r3, #20]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b088      	sub	sp, #32
 8001eb2:	af02      	add	r7, sp, #8
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b20      	cmp	r3, #32
 8001ecc:	f040 8083 	bne.w	8001fd6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <HAL_UART_Transmit+0x2e>
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e07b      	b.n	8001fd8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d101      	bne.n	8001eee <HAL_UART_Transmit+0x40>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e074      	b.n	8001fd8 <HAL_UART_Transmit+0x12a>
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2221      	movs	r2, #33	; 0x21
 8001f00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001f04:	f7fe ff2e 	bl	8000d64 <HAL_GetTick>
 8001f08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	88fa      	ldrh	r2, [r7, #6]
 8001f0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	88fa      	ldrh	r2, [r7, #6]
 8001f14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001f1e:	e042      	b.n	8001fa6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f36:	d122      	bne.n	8001f7e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2180      	movs	r1, #128	; 0x80
 8001f42:	68f8      	ldr	r0, [r7, #12]
 8001f44:	f000 f96a 	bl	800221c <UART_WaitOnFlagUntilTimeout>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e042      	b.n	8001fd8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	881b      	ldrh	r3, [r3, #0]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f64:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d103      	bne.n	8001f76 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	3302      	adds	r3, #2
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	e017      	b.n	8001fa6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3301      	adds	r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	e013      	b.n	8001fa6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 f947 	bl	800221c <UART_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e01f      	b.n	8001fd8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	1c5a      	adds	r2, r3, #1
 8001f9c:	60ba      	str	r2, [r7, #8]
 8001f9e:	781a      	ldrb	r2, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1b7      	bne.n	8001f20 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2140      	movs	r1, #64	; 0x40
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f92e 	bl	800221c <UART_WaitOnFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e006      	b.n	8001fd8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	e000      	b.n	8001fd8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001fd6:	2302      	movs	r3, #2
  }
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002000:	2300      	movs	r3, #0
 8002002:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0320 	and.w	r3, r3, #32
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_UART_IRQHandler+0x52>
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f000 f9e0 	bl	80023f0 <UART_Receive_IT>
      return;
 8002030:	e0d1      	b.n	80021d6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80b0 	beq.w	800219a <HAL_UART_IRQHandler+0x1ba>
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b00      	cmp	r3, #0
 8002042:	d105      	bne.n	8002050 <HAL_UART_IRQHandler+0x70>
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80a5 	beq.w	800219a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_UART_IRQHandler+0x90>
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00a      	beq.n	8002090 <HAL_UART_IRQHandler+0xb0>
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d005      	beq.n	8002090 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002088:	f043 0202 	orr.w	r2, r3, #2
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_UART_IRQHandler+0xd0>
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 0301 	and.w	r3, r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d005      	beq.n	80020b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a8:	f043 0204 	orr.w	r2, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00f      	beq.n	80020da <HAL_UART_IRQHandler+0xfa>
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d104      	bne.n	80020ce <HAL_UART_IRQHandler+0xee>
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	f043 0208 	orr.w	r2, r3, #8
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d078      	beq.n	80021d4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d007      	beq.n	80020fc <HAL_UART_IRQHandler+0x11c>
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f97a 	bl	80023f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002106:	2b40      	cmp	r3, #64	; 0x40
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <HAL_UART_IRQHandler+0x144>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d031      	beq.n	8002188 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8c3 	bl	80022b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	695b      	ldr	r3, [r3, #20]
 8002130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002134:	2b40      	cmp	r3, #64	; 0x40
 8002136:	d123      	bne.n	8002180 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	695a      	ldr	r2, [r3, #20]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002146:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	2b00      	cmp	r3, #0
 800214e:	d013      	beq.n	8002178 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002154:	4a21      	ldr	r2, [pc, #132]	; (80021dc <HAL_UART_IRQHandler+0x1fc>)
 8002156:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe ff40 	bl	8000fe2 <HAL_DMA_Abort_IT>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d016      	beq.n	8002196 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002172:	4610      	mov	r0, r2
 8002174:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002176:	e00e      	b.n	8002196 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f000 f845 	bl	8002208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800217e:	e00a      	b.n	8002196 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f841 	bl	8002208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002186:	e006      	b.n	8002196 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f000 f83d 	bl	8002208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002194:	e01e      	b.n	80021d4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002196:	bf00      	nop
    return;
 8002198:	e01c      	b.n	80021d4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_UART_IRQHandler+0x1d6>
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f8b0 	bl	8002314 <UART_Transmit_IT>
    return;
 80021b4:	e00f      	b.n	80021d6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_UART_IRQHandler+0x1f6>
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f8f8 	bl	80023c0 <UART_EndTransmit_IT>
    return;
 80021d0:	bf00      	nop
 80021d2:	e000      	b.n	80021d6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80021d4:	bf00      	nop
  }
}
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	080022ed 	.word	0x080022ed

080021e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	603b      	str	r3, [r7, #0]
 8002228:	4613      	mov	r3, r2
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800222c:	e02c      	b.n	8002288 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d028      	beq.n	8002288 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d007      	beq.n	800224c <UART_WaitOnFlagUntilTimeout+0x30>
 800223c:	f7fe fd92 	bl	8000d64 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	429a      	cmp	r2, r3
 800224a:	d21d      	bcs.n	8002288 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800225a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695a      	ldr	r2, [r3, #20]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2220      	movs	r2, #32
 8002270:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e00f      	b.n	80022a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	4013      	ands	r3, r2
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	429a      	cmp	r2, r3
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d0c3      	beq.n	800222e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022a6:	2300      	movs	r3, #0
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3710      	adds	r7, #16
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f7ff ff7e 	bl	8002208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b21      	cmp	r3, #33	; 0x21
 8002326:	d144      	bne.n	80023b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002330:	d11a      	bne.n	8002368 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002346:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d105      	bne.n	800235c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a1b      	ldr	r3, [r3, #32]
 8002354:	1c9a      	adds	r2, r3, #2
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	621a      	str	r2, [r3, #32]
 800235a:	e00e      	b.n	800237a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	621a      	str	r2, [r3, #32]
 8002366:	e008      	b.n	800237a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	1c59      	adds	r1, r3, #1
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6211      	str	r1, [r2, #32]
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800237e:	b29b      	uxth	r3, r3
 8002380:	3b01      	subs	r3, #1
 8002382:	b29b      	uxth	r3, r3
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	4619      	mov	r1, r3
 8002388:	84d1      	strh	r1, [r2, #38]	; 0x26
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800239c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e000      	b.n	80023b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80023b2:	2302      	movs	r3, #2
  }
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f7ff fefd 	bl	80021e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b22      	cmp	r3, #34	; 0x22
 8002402:	d171      	bne.n	80024e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240c:	d123      	bne.n	8002456 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10e      	bne.n	800243a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	b29b      	uxth	r3, r3
 8002424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002432:	1c9a      	adds	r2, r3, #2
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	629a      	str	r2, [r3, #40]	; 0x28
 8002438:	e029      	b.n	800248e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	b29b      	uxth	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	b29a      	uxth	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
 8002454:	e01b      	b.n	800248e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6858      	ldr	r0, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002468:	1c59      	adds	r1, r3, #1
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6291      	str	r1, [r2, #40]	; 0x28
 800246e:	b2c2      	uxtb	r2, r0
 8002470:	701a      	strb	r2, [r3, #0]
 8002472:	e00c      	b.n	800248e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	1c58      	adds	r0, r3, #1
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	6288      	str	r0, [r1, #40]	; 0x28
 8002486:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29b      	uxth	r3, r3
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	4619      	mov	r1, r3
 800249c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d120      	bne.n	80024e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0220 	bic.w	r2, r2, #32
 80024b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	68da      	ldr	r2, [r3, #12]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695a      	ldr	r2, [r3, #20]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7ff fe8a 	bl	80021f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e002      	b.n	80024ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	e000      	b.n	80024ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80024e8:	2302      	movs	r3, #2
  }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68da      	ldr	r2, [r3, #12]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68db      	ldr	r3, [r3, #12]
 8002532:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002536:	f023 030c 	bic.w	r3, r3, #12
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	68f9      	ldr	r1, [r7, #12]
 8002540:	430b      	orrs	r3, r1
 8002542:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699a      	ldr	r2, [r3, #24]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	430a      	orrs	r2, r1
 8002558:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002562:	f040 818b 	bne.w	800287c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4ac1      	ldr	r2, [pc, #772]	; (8002870 <UART_SetConfig+0x37c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d005      	beq.n	800257c <UART_SetConfig+0x88>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4abf      	ldr	r2, [pc, #764]	; (8002874 <UART_SetConfig+0x380>)
 8002576:	4293      	cmp	r3, r2
 8002578:	f040 80bd 	bne.w	80026f6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800257c:	f7ff fc36 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002580:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	461d      	mov	r5, r3
 8002586:	f04f 0600 	mov.w	r6, #0
 800258a:	46a8      	mov	r8, r5
 800258c:	46b1      	mov	r9, r6
 800258e:	eb18 0308 	adds.w	r3, r8, r8
 8002592:	eb49 0409 	adc.w	r4, r9, r9
 8002596:	4698      	mov	r8, r3
 8002598:	46a1      	mov	r9, r4
 800259a:	eb18 0805 	adds.w	r8, r8, r5
 800259e:	eb49 0906 	adc.w	r9, r9, r6
 80025a2:	f04f 0100 	mov.w	r1, #0
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80025ae:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80025b2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80025b6:	4688      	mov	r8, r1
 80025b8:	4691      	mov	r9, r2
 80025ba:	eb18 0005 	adds.w	r0, r8, r5
 80025be:	eb49 0106 	adc.w	r1, r9, r6
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	461d      	mov	r5, r3
 80025c8:	f04f 0600 	mov.w	r6, #0
 80025cc:	196b      	adds	r3, r5, r5
 80025ce:	eb46 0406 	adc.w	r4, r6, r6
 80025d2:	461a      	mov	r2, r3
 80025d4:	4623      	mov	r3, r4
 80025d6:	f7fd fdff 	bl	80001d8 <__aeabi_uldivmod>
 80025da:	4603      	mov	r3, r0
 80025dc:	460c      	mov	r4, r1
 80025de:	461a      	mov	r2, r3
 80025e0:	4ba5      	ldr	r3, [pc, #660]	; (8002878 <UART_SetConfig+0x384>)
 80025e2:	fba3 2302 	umull	r2, r3, r3, r2
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	461d      	mov	r5, r3
 80025f0:	f04f 0600 	mov.w	r6, #0
 80025f4:	46a9      	mov	r9, r5
 80025f6:	46b2      	mov	sl, r6
 80025f8:	eb19 0309 	adds.w	r3, r9, r9
 80025fc:	eb4a 040a 	adc.w	r4, sl, sl
 8002600:	4699      	mov	r9, r3
 8002602:	46a2      	mov	sl, r4
 8002604:	eb19 0905 	adds.w	r9, r9, r5
 8002608:	eb4a 0a06 	adc.w	sl, sl, r6
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800261c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002620:	4689      	mov	r9, r1
 8002622:	4692      	mov	sl, r2
 8002624:	eb19 0005 	adds.w	r0, r9, r5
 8002628:	eb4a 0106 	adc.w	r1, sl, r6
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	461d      	mov	r5, r3
 8002632:	f04f 0600 	mov.w	r6, #0
 8002636:	196b      	adds	r3, r5, r5
 8002638:	eb46 0406 	adc.w	r4, r6, r6
 800263c:	461a      	mov	r2, r3
 800263e:	4623      	mov	r3, r4
 8002640:	f7fd fdca 	bl	80001d8 <__aeabi_uldivmod>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	461a      	mov	r2, r3
 800264a:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <UART_SetConfig+0x384>)
 800264c:	fba3 1302 	umull	r1, r3, r3, r2
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	2164      	movs	r1, #100	; 0x64
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	3332      	adds	r3, #50	; 0x32
 800265e:	4a86      	ldr	r2, [pc, #536]	; (8002878 <UART_SetConfig+0x384>)
 8002660:	fba2 2303 	umull	r2, r3, r2, r3
 8002664:	095b      	lsrs	r3, r3, #5
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800266c:	4498      	add	r8, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	461d      	mov	r5, r3
 8002672:	f04f 0600 	mov.w	r6, #0
 8002676:	46a9      	mov	r9, r5
 8002678:	46b2      	mov	sl, r6
 800267a:	eb19 0309 	adds.w	r3, r9, r9
 800267e:	eb4a 040a 	adc.w	r4, sl, sl
 8002682:	4699      	mov	r9, r3
 8002684:	46a2      	mov	sl, r4
 8002686:	eb19 0905 	adds.w	r9, r9, r5
 800268a:	eb4a 0a06 	adc.w	sl, sl, r6
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800269a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800269e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80026a2:	4689      	mov	r9, r1
 80026a4:	4692      	mov	sl, r2
 80026a6:	eb19 0005 	adds.w	r0, r9, r5
 80026aa:	eb4a 0106 	adc.w	r1, sl, r6
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	461d      	mov	r5, r3
 80026b4:	f04f 0600 	mov.w	r6, #0
 80026b8:	196b      	adds	r3, r5, r5
 80026ba:	eb46 0406 	adc.w	r4, r6, r6
 80026be:	461a      	mov	r2, r3
 80026c0:	4623      	mov	r3, r4
 80026c2:	f7fd fd89 	bl	80001d8 <__aeabi_uldivmod>
 80026c6:	4603      	mov	r3, r0
 80026c8:	460c      	mov	r4, r1
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b6a      	ldr	r3, [pc, #424]	; (8002878 <UART_SetConfig+0x384>)
 80026ce:	fba3 1302 	umull	r1, r3, r3, r2
 80026d2:	095b      	lsrs	r3, r3, #5
 80026d4:	2164      	movs	r1, #100	; 0x64
 80026d6:	fb01 f303 	mul.w	r3, r1, r3
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	3332      	adds	r3, #50	; 0x32
 80026e0:	4a65      	ldr	r2, [pc, #404]	; (8002878 <UART_SetConfig+0x384>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	f003 0207 	and.w	r2, r3, #7
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4442      	add	r2, r8
 80026f2:	609a      	str	r2, [r3, #8]
 80026f4:	e26f      	b.n	8002bd6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80026f6:	f7ff fb65 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 80026fa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	461d      	mov	r5, r3
 8002700:	f04f 0600 	mov.w	r6, #0
 8002704:	46a8      	mov	r8, r5
 8002706:	46b1      	mov	r9, r6
 8002708:	eb18 0308 	adds.w	r3, r8, r8
 800270c:	eb49 0409 	adc.w	r4, r9, r9
 8002710:	4698      	mov	r8, r3
 8002712:	46a1      	mov	r9, r4
 8002714:	eb18 0805 	adds.w	r8, r8, r5
 8002718:	eb49 0906 	adc.w	r9, r9, r6
 800271c:	f04f 0100 	mov.w	r1, #0
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002728:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800272c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002730:	4688      	mov	r8, r1
 8002732:	4691      	mov	r9, r2
 8002734:	eb18 0005 	adds.w	r0, r8, r5
 8002738:	eb49 0106 	adc.w	r1, r9, r6
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	461d      	mov	r5, r3
 8002742:	f04f 0600 	mov.w	r6, #0
 8002746:	196b      	adds	r3, r5, r5
 8002748:	eb46 0406 	adc.w	r4, r6, r6
 800274c:	461a      	mov	r2, r3
 800274e:	4623      	mov	r3, r4
 8002750:	f7fd fd42 	bl	80001d8 <__aeabi_uldivmod>
 8002754:	4603      	mov	r3, r0
 8002756:	460c      	mov	r4, r1
 8002758:	461a      	mov	r2, r3
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <UART_SetConfig+0x384>)
 800275c:	fba3 2302 	umull	r2, r3, r3, r2
 8002760:	095b      	lsrs	r3, r3, #5
 8002762:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	461d      	mov	r5, r3
 800276a:	f04f 0600 	mov.w	r6, #0
 800276e:	46a9      	mov	r9, r5
 8002770:	46b2      	mov	sl, r6
 8002772:	eb19 0309 	adds.w	r3, r9, r9
 8002776:	eb4a 040a 	adc.w	r4, sl, sl
 800277a:	4699      	mov	r9, r3
 800277c:	46a2      	mov	sl, r4
 800277e:	eb19 0905 	adds.w	r9, r9, r5
 8002782:	eb4a 0a06 	adc.w	sl, sl, r6
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002792:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002796:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800279a:	4689      	mov	r9, r1
 800279c:	4692      	mov	sl, r2
 800279e:	eb19 0005 	adds.w	r0, r9, r5
 80027a2:	eb4a 0106 	adc.w	r1, sl, r6
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	461d      	mov	r5, r3
 80027ac:	f04f 0600 	mov.w	r6, #0
 80027b0:	196b      	adds	r3, r5, r5
 80027b2:	eb46 0406 	adc.w	r4, r6, r6
 80027b6:	461a      	mov	r2, r3
 80027b8:	4623      	mov	r3, r4
 80027ba:	f7fd fd0d 	bl	80001d8 <__aeabi_uldivmod>
 80027be:	4603      	mov	r3, r0
 80027c0:	460c      	mov	r4, r1
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <UART_SetConfig+0x384>)
 80027c6:	fba3 1302 	umull	r1, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	2164      	movs	r1, #100	; 0x64
 80027ce:	fb01 f303 	mul.w	r3, r1, r3
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	3332      	adds	r3, #50	; 0x32
 80027d8:	4a27      	ldr	r2, [pc, #156]	; (8002878 <UART_SetConfig+0x384>)
 80027da:	fba2 2303 	umull	r2, r3, r2, r3
 80027de:	095b      	lsrs	r3, r3, #5
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80027e6:	4498      	add	r8, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	461d      	mov	r5, r3
 80027ec:	f04f 0600 	mov.w	r6, #0
 80027f0:	46a9      	mov	r9, r5
 80027f2:	46b2      	mov	sl, r6
 80027f4:	eb19 0309 	adds.w	r3, r9, r9
 80027f8:	eb4a 040a 	adc.w	r4, sl, sl
 80027fc:	4699      	mov	r9, r3
 80027fe:	46a2      	mov	sl, r4
 8002800:	eb19 0905 	adds.w	r9, r9, r5
 8002804:	eb4a 0a06 	adc.w	sl, sl, r6
 8002808:	f04f 0100 	mov.w	r1, #0
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002814:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002818:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800281c:	4689      	mov	r9, r1
 800281e:	4692      	mov	sl, r2
 8002820:	eb19 0005 	adds.w	r0, r9, r5
 8002824:	eb4a 0106 	adc.w	r1, sl, r6
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	461d      	mov	r5, r3
 800282e:	f04f 0600 	mov.w	r6, #0
 8002832:	196b      	adds	r3, r5, r5
 8002834:	eb46 0406 	adc.w	r4, r6, r6
 8002838:	461a      	mov	r2, r3
 800283a:	4623      	mov	r3, r4
 800283c:	f7fd fccc 	bl	80001d8 <__aeabi_uldivmod>
 8002840:	4603      	mov	r3, r0
 8002842:	460c      	mov	r4, r1
 8002844:	461a      	mov	r2, r3
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <UART_SetConfig+0x384>)
 8002848:	fba3 1302 	umull	r1, r3, r3, r2
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	2164      	movs	r1, #100	; 0x64
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	3332      	adds	r3, #50	; 0x32
 800285a:	4a07      	ldr	r2, [pc, #28]	; (8002878 <UART_SetConfig+0x384>)
 800285c:	fba2 2303 	umull	r2, r3, r2, r3
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	f003 0207 	and.w	r2, r3, #7
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4442      	add	r2, r8
 800286c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800286e:	e1b2      	b.n	8002bd6 <UART_SetConfig+0x6e2>
 8002870:	40011000 	.word	0x40011000
 8002874:	40011400 	.word	0x40011400
 8002878:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4ad7      	ldr	r2, [pc, #860]	; (8002be0 <UART_SetConfig+0x6ec>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d005      	beq.n	8002892 <UART_SetConfig+0x39e>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4ad6      	ldr	r2, [pc, #856]	; (8002be4 <UART_SetConfig+0x6f0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	f040 80d1 	bne.w	8002a34 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002892:	f7ff faab 	bl	8001dec <HAL_RCC_GetPCLK2Freq>
 8002896:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	469a      	mov	sl, r3
 800289c:	f04f 0b00 	mov.w	fp, #0
 80028a0:	46d0      	mov	r8, sl
 80028a2:	46d9      	mov	r9, fp
 80028a4:	eb18 0308 	adds.w	r3, r8, r8
 80028a8:	eb49 0409 	adc.w	r4, r9, r9
 80028ac:	4698      	mov	r8, r3
 80028ae:	46a1      	mov	r9, r4
 80028b0:	eb18 080a 	adds.w	r8, r8, sl
 80028b4:	eb49 090b 	adc.w	r9, r9, fp
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80028c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80028c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80028cc:	4688      	mov	r8, r1
 80028ce:	4691      	mov	r9, r2
 80028d0:	eb1a 0508 	adds.w	r5, sl, r8
 80028d4:	eb4b 0609 	adc.w	r6, fp, r9
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4619      	mov	r1, r3
 80028de:	f04f 0200 	mov.w	r2, #0
 80028e2:	f04f 0300 	mov.w	r3, #0
 80028e6:	f04f 0400 	mov.w	r4, #0
 80028ea:	0094      	lsls	r4, r2, #2
 80028ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80028f0:	008b      	lsls	r3, r1, #2
 80028f2:	461a      	mov	r2, r3
 80028f4:	4623      	mov	r3, r4
 80028f6:	4628      	mov	r0, r5
 80028f8:	4631      	mov	r1, r6
 80028fa:	f7fd fc6d 	bl	80001d8 <__aeabi_uldivmod>
 80028fe:	4603      	mov	r3, r0
 8002900:	460c      	mov	r4, r1
 8002902:	461a      	mov	r2, r3
 8002904:	4bb8      	ldr	r3, [pc, #736]	; (8002be8 <UART_SetConfig+0x6f4>)
 8002906:	fba3 2302 	umull	r2, r3, r3, r2
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	469b      	mov	fp, r3
 8002914:	f04f 0c00 	mov.w	ip, #0
 8002918:	46d9      	mov	r9, fp
 800291a:	46e2      	mov	sl, ip
 800291c:	eb19 0309 	adds.w	r3, r9, r9
 8002920:	eb4a 040a 	adc.w	r4, sl, sl
 8002924:	4699      	mov	r9, r3
 8002926:	46a2      	mov	sl, r4
 8002928:	eb19 090b 	adds.w	r9, r9, fp
 800292c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800293c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002940:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002944:	4689      	mov	r9, r1
 8002946:	4692      	mov	sl, r2
 8002948:	eb1b 0509 	adds.w	r5, fp, r9
 800294c:	eb4c 060a 	adc.w	r6, ip, sl
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4619      	mov	r1, r3
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	f04f 0400 	mov.w	r4, #0
 8002962:	0094      	lsls	r4, r2, #2
 8002964:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002968:	008b      	lsls	r3, r1, #2
 800296a:	461a      	mov	r2, r3
 800296c:	4623      	mov	r3, r4
 800296e:	4628      	mov	r0, r5
 8002970:	4631      	mov	r1, r6
 8002972:	f7fd fc31 	bl	80001d8 <__aeabi_uldivmod>
 8002976:	4603      	mov	r3, r0
 8002978:	460c      	mov	r4, r1
 800297a:	461a      	mov	r2, r3
 800297c:	4b9a      	ldr	r3, [pc, #616]	; (8002be8 <UART_SetConfig+0x6f4>)
 800297e:	fba3 1302 	umull	r1, r3, r3, r2
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	2164      	movs	r1, #100	; 0x64
 8002986:	fb01 f303 	mul.w	r3, r1, r3
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	3332      	adds	r3, #50	; 0x32
 8002990:	4a95      	ldr	r2, [pc, #596]	; (8002be8 <UART_SetConfig+0x6f4>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800299c:	4498      	add	r8, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	469b      	mov	fp, r3
 80029a2:	f04f 0c00 	mov.w	ip, #0
 80029a6:	46d9      	mov	r9, fp
 80029a8:	46e2      	mov	sl, ip
 80029aa:	eb19 0309 	adds.w	r3, r9, r9
 80029ae:	eb4a 040a 	adc.w	r4, sl, sl
 80029b2:	4699      	mov	r9, r3
 80029b4:	46a2      	mov	sl, r4
 80029b6:	eb19 090b 	adds.w	r9, r9, fp
 80029ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80029be:	f04f 0100 	mov.w	r1, #0
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029d2:	4689      	mov	r9, r1
 80029d4:	4692      	mov	sl, r2
 80029d6:	eb1b 0509 	adds.w	r5, fp, r9
 80029da:	eb4c 060a 	adc.w	r6, ip, sl
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 0200 	mov.w	r2, #0
 80029e8:	f04f 0300 	mov.w	r3, #0
 80029ec:	f04f 0400 	mov.w	r4, #0
 80029f0:	0094      	lsls	r4, r2, #2
 80029f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80029f6:	008b      	lsls	r3, r1, #2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4623      	mov	r3, r4
 80029fc:	4628      	mov	r0, r5
 80029fe:	4631      	mov	r1, r6
 8002a00:	f7fd fbea 	bl	80001d8 <__aeabi_uldivmod>
 8002a04:	4603      	mov	r3, r0
 8002a06:	460c      	mov	r4, r1
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b77      	ldr	r3, [pc, #476]	; (8002be8 <UART_SetConfig+0x6f4>)
 8002a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	2164      	movs	r1, #100	; 0x64
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	3332      	adds	r3, #50	; 0x32
 8002a1e:	4a72      	ldr	r2, [pc, #456]	; (8002be8 <UART_SetConfig+0x6f4>)
 8002a20:	fba2 2303 	umull	r2, r3, r2, r3
 8002a24:	095b      	lsrs	r3, r3, #5
 8002a26:	f003 020f 	and.w	r2, r3, #15
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4442      	add	r2, r8
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	e0d0      	b.n	8002bd6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002a34:	f7ff f9c6 	bl	8001dc4 <HAL_RCC_GetPCLK1Freq>
 8002a38:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	469a      	mov	sl, r3
 8002a3e:	f04f 0b00 	mov.w	fp, #0
 8002a42:	46d0      	mov	r8, sl
 8002a44:	46d9      	mov	r9, fp
 8002a46:	eb18 0308 	adds.w	r3, r8, r8
 8002a4a:	eb49 0409 	adc.w	r4, r9, r9
 8002a4e:	4698      	mov	r8, r3
 8002a50:	46a1      	mov	r9, r4
 8002a52:	eb18 080a 	adds.w	r8, r8, sl
 8002a56:	eb49 090b 	adc.w	r9, r9, fp
 8002a5a:	f04f 0100 	mov.w	r1, #0
 8002a5e:	f04f 0200 	mov.w	r2, #0
 8002a62:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002a66:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002a6a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002a6e:	4688      	mov	r8, r1
 8002a70:	4691      	mov	r9, r2
 8002a72:	eb1a 0508 	adds.w	r5, sl, r8
 8002a76:	eb4b 0609 	adc.w	r6, fp, r9
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f04f 0200 	mov.w	r2, #0
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	0094      	lsls	r4, r2, #2
 8002a8e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002a92:	008b      	lsls	r3, r1, #2
 8002a94:	461a      	mov	r2, r3
 8002a96:	4623      	mov	r3, r4
 8002a98:	4628      	mov	r0, r5
 8002a9a:	4631      	mov	r1, r6
 8002a9c:	f7fd fb9c 	bl	80001d8 <__aeabi_uldivmod>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b50      	ldr	r3, [pc, #320]	; (8002be8 <UART_SetConfig+0x6f4>)
 8002aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8002aac:	095b      	lsrs	r3, r3, #5
 8002aae:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	469b      	mov	fp, r3
 8002ab6:	f04f 0c00 	mov.w	ip, #0
 8002aba:	46d9      	mov	r9, fp
 8002abc:	46e2      	mov	sl, ip
 8002abe:	eb19 0309 	adds.w	r3, r9, r9
 8002ac2:	eb4a 040a 	adc.w	r4, sl, sl
 8002ac6:	4699      	mov	r9, r3
 8002ac8:	46a2      	mov	sl, r4
 8002aca:	eb19 090b 	adds.w	r9, r9, fp
 8002ace:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ade:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002ae2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ae6:	4689      	mov	r9, r1
 8002ae8:	4692      	mov	sl, r2
 8002aea:	eb1b 0509 	adds.w	r5, fp, r9
 8002aee:	eb4c 060a 	adc.w	r6, ip, sl
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	4619      	mov	r1, r3
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	f04f 0400 	mov.w	r4, #0
 8002b04:	0094      	lsls	r4, r2, #2
 8002b06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b0a:	008b      	lsls	r3, r1, #2
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4623      	mov	r3, r4
 8002b10:	4628      	mov	r0, r5
 8002b12:	4631      	mov	r1, r6
 8002b14:	f7fd fb60 	bl	80001d8 <__aeabi_uldivmod>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	460c      	mov	r4, r1
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b32      	ldr	r3, [pc, #200]	; (8002be8 <UART_SetConfig+0x6f4>)
 8002b20:	fba3 1302 	umull	r1, r3, r3, r2
 8002b24:	095b      	lsrs	r3, r3, #5
 8002b26:	2164      	movs	r1, #100	; 0x64
 8002b28:	fb01 f303 	mul.w	r3, r1, r3
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	3332      	adds	r3, #50	; 0x32
 8002b32:	4a2d      	ldr	r2, [pc, #180]	; (8002be8 <UART_SetConfig+0x6f4>)
 8002b34:	fba2 2303 	umull	r2, r3, r2, r3
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b3e:	4498      	add	r8, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	469b      	mov	fp, r3
 8002b44:	f04f 0c00 	mov.w	ip, #0
 8002b48:	46d9      	mov	r9, fp
 8002b4a:	46e2      	mov	sl, ip
 8002b4c:	eb19 0309 	adds.w	r3, r9, r9
 8002b50:	eb4a 040a 	adc.w	r4, sl, sl
 8002b54:	4699      	mov	r9, r3
 8002b56:	46a2      	mov	sl, r4
 8002b58:	eb19 090b 	adds.w	r9, r9, fp
 8002b5c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b60:	f04f 0100 	mov.w	r1, #0
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b6c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b70:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b74:	4689      	mov	r9, r1
 8002b76:	4692      	mov	sl, r2
 8002b78:	eb1b 0509 	adds.w	r5, fp, r9
 8002b7c:	eb4c 060a 	adc.w	r6, ip, sl
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4619      	mov	r1, r3
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	f04f 0400 	mov.w	r4, #0
 8002b92:	0094      	lsls	r4, r2, #2
 8002b94:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b98:	008b      	lsls	r3, r1, #2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4623      	mov	r3, r4
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	4631      	mov	r1, r6
 8002ba2:	f7fd fb19 	bl	80001d8 <__aeabi_uldivmod>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	460c      	mov	r4, r1
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <UART_SetConfig+0x6f4>)
 8002bae:	fba3 1302 	umull	r1, r3, r3, r2
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	2164      	movs	r1, #100	; 0x64
 8002bb6:	fb01 f303 	mul.w	r3, r1, r3
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	3332      	adds	r3, #50	; 0x32
 8002bc0:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <UART_SetConfig+0x6f4>)
 8002bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc6:	095b      	lsrs	r3, r3, #5
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4442      	add	r2, r8
 8002bd2:	609a      	str	r2, [r3, #8]
}
 8002bd4:	e7ff      	b.n	8002bd6 <UART_SetConfig+0x6e2>
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be0:	40011000 	.word	0x40011000
 8002be4:	40011400 	.word	0x40011400
 8002be8:	51eb851f 	.word	0x51eb851f

08002bec <__errno>:
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <__errno+0x8>)
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	2000000c 	.word	0x2000000c

08002bf8 <__libc_init_array>:
 8002bf8:	b570      	push	{r4, r5, r6, lr}
 8002bfa:	4e0d      	ldr	r6, [pc, #52]	; (8002c30 <__libc_init_array+0x38>)
 8002bfc:	4c0d      	ldr	r4, [pc, #52]	; (8002c34 <__libc_init_array+0x3c>)
 8002bfe:	1ba4      	subs	r4, r4, r6
 8002c00:	10a4      	asrs	r4, r4, #2
 8002c02:	2500      	movs	r5, #0
 8002c04:	42a5      	cmp	r5, r4
 8002c06:	d109      	bne.n	8002c1c <__libc_init_array+0x24>
 8002c08:	4e0b      	ldr	r6, [pc, #44]	; (8002c38 <__libc_init_array+0x40>)
 8002c0a:	4c0c      	ldr	r4, [pc, #48]	; (8002c3c <__libc_init_array+0x44>)
 8002c0c:	f000 fc88 	bl	8003520 <_init>
 8002c10:	1ba4      	subs	r4, r4, r6
 8002c12:	10a4      	asrs	r4, r4, #2
 8002c14:	2500      	movs	r5, #0
 8002c16:	42a5      	cmp	r5, r4
 8002c18:	d105      	bne.n	8002c26 <__libc_init_array+0x2e>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c20:	4798      	blx	r3
 8002c22:	3501      	adds	r5, #1
 8002c24:	e7ee      	b.n	8002c04 <__libc_init_array+0xc>
 8002c26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c2a:	4798      	blx	r3
 8002c2c:	3501      	adds	r5, #1
 8002c2e:	e7f2      	b.n	8002c16 <__libc_init_array+0x1e>
 8002c30:	080035c0 	.word	0x080035c0
 8002c34:	080035c0 	.word	0x080035c0
 8002c38:	080035c0 	.word	0x080035c0
 8002c3c:	080035c4 	.word	0x080035c4

08002c40 <memset>:
 8002c40:	4402      	add	r2, r0
 8002c42:	4603      	mov	r3, r0
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d100      	bne.n	8002c4a <memset+0xa>
 8002c48:	4770      	bx	lr
 8002c4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c4e:	e7f9      	b.n	8002c44 <memset+0x4>

08002c50 <_puts_r>:
 8002c50:	b570      	push	{r4, r5, r6, lr}
 8002c52:	460e      	mov	r6, r1
 8002c54:	4605      	mov	r5, r0
 8002c56:	b118      	cbz	r0, 8002c60 <_puts_r+0x10>
 8002c58:	6983      	ldr	r3, [r0, #24]
 8002c5a:	b90b      	cbnz	r3, 8002c60 <_puts_r+0x10>
 8002c5c:	f000 fa0c 	bl	8003078 <__sinit>
 8002c60:	69ab      	ldr	r3, [r5, #24]
 8002c62:	68ac      	ldr	r4, [r5, #8]
 8002c64:	b913      	cbnz	r3, 8002c6c <_puts_r+0x1c>
 8002c66:	4628      	mov	r0, r5
 8002c68:	f000 fa06 	bl	8003078 <__sinit>
 8002c6c:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <_puts_r+0xac>)
 8002c6e:	429c      	cmp	r4, r3
 8002c70:	d117      	bne.n	8002ca2 <_puts_r+0x52>
 8002c72:	686c      	ldr	r4, [r5, #4]
 8002c74:	89a3      	ldrh	r3, [r4, #12]
 8002c76:	071b      	lsls	r3, r3, #28
 8002c78:	d51d      	bpl.n	8002cb6 <_puts_r+0x66>
 8002c7a:	6923      	ldr	r3, [r4, #16]
 8002c7c:	b1db      	cbz	r3, 8002cb6 <_puts_r+0x66>
 8002c7e:	3e01      	subs	r6, #1
 8002c80:	68a3      	ldr	r3, [r4, #8]
 8002c82:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c86:	3b01      	subs	r3, #1
 8002c88:	60a3      	str	r3, [r4, #8]
 8002c8a:	b9e9      	cbnz	r1, 8002cc8 <_puts_r+0x78>
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	da2e      	bge.n	8002cee <_puts_r+0x9e>
 8002c90:	4622      	mov	r2, r4
 8002c92:	210a      	movs	r1, #10
 8002c94:	4628      	mov	r0, r5
 8002c96:	f000 f83f 	bl	8002d18 <__swbuf_r>
 8002c9a:	3001      	adds	r0, #1
 8002c9c:	d011      	beq.n	8002cc2 <_puts_r+0x72>
 8002c9e:	200a      	movs	r0, #10
 8002ca0:	e011      	b.n	8002cc6 <_puts_r+0x76>
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <_puts_r+0xb0>)
 8002ca4:	429c      	cmp	r4, r3
 8002ca6:	d101      	bne.n	8002cac <_puts_r+0x5c>
 8002ca8:	68ac      	ldr	r4, [r5, #8]
 8002caa:	e7e3      	b.n	8002c74 <_puts_r+0x24>
 8002cac:	4b15      	ldr	r3, [pc, #84]	; (8002d04 <_puts_r+0xb4>)
 8002cae:	429c      	cmp	r4, r3
 8002cb0:	bf08      	it	eq
 8002cb2:	68ec      	ldreq	r4, [r5, #12]
 8002cb4:	e7de      	b.n	8002c74 <_puts_r+0x24>
 8002cb6:	4621      	mov	r1, r4
 8002cb8:	4628      	mov	r0, r5
 8002cba:	f000 f87f 	bl	8002dbc <__swsetup_r>
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	d0dd      	beq.n	8002c7e <_puts_r+0x2e>
 8002cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	da04      	bge.n	8002cd6 <_puts_r+0x86>
 8002ccc:	69a2      	ldr	r2, [r4, #24]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	dc06      	bgt.n	8002ce0 <_puts_r+0x90>
 8002cd2:	290a      	cmp	r1, #10
 8002cd4:	d004      	beq.n	8002ce0 <_puts_r+0x90>
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	6022      	str	r2, [r4, #0]
 8002cdc:	7019      	strb	r1, [r3, #0]
 8002cde:	e7cf      	b.n	8002c80 <_puts_r+0x30>
 8002ce0:	4622      	mov	r2, r4
 8002ce2:	4628      	mov	r0, r5
 8002ce4:	f000 f818 	bl	8002d18 <__swbuf_r>
 8002ce8:	3001      	adds	r0, #1
 8002cea:	d1c9      	bne.n	8002c80 <_puts_r+0x30>
 8002cec:	e7e9      	b.n	8002cc2 <_puts_r+0x72>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	200a      	movs	r0, #10
 8002cf2:	1c5a      	adds	r2, r3, #1
 8002cf4:	6022      	str	r2, [r4, #0]
 8002cf6:	7018      	strb	r0, [r3, #0]
 8002cf8:	e7e5      	b.n	8002cc6 <_puts_r+0x76>
 8002cfa:	bf00      	nop
 8002cfc:	08003578 	.word	0x08003578
 8002d00:	08003598 	.word	0x08003598
 8002d04:	08003558 	.word	0x08003558

08002d08 <puts>:
 8002d08:	4b02      	ldr	r3, [pc, #8]	; (8002d14 <puts+0xc>)
 8002d0a:	4601      	mov	r1, r0
 8002d0c:	6818      	ldr	r0, [r3, #0]
 8002d0e:	f7ff bf9f 	b.w	8002c50 <_puts_r>
 8002d12:	bf00      	nop
 8002d14:	2000000c 	.word	0x2000000c

08002d18 <__swbuf_r>:
 8002d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1a:	460e      	mov	r6, r1
 8002d1c:	4614      	mov	r4, r2
 8002d1e:	4605      	mov	r5, r0
 8002d20:	b118      	cbz	r0, 8002d2a <__swbuf_r+0x12>
 8002d22:	6983      	ldr	r3, [r0, #24]
 8002d24:	b90b      	cbnz	r3, 8002d2a <__swbuf_r+0x12>
 8002d26:	f000 f9a7 	bl	8003078 <__sinit>
 8002d2a:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <__swbuf_r+0x98>)
 8002d2c:	429c      	cmp	r4, r3
 8002d2e:	d12a      	bne.n	8002d86 <__swbuf_r+0x6e>
 8002d30:	686c      	ldr	r4, [r5, #4]
 8002d32:	69a3      	ldr	r3, [r4, #24]
 8002d34:	60a3      	str	r3, [r4, #8]
 8002d36:	89a3      	ldrh	r3, [r4, #12]
 8002d38:	071a      	lsls	r2, r3, #28
 8002d3a:	d52e      	bpl.n	8002d9a <__swbuf_r+0x82>
 8002d3c:	6923      	ldr	r3, [r4, #16]
 8002d3e:	b363      	cbz	r3, 8002d9a <__swbuf_r+0x82>
 8002d40:	6923      	ldr	r3, [r4, #16]
 8002d42:	6820      	ldr	r0, [r4, #0]
 8002d44:	1ac0      	subs	r0, r0, r3
 8002d46:	6963      	ldr	r3, [r4, #20]
 8002d48:	b2f6      	uxtb	r6, r6
 8002d4a:	4283      	cmp	r3, r0
 8002d4c:	4637      	mov	r7, r6
 8002d4e:	dc04      	bgt.n	8002d5a <__swbuf_r+0x42>
 8002d50:	4621      	mov	r1, r4
 8002d52:	4628      	mov	r0, r5
 8002d54:	f000 f926 	bl	8002fa4 <_fflush_r>
 8002d58:	bb28      	cbnz	r0, 8002da6 <__swbuf_r+0x8e>
 8002d5a:	68a3      	ldr	r3, [r4, #8]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	60a3      	str	r3, [r4, #8]
 8002d60:	6823      	ldr	r3, [r4, #0]
 8002d62:	1c5a      	adds	r2, r3, #1
 8002d64:	6022      	str	r2, [r4, #0]
 8002d66:	701e      	strb	r6, [r3, #0]
 8002d68:	6963      	ldr	r3, [r4, #20]
 8002d6a:	3001      	adds	r0, #1
 8002d6c:	4283      	cmp	r3, r0
 8002d6e:	d004      	beq.n	8002d7a <__swbuf_r+0x62>
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	07db      	lsls	r3, r3, #31
 8002d74:	d519      	bpl.n	8002daa <__swbuf_r+0x92>
 8002d76:	2e0a      	cmp	r6, #10
 8002d78:	d117      	bne.n	8002daa <__swbuf_r+0x92>
 8002d7a:	4621      	mov	r1, r4
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	f000 f911 	bl	8002fa4 <_fflush_r>
 8002d82:	b190      	cbz	r0, 8002daa <__swbuf_r+0x92>
 8002d84:	e00f      	b.n	8002da6 <__swbuf_r+0x8e>
 8002d86:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <__swbuf_r+0x9c>)
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	d101      	bne.n	8002d90 <__swbuf_r+0x78>
 8002d8c:	68ac      	ldr	r4, [r5, #8]
 8002d8e:	e7d0      	b.n	8002d32 <__swbuf_r+0x1a>
 8002d90:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <__swbuf_r+0xa0>)
 8002d92:	429c      	cmp	r4, r3
 8002d94:	bf08      	it	eq
 8002d96:	68ec      	ldreq	r4, [r5, #12]
 8002d98:	e7cb      	b.n	8002d32 <__swbuf_r+0x1a>
 8002d9a:	4621      	mov	r1, r4
 8002d9c:	4628      	mov	r0, r5
 8002d9e:	f000 f80d 	bl	8002dbc <__swsetup_r>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d0cc      	beq.n	8002d40 <__swbuf_r+0x28>
 8002da6:	f04f 37ff 	mov.w	r7, #4294967295
 8002daa:	4638      	mov	r0, r7
 8002dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dae:	bf00      	nop
 8002db0:	08003578 	.word	0x08003578
 8002db4:	08003598 	.word	0x08003598
 8002db8:	08003558 	.word	0x08003558

08002dbc <__swsetup_r>:
 8002dbc:	4b32      	ldr	r3, [pc, #200]	; (8002e88 <__swsetup_r+0xcc>)
 8002dbe:	b570      	push	{r4, r5, r6, lr}
 8002dc0:	681d      	ldr	r5, [r3, #0]
 8002dc2:	4606      	mov	r6, r0
 8002dc4:	460c      	mov	r4, r1
 8002dc6:	b125      	cbz	r5, 8002dd2 <__swsetup_r+0x16>
 8002dc8:	69ab      	ldr	r3, [r5, #24]
 8002dca:	b913      	cbnz	r3, 8002dd2 <__swsetup_r+0x16>
 8002dcc:	4628      	mov	r0, r5
 8002dce:	f000 f953 	bl	8003078 <__sinit>
 8002dd2:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <__swsetup_r+0xd0>)
 8002dd4:	429c      	cmp	r4, r3
 8002dd6:	d10f      	bne.n	8002df8 <__swsetup_r+0x3c>
 8002dd8:	686c      	ldr	r4, [r5, #4]
 8002dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	0715      	lsls	r5, r2, #28
 8002de2:	d42c      	bmi.n	8002e3e <__swsetup_r+0x82>
 8002de4:	06d0      	lsls	r0, r2, #27
 8002de6:	d411      	bmi.n	8002e0c <__swsetup_r+0x50>
 8002de8:	2209      	movs	r2, #9
 8002dea:	6032      	str	r2, [r6, #0]
 8002dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002df0:	81a3      	strh	r3, [r4, #12]
 8002df2:	f04f 30ff 	mov.w	r0, #4294967295
 8002df6:	e03e      	b.n	8002e76 <__swsetup_r+0xba>
 8002df8:	4b25      	ldr	r3, [pc, #148]	; (8002e90 <__swsetup_r+0xd4>)
 8002dfa:	429c      	cmp	r4, r3
 8002dfc:	d101      	bne.n	8002e02 <__swsetup_r+0x46>
 8002dfe:	68ac      	ldr	r4, [r5, #8]
 8002e00:	e7eb      	b.n	8002dda <__swsetup_r+0x1e>
 8002e02:	4b24      	ldr	r3, [pc, #144]	; (8002e94 <__swsetup_r+0xd8>)
 8002e04:	429c      	cmp	r4, r3
 8002e06:	bf08      	it	eq
 8002e08:	68ec      	ldreq	r4, [r5, #12]
 8002e0a:	e7e6      	b.n	8002dda <__swsetup_r+0x1e>
 8002e0c:	0751      	lsls	r1, r2, #29
 8002e0e:	d512      	bpl.n	8002e36 <__swsetup_r+0x7a>
 8002e10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e12:	b141      	cbz	r1, 8002e26 <__swsetup_r+0x6a>
 8002e14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e18:	4299      	cmp	r1, r3
 8002e1a:	d002      	beq.n	8002e22 <__swsetup_r+0x66>
 8002e1c:	4630      	mov	r0, r6
 8002e1e:	f000 fa19 	bl	8003254 <_free_r>
 8002e22:	2300      	movs	r3, #0
 8002e24:	6363      	str	r3, [r4, #52]	; 0x34
 8002e26:	89a3      	ldrh	r3, [r4, #12]
 8002e28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002e2c:	81a3      	strh	r3, [r4, #12]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6063      	str	r3, [r4, #4]
 8002e32:	6923      	ldr	r3, [r4, #16]
 8002e34:	6023      	str	r3, [r4, #0]
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	81a3      	strh	r3, [r4, #12]
 8002e3e:	6923      	ldr	r3, [r4, #16]
 8002e40:	b94b      	cbnz	r3, 8002e56 <__swsetup_r+0x9a>
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4c:	d003      	beq.n	8002e56 <__swsetup_r+0x9a>
 8002e4e:	4621      	mov	r1, r4
 8002e50:	4630      	mov	r0, r6
 8002e52:	f000 f9bf 	bl	80031d4 <__smakebuf_r>
 8002e56:	89a2      	ldrh	r2, [r4, #12]
 8002e58:	f012 0301 	ands.w	r3, r2, #1
 8002e5c:	d00c      	beq.n	8002e78 <__swsetup_r+0xbc>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60a3      	str	r3, [r4, #8]
 8002e62:	6963      	ldr	r3, [r4, #20]
 8002e64:	425b      	negs	r3, r3
 8002e66:	61a3      	str	r3, [r4, #24]
 8002e68:	6923      	ldr	r3, [r4, #16]
 8002e6a:	b953      	cbnz	r3, 8002e82 <__swsetup_r+0xc6>
 8002e6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e70:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002e74:	d1ba      	bne.n	8002dec <__swsetup_r+0x30>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	0792      	lsls	r2, r2, #30
 8002e7a:	bf58      	it	pl
 8002e7c:	6963      	ldrpl	r3, [r4, #20]
 8002e7e:	60a3      	str	r3, [r4, #8]
 8002e80:	e7f2      	b.n	8002e68 <__swsetup_r+0xac>
 8002e82:	2000      	movs	r0, #0
 8002e84:	e7f7      	b.n	8002e76 <__swsetup_r+0xba>
 8002e86:	bf00      	nop
 8002e88:	2000000c 	.word	0x2000000c
 8002e8c:	08003578 	.word	0x08003578
 8002e90:	08003598 	.word	0x08003598
 8002e94:	08003558 	.word	0x08003558

08002e98 <__sflush_r>:
 8002e98:	898a      	ldrh	r2, [r1, #12]
 8002e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e9e:	4605      	mov	r5, r0
 8002ea0:	0710      	lsls	r0, r2, #28
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	d458      	bmi.n	8002f58 <__sflush_r+0xc0>
 8002ea6:	684b      	ldr	r3, [r1, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	dc05      	bgt.n	8002eb8 <__sflush_r+0x20>
 8002eac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	dc02      	bgt.n	8002eb8 <__sflush_r+0x20>
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002eba:	2e00      	cmp	r6, #0
 8002ebc:	d0f9      	beq.n	8002eb2 <__sflush_r+0x1a>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ec4:	682f      	ldr	r7, [r5, #0]
 8002ec6:	6a21      	ldr	r1, [r4, #32]
 8002ec8:	602b      	str	r3, [r5, #0]
 8002eca:	d032      	beq.n	8002f32 <__sflush_r+0x9a>
 8002ecc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ece:	89a3      	ldrh	r3, [r4, #12]
 8002ed0:	075a      	lsls	r2, r3, #29
 8002ed2:	d505      	bpl.n	8002ee0 <__sflush_r+0x48>
 8002ed4:	6863      	ldr	r3, [r4, #4]
 8002ed6:	1ac0      	subs	r0, r0, r3
 8002ed8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002eda:	b10b      	cbz	r3, 8002ee0 <__sflush_r+0x48>
 8002edc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ede:	1ac0      	subs	r0, r0, r3
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ee6:	6a21      	ldr	r1, [r4, #32]
 8002ee8:	4628      	mov	r0, r5
 8002eea:	47b0      	blx	r6
 8002eec:	1c43      	adds	r3, r0, #1
 8002eee:	89a3      	ldrh	r3, [r4, #12]
 8002ef0:	d106      	bne.n	8002f00 <__sflush_r+0x68>
 8002ef2:	6829      	ldr	r1, [r5, #0]
 8002ef4:	291d      	cmp	r1, #29
 8002ef6:	d848      	bhi.n	8002f8a <__sflush_r+0xf2>
 8002ef8:	4a29      	ldr	r2, [pc, #164]	; (8002fa0 <__sflush_r+0x108>)
 8002efa:	40ca      	lsrs	r2, r1
 8002efc:	07d6      	lsls	r6, r2, #31
 8002efe:	d544      	bpl.n	8002f8a <__sflush_r+0xf2>
 8002f00:	2200      	movs	r2, #0
 8002f02:	6062      	str	r2, [r4, #4]
 8002f04:	04d9      	lsls	r1, r3, #19
 8002f06:	6922      	ldr	r2, [r4, #16]
 8002f08:	6022      	str	r2, [r4, #0]
 8002f0a:	d504      	bpl.n	8002f16 <__sflush_r+0x7e>
 8002f0c:	1c42      	adds	r2, r0, #1
 8002f0e:	d101      	bne.n	8002f14 <__sflush_r+0x7c>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	b903      	cbnz	r3, 8002f16 <__sflush_r+0x7e>
 8002f14:	6560      	str	r0, [r4, #84]	; 0x54
 8002f16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f18:	602f      	str	r7, [r5, #0]
 8002f1a:	2900      	cmp	r1, #0
 8002f1c:	d0c9      	beq.n	8002eb2 <__sflush_r+0x1a>
 8002f1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f22:	4299      	cmp	r1, r3
 8002f24:	d002      	beq.n	8002f2c <__sflush_r+0x94>
 8002f26:	4628      	mov	r0, r5
 8002f28:	f000 f994 	bl	8003254 <_free_r>
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	6360      	str	r0, [r4, #52]	; 0x34
 8002f30:	e7c0      	b.n	8002eb4 <__sflush_r+0x1c>
 8002f32:	2301      	movs	r3, #1
 8002f34:	4628      	mov	r0, r5
 8002f36:	47b0      	blx	r6
 8002f38:	1c41      	adds	r1, r0, #1
 8002f3a:	d1c8      	bne.n	8002ece <__sflush_r+0x36>
 8002f3c:	682b      	ldr	r3, [r5, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0c5      	beq.n	8002ece <__sflush_r+0x36>
 8002f42:	2b1d      	cmp	r3, #29
 8002f44:	d001      	beq.n	8002f4a <__sflush_r+0xb2>
 8002f46:	2b16      	cmp	r3, #22
 8002f48:	d101      	bne.n	8002f4e <__sflush_r+0xb6>
 8002f4a:	602f      	str	r7, [r5, #0]
 8002f4c:	e7b1      	b.n	8002eb2 <__sflush_r+0x1a>
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f54:	81a3      	strh	r3, [r4, #12]
 8002f56:	e7ad      	b.n	8002eb4 <__sflush_r+0x1c>
 8002f58:	690f      	ldr	r7, [r1, #16]
 8002f5a:	2f00      	cmp	r7, #0
 8002f5c:	d0a9      	beq.n	8002eb2 <__sflush_r+0x1a>
 8002f5e:	0793      	lsls	r3, r2, #30
 8002f60:	680e      	ldr	r6, [r1, #0]
 8002f62:	bf08      	it	eq
 8002f64:	694b      	ldreq	r3, [r1, #20]
 8002f66:	600f      	str	r7, [r1, #0]
 8002f68:	bf18      	it	ne
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	eba6 0807 	sub.w	r8, r6, r7
 8002f70:	608b      	str	r3, [r1, #8]
 8002f72:	f1b8 0f00 	cmp.w	r8, #0
 8002f76:	dd9c      	ble.n	8002eb2 <__sflush_r+0x1a>
 8002f78:	4643      	mov	r3, r8
 8002f7a:	463a      	mov	r2, r7
 8002f7c:	6a21      	ldr	r1, [r4, #32]
 8002f7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002f80:	4628      	mov	r0, r5
 8002f82:	47b0      	blx	r6
 8002f84:	2800      	cmp	r0, #0
 8002f86:	dc06      	bgt.n	8002f96 <__sflush_r+0xfe>
 8002f88:	89a3      	ldrh	r3, [r4, #12]
 8002f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f8e:	81a3      	strh	r3, [r4, #12]
 8002f90:	f04f 30ff 	mov.w	r0, #4294967295
 8002f94:	e78e      	b.n	8002eb4 <__sflush_r+0x1c>
 8002f96:	4407      	add	r7, r0
 8002f98:	eba8 0800 	sub.w	r8, r8, r0
 8002f9c:	e7e9      	b.n	8002f72 <__sflush_r+0xda>
 8002f9e:	bf00      	nop
 8002fa0:	20400001 	.word	0x20400001

08002fa4 <_fflush_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	690b      	ldr	r3, [r1, #16]
 8002fa8:	4605      	mov	r5, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	b1db      	cbz	r3, 8002fe6 <_fflush_r+0x42>
 8002fae:	b118      	cbz	r0, 8002fb8 <_fflush_r+0x14>
 8002fb0:	6983      	ldr	r3, [r0, #24]
 8002fb2:	b90b      	cbnz	r3, 8002fb8 <_fflush_r+0x14>
 8002fb4:	f000 f860 	bl	8003078 <__sinit>
 8002fb8:	4b0c      	ldr	r3, [pc, #48]	; (8002fec <_fflush_r+0x48>)
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d109      	bne.n	8002fd2 <_fflush_r+0x2e>
 8002fbe:	686c      	ldr	r4, [r5, #4]
 8002fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc4:	b17b      	cbz	r3, 8002fe6 <_fflush_r+0x42>
 8002fc6:	4621      	mov	r1, r4
 8002fc8:	4628      	mov	r0, r5
 8002fca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fce:	f7ff bf63 	b.w	8002e98 <__sflush_r>
 8002fd2:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <_fflush_r+0x4c>)
 8002fd4:	429c      	cmp	r4, r3
 8002fd6:	d101      	bne.n	8002fdc <_fflush_r+0x38>
 8002fd8:	68ac      	ldr	r4, [r5, #8]
 8002fda:	e7f1      	b.n	8002fc0 <_fflush_r+0x1c>
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <_fflush_r+0x50>)
 8002fde:	429c      	cmp	r4, r3
 8002fe0:	bf08      	it	eq
 8002fe2:	68ec      	ldreq	r4, [r5, #12]
 8002fe4:	e7ec      	b.n	8002fc0 <_fflush_r+0x1c>
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	bd38      	pop	{r3, r4, r5, pc}
 8002fea:	bf00      	nop
 8002fec:	08003578 	.word	0x08003578
 8002ff0:	08003598 	.word	0x08003598
 8002ff4:	08003558 	.word	0x08003558

08002ff8 <std>:
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	b510      	push	{r4, lr}
 8002ffc:	4604      	mov	r4, r0
 8002ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8003002:	6083      	str	r3, [r0, #8]
 8003004:	8181      	strh	r1, [r0, #12]
 8003006:	6643      	str	r3, [r0, #100]	; 0x64
 8003008:	81c2      	strh	r2, [r0, #14]
 800300a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800300e:	6183      	str	r3, [r0, #24]
 8003010:	4619      	mov	r1, r3
 8003012:	2208      	movs	r2, #8
 8003014:	305c      	adds	r0, #92	; 0x5c
 8003016:	f7ff fe13 	bl	8002c40 <memset>
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <std+0x38>)
 800301c:	6263      	str	r3, [r4, #36]	; 0x24
 800301e:	4b05      	ldr	r3, [pc, #20]	; (8003034 <std+0x3c>)
 8003020:	62a3      	str	r3, [r4, #40]	; 0x28
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <std+0x40>)
 8003024:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <std+0x44>)
 8003028:	6224      	str	r4, [r4, #32]
 800302a:	6323      	str	r3, [r4, #48]	; 0x30
 800302c:	bd10      	pop	{r4, pc}
 800302e:	bf00      	nop
 8003030:	080033c5 	.word	0x080033c5
 8003034:	080033e7 	.word	0x080033e7
 8003038:	0800341f 	.word	0x0800341f
 800303c:	08003443 	.word	0x08003443

08003040 <_cleanup_r>:
 8003040:	4901      	ldr	r1, [pc, #4]	; (8003048 <_cleanup_r+0x8>)
 8003042:	f000 b885 	b.w	8003150 <_fwalk_reent>
 8003046:	bf00      	nop
 8003048:	08002fa5 	.word	0x08002fa5

0800304c <__sfmoreglue>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	1e4a      	subs	r2, r1, #1
 8003050:	2568      	movs	r5, #104	; 0x68
 8003052:	4355      	muls	r5, r2
 8003054:	460e      	mov	r6, r1
 8003056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800305a:	f000 f949 	bl	80032f0 <_malloc_r>
 800305e:	4604      	mov	r4, r0
 8003060:	b140      	cbz	r0, 8003074 <__sfmoreglue+0x28>
 8003062:	2100      	movs	r1, #0
 8003064:	e9c0 1600 	strd	r1, r6, [r0]
 8003068:	300c      	adds	r0, #12
 800306a:	60a0      	str	r0, [r4, #8]
 800306c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003070:	f7ff fde6 	bl	8002c40 <memset>
 8003074:	4620      	mov	r0, r4
 8003076:	bd70      	pop	{r4, r5, r6, pc}

08003078 <__sinit>:
 8003078:	6983      	ldr	r3, [r0, #24]
 800307a:	b510      	push	{r4, lr}
 800307c:	4604      	mov	r4, r0
 800307e:	bb33      	cbnz	r3, 80030ce <__sinit+0x56>
 8003080:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003084:	6503      	str	r3, [r0, #80]	; 0x50
 8003086:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <__sinit+0x58>)
 8003088:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <__sinit+0x5c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6282      	str	r2, [r0, #40]	; 0x28
 800308e:	4298      	cmp	r0, r3
 8003090:	bf04      	itt	eq
 8003092:	2301      	moveq	r3, #1
 8003094:	6183      	streq	r3, [r0, #24]
 8003096:	f000 f81f 	bl	80030d8 <__sfp>
 800309a:	6060      	str	r0, [r4, #4]
 800309c:	4620      	mov	r0, r4
 800309e:	f000 f81b 	bl	80030d8 <__sfp>
 80030a2:	60a0      	str	r0, [r4, #8]
 80030a4:	4620      	mov	r0, r4
 80030a6:	f000 f817 	bl	80030d8 <__sfp>
 80030aa:	2200      	movs	r2, #0
 80030ac:	60e0      	str	r0, [r4, #12]
 80030ae:	2104      	movs	r1, #4
 80030b0:	6860      	ldr	r0, [r4, #4]
 80030b2:	f7ff ffa1 	bl	8002ff8 <std>
 80030b6:	2201      	movs	r2, #1
 80030b8:	2109      	movs	r1, #9
 80030ba:	68a0      	ldr	r0, [r4, #8]
 80030bc:	f7ff ff9c 	bl	8002ff8 <std>
 80030c0:	2202      	movs	r2, #2
 80030c2:	2112      	movs	r1, #18
 80030c4:	68e0      	ldr	r0, [r4, #12]
 80030c6:	f7ff ff97 	bl	8002ff8 <std>
 80030ca:	2301      	movs	r3, #1
 80030cc:	61a3      	str	r3, [r4, #24]
 80030ce:	bd10      	pop	{r4, pc}
 80030d0:	08003554 	.word	0x08003554
 80030d4:	08003041 	.word	0x08003041

080030d8 <__sfp>:
 80030d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030da:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <__sfp+0x70>)
 80030dc:	681e      	ldr	r6, [r3, #0]
 80030de:	69b3      	ldr	r3, [r6, #24]
 80030e0:	4607      	mov	r7, r0
 80030e2:	b913      	cbnz	r3, 80030ea <__sfp+0x12>
 80030e4:	4630      	mov	r0, r6
 80030e6:	f7ff ffc7 	bl	8003078 <__sinit>
 80030ea:	3648      	adds	r6, #72	; 0x48
 80030ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	d503      	bpl.n	80030fc <__sfp+0x24>
 80030f4:	6833      	ldr	r3, [r6, #0]
 80030f6:	b133      	cbz	r3, 8003106 <__sfp+0x2e>
 80030f8:	6836      	ldr	r6, [r6, #0]
 80030fa:	e7f7      	b.n	80030ec <__sfp+0x14>
 80030fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003100:	b16d      	cbz	r5, 800311e <__sfp+0x46>
 8003102:	3468      	adds	r4, #104	; 0x68
 8003104:	e7f4      	b.n	80030f0 <__sfp+0x18>
 8003106:	2104      	movs	r1, #4
 8003108:	4638      	mov	r0, r7
 800310a:	f7ff ff9f 	bl	800304c <__sfmoreglue>
 800310e:	6030      	str	r0, [r6, #0]
 8003110:	2800      	cmp	r0, #0
 8003112:	d1f1      	bne.n	80030f8 <__sfp+0x20>
 8003114:	230c      	movs	r3, #12
 8003116:	603b      	str	r3, [r7, #0]
 8003118:	4604      	mov	r4, r0
 800311a:	4620      	mov	r0, r4
 800311c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800311e:	4b0b      	ldr	r3, [pc, #44]	; (800314c <__sfp+0x74>)
 8003120:	6665      	str	r5, [r4, #100]	; 0x64
 8003122:	e9c4 5500 	strd	r5, r5, [r4]
 8003126:	60a5      	str	r5, [r4, #8]
 8003128:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800312c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003130:	2208      	movs	r2, #8
 8003132:	4629      	mov	r1, r5
 8003134:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003138:	f7ff fd82 	bl	8002c40 <memset>
 800313c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003140:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003144:	e7e9      	b.n	800311a <__sfp+0x42>
 8003146:	bf00      	nop
 8003148:	08003554 	.word	0x08003554
 800314c:	ffff0001 	.word	0xffff0001

08003150 <_fwalk_reent>:
 8003150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003154:	4680      	mov	r8, r0
 8003156:	4689      	mov	r9, r1
 8003158:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800315c:	2600      	movs	r6, #0
 800315e:	b914      	cbnz	r4, 8003166 <_fwalk_reent+0x16>
 8003160:	4630      	mov	r0, r6
 8003162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003166:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800316a:	3f01      	subs	r7, #1
 800316c:	d501      	bpl.n	8003172 <_fwalk_reent+0x22>
 800316e:	6824      	ldr	r4, [r4, #0]
 8003170:	e7f5      	b.n	800315e <_fwalk_reent+0xe>
 8003172:	89ab      	ldrh	r3, [r5, #12]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d907      	bls.n	8003188 <_fwalk_reent+0x38>
 8003178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800317c:	3301      	adds	r3, #1
 800317e:	d003      	beq.n	8003188 <_fwalk_reent+0x38>
 8003180:	4629      	mov	r1, r5
 8003182:	4640      	mov	r0, r8
 8003184:	47c8      	blx	r9
 8003186:	4306      	orrs	r6, r0
 8003188:	3568      	adds	r5, #104	; 0x68
 800318a:	e7ee      	b.n	800316a <_fwalk_reent+0x1a>

0800318c <__swhatbuf_r>:
 800318c:	b570      	push	{r4, r5, r6, lr}
 800318e:	460e      	mov	r6, r1
 8003190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003194:	2900      	cmp	r1, #0
 8003196:	b096      	sub	sp, #88	; 0x58
 8003198:	4614      	mov	r4, r2
 800319a:	461d      	mov	r5, r3
 800319c:	da07      	bge.n	80031ae <__swhatbuf_r+0x22>
 800319e:	2300      	movs	r3, #0
 80031a0:	602b      	str	r3, [r5, #0]
 80031a2:	89b3      	ldrh	r3, [r6, #12]
 80031a4:	061a      	lsls	r2, r3, #24
 80031a6:	d410      	bmi.n	80031ca <__swhatbuf_r+0x3e>
 80031a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031ac:	e00e      	b.n	80031cc <__swhatbuf_r+0x40>
 80031ae:	466a      	mov	r2, sp
 80031b0:	f000 f96e 	bl	8003490 <_fstat_r>
 80031b4:	2800      	cmp	r0, #0
 80031b6:	dbf2      	blt.n	800319e <__swhatbuf_r+0x12>
 80031b8:	9a01      	ldr	r2, [sp, #4]
 80031ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80031be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80031c2:	425a      	negs	r2, r3
 80031c4:	415a      	adcs	r2, r3
 80031c6:	602a      	str	r2, [r5, #0]
 80031c8:	e7ee      	b.n	80031a8 <__swhatbuf_r+0x1c>
 80031ca:	2340      	movs	r3, #64	; 0x40
 80031cc:	2000      	movs	r0, #0
 80031ce:	6023      	str	r3, [r4, #0]
 80031d0:	b016      	add	sp, #88	; 0x58
 80031d2:	bd70      	pop	{r4, r5, r6, pc}

080031d4 <__smakebuf_r>:
 80031d4:	898b      	ldrh	r3, [r1, #12]
 80031d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80031d8:	079d      	lsls	r5, r3, #30
 80031da:	4606      	mov	r6, r0
 80031dc:	460c      	mov	r4, r1
 80031de:	d507      	bpl.n	80031f0 <__smakebuf_r+0x1c>
 80031e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	6123      	str	r3, [r4, #16]
 80031e8:	2301      	movs	r3, #1
 80031ea:	6163      	str	r3, [r4, #20]
 80031ec:	b002      	add	sp, #8
 80031ee:	bd70      	pop	{r4, r5, r6, pc}
 80031f0:	ab01      	add	r3, sp, #4
 80031f2:	466a      	mov	r2, sp
 80031f4:	f7ff ffca 	bl	800318c <__swhatbuf_r>
 80031f8:	9900      	ldr	r1, [sp, #0]
 80031fa:	4605      	mov	r5, r0
 80031fc:	4630      	mov	r0, r6
 80031fe:	f000 f877 	bl	80032f0 <_malloc_r>
 8003202:	b948      	cbnz	r0, 8003218 <__smakebuf_r+0x44>
 8003204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003208:	059a      	lsls	r2, r3, #22
 800320a:	d4ef      	bmi.n	80031ec <__smakebuf_r+0x18>
 800320c:	f023 0303 	bic.w	r3, r3, #3
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	81a3      	strh	r3, [r4, #12]
 8003216:	e7e3      	b.n	80031e0 <__smakebuf_r+0xc>
 8003218:	4b0d      	ldr	r3, [pc, #52]	; (8003250 <__smakebuf_r+0x7c>)
 800321a:	62b3      	str	r3, [r6, #40]	; 0x28
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	6020      	str	r0, [r4, #0]
 8003220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003224:	81a3      	strh	r3, [r4, #12]
 8003226:	9b00      	ldr	r3, [sp, #0]
 8003228:	6163      	str	r3, [r4, #20]
 800322a:	9b01      	ldr	r3, [sp, #4]
 800322c:	6120      	str	r0, [r4, #16]
 800322e:	b15b      	cbz	r3, 8003248 <__smakebuf_r+0x74>
 8003230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003234:	4630      	mov	r0, r6
 8003236:	f000 f93d 	bl	80034b4 <_isatty_r>
 800323a:	b128      	cbz	r0, 8003248 <__smakebuf_r+0x74>
 800323c:	89a3      	ldrh	r3, [r4, #12]
 800323e:	f023 0303 	bic.w	r3, r3, #3
 8003242:	f043 0301 	orr.w	r3, r3, #1
 8003246:	81a3      	strh	r3, [r4, #12]
 8003248:	89a3      	ldrh	r3, [r4, #12]
 800324a:	431d      	orrs	r5, r3
 800324c:	81a5      	strh	r5, [r4, #12]
 800324e:	e7cd      	b.n	80031ec <__smakebuf_r+0x18>
 8003250:	08003041 	.word	0x08003041

08003254 <_free_r>:
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4605      	mov	r5, r0
 8003258:	2900      	cmp	r1, #0
 800325a:	d045      	beq.n	80032e8 <_free_r+0x94>
 800325c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003260:	1f0c      	subs	r4, r1, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	bfb8      	it	lt
 8003266:	18e4      	addlt	r4, r4, r3
 8003268:	f000 f946 	bl	80034f8 <__malloc_lock>
 800326c:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <_free_r+0x98>)
 800326e:	6813      	ldr	r3, [r2, #0]
 8003270:	4610      	mov	r0, r2
 8003272:	b933      	cbnz	r3, 8003282 <_free_r+0x2e>
 8003274:	6063      	str	r3, [r4, #4]
 8003276:	6014      	str	r4, [r2, #0]
 8003278:	4628      	mov	r0, r5
 800327a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800327e:	f000 b93c 	b.w	80034fa <__malloc_unlock>
 8003282:	42a3      	cmp	r3, r4
 8003284:	d90c      	bls.n	80032a0 <_free_r+0x4c>
 8003286:	6821      	ldr	r1, [r4, #0]
 8003288:	1862      	adds	r2, r4, r1
 800328a:	4293      	cmp	r3, r2
 800328c:	bf04      	itt	eq
 800328e:	681a      	ldreq	r2, [r3, #0]
 8003290:	685b      	ldreq	r3, [r3, #4]
 8003292:	6063      	str	r3, [r4, #4]
 8003294:	bf04      	itt	eq
 8003296:	1852      	addeq	r2, r2, r1
 8003298:	6022      	streq	r2, [r4, #0]
 800329a:	6004      	str	r4, [r0, #0]
 800329c:	e7ec      	b.n	8003278 <_free_r+0x24>
 800329e:	4613      	mov	r3, r2
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	b10a      	cbz	r2, 80032a8 <_free_r+0x54>
 80032a4:	42a2      	cmp	r2, r4
 80032a6:	d9fa      	bls.n	800329e <_free_r+0x4a>
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	1858      	adds	r0, r3, r1
 80032ac:	42a0      	cmp	r0, r4
 80032ae:	d10b      	bne.n	80032c8 <_free_r+0x74>
 80032b0:	6820      	ldr	r0, [r4, #0]
 80032b2:	4401      	add	r1, r0
 80032b4:	1858      	adds	r0, r3, r1
 80032b6:	4282      	cmp	r2, r0
 80032b8:	6019      	str	r1, [r3, #0]
 80032ba:	d1dd      	bne.n	8003278 <_free_r+0x24>
 80032bc:	6810      	ldr	r0, [r2, #0]
 80032be:	6852      	ldr	r2, [r2, #4]
 80032c0:	605a      	str	r2, [r3, #4]
 80032c2:	4401      	add	r1, r0
 80032c4:	6019      	str	r1, [r3, #0]
 80032c6:	e7d7      	b.n	8003278 <_free_r+0x24>
 80032c8:	d902      	bls.n	80032d0 <_free_r+0x7c>
 80032ca:	230c      	movs	r3, #12
 80032cc:	602b      	str	r3, [r5, #0]
 80032ce:	e7d3      	b.n	8003278 <_free_r+0x24>
 80032d0:	6820      	ldr	r0, [r4, #0]
 80032d2:	1821      	adds	r1, r4, r0
 80032d4:	428a      	cmp	r2, r1
 80032d6:	bf04      	itt	eq
 80032d8:	6811      	ldreq	r1, [r2, #0]
 80032da:	6852      	ldreq	r2, [r2, #4]
 80032dc:	6062      	str	r2, [r4, #4]
 80032de:	bf04      	itt	eq
 80032e0:	1809      	addeq	r1, r1, r0
 80032e2:	6021      	streq	r1, [r4, #0]
 80032e4:	605c      	str	r4, [r3, #4]
 80032e6:	e7c7      	b.n	8003278 <_free_r+0x24>
 80032e8:	bd38      	pop	{r3, r4, r5, pc}
 80032ea:	bf00      	nop
 80032ec:	20000090 	.word	0x20000090

080032f0 <_malloc_r>:
 80032f0:	b570      	push	{r4, r5, r6, lr}
 80032f2:	1ccd      	adds	r5, r1, #3
 80032f4:	f025 0503 	bic.w	r5, r5, #3
 80032f8:	3508      	adds	r5, #8
 80032fa:	2d0c      	cmp	r5, #12
 80032fc:	bf38      	it	cc
 80032fe:	250c      	movcc	r5, #12
 8003300:	2d00      	cmp	r5, #0
 8003302:	4606      	mov	r6, r0
 8003304:	db01      	blt.n	800330a <_malloc_r+0x1a>
 8003306:	42a9      	cmp	r1, r5
 8003308:	d903      	bls.n	8003312 <_malloc_r+0x22>
 800330a:	230c      	movs	r3, #12
 800330c:	6033      	str	r3, [r6, #0]
 800330e:	2000      	movs	r0, #0
 8003310:	bd70      	pop	{r4, r5, r6, pc}
 8003312:	f000 f8f1 	bl	80034f8 <__malloc_lock>
 8003316:	4a21      	ldr	r2, [pc, #132]	; (800339c <_malloc_r+0xac>)
 8003318:	6814      	ldr	r4, [r2, #0]
 800331a:	4621      	mov	r1, r4
 800331c:	b991      	cbnz	r1, 8003344 <_malloc_r+0x54>
 800331e:	4c20      	ldr	r4, [pc, #128]	; (80033a0 <_malloc_r+0xb0>)
 8003320:	6823      	ldr	r3, [r4, #0]
 8003322:	b91b      	cbnz	r3, 800332c <_malloc_r+0x3c>
 8003324:	4630      	mov	r0, r6
 8003326:	f000 f83d 	bl	80033a4 <_sbrk_r>
 800332a:	6020      	str	r0, [r4, #0]
 800332c:	4629      	mov	r1, r5
 800332e:	4630      	mov	r0, r6
 8003330:	f000 f838 	bl	80033a4 <_sbrk_r>
 8003334:	1c43      	adds	r3, r0, #1
 8003336:	d124      	bne.n	8003382 <_malloc_r+0x92>
 8003338:	230c      	movs	r3, #12
 800333a:	6033      	str	r3, [r6, #0]
 800333c:	4630      	mov	r0, r6
 800333e:	f000 f8dc 	bl	80034fa <__malloc_unlock>
 8003342:	e7e4      	b.n	800330e <_malloc_r+0x1e>
 8003344:	680b      	ldr	r3, [r1, #0]
 8003346:	1b5b      	subs	r3, r3, r5
 8003348:	d418      	bmi.n	800337c <_malloc_r+0x8c>
 800334a:	2b0b      	cmp	r3, #11
 800334c:	d90f      	bls.n	800336e <_malloc_r+0x7e>
 800334e:	600b      	str	r3, [r1, #0]
 8003350:	50cd      	str	r5, [r1, r3]
 8003352:	18cc      	adds	r4, r1, r3
 8003354:	4630      	mov	r0, r6
 8003356:	f000 f8d0 	bl	80034fa <__malloc_unlock>
 800335a:	f104 000b 	add.w	r0, r4, #11
 800335e:	1d23      	adds	r3, r4, #4
 8003360:	f020 0007 	bic.w	r0, r0, #7
 8003364:	1ac3      	subs	r3, r0, r3
 8003366:	d0d3      	beq.n	8003310 <_malloc_r+0x20>
 8003368:	425a      	negs	r2, r3
 800336a:	50e2      	str	r2, [r4, r3]
 800336c:	e7d0      	b.n	8003310 <_malloc_r+0x20>
 800336e:	428c      	cmp	r4, r1
 8003370:	684b      	ldr	r3, [r1, #4]
 8003372:	bf16      	itet	ne
 8003374:	6063      	strne	r3, [r4, #4]
 8003376:	6013      	streq	r3, [r2, #0]
 8003378:	460c      	movne	r4, r1
 800337a:	e7eb      	b.n	8003354 <_malloc_r+0x64>
 800337c:	460c      	mov	r4, r1
 800337e:	6849      	ldr	r1, [r1, #4]
 8003380:	e7cc      	b.n	800331c <_malloc_r+0x2c>
 8003382:	1cc4      	adds	r4, r0, #3
 8003384:	f024 0403 	bic.w	r4, r4, #3
 8003388:	42a0      	cmp	r0, r4
 800338a:	d005      	beq.n	8003398 <_malloc_r+0xa8>
 800338c:	1a21      	subs	r1, r4, r0
 800338e:	4630      	mov	r0, r6
 8003390:	f000 f808 	bl	80033a4 <_sbrk_r>
 8003394:	3001      	adds	r0, #1
 8003396:	d0cf      	beq.n	8003338 <_malloc_r+0x48>
 8003398:	6025      	str	r5, [r4, #0]
 800339a:	e7db      	b.n	8003354 <_malloc_r+0x64>
 800339c:	20000090 	.word	0x20000090
 80033a0:	20000094 	.word	0x20000094

080033a4 <_sbrk_r>:
 80033a4:	b538      	push	{r3, r4, r5, lr}
 80033a6:	4c06      	ldr	r4, [pc, #24]	; (80033c0 <_sbrk_r+0x1c>)
 80033a8:	2300      	movs	r3, #0
 80033aa:	4605      	mov	r5, r0
 80033ac:	4608      	mov	r0, r1
 80033ae:	6023      	str	r3, [r4, #0]
 80033b0:	f7fd fbfc 	bl	8000bac <_sbrk>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_sbrk_r+0x1a>
 80033b8:	6823      	ldr	r3, [r4, #0]
 80033ba:	b103      	cbz	r3, 80033be <_sbrk_r+0x1a>
 80033bc:	602b      	str	r3, [r5, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	200001b0 	.word	0x200001b0

080033c4 <__sread>:
 80033c4:	b510      	push	{r4, lr}
 80033c6:	460c      	mov	r4, r1
 80033c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033cc:	f000 f896 	bl	80034fc <_read_r>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	bfab      	itete	ge
 80033d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80033d6:	89a3      	ldrhlt	r3, [r4, #12]
 80033d8:	181b      	addge	r3, r3, r0
 80033da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80033de:	bfac      	ite	ge
 80033e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80033e2:	81a3      	strhlt	r3, [r4, #12]
 80033e4:	bd10      	pop	{r4, pc}

080033e6 <__swrite>:
 80033e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033ea:	461f      	mov	r7, r3
 80033ec:	898b      	ldrh	r3, [r1, #12]
 80033ee:	05db      	lsls	r3, r3, #23
 80033f0:	4605      	mov	r5, r0
 80033f2:	460c      	mov	r4, r1
 80033f4:	4616      	mov	r6, r2
 80033f6:	d505      	bpl.n	8003404 <__swrite+0x1e>
 80033f8:	2302      	movs	r3, #2
 80033fa:	2200      	movs	r2, #0
 80033fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003400:	f000 f868 	bl	80034d4 <_lseek_r>
 8003404:	89a3      	ldrh	r3, [r4, #12]
 8003406:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800340a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800340e:	81a3      	strh	r3, [r4, #12]
 8003410:	4632      	mov	r2, r6
 8003412:	463b      	mov	r3, r7
 8003414:	4628      	mov	r0, r5
 8003416:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800341a:	f000 b817 	b.w	800344c <_write_r>

0800341e <__sseek>:
 800341e:	b510      	push	{r4, lr}
 8003420:	460c      	mov	r4, r1
 8003422:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003426:	f000 f855 	bl	80034d4 <_lseek_r>
 800342a:	1c43      	adds	r3, r0, #1
 800342c:	89a3      	ldrh	r3, [r4, #12]
 800342e:	bf15      	itete	ne
 8003430:	6560      	strne	r0, [r4, #84]	; 0x54
 8003432:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003436:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800343a:	81a3      	strheq	r3, [r4, #12]
 800343c:	bf18      	it	ne
 800343e:	81a3      	strhne	r3, [r4, #12]
 8003440:	bd10      	pop	{r4, pc}

08003442 <__sclose>:
 8003442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003446:	f000 b813 	b.w	8003470 <_close_r>
	...

0800344c <_write_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4c07      	ldr	r4, [pc, #28]	; (800346c <_write_r+0x20>)
 8003450:	4605      	mov	r5, r0
 8003452:	4608      	mov	r0, r1
 8003454:	4611      	mov	r1, r2
 8003456:	2200      	movs	r2, #0
 8003458:	6022      	str	r2, [r4, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	f7fd fb55 	bl	8000b0a <_write>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_write_r+0x1e>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	b103      	cbz	r3, 800346a <_write_r+0x1e>
 8003468:	602b      	str	r3, [r5, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	200001b0 	.word	0x200001b0

08003470 <_close_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4c06      	ldr	r4, [pc, #24]	; (800348c <_close_r+0x1c>)
 8003474:	2300      	movs	r3, #0
 8003476:	4605      	mov	r5, r0
 8003478:	4608      	mov	r0, r1
 800347a:	6023      	str	r3, [r4, #0]
 800347c:	f7fd fb61 	bl	8000b42 <_close>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_close_r+0x1a>
 8003484:	6823      	ldr	r3, [r4, #0]
 8003486:	b103      	cbz	r3, 800348a <_close_r+0x1a>
 8003488:	602b      	str	r3, [r5, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	200001b0 	.word	0x200001b0

08003490 <_fstat_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4c07      	ldr	r4, [pc, #28]	; (80034b0 <_fstat_r+0x20>)
 8003494:	2300      	movs	r3, #0
 8003496:	4605      	mov	r5, r0
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	6023      	str	r3, [r4, #0]
 800349e:	f7fd fb5c 	bl	8000b5a <_fstat>
 80034a2:	1c43      	adds	r3, r0, #1
 80034a4:	d102      	bne.n	80034ac <_fstat_r+0x1c>
 80034a6:	6823      	ldr	r3, [r4, #0]
 80034a8:	b103      	cbz	r3, 80034ac <_fstat_r+0x1c>
 80034aa:	602b      	str	r3, [r5, #0]
 80034ac:	bd38      	pop	{r3, r4, r5, pc}
 80034ae:	bf00      	nop
 80034b0:	200001b0 	.word	0x200001b0

080034b4 <_isatty_r>:
 80034b4:	b538      	push	{r3, r4, r5, lr}
 80034b6:	4c06      	ldr	r4, [pc, #24]	; (80034d0 <_isatty_r+0x1c>)
 80034b8:	2300      	movs	r3, #0
 80034ba:	4605      	mov	r5, r0
 80034bc:	4608      	mov	r0, r1
 80034be:	6023      	str	r3, [r4, #0]
 80034c0:	f7fd fb5b 	bl	8000b7a <_isatty>
 80034c4:	1c43      	adds	r3, r0, #1
 80034c6:	d102      	bne.n	80034ce <_isatty_r+0x1a>
 80034c8:	6823      	ldr	r3, [r4, #0]
 80034ca:	b103      	cbz	r3, 80034ce <_isatty_r+0x1a>
 80034cc:	602b      	str	r3, [r5, #0]
 80034ce:	bd38      	pop	{r3, r4, r5, pc}
 80034d0:	200001b0 	.word	0x200001b0

080034d4 <_lseek_r>:
 80034d4:	b538      	push	{r3, r4, r5, lr}
 80034d6:	4c07      	ldr	r4, [pc, #28]	; (80034f4 <_lseek_r+0x20>)
 80034d8:	4605      	mov	r5, r0
 80034da:	4608      	mov	r0, r1
 80034dc:	4611      	mov	r1, r2
 80034de:	2200      	movs	r2, #0
 80034e0:	6022      	str	r2, [r4, #0]
 80034e2:	461a      	mov	r2, r3
 80034e4:	f7fd fb54 	bl	8000b90 <_lseek>
 80034e8:	1c43      	adds	r3, r0, #1
 80034ea:	d102      	bne.n	80034f2 <_lseek_r+0x1e>
 80034ec:	6823      	ldr	r3, [r4, #0]
 80034ee:	b103      	cbz	r3, 80034f2 <_lseek_r+0x1e>
 80034f0:	602b      	str	r3, [r5, #0]
 80034f2:	bd38      	pop	{r3, r4, r5, pc}
 80034f4:	200001b0 	.word	0x200001b0

080034f8 <__malloc_lock>:
 80034f8:	4770      	bx	lr

080034fa <__malloc_unlock>:
 80034fa:	4770      	bx	lr

080034fc <_read_r>:
 80034fc:	b538      	push	{r3, r4, r5, lr}
 80034fe:	4c07      	ldr	r4, [pc, #28]	; (800351c <_read_r+0x20>)
 8003500:	4605      	mov	r5, r0
 8003502:	4608      	mov	r0, r1
 8003504:	4611      	mov	r1, r2
 8003506:	2200      	movs	r2, #0
 8003508:	6022      	str	r2, [r4, #0]
 800350a:	461a      	mov	r2, r3
 800350c:	f7fd fae0 	bl	8000ad0 <_read>
 8003510:	1c43      	adds	r3, r0, #1
 8003512:	d102      	bne.n	800351a <_read_r+0x1e>
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	b103      	cbz	r3, 800351a <_read_r+0x1e>
 8003518:	602b      	str	r3, [r5, #0]
 800351a:	bd38      	pop	{r3, r4, r5, pc}
 800351c:	200001b0 	.word	0x200001b0

08003520 <_init>:
 8003520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003522:	bf00      	nop
 8003524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003526:	bc08      	pop	{r3}
 8003528:	469e      	mov	lr, r3
 800352a:	4770      	bx	lr

0800352c <_fini>:
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352e:	bf00      	nop
 8003530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003532:	bc08      	pop	{r3}
 8003534:	469e      	mov	lr, r3
 8003536:	4770      	bx	lr
