
HYAsstSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006594  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08006738  08006738  00016738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ab8  08006ab8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006ab8  08006ab8  00016ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ac0  08006ac0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ac0  08006ac0  00016ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ac4  08006ac4  00016ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006ac8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  200001dc  08006ca4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  08006ca4  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c651  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e2c  00000000  00000000  0002c85d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002e690  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  0002f148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017042  00000000  00000000  0002fb30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000948c  00000000  00000000  00046b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089008  00000000  00000000  0004fffe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9006  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d4  00000000  00000000  000d9084  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800671c 	.word	0x0800671c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	0800671c 	.word	0x0800671c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <NMEA_Comma_Pos>:

#include <stdio.h>
#include <string.h>
#include "GPSdecode.h"

u8  NMEA_Comma_Pos (u8 *buf, u8 cx) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
	u8 *p = buf;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	60fb      	str	r3, [r7, #12]
	while (cx) {
 8000ec8:	e017      	b.n	8000efa <NMEA_Comma_Pos+0x42>
		if (*buf=='*' || *buf<' ' || *buf>'z') return 0xFF;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b2a      	cmp	r3, #42	; 0x2a
 8000ed0:	d007      	beq.n	8000ee2 <NMEA_Comma_Pos+0x2a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b1f      	cmp	r3, #31
 8000ed8:	d903      	bls.n	8000ee2 <NMEA_Comma_Pos+0x2a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b7a      	cmp	r3, #122	; 0x7a
 8000ee0:	d901      	bls.n	8000ee6 <NMEA_Comma_Pos+0x2e>
 8000ee2:	23ff      	movs	r3, #255	; 0xff
 8000ee4:	e010      	b.n	8000f08 <NMEA_Comma_Pos+0x50>
		if (*buf==',') {-- cx;} buf ++;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b2c      	cmp	r3, #44	; 0x2c
 8000eec:	d102      	bne.n	8000ef4 <NMEA_Comma_Pos+0x3c>
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	70fb      	strb	r3, [r7, #3]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
	while (cx) {
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e4      	bne.n	8000eca <NMEA_Comma_Pos+0x12>
	} return buf - p;
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b2db      	uxtb	r3, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <NMEA_Pow>:

u32 NMEA_Pow (u32 a, u8 n) {
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
	u32 ret = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
	while (n) {
 8000f24:	e011      	b.n	8000f4a <NMEA_Pow+0x36>
		if(n&1) ret *= a;
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <NMEA_Pow+0x26>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	60fb      	str	r3, [r7, #12]
		a *= a, n >>= 1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	085b      	lsrs	r3, r3, #1
 8000f48:	70fb      	strb	r3, [r7, #3]
	while (n) {
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1ea      	bne.n	8000f26 <NMEA_Pow+0x12>
	} return ret;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <NMEA_StrToNum>:

int NMEA_StrToNum (u8 *buf, u8*dx) {
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b088      	sub	sp, #32
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
	u8  *p = buf;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	61fb      	str	r3, [r7, #28]
	u32 ires = 0, fres = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
	u8  ilen = 0, flen = 0, flag = 0, i;
 8000f74:	2300      	movs	r3, #0
 8000f76:	74fb      	strb	r3, [r7, #19]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	74bb      	strb	r3, [r7, #18]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	747b      	strb	r3, [r7, #17]
	int ret;

	while (1) {
		if (*p=='-') {flag |= 0x02; p ++;}
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b2d      	cmp	r3, #45	; 0x2d
 8000f86:	d106      	bne.n	8000f96 <NMEA_StrToNum+0x38>
 8000f88:	7c7b      	ldrb	r3, [r7, #17]
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	747b      	strb	r3, [r7, #17]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	3301      	adds	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
		if (*p==',' || *p=='*') {break;}
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f9c:	d02c      	beq.n	8000ff8 <NMEA_StrToNum+0x9a>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8000fa4:	d028      	beq.n	8000ff8 <NMEA_StrToNum+0x9a>
		if (*p=='.') {flag |= 0x01; p ++;}
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b2e      	cmp	r3, #46	; 0x2e
 8000fac:	d107      	bne.n	8000fbe <NMEA_StrToNum+0x60>
 8000fae:	7c7b      	ldrb	r3, [r7, #17]
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	747b      	strb	r3, [r7, #17]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	e00c      	b.n	8000fd8 <NMEA_StrToNum+0x7a>
		else if (*p<'0' || *p>'9') {
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fc4:	d903      	bls.n	8000fce <NMEA_StrToNum+0x70>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b39      	cmp	r3, #57	; 0x39
 8000fcc:	d904      	bls.n	8000fd8 <NMEA_StrToNum+0x7a>
			ilen = 0; flen = 0; break;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	74fb      	strb	r3, [r7, #19]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	74bb      	strb	r3, [r7, #18]
 8000fd6:	e00f      	b.n	8000ff8 <NMEA_StrToNum+0x9a>
		} if (flag&0x01) {++ flen;}
 8000fd8:	7c7b      	ldrb	r3, [r7, #17]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <NMEA_StrToNum+0x8c>
 8000fe2:	7cbb      	ldrb	r3, [r7, #18]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	74bb      	strb	r3, [r7, #18]
 8000fe8:	e002      	b.n	8000ff0 <NMEA_StrToNum+0x92>
		else {++ ilen;} p ++;
 8000fea:	7cfb      	ldrb	r3, [r7, #19]
 8000fec:	3301      	adds	r3, #1
 8000fee:	74fb      	strb	r3, [r7, #19]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
		if (*p=='-') {flag |= 0x02; p ++;}
 8000ff6:	e7c3      	b.n	8000f80 <NMEA_StrToNum+0x22>
	} if (flag&0x02) {buf ++;}
 8000ff8:	7c7b      	ldrb	r3, [r7, #17]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <NMEA_StrToNum+0xaa>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	607b      	str	r3, [r7, #4]

	for (i=0; i<ilen; ++ i) {
 8001008:	2300      	movs	r3, #0
 800100a:	743b      	strb	r3, [r7, #16]
 800100c:	e019      	b.n	8001042 <NMEA_StrToNum+0xe4>
		ires += NMEA_Pow(10, ilen-i-1)*(buf[i]^'0');
 800100e:	7cfa      	ldrb	r2, [r7, #19]
 8001010:	7c3b      	ldrb	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3b01      	subs	r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4619      	mov	r1, r3
 800101c:	200a      	movs	r0, #10
 800101e:	f7ff ff79 	bl	8000f14 <NMEA_Pow>
 8001022:	4601      	mov	r1, r0
 8001024:	7c3b      	ldrb	r3, [r7, #16]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001030:	b2db      	uxtb	r3, r3
 8001032:	fb03 f301 	mul.w	r3, r3, r1
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4413      	add	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
	for (i=0; i<ilen; ++ i) {
 800103c:	7c3b      	ldrb	r3, [r7, #16]
 800103e:	3301      	adds	r3, #1
 8001040:	743b      	strb	r3, [r7, #16]
 8001042:	7c3a      	ldrb	r2, [r7, #16]
 8001044:	7cfb      	ldrb	r3, [r7, #19]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e1      	bcc.n	800100e <NMEA_StrToNum+0xb0>
	} if (flen>5) {flen = 5;} *dx = flen;
 800104a:	7cbb      	ldrb	r3, [r7, #18]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d901      	bls.n	8001054 <NMEA_StrToNum+0xf6>
 8001050:	2305      	movs	r3, #5
 8001052:	74bb      	strb	r3, [r7, #18]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	7cba      	ldrb	r2, [r7, #18]
 8001058:	701a      	strb	r2, [r3, #0]

	for (i=0; i<flen; ++ i) {
 800105a:	2300      	movs	r3, #0
 800105c:	743b      	strb	r3, [r7, #16]
 800105e:	e01c      	b.n	800109a <NMEA_StrToNum+0x13c>
		fres += NMEA_Pow(10, flen-i-1)*(buf[ilen+i+1]^'0');
 8001060:	7cba      	ldrb	r2, [r7, #18]
 8001062:	7c3b      	ldrb	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3b01      	subs	r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4619      	mov	r1, r3
 800106e:	200a      	movs	r0, #10
 8001070:	f7ff ff50 	bl	8000f14 <NMEA_Pow>
 8001074:	4601      	mov	r1, r0
 8001076:	7cfa      	ldrb	r2, [r7, #19]
 8001078:	7c3b      	ldrb	r3, [r7, #16]
 800107a:	4413      	add	r3, r2
 800107c:	3301      	adds	r3, #1
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001088:	b2db      	uxtb	r3, r3
 800108a:	fb03 f301 	mul.w	r3, r3, r1
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
	for (i=0; i<flen; ++ i) {
 8001094:	7c3b      	ldrb	r3, [r7, #16]
 8001096:	3301      	adds	r3, #1
 8001098:	743b      	strb	r3, [r7, #16]
 800109a:	7c3a      	ldrb	r2, [r7, #16]
 800109c:	7cbb      	ldrb	r3, [r7, #18]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3de      	bcc.n	8001060 <NMEA_StrToNum+0x102>
	} ret = ires * NMEA_Pow(10, flen) + fres;
 80010a2:	7cbb      	ldrb	r3, [r7, #18]
 80010a4:	4619      	mov	r1, r3
 80010a6:	200a      	movs	r0, #10
 80010a8:	f7ff ff34 	bl	8000f14 <NMEA_Pow>
 80010ac:	4602      	mov	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	fb03 f202 	mul.w	r2, r3, r2
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
	return (flag&0x02)? -ret:ret;
 80010ba:	7c7b      	ldrb	r3, [r7, #17]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <NMEA_StrToNum+0x16c>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	425b      	negs	r3, r3
 80010c8:	e000      	b.n	80010cc <NMEA_StrToNum+0x16e>
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <NMEA_GPVTG_Analysis>:
			++ slx;
		} p = p1+1;
	}
}

void NMEA_GPVTG_Analysis(nmea_msg *gpsx,u8 *buf) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	u8 *p1, dx; u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPVTG");
 80010de:	491b      	ldr	r1, [pc, #108]	; (800114c <NMEA_GPVTG_Analysis+0x78>)
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f003 fc4d 	bl	8004980 <strstr>
 80010e6:	60f8      	str	r0, [r7, #12]
	posx = NMEA_Comma_Pos(p1, 7);
 80010e8:	2107      	movs	r1, #7
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff fee4 	bl	8000eb8 <NMEA_Comma_Pos>
 80010f0:	4603      	mov	r3, r0
 80010f2:	72fb      	strb	r3, [r7, #11]
	if(posx^0XFF) {
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	2bff      	cmp	r3, #255	; 0xff
 80010f8:	d024      	beq.n	8001144 <NMEA_GPVTG_Analysis+0x70>
		gpsx->speed = NMEA_StrToNum(p1+posx, &dx);
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	f107 020a 	add.w	r2, r7, #10
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff29 	bl	8000f5e <NMEA_StrToNum>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8a3 2067 	strh.w	r2, [r3, #103]	; 0x67
		if (dx < 3) gpsx->speed *= NMEA_Pow(10, 3-dx);
 8001116:	7abb      	ldrb	r3, [r7, #10]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d813      	bhi.n	8001144 <NMEA_GPVTG_Analysis+0x70>
 800111c:	7abb      	ldrb	r3, [r7, #10]
 800111e:	f1c3 0303 	rsb	r3, r3, #3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	200a      	movs	r0, #10
 8001128:	f7ff fef4 	bl	8000f14 <NMEA_Pow>
 800112c:	4601      	mov	r1, r0
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8b3 3067 	ldrh.w	r3, [r3, #103]	; 0x67
 8001134:	b29a      	uxth	r2, r3
 8001136:	b28b      	uxth	r3, r1
 8001138:	fb12 f303 	smulbb	r3, r2, r3
 800113c:	b29a      	uxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8a3 2067 	strh.w	r2, [r3, #103]	; 0x67
	}
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	08006740 	.word	0x08006740

08001150 <NMEA_GPGGA_Analysis>:

void NMEA_GPGGA_Analysis (nmea_msg *gpsx,u8 *buf) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPGGA");
 800115a:	4910      	ldr	r1, [pc, #64]	; (800119c <NMEA_GPGGA_Analysis+0x4c>)
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f003 fc0f 	bl	8004980 <strstr>
 8001162:	60f8      	str	r0, [r7, #12]
	posx = NMEA_Comma_Pos(p1, 6);
 8001164:	2106      	movs	r1, #6
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff fea6 	bl	8000eb8 <NMEA_Comma_Pos>
 800116c:	4603      	mov	r3, r0
 800116e:	72fb      	strb	r3, [r7, #11]
	if (posx^0XFF) gpsx->gpssta = NMEA_StrToNum(p1+posx, &dx);
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	2bff      	cmp	r3, #255	; 0xff
 8001174:	d00d      	beq.n	8001192 <NMEA_GPGGA_Analysis+0x42>
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	f107 020a 	add.w	r2, r7, #10
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff feeb 	bl	8000f5e <NMEA_StrToNum>
 8001188:	4603      	mov	r3, r0
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
//	posx = NMEA_Comma_Pos(p1, 7);
//	if (posx^0XFF) gpsx->posslnum = NMEA_StrToNum(p1+posx, &dx);
//	posx = NMEA_Comma_Pos(p1, 9);
//	if (posx^0XFF) gpsx->altitude = NMEA_StrToNum(p1+posx, &dx);
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	08006748 	.word	0x08006748

080011a0 <NMEA_GPGSA_Analysis>:

void NMEA_GPGSA_Analysis (nmea_msg *gpsx, u8 *buf) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPGSA");
 80011aa:	4910      	ldr	r1, [pc, #64]	; (80011ec <NMEA_GPGSA_Analysis+0x4c>)
 80011ac:	6838      	ldr	r0, [r7, #0]
 80011ae:	f003 fbe7 	bl	8004980 <strstr>
 80011b2:	60f8      	str	r0, [r7, #12]
//	for (i=0; i<12; ++ i) {
//		posx = NMEA_Comma_Pos(p1, 3+i);
//		if (posx^0XFF) gpsx->possl[i] = NMEA_StrToNum(p1+posx, &dx);
//		else break;
//	}
	posx = NMEA_Comma_Pos(p1, 15);
 80011b4:	210f      	movs	r1, #15
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff fe7e 	bl	8000eb8 <NMEA_Comma_Pos>
 80011bc:	4603      	mov	r3, r0
 80011be:	72fb      	strb	r3, [r7, #11]
	if (posx^0XFF) gpsx->pdop = NMEA_StrToNum(p1+posx, &dx);
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	2bff      	cmp	r3, #255	; 0xff
 80011c4:	d00d      	beq.n	80011e2 <NMEA_GPGSA_Analysis+0x42>
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	f107 020a 	add.w	r2, r7, #10
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fec3 	bl	8000f5e <NMEA_StrToNum>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8a3 205d 	strh.w	r2, [r3, #93]	; 0x5d
//	posx = NMEA_Comma_Pos(p1, 16);
//	if (posx^0XFF) gpsx->hdop = NMEA_StrToNum(p1+posx, &dx);
//	posx = NMEA_Comma_Pos(p1, 17);
//	if (posx^0XFF) gpsx->vdop = NMEA_StrToNum(p1+posx, &dx);
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	08006750 	.word	0x08006750

080011f0 <NMEA_GPRMC_Analysis>:

void NMEA_GPRMC_Analysis (nmea_msg *gpsx, u8 *buf) {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	ed2d 8b02 	vpush	{d8}
 80011f6:	b088      	sub	sp, #32
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	u32 temp;
	float rs;
	p1 = (u8*)strstr((const char *)buf, "$GPRMC");
 80011fe:	497c      	ldr	r1, [pc, #496]	; (80013f0 <NMEA_GPRMC_Analysis+0x200>)
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	f003 fbbd 	bl	8004980 <strstr>
 8001206:	61f8      	str	r0, [r7, #28]
//		temp = NMEA_StrToNum(p1+posx, &dx) / NMEA_Pow(10, dx);
//		gpsx->utc.hour = temp/10000;
//		gpsx->utc.min  = (temp/100)%100;
//		gpsx->utc.sec  = temp%100;
//	}
	posx = NMEA_Comma_Pos(p1, 3);
 8001208:	2103      	movs	r1, #3
 800120a:	69f8      	ldr	r0, [r7, #28]
 800120c:	f7ff fe54 	bl	8000eb8 <NMEA_Comma_Pos>
 8001210:	4603      	mov	r3, r0
 8001212:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 8001214:	7efb      	ldrb	r3, [r7, #27]
 8001216:	2bff      	cmp	r3, #255	; 0xff
 8001218:	d050      	beq.n	80012bc <NMEA_GPRMC_Analysis+0xcc>
		temp = NMEA_StrToNum(p1+posx, &dx);
 800121a:	7efb      	ldrb	r3, [r7, #27]
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	4413      	add	r3, r2
 8001220:	f107 020f 	add.w	r2, r7, #15
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fe99 	bl	8000f5e <NMEA_StrToNum>
 800122c:	4603      	mov	r3, r0
 800122e:	617b      	str	r3, [r7, #20]
		gpsx->latitude = temp/NMEA_Pow(10, dx+2);
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	3302      	adds	r3, #2
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	200a      	movs	r0, #10
 800123a:	f7ff fe6b 	bl	8000f14 <NMEA_Pow>
 800123e:	4602      	mov	r2, r0
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fbb3 f2f2 	udiv	r2, r3, r2
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
		rs = temp%NMEA_Pow(10, dx+2);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	3302      	adds	r3, #2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	200a      	movs	r0, #10
 8001254:	f7ff fe5e 	bl	8000f14 <NMEA_Pow>
 8001258:	4602      	mov	r2, r0
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001260:	fb02 f201 	mul.w	r2, r2, r1
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800126e:	edc7 7a04 	vstr	s15, [r7, #16]
		gpsx->latitude = gpsx->latitude*100000+(rs*NMEA_Pow(10, 5-dx))/60;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a5f      	ldr	r2, [pc, #380]	; (80013f4 <NMEA_GPRMC_Analysis+0x204>)
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	f1c3 0305 	rsb	r3, r3, #5
 800128a:	b2db      	uxtb	r3, r3
 800128c:	4619      	mov	r1, r3
 800128e:	200a      	movs	r0, #10
 8001290:	f7ff fe40 	bl	8000f14 <NMEA_Pow>
 8001294:	ee07 0a90 	vmov	s15, r0
 8001298:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800129c:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012a4:	eddf 6a54 	vldr	s13, [pc, #336]	; 80013f8 <NMEA_GPRMC_Analysis+0x208>
 80012a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ac:	ee78 7a27 	vadd.f32	s15, s16, s15
 80012b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012b4:	ee17 2a90 	vmov	r2, s15
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	645a      	str	r2, [r3, #68]	; 0x44
	}
	posx = NMEA_Comma_Pos(p1, 4);
 80012bc:	2104      	movs	r1, #4
 80012be:	69f8      	ldr	r0, [r7, #28]
 80012c0:	f7ff fdfa 	bl	8000eb8 <NMEA_Comma_Pos>
 80012c4:	4603      	mov	r3, r0
 80012c6:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) gpsx->nshemi = *(p1+posx);
 80012c8:	7efb      	ldrb	r3, [r7, #27]
 80012ca:	2bff      	cmp	r3, #255	; 0xff
 80012cc:	d006      	beq.n	80012dc <NMEA_GPRMC_Analysis+0xec>
 80012ce:	7efb      	ldrb	r3, [r7, #27]
 80012d0:	69fa      	ldr	r2, [r7, #28]
 80012d2:	4413      	add	r3, r2
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (gpsx->nshemi ^ 'N') gpsx->latitude *= -1;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80012e2:	2b4e      	cmp	r3, #78	; 0x4e
 80012e4:	d004      	beq.n	80012f0 <NMEA_GPRMC_Analysis+0x100>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	425a      	negs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	645a      	str	r2, [r3, #68]	; 0x44
	posx = NMEA_Comma_Pos(p1,5);
 80012f0:	2105      	movs	r1, #5
 80012f2:	69f8      	ldr	r0, [r7, #28]
 80012f4:	f7ff fde0 	bl	8000eb8 <NMEA_Comma_Pos>
 80012f8:	4603      	mov	r3, r0
 80012fa:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 80012fc:	7efb      	ldrb	r3, [r7, #27]
 80012fe:	2bff      	cmp	r3, #255	; 0xff
 8001300:	d053      	beq.n	80013aa <NMEA_GPRMC_Analysis+0x1ba>
		temp = NMEA_StrToNum(p1+posx, &dx);
 8001302:	7efb      	ldrb	r3, [r7, #27]
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	4413      	add	r3, r2
 8001308:	f107 020f 	add.w	r2, r7, #15
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fe25 	bl	8000f5e <NMEA_StrToNum>
 8001314:	4603      	mov	r3, r0
 8001316:	617b      	str	r3, [r7, #20]
		gpsx->longitude = temp/NMEA_Pow(10, dx+2);
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	3302      	adds	r3, #2
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	200a      	movs	r0, #10
 8001322:	f7ff fdf7 	bl	8000f14 <NMEA_Pow>
 8001326:	4602      	mov	r2, r0
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fbb3 f2f2 	udiv	r2, r3, r2
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
		rs = temp%NMEA_Pow(10, dx+2);
 8001334:	7bfb      	ldrb	r3, [r7, #15]
 8001336:	3302      	adds	r3, #2
 8001338:	b2db      	uxtb	r3, r3
 800133a:	4619      	mov	r1, r3
 800133c:	200a      	movs	r0, #10
 800133e:	f7ff fde9 	bl	8000f14 <NMEA_Pow>
 8001342:	4602      	mov	r2, r0
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	fbb3 f1f2 	udiv	r1, r3, r2
 800134a:	fb02 f201 	mul.w	r2, r2, r1
 800134e:	1a9b      	subs	r3, r3, r2
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001358:	edc7 7a04 	vstr	s15, [r7, #16]
		gpsx->longitude = gpsx->longitude*100000+(rs*NMEA_Pow(10, 5-dx))/60;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8001362:	4a24      	ldr	r2, [pc, #144]	; (80013f4 <NMEA_GPRMC_Analysis+0x204>)
 8001364:	fb02 f303 	mul.w	r3, r2, r3
 8001368:	ee07 3a90 	vmov	s15, r3
 800136c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	f1c3 0305 	rsb	r3, r3, #5
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	200a      	movs	r0, #10
 800137c:	f7ff fdca 	bl	8000f14 <NMEA_Pow>
 8001380:	ee07 0a90 	vmov	s15, r0
 8001384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001388:	edd7 7a04 	vldr	s15, [r7, #16]
 800138c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001390:	eddf 6a19 	vldr	s13, [pc, #100]	; 80013f8 <NMEA_GPRMC_Analysis+0x208>
 8001394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001398:	ee78 7a27 	vadd.f32	s15, s16, s15
 800139c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a0:	ee17 2a90 	vmov	r2, s15
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
	}
	posx = NMEA_Comma_Pos(p1, 6);
 80013aa:	2106      	movs	r1, #6
 80013ac:	69f8      	ldr	r0, [r7, #28]
 80013ae:	f7ff fd83 	bl	8000eb8 <NMEA_Comma_Pos>
 80013b2:	4603      	mov	r3, r0
 80013b4:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) gpsx->ewhemi = *(p1+posx);
 80013b6:	7efb      	ldrb	r3, [r7, #27]
 80013b8:	2bff      	cmp	r3, #255	; 0xff
 80013ba:	d006      	beq.n	80013ca <NMEA_GPRMC_Analysis+0x1da>
 80013bc:	7efb      	ldrb	r3, [r7, #27]
 80013be:	69fa      	ldr	r2, [r7, #28]
 80013c0:	4413      	add	r3, r2
 80013c2:	781a      	ldrb	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	if (gpsx->ewhemi ^ 'E') gpsx->longitude *= -1;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80013d0:	2b45      	cmp	r3, #69	; 0x45
 80013d2:	d006      	beq.n	80013e2 <NMEA_GPRMC_Analysis+0x1f2>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 80013da:	425a      	negs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
//		temp = NMEA_StrToNum(p1+posx, &dx);
//		gpsx->utc.date  = temp/10000;
//		gpsx->utc.month = (temp/100)%100;
//		gpsx->utc.year  = 2000+temp%100;
//	}
}
 80013e2:	bf00      	nop
 80013e4:	3720      	adds	r7, #32
 80013e6:	46bd      	mov	sp, r7
 80013e8:	ecbd 8b02 	vpop	{d8}
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	08006758 	.word	0x08006758
 80013f4:	000186a0 	.word	0x000186a0
 80013f8:	42700000 	.word	0x42700000

080013fc <LED_PC13_INIT>:
  */

#include "LED_OUTPUT.h"
#include "main.h"

inline void LED_PC13_INIT () {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	4b11      	ldr	r3, [pc, #68]	; (800145c <LED_PC13_INIT+0x60>)
 8001416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001418:	4a10      	ldr	r2, [pc, #64]	; (800145c <LED_PC13_INIT+0x60>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6313      	str	r3, [r2, #48]	; 0x30
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <LED_PC13_INIT+0x60>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	603b      	str	r3, [r7, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800142c:	2201      	movs	r2, #1
 800142e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001432:	480b      	ldr	r0, [pc, #44]	; (8001460 <LED_PC13_INIT+0x64>)
 8001434:	f001 f8b0 	bl	8002598 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001438:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143e:	2301      	movs	r3, #1
 8001440:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001446:	2302      	movs	r3, #2
 8001448:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	4619      	mov	r1, r3
 800144e:	4804      	ldr	r0, [pc, #16]	; (8001460 <LED_PC13_INIT+0x64>)
 8001450:	f000 ff20 	bl	8002294 <HAL_GPIO_Init>
}
 8001454:	bf00      	nop
 8001456:	3718      	adds	r7, #24
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40023800 	.word	0x40023800
 8001460:	40020800 	.word	0x40020800

08001464 <LED_PC13_BLINK>:

inline void LED_PC13_BLINK (register int delayTime) {
 8001464:	b598      	push	{r3, r4, r7, lr}
 8001466:	af00      	add	r7, sp, #0
 8001468:	4604      	mov	r4, r0
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800146a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800146e:	4809      	ldr	r0, [pc, #36]	; (8001494 <LED_PC13_BLINK+0x30>)
 8001470:	f001 f8ab 	bl	80025ca <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 8001474:	4623      	mov	r3, r4
 8001476:	4618      	mov	r0, r3
 8001478:	f000 fdb6 	bl	8001fe8 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800147c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <LED_PC13_BLINK+0x30>)
 8001482:	f001 f8a2 	bl	80025ca <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 8001486:	4623      	mov	r3, r4
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fdad 	bl	8001fe8 <HAL_Delay>
}
 800148e:	bf00      	nop
 8001490:	bd98      	pop	{r3, r4, r7, pc}
 8001492:	bf00      	nop
 8001494:	40020800 	.word	0x40020800

08001498 <LED_OUTPUT_INIT>:
			LED_TEST_OFF(); HAL_Delay(4);
		}
	}
}

inline void LED_OUTPUT_INIT () {
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	1d3b      	adds	r3, r7, #4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	4b2a      	ldr	r3, [pc, #168]	; (800155c <LED_OUTPUT_INIT+0xc4>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	4a29      	ldr	r2, [pc, #164]	; (800155c <LED_OUTPUT_INIT+0xc4>)
 80014b6:	f043 0301 	orr.w	r3, r3, #1
 80014ba:	6313      	str	r3, [r2, #48]	; 0x30
 80014bc:	4b27      	ldr	r3, [pc, #156]	; (800155c <LED_OUTPUT_INIT+0xc4>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	f003 0301 	and.w	r3, r3, #1
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	4824      	ldr	r0, [pc, #144]	; (8001560 <LED_OUTPUT_INIT+0xc8>)
 80014ce:	f001 f863 	bl	8002598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	2140      	movs	r1, #64	; 0x40
 80014d6:	4822      	ldr	r0, [pc, #136]	; (8001560 <LED_OUTPUT_INIT+0xc8>)
 80014d8:	f001 f85e 	bl	8002598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	2120      	movs	r1, #32
 80014e0:	481f      	ldr	r0, [pc, #124]	; (8001560 <LED_OUTPUT_INIT+0xc8>)
 80014e2:	f001 f859 	bl	8002598 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ea:	2301      	movs	r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014f2:	2302      	movs	r3, #2
 80014f4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	4619      	mov	r1, r3
 80014fa:	4819      	ldr	r0, [pc, #100]	; (8001560 <LED_OUTPUT_INIT+0xc8>)
 80014fc:	f000 feca 	bl	8002294 <HAL_GPIO_Init>
	LED_GPSRFS_OFF();
 8001500:	2200      	movs	r2, #0
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	4816      	ldr	r0, [pc, #88]	; (8001560 <LED_OUTPUT_INIT+0xc8>)
 8001506:	f001 f847 	bl	8002598 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800150a:	2340      	movs	r3, #64	; 0x40
 800150c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150e:	2301      	movs	r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001516:	2302      	movs	r3, #2
 8001518:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4810      	ldr	r0, [pc, #64]	; (8001560 <LED_OUTPUT_INIT+0xc8>)
 8001520:	f000 feb8 	bl	8002294 <HAL_GPIO_Init>
	LED_DATUPD_OFF();
 8001524:	2200      	movs	r2, #0
 8001526:	2140      	movs	r1, #64	; 0x40
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <LED_OUTPUT_INIT+0xc8>)
 800152a:	f001 f835 	bl	8002598 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 800152e:	2320      	movs	r3, #32
 8001530:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2301      	movs	r3, #1
 8001534:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800153a:	2302      	movs	r3, #2
 800153c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	4619      	mov	r1, r3
 8001542:	4807      	ldr	r0, [pc, #28]	; (8001560 <LED_OUTPUT_INIT+0xc8>)
 8001544:	f000 fea6 	bl	8002294 <HAL_GPIO_Init>
	LED_ALERT_OFF();
 8001548:	2200      	movs	r2, #0
 800154a:	2120      	movs	r1, #32
 800154c:	4804      	ldr	r0, [pc, #16]	; (8001560 <LED_OUTPUT_INIT+0xc8>)
 800154e:	f001 f823 	bl	8002598 <HAL_GPIO_WritePin>
}
 8001552:	bf00      	nop
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <LED_OUTPUT_TEST>:

inline void LED_OUTPUT_TEST () {
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8001568:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800156c:	f000 fd3c 	bl	8001fe8 <HAL_Delay>

	LED_GPSRFS_ON ();
 8001570:	2201      	movs	r2, #1
 8001572:	2180      	movs	r1, #128	; 0x80
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <LED_OUTPUT_TEST+0x5c>)
 8001576:	f001 f80f 	bl	8002598 <HAL_GPIO_WritePin>
	LED_DATUPD_ON ();
 800157a:	2201      	movs	r2, #1
 800157c:	2140      	movs	r1, #64	; 0x40
 800157e:	4810      	ldr	r0, [pc, #64]	; (80015c0 <LED_OUTPUT_TEST+0x5c>)
 8001580:	f001 f80a 	bl	8002598 <HAL_GPIO_WritePin>
	LED_ALERT_ON  ();
 8001584:	2201      	movs	r2, #1
 8001586:	2120      	movs	r1, #32
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <LED_OUTPUT_TEST+0x5c>)
 800158a:	f001 f805 	bl	8002598 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 800158e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001592:	f000 fd29 	bl	8001fe8 <HAL_Delay>

	LED_GPSRFS_OFF();
 8001596:	2200      	movs	r2, #0
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	4809      	ldr	r0, [pc, #36]	; (80015c0 <LED_OUTPUT_TEST+0x5c>)
 800159c:	f000 fffc 	bl	8002598 <HAL_GPIO_WritePin>
	LED_DATUPD_OFF();
 80015a0:	2200      	movs	r2, #0
 80015a2:	2140      	movs	r1, #64	; 0x40
 80015a4:	4806      	ldr	r0, [pc, #24]	; (80015c0 <LED_OUTPUT_TEST+0x5c>)
 80015a6:	f000 fff7 	bl	8002598 <HAL_GPIO_WritePin>
	LED_ALERT_OFF ();
 80015aa:	2200      	movs	r2, #0
 80015ac:	2120      	movs	r1, #32
 80015ae:	4804      	ldr	r0, [pc, #16]	; (80015c0 <LED_OUTPUT_TEST+0x5c>)
 80015b0:	f000 fff2 	bl	8002598 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 80015b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b8:	f000 fd16 	bl	8001fe8 <HAL_Delay>
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40020000 	.word	0x40020000

080015c4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80015cc:	1d39      	adds	r1, r7, #4
 80015ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d2:	2201      	movs	r2, #1
 80015d4:	4803      	ldr	r0, [pc, #12]	; (80015e4 <__io_putchar+0x20>)
 80015d6:	f001 fdd4 	bl	8003182 <HAL_UART_Transmit>
	return ch;
 80015da:	687b      	ldr	r3, [r7, #4]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200002cc 	.word	0x200002cc

080015e8 <GPS_decode>:
uint8_t gps_uart[1000];
nmea_slmsg    NMEAslmsg;
nmea_utc_time NMEAutctime;
nmea_msg      NMEAmsg;

void GPS_decode (void) {
 80015e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af04      	add	r7, sp, #16
	HAL_UART_Receive_IT(&huart2, (uint8_t*) gps_uart, sizeof(gps_uart));
 80015f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015f4:	4948      	ldr	r1, [pc, #288]	; (8001718 <GPS_decode+0x130>)
 80015f6:	4849      	ldr	r0, [pc, #292]	; (800171c <GPS_decode+0x134>)
 80015f8:	f001 fe5c 	bl	80032b4 <HAL_UART_Receive_IT>

	#ifdef SerialGPSdebug
		//printf("USART data:\r\n%s\r\n", gps_uart);
	#endif

	NMEA_GPGGA_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 80015fc:	4946      	ldr	r1, [pc, #280]	; (8001718 <GPS_decode+0x130>)
 80015fe:	4848      	ldr	r0, [pc, #288]	; (8001720 <GPS_decode+0x138>)
 8001600:	f7ff fda6 	bl	8001150 <NMEA_GPGGA_Analysis>

	if (!NMEAmsg.gpssta) {
 8001604:	4b46      	ldr	r3, [pc, #280]	; (8001720 <GPS_decode+0x138>)
 8001606:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800160a:	2b00      	cmp	r3, #0
 800160c:	d108      	bne.n	8001620 <GPS_decode+0x38>
		LED_GPSRFS_ON();
 800160e:	2201      	movs	r2, #1
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	4844      	ldr	r0, [pc, #272]	; (8001724 <GPS_decode+0x13c>)
 8001614:	f000 ffc0 	bl	8002598 <HAL_GPIO_WritePin>
		#ifdef SerialDebug
			printf("** GPS NO SIGNAL **\r\n");
 8001618:	4843      	ldr	r0, [pc, #268]	; (8001728 <GPS_decode+0x140>)
 800161a:	f003 f9a9 	bl	8004970 <puts>
			printf("Lat: %.6f, Log: %.6f, Spd: %.6f\r\n", (float)NMEAmsg.latitude/100000, (float)NMEAmsg.longitude/100000, (float)NMEAmsg.speed/1000);
		#endif

		LED_GPSRFS_OFF();
	}
}
 800161e:	e076      	b.n	800170e <GPS_decode+0x126>
		LED_GPSRFS_ON();
 8001620:	2201      	movs	r2, #1
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	483f      	ldr	r0, [pc, #252]	; (8001724 <GPS_decode+0x13c>)
 8001626:	f000 ffb7 	bl	8002598 <HAL_GPIO_WritePin>
		NMEA_GPRMC_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 800162a:	493b      	ldr	r1, [pc, #236]	; (8001718 <GPS_decode+0x130>)
 800162c:	483c      	ldr	r0, [pc, #240]	; (8001720 <GPS_decode+0x138>)
 800162e:	f7ff fddf 	bl	80011f0 <NMEA_GPRMC_Analysis>
		NMEA_GPGSA_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8001632:	4939      	ldr	r1, [pc, #228]	; (8001718 <GPS_decode+0x130>)
 8001634:	483a      	ldr	r0, [pc, #232]	; (8001720 <GPS_decode+0x138>)
 8001636:	f7ff fdb3 	bl	80011a0 <NMEA_GPGSA_Analysis>
		NMEA_GPVTG_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 800163a:	4937      	ldr	r1, [pc, #220]	; (8001718 <GPS_decode+0x130>)
 800163c:	4838      	ldr	r0, [pc, #224]	; (8001720 <GPS_decode+0x138>)
 800163e:	f7ff fd49 	bl	80010d4 <NMEA_GPVTG_Analysis>
		NMEA_GPRMC_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8001642:	4935      	ldr	r1, [pc, #212]	; (8001718 <GPS_decode+0x130>)
 8001644:	4836      	ldr	r0, [pc, #216]	; (8001720 <GPS_decode+0x138>)
 8001646:	f7ff fdd3 	bl	80011f0 <NMEA_GPRMC_Analysis>
			printf("\r\n** GPS Serial Debug **\r\n");
 800164a:	4838      	ldr	r0, [pc, #224]	; (800172c <GPS_decode+0x144>)
 800164c:	f003 f990 	bl	8004970 <puts>
			printf("GPS status: %s, PDOT: %f\r\n", NMEAmsg.gpssta^2? "3D":"2D", (float)NMEAmsg.pdop/10);
 8001650:	4b33      	ldr	r3, [pc, #204]	; (8001720 <GPS_decode+0x138>)
 8001652:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001656:	2b02      	cmp	r3, #2
 8001658:	d001      	beq.n	800165e <GPS_decode+0x76>
 800165a:	4c35      	ldr	r4, [pc, #212]	; (8001730 <GPS_decode+0x148>)
 800165c:	e000      	b.n	8001660 <GPS_decode+0x78>
 800165e:	4c35      	ldr	r4, [pc, #212]	; (8001734 <GPS_decode+0x14c>)
 8001660:	4b2f      	ldr	r3, [pc, #188]	; (8001720 <GPS_decode+0x138>)
 8001662:	f8b3 305d 	ldrh.w	r3, [r3, #93]	; 0x5d
 8001666:	b29b      	uxth	r3, r3
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001670:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001674:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001678:	ee16 0a90 	vmov	r0, s13
 800167c:	f7fe ff6c 	bl	8000558 <__aeabi_f2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4621      	mov	r1, r4
 8001686:	482c      	ldr	r0, [pc, #176]	; (8001738 <GPS_decode+0x150>)
 8001688:	f003 f8fe 	bl	8004888 <iprintf>
			printf("Lat: %.6f, Log: %.6f, Spd: %.6f\r\n", (float)NMEAmsg.latitude/100000, (float)NMEAmsg.longitude/100000, (float)NMEAmsg.speed/1000);
 800168c:	4b24      	ldr	r3, [pc, #144]	; (8001720 <GPS_decode+0x138>)
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001698:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800173c <GPS_decode+0x154>
 800169c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016a0:	ee16 0a90 	vmov	r0, s13
 80016a4:	f7fe ff58 	bl	8000558 <__aeabi_f2d>
 80016a8:	4680      	mov	r8, r0
 80016aa:	4689      	mov	r9, r1
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <GPS_decode+0x138>)
 80016ae:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 80016b2:	ee07 3a90 	vmov	s15, r3
 80016b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ba:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800173c <GPS_decode+0x154>
 80016be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016c2:	ee16 0a90 	vmov	r0, s13
 80016c6:	f7fe ff47 	bl	8000558 <__aeabi_f2d>
 80016ca:	4604      	mov	r4, r0
 80016cc:	460d      	mov	r5, r1
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <GPS_decode+0x138>)
 80016d0:	f8b3 3067 	ldrh.w	r3, [r3, #103]	; 0x67
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016de:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001740 <GPS_decode+0x158>
 80016e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016e6:	ee16 0a90 	vmov	r0, s13
 80016ea:	f7fe ff35 	bl	8000558 <__aeabi_f2d>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016f6:	e9cd 4500 	strd	r4, r5, [sp]
 80016fa:	4642      	mov	r2, r8
 80016fc:	464b      	mov	r3, r9
 80016fe:	4811      	ldr	r0, [pc, #68]	; (8001744 <GPS_decode+0x15c>)
 8001700:	f003 f8c2 	bl	8004888 <iprintf>
		LED_GPSRFS_OFF();
 8001704:	2200      	movs	r2, #0
 8001706:	2180      	movs	r1, #128	; 0x80
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <GPS_decode+0x13c>)
 800170a:	f000 ff45 	bl	8002598 <HAL_GPIO_WritePin>
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001716:	bf00      	nop
 8001718:	2000030c 	.word	0x2000030c
 800171c:	2000073c 	.word	0x2000073c
 8001720:	20000204 	.word	0x20000204
 8001724:	40020000 	.word	0x40020000
 8001728:	08006760 	.word	0x08006760
 800172c:	08006778 	.word	0x08006778
 8001730:	08006794 	.word	0x08006794
 8001734:	08006798 	.word	0x08006798
 8001738:	0800679c 	.word	0x0800679c
 800173c:	47c35000 	.word	0x47c35000
 8001740:	447a0000 	.word	0x447a0000
 8001744:	080067b8 	.word	0x080067b8

08001748 <main>:

signed main(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0

	HAL_Init();
 800174c:	f000 fbda 	bl	8001f04 <HAL_Init>

	SystemClock_Config();
 8001750:	f000 f820 	bl	8001794 <SystemClock_Config>

	MX_GPIO_Init();
 8001754:	f000 f928 	bl	80019a8 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001758:	f000 f87a 	bl	8001850 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 800175c:	f000 f8d0 	bl	8001900 <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 8001760:	f000 f8f8 	bl	8001954 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 8001764:	f000 f8a2 	bl	80018ac <MX_USART1_UART_Init>

	LED_OUTPUT_INIT();
 8001768:	f7ff fe96 	bl	8001498 <LED_OUTPUT_INIT>
	LED_PC13_INIT();
 800176c:	f7ff fe46 	bl	80013fc <LED_PC13_INIT>

	LED_OUTPUT_TEST();
 8001770:	f7ff fef8 	bl	8001564 <LED_OUTPUT_TEST>

	HAL_UART_Receive_IT(&huart2, (uint8_t*)gps_uart, 1);
 8001774:	2201      	movs	r2, #1
 8001776:	4905      	ldr	r1, [pc, #20]	; (800178c <main+0x44>)
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <main+0x48>)
 800177a:	f001 fd9b 	bl	80032b4 <HAL_UART_Receive_IT>
		nnnnn = 1919.810;
		printf("%f\r\n\r\n", nnnnn);
	#endif

	while (1) {
		GPS_decode ();
 800177e:	f7ff ff33 	bl	80015e8 <GPS_decode>
		HAL_Delay(5000);
 8001782:	f241 3088 	movw	r0, #5000	; 0x1388
 8001786:	f000 fc2f 	bl	8001fe8 <HAL_Delay>
		GPS_decode ();
 800178a:	e7f8      	b.n	800177e <main+0x36>
 800178c:	2000030c 	.word	0x2000030c
 8001790:	2000073c 	.word	0x2000073c

08001794 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b094      	sub	sp, #80	; 0x50
 8001798:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800179a:	f107 0320 	add.w	r3, r7, #32
 800179e:	2230      	movs	r2, #48	; 0x30
 80017a0:	2100      	movs	r1, #0
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fc0c 	bl	8003fc0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
    */
	__HAL_RCC_PWR_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <SystemClock_Config+0xb4>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a21      	ldr	r2, [pc, #132]	; (8001848 <SystemClock_Config+0xb4>)
 80017c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <SystemClock_Config+0xb4>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d4:	2300      	movs	r3, #0
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	4b1c      	ldr	r3, [pc, #112]	; (800184c <SystemClock_Config+0xb8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <SystemClock_Config+0xb8>)
 80017de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	4b19      	ldr	r3, [pc, #100]	; (800184c <SystemClock_Config+0xb8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017f0:	2302      	movs	r3, #2
 80017f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f4:	2301      	movs	r3, #1
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f8:	2310      	movs	r3, #16
 80017fa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001800:	f107 0320 	add.w	r3, r7, #32
 8001804:	4618      	mov	r0, r3
 8001806:	f001 f833 	bl	8002870 <HAL_RCC_OscConfig>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <SystemClock_Config+0x80>
		Error_Handler();
 8001810:	f000 f90a 	bl	8001a28 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001814:	230f      	movs	r3, #15
 8001816:	60fb      	str	r3, [r7, #12]
								 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001818:	2300      	movs	r3, #0
 800181a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f001 fa8e 	bl	8002d50 <HAL_RCC_ClockConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0xaa>
		Error_Handler();
 800183a:	f000 f8f5 	bl	8001a28 <Error_Handler>
	}
}
 800183e:	bf00      	nop
 8001840:	3750      	adds	r7, #80	; 0x50
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	40007000 	.word	0x40007000

08001850 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001854:	4b12      	ldr	r3, [pc, #72]	; (80018a0 <MX_I2C1_Init+0x50>)
 8001856:	4a13      	ldr	r2, [pc, #76]	; (80018a4 <MX_I2C1_Init+0x54>)
 8001858:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800185a:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <MX_I2C1_Init+0x50>)
 800185c:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <MX_I2C1_Init+0x58>)
 800185e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <MX_I2C1_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <MX_I2C1_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <MX_I2C1_Init+0x50>)
 800186e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001872:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <MX_I2C1_Init+0x50>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <MX_I2C1_Init+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001880:	4b07      	ldr	r3, [pc, #28]	; (80018a0 <MX_I2C1_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <MX_I2C1_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800188c:	4804      	ldr	r0, [pc, #16]	; (80018a0 <MX_I2C1_Init+0x50>)
 800188e:	f000 feb7 	bl	8002600 <HAL_I2C_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001898:	f000 f8c6 	bl	8001a28 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000270 	.word	0x20000270
 80018a4:	40005400 	.word	0x40005400
 80018a8:	000186a0 	.word	0x000186a0

080018ac <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_USART1_UART_Init+0x50>)
 80018b4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART1_UART_Init+0x4c>)
 80018e4:	f001 fc00 	bl	80030e8 <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80018ee:	f000 f89b 	bl	8001a28 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002cc 	.word	0x200002cc
 80018fc:	40011000 	.word	0x40011000

08001900 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001904:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_USART2_UART_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800190c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001910:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	; (800194c <MX_USART2_UART_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_USART2_UART_Init+0x4c>)
 8001938:	f001 fbd6 	bl	80030e8 <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001942:	f000 f871 	bl	8001a28 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	2000073c 	.word	0x2000073c
 8001950:	40004400 	.word	0x40004400

08001954 <MX_USART6_UART_Init>:
/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void) {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001958:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 800195a:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <MX_USART6_UART_Init+0x50>)
 800195c:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001964:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001972:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001978:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 800197a:	220c      	movs	r2, #12
 800197c:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197e:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001980:	2200      	movs	r2, #0
 8001982:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 8001986:	2200      	movs	r2, #0
 8001988:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_USART6_UART_Init+0x4c>)
 800198c:	f001 fbac 	bl	80030e8 <HAL_UART_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001996:	f000 f847 	bl	8001a28 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	200006fc 	.word	0x200006fc
 80019a4:	40011400 	.word	0x40011400

080019a8 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]
 80019ba:	60da      	str	r2, [r3, #12]
 80019bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_GPIO_Init+0x78>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	4a16      	ldr	r2, [pc, #88]	; (8001a20 <MX_GPIO_Init+0x78>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6313      	str	r3, [r2, #48]	; 0x30
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_GPIO_Init+0x78>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_GPIO_Init+0x78>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a0f      	ldr	r2, [pc, #60]	; (8001a20 <MX_GPIO_Init+0x78>)
 80019e4:	f043 0302 	orr.w	r3, r3, #2
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <MX_GPIO_Init+0x78>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019fa:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0c:	f107 030c 	add.w	r3, r7, #12
 8001a10:	4619      	mov	r1, r3
 8001a12:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_GPIO_Init+0x7c>)
 8001a14:	f000 fc3e 	bl	8002294 <HAL_GPIO_Init>

}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40020000 	.word	0x40020000

08001a28 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		LED_PC13_BLINK(1000);
 8001a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a32:	f7ff fd17 	bl	8001464 <LED_PC13_BLINK>
 8001a36:	e7fa      	b.n	8001a2e <Error_Handler+0x6>

08001a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	4b10      	ldr	r3, [pc, #64]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	4a0f      	ldr	r2, [pc, #60]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	603b      	str	r3, [r7, #0]
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a68:	6413      	str	r3, [r2, #64]	; 0x40
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_MspInit+0x4c>)
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a19      	ldr	r2, [pc, #100]	; (8001b0c <HAL_I2C_MspInit+0x84>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d12b      	bne.n	8001b02 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a17      	ldr	r2, [pc, #92]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001ab4:	f043 0302 	orr.w	r3, r3, #2
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aca:	2312      	movs	r3, #18
 8001acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ada:	f107 0314 	add.w	r3, r7, #20
 8001ade:	4619      	mov	r1, r3
 8001ae0:	480c      	ldr	r0, [pc, #48]	; (8001b14 <HAL_I2C_MspInit+0x8c>)
 8001ae2:	f000 fbd7 	bl	8002294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001af0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001af4:	6413      	str	r3, [r2, #64]	; 0x40
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_I2C_MspInit+0x88>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b02:	bf00      	nop
 8001b04:	3728      	adds	r7, #40	; 0x28
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020400 	.word	0x40020400

08001b18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08e      	sub	sp, #56	; 0x38
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a58      	ldr	r2, [pc, #352]	; (8001c98 <HAL_UART_MspInit+0x180>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d135      	bne.n	8001ba6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
 8001b3e:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a56      	ldr	r2, [pc, #344]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b54      	ldr	r3, [pc, #336]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	623b      	str	r3, [r7, #32]
 8001b54:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	4b50      	ldr	r3, [pc, #320]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a4f      	ldr	r2, [pc, #316]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b80:	2303      	movs	r3, #3
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b84:	2307      	movs	r3, #7
 8001b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4844      	ldr	r0, [pc, #272]	; (8001ca0 <HAL_UART_MspInit+0x188>)
 8001b90:	f000 fb80 	bl	8002294 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	2100      	movs	r1, #0
 8001b98:	2025      	movs	r0, #37	; 0x25
 8001b9a:	f000 fb22 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b9e:	2025      	movs	r0, #37	; 0x25
 8001ba0:	f000 fb3b 	bl	800221a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ba4:	e073      	b.n	8001c8e <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a3e      	ldr	r2, [pc, #248]	; (8001ca4 <HAL_UART_MspInit+0x18c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d134      	bne.n	8001c1a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	4b39      	ldr	r3, [pc, #228]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	4a38      	ldr	r2, [pc, #224]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc0:	4b36      	ldr	r3, [pc, #216]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	4b32      	ldr	r3, [pc, #200]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd4:	4a31      	ldr	r2, [pc, #196]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6313      	str	r3, [r2, #48]	; 0x30
 8001bdc:	4b2f      	ldr	r3, [pc, #188]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001be8:	230c      	movs	r3, #12
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c00:	4619      	mov	r1, r3
 8001c02:	4827      	ldr	r0, [pc, #156]	; (8001ca0 <HAL_UART_MspInit+0x188>)
 8001c04:	f000 fb46 	bl	8002294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	2026      	movs	r0, #38	; 0x26
 8001c0e:	f000 fae8 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c12:	2026      	movs	r0, #38	; 0x26
 8001c14:	f000 fb01 	bl	800221a <HAL_NVIC_EnableIRQ>
}
 8001c18:	e039      	b.n	8001c8e <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <HAL_UART_MspInit+0x190>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d134      	bne.n	8001c8e <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001c2e:	f043 0320 	orr.w	r3, r3, #32
 8001c32:	6453      	str	r3, [r2, #68]	; 0x44
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c38:	f003 0320 	and.w	r3, r3, #32
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	4b15      	ldr	r3, [pc, #84]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c50:	4b12      	ldr	r3, [pc, #72]	; (8001c9c <HAL_UART_MspInit+0x184>)
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c5c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c62:	2302      	movs	r3, #2
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c6e:	2308      	movs	r3, #8
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c76:	4619      	mov	r1, r3
 8001c78:	4809      	ldr	r0, [pc, #36]	; (8001ca0 <HAL_UART_MspInit+0x188>)
 8001c7a:	f000 fb0b 	bl	8002294 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2047      	movs	r0, #71	; 0x47
 8001c84:	f000 faad 	bl	80021e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001c88:	2047      	movs	r0, #71	; 0x47
 8001c8a:	f000 fac6 	bl	800221a <HAL_NVIC_EnableIRQ>
}
 8001c8e:	bf00      	nop
 8001c90:	3738      	adds	r7, #56	; 0x38
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40011000 	.word	0x40011000
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	40004400 	.word	0x40004400
 8001ca8:	40011400 	.word	0x40011400

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 f956 	bl	8001fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <USART1_IRQHandler+0x10>)
 8001d06:	f001 fb2b 	bl	8003360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	200002cc 	.word	0x200002cc

08001d14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d18:	4802      	ldr	r0, [pc, #8]	; (8001d24 <USART2_IRQHandler+0x10>)
 8001d1a:	f001 fb21 	bl	8003360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	2000073c 	.word	0x2000073c

08001d28 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001d2c:	4802      	ldr	r0, [pc, #8]	; (8001d38 <USART6_IRQHandler+0x10>)
 8001d2e:	f001 fb17 	bl	8003360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	200006fc 	.word	0x200006fc

08001d3c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e00a      	b.n	8001d64 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d4e:	f3af 8000 	nop.w
 8001d52:	4601      	mov	r1, r0
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1c5a      	adds	r2, r3, #1
 8001d58:	60ba      	str	r2, [r7, #8]
 8001d5a:	b2ca      	uxtb	r2, r1
 8001d5c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dbf0      	blt.n	8001d4e <_read+0x12>
	}

return len;
 8001d6c:	687b      	ldr	r3, [r7, #4]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b086      	sub	sp, #24
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d82:	2300      	movs	r3, #0
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	e009      	b.n	8001d9c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	1c5a      	adds	r2, r3, #1
 8001d8c:	60ba      	str	r2, [r7, #8]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fc17 	bl	80015c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	617b      	str	r3, [r7, #20]
 8001d9c:	697a      	ldr	r2, [r7, #20]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	dbf1      	blt.n	8001d88 <_write+0x12>
	}
	return len;
 8001da4:	687b      	ldr	r3, [r7, #4]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <_close>:

int _close(int file)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
	return -1;
 8001db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr

08001dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dd6:	605a      	str	r2, [r3, #4]
	return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_isatty>:

int _isatty(int file)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
	return 1;
 8001dee:	2301      	movs	r3, #1
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	return 0;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
	...

08001e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e20:	4a14      	ldr	r2, [pc, #80]	; (8001e74 <_sbrk+0x5c>)
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <_sbrk+0x60>)
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <_sbrk+0x64>)
 8001e36:	4a12      	ldr	r2, [pc, #72]	; (8001e80 <_sbrk+0x68>)
 8001e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d207      	bcs.n	8001e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e48:	f002 f890 	bl	8003f6c <__errno>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	230c      	movs	r3, #12
 8001e50:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e52:	f04f 33ff 	mov.w	r3, #4294967295
 8001e56:	e009      	b.n	8001e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e58:	4b08      	ldr	r3, [pc, #32]	; (8001e7c <_sbrk+0x64>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <_sbrk+0x64>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4413      	add	r3, r2
 8001e66:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <_sbrk+0x64>)
 8001e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	20020000 	.word	0x20020000
 8001e78:	00000400 	.word	0x00000400
 8001e7c:	200001f8 	.word	0x200001f8
 8001e80:	20000788 	.word	0x20000788

08001e84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <SystemInit+0x28>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e8e:	4a07      	ldr	r2, [pc, #28]	; (8001eac <SystemInit+0x28>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e98:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SystemInit+0x28>)
 8001e9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e9e:	609a      	str	r2, [r3, #8]
#endif
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001eb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eb6:	e003      	b.n	8001ec0 <LoopCopyDataInit>

08001eb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ebc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ebe:	3104      	adds	r1, #4

08001ec0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ec0:	480b      	ldr	r0, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ec4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ec6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ec8:	d3f6      	bcc.n	8001eb8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eca:	4a0b      	ldr	r2, [pc, #44]	; (8001ef8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ecc:	e002      	b.n	8001ed4 <LoopFillZerobss>

08001ece <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ece:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ed0:	f842 3b04 	str.w	r3, [r2], #4

08001ed4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ed6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ed8:	d3f9      	bcc.n	8001ece <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eda:	f7ff ffd3 	bl	8001e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ede:	f002 f84b 	bl	8003f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ee2:	f7ff fc31 	bl	8001748 <main>
  bx  lr    
 8001ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ee8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001eec:	08006ac8 	.word	0x08006ac8
  ldr  r0, =_sdata
 8001ef0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ef4:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001ef8:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001efc:	20000784 	.word	0x20000784

08001f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC_IRQHandler>
	...

08001f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_Init+0x40>)
 8001f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <HAL_Init+0x40>)
 8001f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_Init+0x40>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2c:	2003      	movs	r0, #3
 8001f2e:	f000 f94d 	bl	80021cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f000 f808 	bl	8001f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f38:	f7ff fd7e 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023c00 	.word	0x40023c00

08001f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <HAL_InitTick+0x54>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <HAL_InitTick+0x58>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 f965 	bl	8002236 <HAL_SYSTICK_Config>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00e      	b.n	8001f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b0f      	cmp	r3, #15
 8001f7a:	d80a      	bhi.n	8001f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295
 8001f84:	f000 f92d 	bl	80021e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f88:	4a06      	ldr	r2, [pc, #24]	; (8001fa4 <HAL_InitTick+0x5c>)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e000      	b.n	8001f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	20000004 	.word	0x20000004

08001fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <HAL_IncTick+0x20>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x24>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <HAL_IncTick+0x24>)
 8001fba:	6013      	str	r3, [r2, #0]
}
 8001fbc:	bf00      	nop
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	20000008 	.word	0x20000008
 8001fcc:	2000077c 	.word	0x2000077c

08001fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd4:	4b03      	ldr	r3, [pc, #12]	; (8001fe4 <HAL_GetTick+0x14>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	2000077c 	.word	0x2000077c

08001fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff0:	f7ff ffee 	bl	8001fd0 <HAL_GetTick>
 8001ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002000:	d005      	beq.n	800200e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_Delay+0x40>)
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800200e:	bf00      	nop
 8002010:	f7ff ffde 	bl	8001fd0 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	429a      	cmp	r2, r3
 800201e:	d8f7      	bhi.n	8002010 <HAL_Delay+0x28>
  {
  }
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000008 	.word	0x20000008

0800202c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800203c:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002042:	68ba      	ldr	r2, [r7, #8]
 8002044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002048:	4013      	ands	r3, r2
 800204a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800205c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800205e:	4a04      	ldr	r2, [pc, #16]	; (8002070 <__NVIC_SetPriorityGrouping+0x44>)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	60d3      	str	r3, [r2, #12]
}
 8002064:	bf00      	nop
 8002066:	3714      	adds	r7, #20
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002078:	4b04      	ldr	r3, [pc, #16]	; (800208c <__NVIC_GetPriorityGrouping+0x18>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0a1b      	lsrs	r3, r3, #8
 800207e:	f003 0307 	and.w	r3, r3, #7
}
 8002082:	4618      	mov	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	db0b      	blt.n	80020ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020a2:	79fb      	ldrb	r3, [r7, #7]
 80020a4:	f003 021f 	and.w	r2, r3, #31
 80020a8:	4907      	ldr	r1, [pc, #28]	; (80020c8 <__NVIC_EnableIRQ+0x38>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	2001      	movs	r0, #1
 80020b2:	fa00 f202 	lsl.w	r2, r0, r2
 80020b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	e000e100 	.word	0xe000e100

080020cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	4603      	mov	r3, r0
 80020d4:	6039      	str	r1, [r7, #0]
 80020d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	db0a      	blt.n	80020f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	b2da      	uxtb	r2, r3
 80020e4:	490c      	ldr	r1, [pc, #48]	; (8002118 <__NVIC_SetPriority+0x4c>)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	0112      	lsls	r2, r2, #4
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	440b      	add	r3, r1
 80020f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020f4:	e00a      	b.n	800210c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	4908      	ldr	r1, [pc, #32]	; (800211c <__NVIC_SetPriority+0x50>)
 80020fc:	79fb      	ldrb	r3, [r7, #7]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	3b04      	subs	r3, #4
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	b2d2      	uxtb	r2, r2
 8002108:	440b      	add	r3, r1
 800210a:	761a      	strb	r2, [r3, #24]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002120:	b480      	push	{r7}
 8002122:	b089      	sub	sp, #36	; 0x24
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f1c3 0307 	rsb	r3, r3, #7
 800213a:	2b04      	cmp	r3, #4
 800213c:	bf28      	it	cs
 800213e:	2304      	movcs	r3, #4
 8002140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	3304      	adds	r3, #4
 8002146:	2b06      	cmp	r3, #6
 8002148:	d902      	bls.n	8002150 <NVIC_EncodePriority+0x30>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3b03      	subs	r3, #3
 800214e:	e000      	b.n	8002152 <NVIC_EncodePriority+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	f04f 32ff 	mov.w	r2, #4294967295
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43da      	mvns	r2, r3
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	401a      	ands	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002168:	f04f 31ff 	mov.w	r1, #4294967295
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	fa01 f303 	lsl.w	r3, r1, r3
 8002172:	43d9      	mvns	r1, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002178:	4313      	orrs	r3, r2
         );
}
 800217a:	4618      	mov	r0, r3
 800217c:	3724      	adds	r7, #36	; 0x24
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3b01      	subs	r3, #1
 8002194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002198:	d301      	bcc.n	800219e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800219a:	2301      	movs	r3, #1
 800219c:	e00f      	b.n	80021be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800219e:	4a0a      	ldr	r2, [pc, #40]	; (80021c8 <SysTick_Config+0x40>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021a6:	210f      	movs	r1, #15
 80021a8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ac:	f7ff ff8e 	bl	80020cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <SysTick_Config+0x40>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b6:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <SysTick_Config+0x40>)
 80021b8:	2207      	movs	r2, #7
 80021ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	e000e010 	.word	0xe000e010

080021cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff29 	bl	800202c <__NVIC_SetPriorityGrouping>
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b086      	sub	sp, #24
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	4603      	mov	r3, r0
 80021ea:	60b9      	str	r1, [r7, #8]
 80021ec:	607a      	str	r2, [r7, #4]
 80021ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021f4:	f7ff ff3e 	bl	8002074 <__NVIC_GetPriorityGrouping>
 80021f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	68b9      	ldr	r1, [r7, #8]
 80021fe:	6978      	ldr	r0, [r7, #20]
 8002200:	f7ff ff8e 	bl	8002120 <NVIC_EncodePriority>
 8002204:	4602      	mov	r2, r0
 8002206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800220a:	4611      	mov	r1, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff5d 	bl	80020cc <__NVIC_SetPriority>
}
 8002212:	bf00      	nop
 8002214:	3718      	adds	r7, #24
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff ff31 	bl	8002090 <__NVIC_EnableIRQ>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b082      	sub	sp, #8
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f7ff ffa2 	bl	8002188 <SysTick_Config>
 8002244:	4603      	mov	r3, r0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d004      	beq.n	800226c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2280      	movs	r2, #128	; 0x80
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e00c      	b.n	8002286 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2205      	movs	r2, #5
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0201 	bic.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
	...

08002294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e159      	b.n	8002564 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b0:	2201      	movs	r2, #1
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	4013      	ands	r3, r2
 80022c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	f040 8148 	bne.w	800255e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d00b      	beq.n	80022ee <HAL_GPIO_Init+0x5a>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022e2:	2b11      	cmp	r3, #17
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b12      	cmp	r3, #18
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	2203      	movs	r2, #3
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0xfc>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b12      	cmp	r3, #18
 800238e:	d123      	bne.n	80023d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	08da      	lsrs	r2, r3, #3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	3208      	adds	r2, #8
 8002398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	08da      	lsrs	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3208      	adds	r2, #8
 80023d2:	69b9      	ldr	r1, [r7, #24]
 80023d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	2203      	movs	r2, #3
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0203 	and.w	r2, r3, #3
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a2 	beq.w	800255e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	4b56      	ldr	r3, [pc, #344]	; (8002578 <HAL_GPIO_Init+0x2e4>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	4a55      	ldr	r2, [pc, #340]	; (8002578 <HAL_GPIO_Init+0x2e4>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002428:	6453      	str	r3, [r2, #68]	; 0x44
 800242a:	4b53      	ldr	r3, [pc, #332]	; (8002578 <HAL_GPIO_Init+0x2e4>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002436:	4a51      	ldr	r2, [pc, #324]	; (800257c <HAL_GPIO_Init+0x2e8>)
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	089b      	lsrs	r3, r3, #2
 800243c:	3302      	adds	r3, #2
 800243e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x2ec>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d019      	beq.n	8002496 <HAL_GPIO_Init+0x202>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a47      	ldr	r2, [pc, #284]	; (8002584 <HAL_GPIO_Init+0x2f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_GPIO_Init+0x1fe>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a46      	ldr	r2, [pc, #280]	; (8002588 <HAL_GPIO_Init+0x2f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d00d      	beq.n	800248e <HAL_GPIO_Init+0x1fa>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_GPIO_Init+0x2f8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d007      	beq.n	800248a <HAL_GPIO_Init+0x1f6>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a44      	ldr	r2, [pc, #272]	; (8002590 <HAL_GPIO_Init+0x2fc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d101      	bne.n	8002486 <HAL_GPIO_Init+0x1f2>
 8002482:	2304      	movs	r3, #4
 8002484:	e008      	b.n	8002498 <HAL_GPIO_Init+0x204>
 8002486:	2307      	movs	r3, #7
 8002488:	e006      	b.n	8002498 <HAL_GPIO_Init+0x204>
 800248a:	2303      	movs	r3, #3
 800248c:	e004      	b.n	8002498 <HAL_GPIO_Init+0x204>
 800248e:	2302      	movs	r3, #2
 8002490:	e002      	b.n	8002498 <HAL_GPIO_Init+0x204>
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_GPIO_Init+0x204>
 8002496:	2300      	movs	r3, #0
 8002498:	69fa      	ldr	r2, [r7, #28]
 800249a:	f002 0203 	and.w	r2, r2, #3
 800249e:	0092      	lsls	r2, r2, #2
 80024a0:	4093      	lsls	r3, r2
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024a8:	4934      	ldr	r1, [pc, #208]	; (800257c <HAL_GPIO_Init+0x2e8>)
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024b6:	4b37      	ldr	r3, [pc, #220]	; (8002594 <HAL_GPIO_Init+0x300>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024da:	4a2e      	ldr	r2, [pc, #184]	; (8002594 <HAL_GPIO_Init+0x300>)
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024e0:	4b2c      	ldr	r3, [pc, #176]	; (8002594 <HAL_GPIO_Init+0x300>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <HAL_GPIO_Init+0x300>)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <HAL_GPIO_Init+0x300>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	43db      	mvns	r3, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4013      	ands	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800252e:	4a19      	ldr	r2, [pc, #100]	; (8002594 <HAL_GPIO_Init+0x300>)
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002534:	4b17      	ldr	r3, [pc, #92]	; (8002594 <HAL_GPIO_Init+0x300>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002558:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_GPIO_Init+0x300>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3301      	adds	r3, #1
 8002562:	61fb      	str	r3, [r7, #28]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	2b0f      	cmp	r3, #15
 8002568:	f67f aea2 	bls.w	80022b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800256c:	bf00      	nop
 800256e:	3724      	adds	r7, #36	; 0x24
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	40023800 	.word	0x40023800
 800257c:	40013800 	.word	0x40013800
 8002580:	40020000 	.word	0x40020000
 8002584:	40020400 	.word	0x40020400
 8002588:	40020800 	.word	0x40020800
 800258c:	40020c00 	.word	0x40020c00
 8002590:	40021000 	.word	0x40021000
 8002594:	40013c00 	.word	0x40013c00

08002598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
 80025a4:	4613      	mov	r3, r2
 80025a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025a8:	787b      	ldrb	r3, [r7, #1]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ae:	887a      	ldrh	r2, [r7, #2]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025b4:	e003      	b.n	80025be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	041a      	lsls	r2, r3, #16
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	619a      	str	r2, [r3, #24]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr

080025ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
 80025d2:	460b      	mov	r3, r1
 80025d4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	695a      	ldr	r2, [r3, #20]
 80025da:	887b      	ldrh	r3, [r7, #2]
 80025dc:	401a      	ands	r2, r3
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d104      	bne.n	80025ee <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	041a      	lsls	r2, r3, #16
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80025ec:	e002      	b.n	80025f4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
}
 80025f4:	bf00      	nop
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e11f      	b.n	8002852 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7ff fa2e 	bl	8001a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	; 0x24
 8002630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002652:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002662:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002664:	f000 fd18 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8002668:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	4a7b      	ldr	r2, [pc, #492]	; (800285c <HAL_I2C_Init+0x25c>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d807      	bhi.n	8002684 <HAL_I2C_Init+0x84>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a7a      	ldr	r2, [pc, #488]	; (8002860 <HAL_I2C_Init+0x260>)
 8002678:	4293      	cmp	r3, r2
 800267a:	bf94      	ite	ls
 800267c:	2301      	movls	r3, #1
 800267e:	2300      	movhi	r3, #0
 8002680:	b2db      	uxtb	r3, r3
 8002682:	e006      	b.n	8002692 <HAL_I2C_Init+0x92>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4a77      	ldr	r2, [pc, #476]	; (8002864 <HAL_I2C_Init+0x264>)
 8002688:	4293      	cmp	r3, r2
 800268a:	bf94      	ite	ls
 800268c:	2301      	movls	r3, #1
 800268e:	2300      	movhi	r3, #0
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e0db      	b.n	8002852 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a72      	ldr	r2, [pc, #456]	; (8002868 <HAL_I2C_Init+0x268>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0c9b      	lsrs	r3, r3, #18
 80026a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	4a64      	ldr	r2, [pc, #400]	; (800285c <HAL_I2C_Init+0x25c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d802      	bhi.n	80026d4 <HAL_I2C_Init+0xd4>
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3301      	adds	r3, #1
 80026d2:	e009      	b.n	80026e8 <HAL_I2C_Init+0xe8>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	4a63      	ldr	r2, [pc, #396]	; (800286c <HAL_I2C_Init+0x26c>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	3301      	adds	r3, #1
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6812      	ldr	r2, [r2, #0]
 80026ec:	430b      	orrs	r3, r1
 80026ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80026fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4956      	ldr	r1, [pc, #344]	; (800285c <HAL_I2C_Init+0x25c>)
 8002704:	428b      	cmp	r3, r1
 8002706:	d80d      	bhi.n	8002724 <HAL_I2C_Init+0x124>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1e59      	subs	r1, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fbb1 f3f3 	udiv	r3, r1, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	2b04      	cmp	r3, #4
 800271e:	bf38      	it	cc
 8002720:	2304      	movcc	r3, #4
 8002722:	e04f      	b.n	80027c4 <HAL_I2C_Init+0x1c4>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d111      	bne.n	8002750 <HAL_I2C_Init+0x150>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	1e58      	subs	r0, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6859      	ldr	r1, [r3, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	005b      	lsls	r3, r3, #1
 8002738:	440b      	add	r3, r1
 800273a:	fbb0 f3f3 	udiv	r3, r0, r3
 800273e:	3301      	adds	r3, #1
 8002740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002744:	2b00      	cmp	r3, #0
 8002746:	bf0c      	ite	eq
 8002748:	2301      	moveq	r3, #1
 800274a:	2300      	movne	r3, #0
 800274c:	b2db      	uxtb	r3, r3
 800274e:	e012      	b.n	8002776 <HAL_I2C_Init+0x176>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1e58      	subs	r0, r3, #1
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	460b      	mov	r3, r1
 800275a:	009b      	lsls	r3, r3, #2
 800275c:	440b      	add	r3, r1
 800275e:	0099      	lsls	r1, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	fbb0 f3f3 	udiv	r3, r0, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276c:	2b00      	cmp	r3, #0
 800276e:	bf0c      	ite	eq
 8002770:	2301      	moveq	r3, #1
 8002772:	2300      	movne	r3, #0
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_I2C_Init+0x17e>
 800277a:	2301      	movs	r3, #1
 800277c:	e022      	b.n	80027c4 <HAL_I2C_Init+0x1c4>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d10e      	bne.n	80027a4 <HAL_I2C_Init+0x1a4>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1e58      	subs	r0, r3, #1
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	460b      	mov	r3, r1
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	440b      	add	r3, r1
 8002794:	fbb0 f3f3 	udiv	r3, r0, r3
 8002798:	3301      	adds	r3, #1
 800279a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800279e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027a2:	e00f      	b.n	80027c4 <HAL_I2C_Init+0x1c4>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1e58      	subs	r0, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	0099      	lsls	r1, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	6809      	ldr	r1, [r1, #0]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	6911      	ldr	r1, [r2, #16]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68d2      	ldr	r2, [r2, #12]
 80027fe:	4311      	orrs	r1, r2
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	430b      	orrs	r3, r1
 8002806:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	000186a0 	.word	0x000186a0
 8002860:	001e847f 	.word	0x001e847f
 8002864:	003d08ff 	.word	0x003d08ff
 8002868:	431bde83 	.word	0x431bde83
 800286c:	10624dd3 	.word	0x10624dd3

08002870 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e25b      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d075      	beq.n	800297a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800288e:	4ba3      	ldr	r3, [pc, #652]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b04      	cmp	r3, #4
 8002898:	d00c      	beq.n	80028b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289a:	4ba0      	ldr	r3, [pc, #640]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d112      	bne.n	80028cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028a6:	4b9d      	ldr	r3, [pc, #628]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b2:	d10b      	bne.n	80028cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b4:	4b99      	ldr	r3, [pc, #612]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d05b      	beq.n	8002978 <HAL_RCC_OscConfig+0x108>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d157      	bne.n	8002978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e236      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d4:	d106      	bne.n	80028e4 <HAL_RCC_OscConfig+0x74>
 80028d6:	4b91      	ldr	r3, [pc, #580]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a90      	ldr	r2, [pc, #576]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80028dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e01d      	b.n	8002920 <HAL_RCC_OscConfig+0xb0>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ec:	d10c      	bne.n	8002908 <HAL_RCC_OscConfig+0x98>
 80028ee:	4b8b      	ldr	r3, [pc, #556]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a8a      	ldr	r2, [pc, #552]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	4b88      	ldr	r3, [pc, #544]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a87      	ldr	r2, [pc, #540]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e00b      	b.n	8002920 <HAL_RCC_OscConfig+0xb0>
 8002908:	4b84      	ldr	r3, [pc, #528]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a83      	ldr	r2, [pc, #524]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 800290e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002912:	6013      	str	r3, [r2, #0]
 8002914:	4b81      	ldr	r3, [pc, #516]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a80      	ldr	r2, [pc, #512]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 800291a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d013      	beq.n	8002950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff fb52 	bl	8001fd0 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002930:	f7ff fb4e 	bl	8001fd0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b64      	cmp	r3, #100	; 0x64
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e1fb      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002942:	4b76      	ldr	r3, [pc, #472]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f0      	beq.n	8002930 <HAL_RCC_OscConfig+0xc0>
 800294e:	e014      	b.n	800297a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7ff fb3e 	bl	8001fd0 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002958:	f7ff fb3a 	bl	8001fd0 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b64      	cmp	r3, #100	; 0x64
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e1e7      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800296a:	4b6c      	ldr	r3, [pc, #432]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0xe8>
 8002976:	e000      	b.n	800297a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d063      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002992:	4b62      	ldr	r3, [pc, #392]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800299a:	2b08      	cmp	r3, #8
 800299c:	d11c      	bne.n	80029d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800299e:	4b5f      	ldr	r3, [pc, #380]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d116      	bne.n	80029d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029aa:	4b5c      	ldr	r3, [pc, #368]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d005      	beq.n	80029c2 <HAL_RCC_OscConfig+0x152>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d001      	beq.n	80029c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e1bb      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c2:	4b56      	ldr	r3, [pc, #344]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4952      	ldr	r1, [pc, #328]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029d6:	e03a      	b.n	8002a4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d020      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_RCC_OscConfig+0x2b0>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7ff faf3 	bl	8001fd0 <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ec:	e008      	b.n	8002a00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ee:	f7ff faef 	bl	8001fd0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e19c      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a00:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0f0      	beq.n	80029ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a0c:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	00db      	lsls	r3, r3, #3
 8002a1a:	4940      	ldr	r1, [pc, #256]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
 8002a20:	e015      	b.n	8002a4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_OscConfig+0x2b0>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff fad2 	bl	8001fd0 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a30:	f7ff face 	bl	8001fd0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e17b      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a42:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d030      	beq.n	8002abc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a62:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCC_OscConfig+0x2b4>)
 8002a64:	2201      	movs	r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a68:	f7ff fab2 	bl	8001fd0 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a70:	f7ff faae 	bl	8001fd0 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e15b      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0x200>
 8002a8e:	e015      	b.n	8002abc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a90:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x2b4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a96:	f7ff fa9b 	bl	8001fd0 <HAL_GetTick>
 8002a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9c:	e008      	b.n	8002ab0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a9e:	f7ff fa97 	bl	8001fd0 <HAL_GetTick>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	1ad3      	subs	r3, r2, r3
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e144      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	4b1a      	ldr	r3, [pc, #104]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1f0      	bne.n	8002a9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 80a0 	beq.w	8002c0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_RCC_OscConfig+0x2b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d121      	bne.n	8002b4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <HAL_RCC_OscConfig+0x2b8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <HAL_RCC_OscConfig+0x2b8>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7ff fa5d 	bl	8001fd0 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	e011      	b.n	8002b3e <HAL_RCC_OscConfig+0x2ce>
 8002b1a:	bf00      	nop
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	42470000 	.word	0x42470000
 8002b24:	42470e80 	.word	0x42470e80
 8002b28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2c:	f7ff fa50 	bl	8001fd0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e0fd      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b81      	ldr	r3, [pc, #516]	; (8002d44 <HAL_RCC_OscConfig+0x4d4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d106      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2f0>
 8002b52:	4b7d      	ldr	r3, [pc, #500]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	4a7c      	ldr	r2, [pc, #496]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b58:	f043 0301 	orr.w	r3, r3, #1
 8002b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b5e:	e01c      	b.n	8002b9a <HAL_RCC_OscConfig+0x32a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b05      	cmp	r3, #5
 8002b66:	d10c      	bne.n	8002b82 <HAL_RCC_OscConfig+0x312>
 8002b68:	4b77      	ldr	r3, [pc, #476]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6c:	4a76      	ldr	r2, [pc, #472]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b6e:	f043 0304 	orr.w	r3, r3, #4
 8002b72:	6713      	str	r3, [r2, #112]	; 0x70
 8002b74:	4b74      	ldr	r3, [pc, #464]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b78:	4a73      	ldr	r2, [pc, #460]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8002b80:	e00b      	b.n	8002b9a <HAL_RCC_OscConfig+0x32a>
 8002b82:	4b71      	ldr	r3, [pc, #452]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	4a70      	ldr	r2, [pc, #448]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b88:	f023 0301 	bic.w	r3, r3, #1
 8002b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b8e:	4b6e      	ldr	r3, [pc, #440]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	4a6d      	ldr	r2, [pc, #436]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002b94:	f023 0304 	bic.w	r3, r3, #4
 8002b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d015      	beq.n	8002bce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba2:	f7ff fa15 	bl	8001fd0 <HAL_GetTick>
 8002ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ba8:	e00a      	b.n	8002bc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7ff fa11 	bl	8001fd0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d901      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e0bc      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc0:	4b61      	ldr	r3, [pc, #388]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d0ee      	beq.n	8002baa <HAL_RCC_OscConfig+0x33a>
 8002bcc:	e014      	b.n	8002bf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bce:	f7ff f9ff 	bl	8001fd0 <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bd4:	e00a      	b.n	8002bec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7ff f9fb 	bl	8001fd0 <HAL_GetTick>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e0a6      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bec:	4b56      	ldr	r3, [pc, #344]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	f003 0302 	and.w	r3, r3, #2
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ee      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfe:	4b52      	ldr	r3, [pc, #328]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 8092 	beq.w	8002d38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c14:	4b4c      	ldr	r3, [pc, #304]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 030c 	and.w	r3, r3, #12
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d05c      	beq.n	8002cda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d141      	bne.n	8002cac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c28:	4b48      	ldr	r3, [pc, #288]	; (8002d4c <HAL_RCC_OscConfig+0x4dc>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c2e:	f7ff f9cf 	bl	8001fd0 <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c36:	f7ff f9cb 	bl	8001fd0 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e078      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69da      	ldr	r2, [r3, #28]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c62:	019b      	lsls	r3, r3, #6
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	085b      	lsrs	r3, r3, #1
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	431a      	orrs	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	061b      	lsls	r3, r3, #24
 8002c78:	4933      	ldr	r1, [pc, #204]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c7e:	4b33      	ldr	r3, [pc, #204]	; (8002d4c <HAL_RCC_OscConfig+0x4dc>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c84:	f7ff f9a4 	bl	8001fd0 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7ff f9a0 	bl	8001fd0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e04d      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9e:	4b2a      	ldr	r3, [pc, #168]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x41c>
 8002caa:	e045      	b.n	8002d38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cac:	4b27      	ldr	r3, [pc, #156]	; (8002d4c <HAL_RCC_OscConfig+0x4dc>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7ff f98d 	bl	8001fd0 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cba:	f7ff f989 	bl	8001fd0 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e036      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ccc:	4b1e      	ldr	r3, [pc, #120]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f0      	bne.n	8002cba <HAL_RCC_OscConfig+0x44a>
 8002cd8:	e02e      	b.n	8002d38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d101      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e029      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_RCC_OscConfig+0x4d8>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d11c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d115      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d0e:	4013      	ands	r3, r2
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d10d      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40007000 	.word	0x40007000
 8002d48:	40023800 	.word	0x40023800
 8002d4c:	42470060 	.word	0x42470060

08002d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e0cc      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d64:	4b68      	ldr	r3, [pc, #416]	; (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 030f 	and.w	r3, r3, #15
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d90c      	bls.n	8002d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d72:	4b65      	ldr	r3, [pc, #404]	; (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7a:	4b63      	ldr	r3, [pc, #396]	; (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e0b8      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d020      	beq.n	8002dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002da4:	4b59      	ldr	r3, [pc, #356]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dbc:	4b53      	ldr	r3, [pc, #332]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a52      	ldr	r2, [pc, #328]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dc8:	4b50      	ldr	r3, [pc, #320]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	494d      	ldr	r1, [pc, #308]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0301 	and.w	r3, r3, #1
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d044      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dee:	4b47      	ldr	r3, [pc, #284]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d119      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e07f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d003      	beq.n	8002e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e0a:	2b03      	cmp	r3, #3
 8002e0c:	d107      	bne.n	8002e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e06f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1e:	4b3b      	ldr	r3, [pc, #236]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e067      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e2e:	4b37      	ldr	r3, [pc, #220]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f023 0203 	bic.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4934      	ldr	r1, [pc, #208]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e40:	f7ff f8c6 	bl	8001fd0 <HAL_GetTick>
 8002e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7ff f8c2 	bl	8001fd0 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e04f      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	4b2b      	ldr	r3, [pc, #172]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 020c 	and.w	r2, r3, #12
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1eb      	bne.n	8002e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d20c      	bcs.n	8002e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b22      	ldr	r3, [pc, #136]	; (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 030f 	and.w	r3, r3, #15
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e032      	b.n	8002efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4916      	ldr	r1, [pc, #88]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d009      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ec2:	4b12      	ldr	r3, [pc, #72]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	490e      	ldr	r1, [pc, #56]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ed6:	f000 f821 	bl	8002f1c <HAL_RCC_GetSysClockFreq>
 8002eda:	4601      	mov	r1, r0
 8002edc:	4b0b      	ldr	r3, [pc, #44]	; (8002f0c <HAL_RCC_ClockConfig+0x1bc>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	4a0a      	ldr	r2, [pc, #40]	; (8002f10 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	5cd3      	ldrb	r3, [r2, r3]
 8002eea:	fa21 f303 	lsr.w	r3, r1, r3
 8002eee:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <HAL_RCC_ClockConfig+0x1c8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff f826 	bl	8001f48 <HAL_InitTick>

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40023c00 	.word	0x40023c00
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	080067dc 	.word	0x080067dc
 8002f14:	20000000 	.word	0x20000000
 8002f18:	20000004 	.word	0x20000004

08002f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f32:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d007      	beq.n	8002f4e <HAL_RCC_GetSysClockFreq+0x32>
 8002f3e:	2b08      	cmp	r3, #8
 8002f40:	d008      	beq.n	8002f54 <HAL_RCC_GetSysClockFreq+0x38>
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 808d 	bne.w	8003062 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002f4a:	60bb      	str	r3, [r7, #8]
       break;
 8002f4c:	e08c      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f4e:	4b4b      	ldr	r3, [pc, #300]	; (800307c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f50:	60bb      	str	r3, [r7, #8]
      break;
 8002f52:	e089      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f54:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f5e:	4b45      	ldr	r3, [pc, #276]	; (8003074 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d023      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f6a:	4b42      	ldr	r3, [pc, #264]	; (8003074 <HAL_RCC_GetSysClockFreq+0x158>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	099b      	lsrs	r3, r3, #6
 8002f70:	f04f 0400 	mov.w	r4, #0
 8002f74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f78:	f04f 0200 	mov.w	r2, #0
 8002f7c:	ea03 0501 	and.w	r5, r3, r1
 8002f80:	ea04 0602 	and.w	r6, r4, r2
 8002f84:	4a3d      	ldr	r2, [pc, #244]	; (800307c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f86:	fb02 f106 	mul.w	r1, r2, r6
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	fb02 f205 	mul.w	r2, r2, r5
 8002f90:	440a      	add	r2, r1
 8002f92:	493a      	ldr	r1, [pc, #232]	; (800307c <HAL_RCC_GetSysClockFreq+0x160>)
 8002f94:	fba5 0101 	umull	r0, r1, r5, r1
 8002f98:	1853      	adds	r3, r2, r1
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f04f 0400 	mov.w	r4, #0
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	4623      	mov	r3, r4
 8002fa6:	f7fd fe07 	bl	8000bb8 <__aeabi_uldivmod>
 8002faa:	4603      	mov	r3, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	e049      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb2:	4b30      	ldr	r3, [pc, #192]	; (8003074 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	f04f 0400 	mov.w	r4, #0
 8002fbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fc0:	f04f 0200 	mov.w	r2, #0
 8002fc4:	ea03 0501 	and.w	r5, r3, r1
 8002fc8:	ea04 0602 	and.w	r6, r4, r2
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4632      	mov	r2, r6
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	f04f 0400 	mov.w	r4, #0
 8002fd8:	0154      	lsls	r4, r2, #5
 8002fda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fde:	014b      	lsls	r3, r1, #5
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4622      	mov	r2, r4
 8002fe4:	1b49      	subs	r1, r1, r5
 8002fe6:	eb62 0206 	sbc.w	r2, r2, r6
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	f04f 0400 	mov.w	r4, #0
 8002ff2:	0194      	lsls	r4, r2, #6
 8002ff4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ff8:	018b      	lsls	r3, r1, #6
 8002ffa:	1a5b      	subs	r3, r3, r1
 8002ffc:	eb64 0402 	sbc.w	r4, r4, r2
 8003000:	f04f 0100 	mov.w	r1, #0
 8003004:	f04f 0200 	mov.w	r2, #0
 8003008:	00e2      	lsls	r2, r4, #3
 800300a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800300e:	00d9      	lsls	r1, r3, #3
 8003010:	460b      	mov	r3, r1
 8003012:	4614      	mov	r4, r2
 8003014:	195b      	adds	r3, r3, r5
 8003016:	eb44 0406 	adc.w	r4, r4, r6
 800301a:	f04f 0100 	mov.w	r1, #0
 800301e:	f04f 0200 	mov.w	r2, #0
 8003022:	02a2      	lsls	r2, r4, #10
 8003024:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003028:	0299      	lsls	r1, r3, #10
 800302a:	460b      	mov	r3, r1
 800302c:	4614      	mov	r4, r2
 800302e:	4618      	mov	r0, r3
 8003030:	4621      	mov	r1, r4
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f04f 0400 	mov.w	r4, #0
 8003038:	461a      	mov	r2, r3
 800303a:	4623      	mov	r3, r4
 800303c:	f7fd fdbc 	bl	8000bb8 <__aeabi_uldivmod>
 8003040:	4603      	mov	r3, r0
 8003042:	460c      	mov	r4, r1
 8003044:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_GetSysClockFreq+0x158>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	3301      	adds	r3, #1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	60bb      	str	r3, [r7, #8]
      break;
 8003060:	e002      	b.n	8003068 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003064:	60bb      	str	r3, [r7, #8]
      break;
 8003066:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003068:	68bb      	ldr	r3, [r7, #8]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	00f42400 	.word	0x00f42400
 800307c:	017d7840 	.word	0x017d7840

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000000 	.word	0x20000000

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800309c:	f7ff fff0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a0:	4601      	mov	r1, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4a03      	ldr	r2, [pc, #12]	; (80030bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	080067ec 	.word	0x080067ec

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030c4:	f7ff ffdc 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030c8:	4601      	mov	r1, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0b5b      	lsrs	r3, r3, #13
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4a03      	ldr	r2, [pc, #12]	; (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	080067ec 	.word	0x080067ec

080030e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e03f      	b.n	800317a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe fd02 	bl	8001b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800312a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fba1 	bl	8003874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b088      	sub	sp, #32
 8003186:	af02      	add	r7, sp, #8
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	4613      	mov	r3, r2
 8003190:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	f040 8083 	bne.w	80032aa <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <HAL_UART_Transmit+0x2e>
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d101      	bne.n	80031b4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e07b      	b.n	80032ac <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_UART_Transmit+0x40>
 80031be:	2302      	movs	r3, #2
 80031c0:	e074      	b.n	80032ac <HAL_UART_Transmit+0x12a>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2221      	movs	r2, #33	; 0x21
 80031d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80031d8:	f7fe fefa 	bl	8001fd0 <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	88fa      	ldrh	r2, [r7, #6]
 80031e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	88fa      	ldrh	r2, [r7, #6]
 80031e8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80031f2:	e042      	b.n	800327a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	d122      	bne.n	8003252 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	2200      	movs	r2, #0
 8003214:	2180      	movs	r1, #128	; 0x80
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f9c0 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e042      	b.n	80032ac <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003238:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d103      	bne.n	800324a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	3302      	adds	r3, #2
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	e017      	b.n	800327a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3301      	adds	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e013      	b.n	800327a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2200      	movs	r2, #0
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f99d 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e01f      	b.n	80032ac <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	1c5a      	adds	r2, r3, #1
 8003270:	60ba      	str	r2, [r7, #8]
 8003272:	781a      	ldrb	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800327e:	b29b      	uxth	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1b7      	bne.n	80031f4 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	9300      	str	r3, [sp, #0]
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	2200      	movs	r2, #0
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f984 	bl	800359c <UART_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e006      	b.n	80032ac <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2220      	movs	r2, #32
 80032a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e000      	b.n	80032ac <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	d140      	bne.n	8003350 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <HAL_UART_Receive_IT+0x26>
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e039      	b.n	8003352 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_UART_Receive_IT+0x38>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e032      	b.n	8003352 <HAL_UART_Receive_IT+0x9e>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	88fa      	ldrh	r2, [r7, #6]
 80032fe:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	88fa      	ldrh	r2, [r7, #6]
 8003304:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2222      	movs	r2, #34	; 0x22
 8003310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68da      	ldr	r2, [r3, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800332a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695a      	ldr	r2, [r3, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0220 	orr.w	r2, r2, #32
 800334a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	e000      	b.n	8003352 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003350:	2302      	movs	r3, #2
  }
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10d      	bne.n	80033b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_UART_IRQHandler+0x52>
 80033a0:	69bb      	ldr	r3, [r7, #24]
 80033a2:	f003 0320 	and.w	r3, r3, #32
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f9e0 	bl	8003770 <UART_Receive_IT>
      return;
 80033b0:	e0d1      	b.n	8003556 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80b0 	beq.w	800351a <HAL_UART_IRQHandler+0x1ba>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f003 0301 	and.w	r3, r3, #1
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d105      	bne.n	80033d0 <HAL_UART_IRQHandler+0x70>
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a5 	beq.w	800351a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_UART_IRQHandler+0x90>
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e8:	f043 0201 	orr.w	r2, r3, #1
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 0304 	and.w	r3, r3, #4
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00a      	beq.n	8003410 <HAL_UART_IRQHandler+0xb0>
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003408:	f043 0202 	orr.w	r2, r3, #2
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00a      	beq.n	8003430 <HAL_UART_IRQHandler+0xd0>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d005      	beq.n	8003430 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	f003 0308 	and.w	r3, r3, #8
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00f      	beq.n	800345a <HAL_UART_IRQHandler+0xfa>
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d104      	bne.n	800344e <HAL_UART_IRQHandler+0xee>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003452:	f043 0208 	orr.w	r2, r3, #8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800345e:	2b00      	cmp	r3, #0
 8003460:	d078      	beq.n	8003554 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d007      	beq.n	800347c <HAL_UART_IRQHandler+0x11c>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f003 0320 	and.w	r3, r3, #32
 8003472:	2b00      	cmp	r3, #0
 8003474:	d002      	beq.n	800347c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 f97a 	bl	8003770 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003486:	2b40      	cmp	r3, #64	; 0x40
 8003488:	bf0c      	ite	eq
 800348a:	2301      	moveq	r3, #1
 800348c:	2300      	movne	r3, #0
 800348e:	b2db      	uxtb	r3, r3
 8003490:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003496:	f003 0308 	and.w	r3, r3, #8
 800349a:	2b00      	cmp	r3, #0
 800349c:	d102      	bne.n	80034a4 <HAL_UART_IRQHandler+0x144>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d031      	beq.n	8003508 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8c3 	bl	8003630 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d123      	bne.n	8003500 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695a      	ldr	r2, [r3, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034c6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	4a21      	ldr	r2, [pc, #132]	; (800355c <HAL_UART_IRQHandler+0x1fc>)
 80034d6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fe feb6 	bl	800224e <HAL_DMA_Abort_IT>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d016      	beq.n	8003516 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034f2:	4610      	mov	r0, r2
 80034f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f6:	e00e      	b.n	8003516 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	f000 f845 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fe:	e00a      	b.n	8003516 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f841 	bl	8003588 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003506:	e006      	b.n	8003516 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003508:	6878      	ldr	r0, [r7, #4]
 800350a:	f000 f83d 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003514:	e01e      	b.n	8003554 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003516:	bf00      	nop
    return;
 8003518:	e01c      	b.n	8003554 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003520:	2b00      	cmp	r3, #0
 8003522:	d008      	beq.n	8003536 <HAL_UART_IRQHandler+0x1d6>
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 f8b0 	bl	8003694 <UART_Transmit_IT>
    return;
 8003534:	e00f      	b.n	8003556 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00a      	beq.n	8003556 <HAL_UART_IRQHandler+0x1f6>
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8f8 	bl	8003740 <UART_EndTransmit_IT>
    return;
 8003550:	bf00      	nop
 8003552:	e000      	b.n	8003556 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003554:	bf00      	nop
  }
}
 8003556:	3720      	adds	r7, #32
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}
 800355c:	0800366d 	.word	0x0800366d

08003560 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	603b      	str	r3, [r7, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035ac:	e02c      	b.n	8003608 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035b4:	d028      	beq.n	8003608 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035b6:	69bb      	ldr	r3, [r7, #24]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d007      	beq.n	80035cc <UART_WaitOnFlagUntilTimeout+0x30>
 80035bc:	f7fe fd08 	bl	8001fd0 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d21d      	bcs.n	8003608 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035da:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	695a      	ldr	r2, [r3, #20]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0201 	bic.w	r2, r2, #1
 80035ea:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e00f      	b.n	8003628 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	4013      	ands	r3, r2
 8003612:	68ba      	ldr	r2, [r7, #8]
 8003614:	429a      	cmp	r2, r3
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	79fb      	ldrb	r3, [r7, #7]
 8003622:	429a      	cmp	r2, r3
 8003624:	d0c3      	beq.n	80035ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003646:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003678:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f7ff ff7e 	bl	8003588 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	2b21      	cmp	r3, #33	; 0x21
 80036a6:	d144      	bne.n	8003732 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b0:	d11a      	bne.n	80036e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	461a      	mov	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d105      	bne.n	80036dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	1c9a      	adds	r2, r3, #2
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	621a      	str	r2, [r3, #32]
 80036da:	e00e      	b.n	80036fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	621a      	str	r2, [r3, #32]
 80036e6:	e008      	b.n	80036fa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	1c59      	adds	r1, r3, #1
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6211      	str	r1, [r2, #32]
 80036f2:	781a      	ldrb	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29b      	uxth	r3, r3
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4619      	mov	r1, r3
 8003708:	84d1      	strh	r1, [r2, #38]	; 0x26
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10f      	bne.n	800372e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800371c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68da      	ldr	r2, [r3, #12]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800372c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	e000      	b.n	8003734 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003732:	2302      	movs	r3, #2
  }
}
 8003734:	4618      	mov	r0, r3
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003756:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7ff fefd 	bl	8003560 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b22      	cmp	r3, #34	; 0x22
 8003782:	d171      	bne.n	8003868 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800378c:	d123      	bne.n	80037d6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003792:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10e      	bne.n	80037ba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	1c9a      	adds	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28
 80037b8:	e029      	b.n	800380e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	629a      	str	r2, [r3, #40]	; 0x28
 80037d4:	e01b      	b.n	800380e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10a      	bne.n	80037f4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6858      	ldr	r0, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	1c59      	adds	r1, r3, #1
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6291      	str	r1, [r2, #40]	; 0x28
 80037ee:	b2c2      	uxtb	r2, r0
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e00c      	b.n	800380e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003800:	1c58      	adds	r0, r3, #1
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	6288      	str	r0, [r1, #40]	; 0x28
 8003806:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800380a:	b2d2      	uxtb	r2, r2
 800380c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003812:	b29b      	uxth	r3, r3
 8003814:	3b01      	subs	r3, #1
 8003816:	b29b      	uxth	r3, r3
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	4619      	mov	r1, r3
 800381c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800381e:	2b00      	cmp	r3, #0
 8003820:	d120      	bne.n	8003864 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0220 	bic.w	r2, r2, #32
 8003830:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003840:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695a      	ldr	r2, [r3, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0201 	bic.w	r2, r2, #1
 8003850:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fe8a 	bl	8003574 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	e002      	b.n	800386a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	e000      	b.n	800386a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003868:	2302      	movs	r3, #2
  }
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	431a      	orrs	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80038b6:	f023 030c 	bic.w	r3, r3, #12
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	68f9      	ldr	r1, [r7, #12]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e2:	f040 818b 	bne.w	8003bfc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4ac1      	ldr	r2, [pc, #772]	; (8003bf0 <UART_SetConfig+0x37c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d005      	beq.n	80038fc <UART_SetConfig+0x88>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4abf      	ldr	r2, [pc, #764]	; (8003bf4 <UART_SetConfig+0x380>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	f040 80bd 	bne.w	8003a76 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038fc:	f7ff fbe0 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8003900:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	461d      	mov	r5, r3
 8003906:	f04f 0600 	mov.w	r6, #0
 800390a:	46a8      	mov	r8, r5
 800390c:	46b1      	mov	r9, r6
 800390e:	eb18 0308 	adds.w	r3, r8, r8
 8003912:	eb49 0409 	adc.w	r4, r9, r9
 8003916:	4698      	mov	r8, r3
 8003918:	46a1      	mov	r9, r4
 800391a:	eb18 0805 	adds.w	r8, r8, r5
 800391e:	eb49 0906 	adc.w	r9, r9, r6
 8003922:	f04f 0100 	mov.w	r1, #0
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800392e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003932:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003936:	4688      	mov	r8, r1
 8003938:	4691      	mov	r9, r2
 800393a:	eb18 0005 	adds.w	r0, r8, r5
 800393e:	eb49 0106 	adc.w	r1, r9, r6
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	461d      	mov	r5, r3
 8003948:	f04f 0600 	mov.w	r6, #0
 800394c:	196b      	adds	r3, r5, r5
 800394e:	eb46 0406 	adc.w	r4, r6, r6
 8003952:	461a      	mov	r2, r3
 8003954:	4623      	mov	r3, r4
 8003956:	f7fd f92f 	bl	8000bb8 <__aeabi_uldivmod>
 800395a:	4603      	mov	r3, r0
 800395c:	460c      	mov	r4, r1
 800395e:	461a      	mov	r2, r3
 8003960:	4ba5      	ldr	r3, [pc, #660]	; (8003bf8 <UART_SetConfig+0x384>)
 8003962:	fba3 2302 	umull	r2, r3, r3, r2
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	461d      	mov	r5, r3
 8003970:	f04f 0600 	mov.w	r6, #0
 8003974:	46a9      	mov	r9, r5
 8003976:	46b2      	mov	sl, r6
 8003978:	eb19 0309 	adds.w	r3, r9, r9
 800397c:	eb4a 040a 	adc.w	r4, sl, sl
 8003980:	4699      	mov	r9, r3
 8003982:	46a2      	mov	sl, r4
 8003984:	eb19 0905 	adds.w	r9, r9, r5
 8003988:	eb4a 0a06 	adc.w	sl, sl, r6
 800398c:	f04f 0100 	mov.w	r1, #0
 8003990:	f04f 0200 	mov.w	r2, #0
 8003994:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003998:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800399c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039a0:	4689      	mov	r9, r1
 80039a2:	4692      	mov	sl, r2
 80039a4:	eb19 0005 	adds.w	r0, r9, r5
 80039a8:	eb4a 0106 	adc.w	r1, sl, r6
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	461d      	mov	r5, r3
 80039b2:	f04f 0600 	mov.w	r6, #0
 80039b6:	196b      	adds	r3, r5, r5
 80039b8:	eb46 0406 	adc.w	r4, r6, r6
 80039bc:	461a      	mov	r2, r3
 80039be:	4623      	mov	r3, r4
 80039c0:	f7fd f8fa 	bl	8000bb8 <__aeabi_uldivmod>
 80039c4:	4603      	mov	r3, r0
 80039c6:	460c      	mov	r4, r1
 80039c8:	461a      	mov	r2, r3
 80039ca:	4b8b      	ldr	r3, [pc, #556]	; (8003bf8 <UART_SetConfig+0x384>)
 80039cc:	fba3 1302 	umull	r1, r3, r3, r2
 80039d0:	095b      	lsrs	r3, r3, #5
 80039d2:	2164      	movs	r1, #100	; 0x64
 80039d4:	fb01 f303 	mul.w	r3, r1, r3
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	3332      	adds	r3, #50	; 0x32
 80039de:	4a86      	ldr	r2, [pc, #536]	; (8003bf8 <UART_SetConfig+0x384>)
 80039e0:	fba2 2303 	umull	r2, r3, r2, r3
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039ec:	4498      	add	r8, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	461d      	mov	r5, r3
 80039f2:	f04f 0600 	mov.w	r6, #0
 80039f6:	46a9      	mov	r9, r5
 80039f8:	46b2      	mov	sl, r6
 80039fa:	eb19 0309 	adds.w	r3, r9, r9
 80039fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003a02:	4699      	mov	r9, r3
 8003a04:	46a2      	mov	sl, r4
 8003a06:	eb19 0905 	adds.w	r9, r9, r5
 8003a0a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a22:	4689      	mov	r9, r1
 8003a24:	4692      	mov	sl, r2
 8003a26:	eb19 0005 	adds.w	r0, r9, r5
 8003a2a:	eb4a 0106 	adc.w	r1, sl, r6
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	461d      	mov	r5, r3
 8003a34:	f04f 0600 	mov.w	r6, #0
 8003a38:	196b      	adds	r3, r5, r5
 8003a3a:	eb46 0406 	adc.w	r4, r6, r6
 8003a3e:	461a      	mov	r2, r3
 8003a40:	4623      	mov	r3, r4
 8003a42:	f7fd f8b9 	bl	8000bb8 <__aeabi_uldivmod>
 8003a46:	4603      	mov	r3, r0
 8003a48:	460c      	mov	r4, r1
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	4b6a      	ldr	r3, [pc, #424]	; (8003bf8 <UART_SetConfig+0x384>)
 8003a4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2164      	movs	r1, #100	; 0x64
 8003a56:	fb01 f303 	mul.w	r3, r1, r3
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	3332      	adds	r3, #50	; 0x32
 8003a60:	4a65      	ldr	r2, [pc, #404]	; (8003bf8 <UART_SetConfig+0x384>)
 8003a62:	fba2 2303 	umull	r2, r3, r2, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	f003 0207 	and.w	r2, r3, #7
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4442      	add	r2, r8
 8003a72:	609a      	str	r2, [r3, #8]
 8003a74:	e26f      	b.n	8003f56 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a76:	f7ff fb0f 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8003a7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	461d      	mov	r5, r3
 8003a80:	f04f 0600 	mov.w	r6, #0
 8003a84:	46a8      	mov	r8, r5
 8003a86:	46b1      	mov	r9, r6
 8003a88:	eb18 0308 	adds.w	r3, r8, r8
 8003a8c:	eb49 0409 	adc.w	r4, r9, r9
 8003a90:	4698      	mov	r8, r3
 8003a92:	46a1      	mov	r9, r4
 8003a94:	eb18 0805 	adds.w	r8, r8, r5
 8003a98:	eb49 0906 	adc.w	r9, r9, r6
 8003a9c:	f04f 0100 	mov.w	r1, #0
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003aa8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003aac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ab0:	4688      	mov	r8, r1
 8003ab2:	4691      	mov	r9, r2
 8003ab4:	eb18 0005 	adds.w	r0, r8, r5
 8003ab8:	eb49 0106 	adc.w	r1, r9, r6
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	461d      	mov	r5, r3
 8003ac2:	f04f 0600 	mov.w	r6, #0
 8003ac6:	196b      	adds	r3, r5, r5
 8003ac8:	eb46 0406 	adc.w	r4, r6, r6
 8003acc:	461a      	mov	r2, r3
 8003ace:	4623      	mov	r3, r4
 8003ad0:	f7fd f872 	bl	8000bb8 <__aeabi_uldivmod>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	460c      	mov	r4, r1
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b47      	ldr	r3, [pc, #284]	; (8003bf8 <UART_SetConfig+0x384>)
 8003adc:	fba3 2302 	umull	r2, r3, r3, r2
 8003ae0:	095b      	lsrs	r3, r3, #5
 8003ae2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	461d      	mov	r5, r3
 8003aea:	f04f 0600 	mov.w	r6, #0
 8003aee:	46a9      	mov	r9, r5
 8003af0:	46b2      	mov	sl, r6
 8003af2:	eb19 0309 	adds.w	r3, r9, r9
 8003af6:	eb4a 040a 	adc.w	r4, sl, sl
 8003afa:	4699      	mov	r9, r3
 8003afc:	46a2      	mov	sl, r4
 8003afe:	eb19 0905 	adds.w	r9, r9, r5
 8003b02:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b1a:	4689      	mov	r9, r1
 8003b1c:	4692      	mov	sl, r2
 8003b1e:	eb19 0005 	adds.w	r0, r9, r5
 8003b22:	eb4a 0106 	adc.w	r1, sl, r6
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	461d      	mov	r5, r3
 8003b2c:	f04f 0600 	mov.w	r6, #0
 8003b30:	196b      	adds	r3, r5, r5
 8003b32:	eb46 0406 	adc.w	r4, r6, r6
 8003b36:	461a      	mov	r2, r3
 8003b38:	4623      	mov	r3, r4
 8003b3a:	f7fd f83d 	bl	8000bb8 <__aeabi_uldivmod>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	460c      	mov	r4, r1
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b2c      	ldr	r3, [pc, #176]	; (8003bf8 <UART_SetConfig+0x384>)
 8003b46:	fba3 1302 	umull	r1, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2164      	movs	r1, #100	; 0x64
 8003b4e:	fb01 f303 	mul.w	r3, r1, r3
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	3332      	adds	r3, #50	; 0x32
 8003b58:	4a27      	ldr	r2, [pc, #156]	; (8003bf8 <UART_SetConfig+0x384>)
 8003b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b66:	4498      	add	r8, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	461d      	mov	r5, r3
 8003b6c:	f04f 0600 	mov.w	r6, #0
 8003b70:	46a9      	mov	r9, r5
 8003b72:	46b2      	mov	sl, r6
 8003b74:	eb19 0309 	adds.w	r3, r9, r9
 8003b78:	eb4a 040a 	adc.w	r4, sl, sl
 8003b7c:	4699      	mov	r9, r3
 8003b7e:	46a2      	mov	sl, r4
 8003b80:	eb19 0905 	adds.w	r9, r9, r5
 8003b84:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b9c:	4689      	mov	r9, r1
 8003b9e:	4692      	mov	sl, r2
 8003ba0:	eb19 0005 	adds.w	r0, r9, r5
 8003ba4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	461d      	mov	r5, r3
 8003bae:	f04f 0600 	mov.w	r6, #0
 8003bb2:	196b      	adds	r3, r5, r5
 8003bb4:	eb46 0406 	adc.w	r4, r6, r6
 8003bb8:	461a      	mov	r2, r3
 8003bba:	4623      	mov	r3, r4
 8003bbc:	f7fc fffc 	bl	8000bb8 <__aeabi_uldivmod>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <UART_SetConfig+0x384>)
 8003bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bcc:	095b      	lsrs	r3, r3, #5
 8003bce:	2164      	movs	r1, #100	; 0x64
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	3332      	adds	r3, #50	; 0x32
 8003bda:	4a07      	ldr	r2, [pc, #28]	; (8003bf8 <UART_SetConfig+0x384>)
 8003bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	f003 0207 	and.w	r2, r3, #7
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4442      	add	r2, r8
 8003bec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003bee:	e1b2      	b.n	8003f56 <UART_SetConfig+0x6e2>
 8003bf0:	40011000 	.word	0x40011000
 8003bf4:	40011400 	.word	0x40011400
 8003bf8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4ad7      	ldr	r2, [pc, #860]	; (8003f60 <UART_SetConfig+0x6ec>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d005      	beq.n	8003c12 <UART_SetConfig+0x39e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4ad6      	ldr	r2, [pc, #856]	; (8003f64 <UART_SetConfig+0x6f0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	f040 80d1 	bne.w	8003db4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c12:	f7ff fa55 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8003c16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	469a      	mov	sl, r3
 8003c1c:	f04f 0b00 	mov.w	fp, #0
 8003c20:	46d0      	mov	r8, sl
 8003c22:	46d9      	mov	r9, fp
 8003c24:	eb18 0308 	adds.w	r3, r8, r8
 8003c28:	eb49 0409 	adc.w	r4, r9, r9
 8003c2c:	4698      	mov	r8, r3
 8003c2e:	46a1      	mov	r9, r4
 8003c30:	eb18 080a 	adds.w	r8, r8, sl
 8003c34:	eb49 090b 	adc.w	r9, r9, fp
 8003c38:	f04f 0100 	mov.w	r1, #0
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c4c:	4688      	mov	r8, r1
 8003c4e:	4691      	mov	r9, r2
 8003c50:	eb1a 0508 	adds.w	r5, sl, r8
 8003c54:	eb4b 0609 	adc.w	r6, fp, r9
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	f04f 0400 	mov.w	r4, #0
 8003c6a:	0094      	lsls	r4, r2, #2
 8003c6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c70:	008b      	lsls	r3, r1, #2
 8003c72:	461a      	mov	r2, r3
 8003c74:	4623      	mov	r3, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	4631      	mov	r1, r6
 8003c7a:	f7fc ff9d 	bl	8000bb8 <__aeabi_uldivmod>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	460c      	mov	r4, r1
 8003c82:	461a      	mov	r2, r3
 8003c84:	4bb8      	ldr	r3, [pc, #736]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003c86:	fba3 2302 	umull	r2, r3, r3, r2
 8003c8a:	095b      	lsrs	r3, r3, #5
 8003c8c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	469b      	mov	fp, r3
 8003c94:	f04f 0c00 	mov.w	ip, #0
 8003c98:	46d9      	mov	r9, fp
 8003c9a:	46e2      	mov	sl, ip
 8003c9c:	eb19 0309 	adds.w	r3, r9, r9
 8003ca0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ca4:	4699      	mov	r9, r3
 8003ca6:	46a2      	mov	sl, r4
 8003ca8:	eb19 090b 	adds.w	r9, r9, fp
 8003cac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cb0:	f04f 0100 	mov.w	r1, #0
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cbc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cc0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cc4:	4689      	mov	r9, r1
 8003cc6:	4692      	mov	sl, r2
 8003cc8:	eb1b 0509 	adds.w	r5, fp, r9
 8003ccc:	eb4c 060a 	adc.w	r6, ip, sl
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	f04f 0300 	mov.w	r3, #0
 8003cde:	f04f 0400 	mov.w	r4, #0
 8003ce2:	0094      	lsls	r4, r2, #2
 8003ce4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ce8:	008b      	lsls	r3, r1, #2
 8003cea:	461a      	mov	r2, r3
 8003cec:	4623      	mov	r3, r4
 8003cee:	4628      	mov	r0, r5
 8003cf0:	4631      	mov	r1, r6
 8003cf2:	f7fc ff61 	bl	8000bb8 <__aeabi_uldivmod>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	460c      	mov	r4, r1
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b9a      	ldr	r3, [pc, #616]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003cfe:	fba3 1302 	umull	r1, r3, r3, r2
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2164      	movs	r1, #100	; 0x64
 8003d06:	fb01 f303 	mul.w	r3, r1, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	3332      	adds	r3, #50	; 0x32
 8003d10:	4a95      	ldr	r2, [pc, #596]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d1c:	4498      	add	r8, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	469b      	mov	fp, r3
 8003d22:	f04f 0c00 	mov.w	ip, #0
 8003d26:	46d9      	mov	r9, fp
 8003d28:	46e2      	mov	sl, ip
 8003d2a:	eb19 0309 	adds.w	r3, r9, r9
 8003d2e:	eb4a 040a 	adc.w	r4, sl, sl
 8003d32:	4699      	mov	r9, r3
 8003d34:	46a2      	mov	sl, r4
 8003d36:	eb19 090b 	adds.w	r9, r9, fp
 8003d3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d3e:	f04f 0100 	mov.w	r1, #0
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d52:	4689      	mov	r9, r1
 8003d54:	4692      	mov	sl, r2
 8003d56:	eb1b 0509 	adds.w	r5, fp, r9
 8003d5a:	eb4c 060a 	adc.w	r6, ip, sl
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	4619      	mov	r1, r3
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	f04f 0400 	mov.w	r4, #0
 8003d70:	0094      	lsls	r4, r2, #2
 8003d72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d76:	008b      	lsls	r3, r1, #2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	4631      	mov	r1, r6
 8003d80:	f7fc ff1a 	bl	8000bb8 <__aeabi_uldivmod>
 8003d84:	4603      	mov	r3, r0
 8003d86:	460c      	mov	r4, r1
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b77      	ldr	r3, [pc, #476]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	2164      	movs	r1, #100	; 0x64
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	3332      	adds	r3, #50	; 0x32
 8003d9e:	4a72      	ldr	r2, [pc, #456]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	f003 020f 	and.w	r2, r3, #15
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4442      	add	r2, r8
 8003db0:	609a      	str	r2, [r3, #8]
 8003db2:	e0d0      	b.n	8003f56 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003db4:	f7ff f970 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 8003db8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	469a      	mov	sl, r3
 8003dbe:	f04f 0b00 	mov.w	fp, #0
 8003dc2:	46d0      	mov	r8, sl
 8003dc4:	46d9      	mov	r9, fp
 8003dc6:	eb18 0308 	adds.w	r3, r8, r8
 8003dca:	eb49 0409 	adc.w	r4, r9, r9
 8003dce:	4698      	mov	r8, r3
 8003dd0:	46a1      	mov	r9, r4
 8003dd2:	eb18 080a 	adds.w	r8, r8, sl
 8003dd6:	eb49 090b 	adc.w	r9, r9, fp
 8003dda:	f04f 0100 	mov.w	r1, #0
 8003dde:	f04f 0200 	mov.w	r2, #0
 8003de2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003de6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dee:	4688      	mov	r8, r1
 8003df0:	4691      	mov	r9, r2
 8003df2:	eb1a 0508 	adds.w	r5, sl, r8
 8003df6:	eb4b 0609 	adc.w	r6, fp, r9
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	f04f 0400 	mov.w	r4, #0
 8003e0c:	0094      	lsls	r4, r2, #2
 8003e0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e12:	008b      	lsls	r3, r1, #2
 8003e14:	461a      	mov	r2, r3
 8003e16:	4623      	mov	r3, r4
 8003e18:	4628      	mov	r0, r5
 8003e1a:	4631      	mov	r1, r6
 8003e1c:	f7fc fecc 	bl	8000bb8 <__aeabi_uldivmod>
 8003e20:	4603      	mov	r3, r0
 8003e22:	460c      	mov	r4, r1
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003e28:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	469b      	mov	fp, r3
 8003e36:	f04f 0c00 	mov.w	ip, #0
 8003e3a:	46d9      	mov	r9, fp
 8003e3c:	46e2      	mov	sl, ip
 8003e3e:	eb19 0309 	adds.w	r3, r9, r9
 8003e42:	eb4a 040a 	adc.w	r4, sl, sl
 8003e46:	4699      	mov	r9, r3
 8003e48:	46a2      	mov	sl, r4
 8003e4a:	eb19 090b 	adds.w	r9, r9, fp
 8003e4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e52:	f04f 0100 	mov.w	r1, #0
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e66:	4689      	mov	r9, r1
 8003e68:	4692      	mov	sl, r2
 8003e6a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e6e:	eb4c 060a 	adc.w	r6, ip, sl
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	4619      	mov	r1, r3
 8003e78:	f04f 0200 	mov.w	r2, #0
 8003e7c:	f04f 0300 	mov.w	r3, #0
 8003e80:	f04f 0400 	mov.w	r4, #0
 8003e84:	0094      	lsls	r4, r2, #2
 8003e86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e8a:	008b      	lsls	r3, r1, #2
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	4623      	mov	r3, r4
 8003e90:	4628      	mov	r0, r5
 8003e92:	4631      	mov	r1, r6
 8003e94:	f7fc fe90 	bl	8000bb8 <__aeabi_uldivmod>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	460c      	mov	r4, r1
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b32      	ldr	r3, [pc, #200]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003ea0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	2164      	movs	r1, #100	; 0x64
 8003ea8:	fb01 f303 	mul.w	r3, r1, r3
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	3332      	adds	r3, #50	; 0x32
 8003eb2:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	095b      	lsrs	r3, r3, #5
 8003eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ebe:	4498      	add	r8, r3
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	469b      	mov	fp, r3
 8003ec4:	f04f 0c00 	mov.w	ip, #0
 8003ec8:	46d9      	mov	r9, fp
 8003eca:	46e2      	mov	sl, ip
 8003ecc:	eb19 0309 	adds.w	r3, r9, r9
 8003ed0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ed4:	4699      	mov	r9, r3
 8003ed6:	46a2      	mov	sl, r4
 8003ed8:	eb19 090b 	adds.w	r9, r9, fp
 8003edc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ee0:	f04f 0100 	mov.w	r1, #0
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ef0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ef4:	4689      	mov	r9, r1
 8003ef6:	4692      	mov	sl, r2
 8003ef8:	eb1b 0509 	adds.w	r5, fp, r9
 8003efc:	eb4c 060a 	adc.w	r6, ip, sl
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	4619      	mov	r1, r3
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	f04f 0400 	mov.w	r4, #0
 8003f12:	0094      	lsls	r4, r2, #2
 8003f14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f18:	008b      	lsls	r3, r1, #2
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	4623      	mov	r3, r4
 8003f1e:	4628      	mov	r0, r5
 8003f20:	4631      	mov	r1, r6
 8003f22:	f7fc fe49 	bl	8000bb8 <__aeabi_uldivmod>
 8003f26:	4603      	mov	r3, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b0e      	ldr	r3, [pc, #56]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	2164      	movs	r1, #100	; 0x64
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	3332      	adds	r3, #50	; 0x32
 8003f40:	4a09      	ldr	r2, [pc, #36]	; (8003f68 <UART_SetConfig+0x6f4>)
 8003f42:	fba2 2303 	umull	r2, r3, r2, r3
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	f003 020f 	and.w	r2, r3, #15
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4442      	add	r2, r8
 8003f52:	609a      	str	r2, [r3, #8]
}
 8003f54:	e7ff      	b.n	8003f56 <UART_SetConfig+0x6e2>
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f60:	40011000 	.word	0x40011000
 8003f64:	40011400 	.word	0x40011400
 8003f68:	51eb851f 	.word	0x51eb851f

08003f6c <__errno>:
 8003f6c:	4b01      	ldr	r3, [pc, #4]	; (8003f74 <__errno+0x8>)
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	2000000c 	.word	0x2000000c

08003f78 <__libc_init_array>:
 8003f78:	b570      	push	{r4, r5, r6, lr}
 8003f7a:	4e0d      	ldr	r6, [pc, #52]	; (8003fb0 <__libc_init_array+0x38>)
 8003f7c:	4c0d      	ldr	r4, [pc, #52]	; (8003fb4 <__libc_init_array+0x3c>)
 8003f7e:	1ba4      	subs	r4, r4, r6
 8003f80:	10a4      	asrs	r4, r4, #2
 8003f82:	2500      	movs	r5, #0
 8003f84:	42a5      	cmp	r5, r4
 8003f86:	d109      	bne.n	8003f9c <__libc_init_array+0x24>
 8003f88:	4e0b      	ldr	r6, [pc, #44]	; (8003fb8 <__libc_init_array+0x40>)
 8003f8a:	4c0c      	ldr	r4, [pc, #48]	; (8003fbc <__libc_init_array+0x44>)
 8003f8c:	f002 fbc6 	bl	800671c <_init>
 8003f90:	1ba4      	subs	r4, r4, r6
 8003f92:	10a4      	asrs	r4, r4, #2
 8003f94:	2500      	movs	r5, #0
 8003f96:	42a5      	cmp	r5, r4
 8003f98:	d105      	bne.n	8003fa6 <__libc_init_array+0x2e>
 8003f9a:	bd70      	pop	{r4, r5, r6, pc}
 8003f9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fa0:	4798      	blx	r3
 8003fa2:	3501      	adds	r5, #1
 8003fa4:	e7ee      	b.n	8003f84 <__libc_init_array+0xc>
 8003fa6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003faa:	4798      	blx	r3
 8003fac:	3501      	adds	r5, #1
 8003fae:	e7f2      	b.n	8003f96 <__libc_init_array+0x1e>
 8003fb0:	08006ac0 	.word	0x08006ac0
 8003fb4:	08006ac0 	.word	0x08006ac0
 8003fb8:	08006ac0 	.word	0x08006ac0
 8003fbc:	08006ac4 	.word	0x08006ac4

08003fc0 <memset>:
 8003fc0:	4402      	add	r2, r0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d100      	bne.n	8003fca <memset+0xa>
 8003fc8:	4770      	bx	lr
 8003fca:	f803 1b01 	strb.w	r1, [r3], #1
 8003fce:	e7f9      	b.n	8003fc4 <memset+0x4>

08003fd0 <__cvt>:
 8003fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd4:	ec55 4b10 	vmov	r4, r5, d0
 8003fd8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003fda:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003fde:	2d00      	cmp	r5, #0
 8003fe0:	460e      	mov	r6, r1
 8003fe2:	4691      	mov	r9, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	bfb8      	it	lt
 8003fe8:	4622      	movlt	r2, r4
 8003fea:	462b      	mov	r3, r5
 8003fec:	f027 0720 	bic.w	r7, r7, #32
 8003ff0:	bfbb      	ittet	lt
 8003ff2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003ff6:	461d      	movlt	r5, r3
 8003ff8:	2300      	movge	r3, #0
 8003ffa:	232d      	movlt	r3, #45	; 0x2d
 8003ffc:	bfb8      	it	lt
 8003ffe:	4614      	movlt	r4, r2
 8004000:	2f46      	cmp	r7, #70	; 0x46
 8004002:	700b      	strb	r3, [r1, #0]
 8004004:	d004      	beq.n	8004010 <__cvt+0x40>
 8004006:	2f45      	cmp	r7, #69	; 0x45
 8004008:	d100      	bne.n	800400c <__cvt+0x3c>
 800400a:	3601      	adds	r6, #1
 800400c:	2102      	movs	r1, #2
 800400e:	e000      	b.n	8004012 <__cvt+0x42>
 8004010:	2103      	movs	r1, #3
 8004012:	ab03      	add	r3, sp, #12
 8004014:	9301      	str	r3, [sp, #4]
 8004016:	ab02      	add	r3, sp, #8
 8004018:	9300      	str	r3, [sp, #0]
 800401a:	4632      	mov	r2, r6
 800401c:	4653      	mov	r3, sl
 800401e:	ec45 4b10 	vmov	d0, r4, r5
 8004022:	f000 fe15 	bl	8004c50 <_dtoa_r>
 8004026:	2f47      	cmp	r7, #71	; 0x47
 8004028:	4680      	mov	r8, r0
 800402a:	d102      	bne.n	8004032 <__cvt+0x62>
 800402c:	f019 0f01 	tst.w	r9, #1
 8004030:	d026      	beq.n	8004080 <__cvt+0xb0>
 8004032:	2f46      	cmp	r7, #70	; 0x46
 8004034:	eb08 0906 	add.w	r9, r8, r6
 8004038:	d111      	bne.n	800405e <__cvt+0x8e>
 800403a:	f898 3000 	ldrb.w	r3, [r8]
 800403e:	2b30      	cmp	r3, #48	; 0x30
 8004040:	d10a      	bne.n	8004058 <__cvt+0x88>
 8004042:	2200      	movs	r2, #0
 8004044:	2300      	movs	r3, #0
 8004046:	4620      	mov	r0, r4
 8004048:	4629      	mov	r1, r5
 800404a:	f7fc fd45 	bl	8000ad8 <__aeabi_dcmpeq>
 800404e:	b918      	cbnz	r0, 8004058 <__cvt+0x88>
 8004050:	f1c6 0601 	rsb	r6, r6, #1
 8004054:	f8ca 6000 	str.w	r6, [sl]
 8004058:	f8da 3000 	ldr.w	r3, [sl]
 800405c:	4499      	add	r9, r3
 800405e:	2200      	movs	r2, #0
 8004060:	2300      	movs	r3, #0
 8004062:	4620      	mov	r0, r4
 8004064:	4629      	mov	r1, r5
 8004066:	f7fc fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800406a:	b938      	cbnz	r0, 800407c <__cvt+0xac>
 800406c:	2230      	movs	r2, #48	; 0x30
 800406e:	9b03      	ldr	r3, [sp, #12]
 8004070:	454b      	cmp	r3, r9
 8004072:	d205      	bcs.n	8004080 <__cvt+0xb0>
 8004074:	1c59      	adds	r1, r3, #1
 8004076:	9103      	str	r1, [sp, #12]
 8004078:	701a      	strb	r2, [r3, #0]
 800407a:	e7f8      	b.n	800406e <__cvt+0x9e>
 800407c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004080:	9b03      	ldr	r3, [sp, #12]
 8004082:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004084:	eba3 0308 	sub.w	r3, r3, r8
 8004088:	4640      	mov	r0, r8
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	b004      	add	sp, #16
 800408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004092 <__exponent>:
 8004092:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004094:	2900      	cmp	r1, #0
 8004096:	4604      	mov	r4, r0
 8004098:	bfba      	itte	lt
 800409a:	4249      	neglt	r1, r1
 800409c:	232d      	movlt	r3, #45	; 0x2d
 800409e:	232b      	movge	r3, #43	; 0x2b
 80040a0:	2909      	cmp	r1, #9
 80040a2:	f804 2b02 	strb.w	r2, [r4], #2
 80040a6:	7043      	strb	r3, [r0, #1]
 80040a8:	dd20      	ble.n	80040ec <__exponent+0x5a>
 80040aa:	f10d 0307 	add.w	r3, sp, #7
 80040ae:	461f      	mov	r7, r3
 80040b0:	260a      	movs	r6, #10
 80040b2:	fb91 f5f6 	sdiv	r5, r1, r6
 80040b6:	fb06 1115 	mls	r1, r6, r5, r1
 80040ba:	3130      	adds	r1, #48	; 0x30
 80040bc:	2d09      	cmp	r5, #9
 80040be:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040c2:	f103 32ff 	add.w	r2, r3, #4294967295
 80040c6:	4629      	mov	r1, r5
 80040c8:	dc09      	bgt.n	80040de <__exponent+0x4c>
 80040ca:	3130      	adds	r1, #48	; 0x30
 80040cc:	3b02      	subs	r3, #2
 80040ce:	f802 1c01 	strb.w	r1, [r2, #-1]
 80040d2:	42bb      	cmp	r3, r7
 80040d4:	4622      	mov	r2, r4
 80040d6:	d304      	bcc.n	80040e2 <__exponent+0x50>
 80040d8:	1a10      	subs	r0, r2, r0
 80040da:	b003      	add	sp, #12
 80040dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040de:	4613      	mov	r3, r2
 80040e0:	e7e7      	b.n	80040b2 <__exponent+0x20>
 80040e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040e6:	f804 2b01 	strb.w	r2, [r4], #1
 80040ea:	e7f2      	b.n	80040d2 <__exponent+0x40>
 80040ec:	2330      	movs	r3, #48	; 0x30
 80040ee:	4419      	add	r1, r3
 80040f0:	7083      	strb	r3, [r0, #2]
 80040f2:	1d02      	adds	r2, r0, #4
 80040f4:	70c1      	strb	r1, [r0, #3]
 80040f6:	e7ef      	b.n	80040d8 <__exponent+0x46>

080040f8 <_printf_float>:
 80040f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fc:	b08d      	sub	sp, #52	; 0x34
 80040fe:	460c      	mov	r4, r1
 8004100:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004104:	4616      	mov	r6, r2
 8004106:	461f      	mov	r7, r3
 8004108:	4605      	mov	r5, r0
 800410a:	f001 fcd3 	bl	8005ab4 <_localeconv_r>
 800410e:	6803      	ldr	r3, [r0, #0]
 8004110:	9304      	str	r3, [sp, #16]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fc f864 	bl	80001e0 <strlen>
 8004118:	2300      	movs	r3, #0
 800411a:	930a      	str	r3, [sp, #40]	; 0x28
 800411c:	f8d8 3000 	ldr.w	r3, [r8]
 8004120:	9005      	str	r0, [sp, #20]
 8004122:	3307      	adds	r3, #7
 8004124:	f023 0307 	bic.w	r3, r3, #7
 8004128:	f103 0208 	add.w	r2, r3, #8
 800412c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004130:	f8d4 b000 	ldr.w	fp, [r4]
 8004134:	f8c8 2000 	str.w	r2, [r8]
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004140:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004144:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004148:	9307      	str	r3, [sp, #28]
 800414a:	f8cd 8018 	str.w	r8, [sp, #24]
 800414e:	f04f 32ff 	mov.w	r2, #4294967295
 8004152:	4ba7      	ldr	r3, [pc, #668]	; (80043f0 <_printf_float+0x2f8>)
 8004154:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004158:	f7fc fcf0 	bl	8000b3c <__aeabi_dcmpun>
 800415c:	bb70      	cbnz	r0, 80041bc <_printf_float+0xc4>
 800415e:	f04f 32ff 	mov.w	r2, #4294967295
 8004162:	4ba3      	ldr	r3, [pc, #652]	; (80043f0 <_printf_float+0x2f8>)
 8004164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004168:	f7fc fcca 	bl	8000b00 <__aeabi_dcmple>
 800416c:	bb30      	cbnz	r0, 80041bc <_printf_float+0xc4>
 800416e:	2200      	movs	r2, #0
 8004170:	2300      	movs	r3, #0
 8004172:	4640      	mov	r0, r8
 8004174:	4649      	mov	r1, r9
 8004176:	f7fc fcb9 	bl	8000aec <__aeabi_dcmplt>
 800417a:	b110      	cbz	r0, 8004182 <_printf_float+0x8a>
 800417c:	232d      	movs	r3, #45	; 0x2d
 800417e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004182:	4a9c      	ldr	r2, [pc, #624]	; (80043f4 <_printf_float+0x2fc>)
 8004184:	4b9c      	ldr	r3, [pc, #624]	; (80043f8 <_printf_float+0x300>)
 8004186:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800418a:	bf8c      	ite	hi
 800418c:	4690      	movhi	r8, r2
 800418e:	4698      	movls	r8, r3
 8004190:	2303      	movs	r3, #3
 8004192:	f02b 0204 	bic.w	r2, fp, #4
 8004196:	6123      	str	r3, [r4, #16]
 8004198:	6022      	str	r2, [r4, #0]
 800419a:	f04f 0900 	mov.w	r9, #0
 800419e:	9700      	str	r7, [sp, #0]
 80041a0:	4633      	mov	r3, r6
 80041a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80041a4:	4621      	mov	r1, r4
 80041a6:	4628      	mov	r0, r5
 80041a8:	f000 f9e6 	bl	8004578 <_printf_common>
 80041ac:	3001      	adds	r0, #1
 80041ae:	f040 808d 	bne.w	80042cc <_printf_float+0x1d4>
 80041b2:	f04f 30ff 	mov.w	r0, #4294967295
 80041b6:	b00d      	add	sp, #52	; 0x34
 80041b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041bc:	4642      	mov	r2, r8
 80041be:	464b      	mov	r3, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	4649      	mov	r1, r9
 80041c4:	f7fc fcba 	bl	8000b3c <__aeabi_dcmpun>
 80041c8:	b110      	cbz	r0, 80041d0 <_printf_float+0xd8>
 80041ca:	4a8c      	ldr	r2, [pc, #560]	; (80043fc <_printf_float+0x304>)
 80041cc:	4b8c      	ldr	r3, [pc, #560]	; (8004400 <_printf_float+0x308>)
 80041ce:	e7da      	b.n	8004186 <_printf_float+0x8e>
 80041d0:	6861      	ldr	r1, [r4, #4]
 80041d2:	1c4b      	adds	r3, r1, #1
 80041d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80041d8:	a80a      	add	r0, sp, #40	; 0x28
 80041da:	d13e      	bne.n	800425a <_printf_float+0x162>
 80041dc:	2306      	movs	r3, #6
 80041de:	6063      	str	r3, [r4, #4]
 80041e0:	2300      	movs	r3, #0
 80041e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80041e6:	ab09      	add	r3, sp, #36	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	ec49 8b10 	vmov	d0, r8, r9
 80041ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80041f2:	6022      	str	r2, [r4, #0]
 80041f4:	f8cd a004 	str.w	sl, [sp, #4]
 80041f8:	6861      	ldr	r1, [r4, #4]
 80041fa:	4628      	mov	r0, r5
 80041fc:	f7ff fee8 	bl	8003fd0 <__cvt>
 8004200:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8004204:	2b47      	cmp	r3, #71	; 0x47
 8004206:	4680      	mov	r8, r0
 8004208:	d109      	bne.n	800421e <_printf_float+0x126>
 800420a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800420c:	1cd8      	adds	r0, r3, #3
 800420e:	db02      	blt.n	8004216 <_printf_float+0x11e>
 8004210:	6862      	ldr	r2, [r4, #4]
 8004212:	4293      	cmp	r3, r2
 8004214:	dd47      	ble.n	80042a6 <_printf_float+0x1ae>
 8004216:	f1aa 0a02 	sub.w	sl, sl, #2
 800421a:	fa5f fa8a 	uxtb.w	sl, sl
 800421e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8004222:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004224:	d824      	bhi.n	8004270 <_printf_float+0x178>
 8004226:	3901      	subs	r1, #1
 8004228:	4652      	mov	r2, sl
 800422a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800422e:	9109      	str	r1, [sp, #36]	; 0x24
 8004230:	f7ff ff2f 	bl	8004092 <__exponent>
 8004234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004236:	1813      	adds	r3, r2, r0
 8004238:	2a01      	cmp	r2, #1
 800423a:	4681      	mov	r9, r0
 800423c:	6123      	str	r3, [r4, #16]
 800423e:	dc02      	bgt.n	8004246 <_printf_float+0x14e>
 8004240:	6822      	ldr	r2, [r4, #0]
 8004242:	07d1      	lsls	r1, r2, #31
 8004244:	d501      	bpl.n	800424a <_printf_float+0x152>
 8004246:	3301      	adds	r3, #1
 8004248:	6123      	str	r3, [r4, #16]
 800424a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800424e:	2b00      	cmp	r3, #0
 8004250:	d0a5      	beq.n	800419e <_printf_float+0xa6>
 8004252:	232d      	movs	r3, #45	; 0x2d
 8004254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004258:	e7a1      	b.n	800419e <_printf_float+0xa6>
 800425a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800425e:	f000 8177 	beq.w	8004550 <_printf_float+0x458>
 8004262:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004266:	d1bb      	bne.n	80041e0 <_printf_float+0xe8>
 8004268:	2900      	cmp	r1, #0
 800426a:	d1b9      	bne.n	80041e0 <_printf_float+0xe8>
 800426c:	2301      	movs	r3, #1
 800426e:	e7b6      	b.n	80041de <_printf_float+0xe6>
 8004270:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8004274:	d119      	bne.n	80042aa <_printf_float+0x1b2>
 8004276:	2900      	cmp	r1, #0
 8004278:	6863      	ldr	r3, [r4, #4]
 800427a:	dd0c      	ble.n	8004296 <_printf_float+0x19e>
 800427c:	6121      	str	r1, [r4, #16]
 800427e:	b913      	cbnz	r3, 8004286 <_printf_float+0x18e>
 8004280:	6822      	ldr	r2, [r4, #0]
 8004282:	07d2      	lsls	r2, r2, #31
 8004284:	d502      	bpl.n	800428c <_printf_float+0x194>
 8004286:	3301      	adds	r3, #1
 8004288:	440b      	add	r3, r1
 800428a:	6123      	str	r3, [r4, #16]
 800428c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800428e:	65a3      	str	r3, [r4, #88]	; 0x58
 8004290:	f04f 0900 	mov.w	r9, #0
 8004294:	e7d9      	b.n	800424a <_printf_float+0x152>
 8004296:	b913      	cbnz	r3, 800429e <_printf_float+0x1a6>
 8004298:	6822      	ldr	r2, [r4, #0]
 800429a:	07d0      	lsls	r0, r2, #31
 800429c:	d501      	bpl.n	80042a2 <_printf_float+0x1aa>
 800429e:	3302      	adds	r3, #2
 80042a0:	e7f3      	b.n	800428a <_printf_float+0x192>
 80042a2:	2301      	movs	r3, #1
 80042a4:	e7f1      	b.n	800428a <_printf_float+0x192>
 80042a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80042aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80042ae:	4293      	cmp	r3, r2
 80042b0:	db05      	blt.n	80042be <_printf_float+0x1c6>
 80042b2:	6822      	ldr	r2, [r4, #0]
 80042b4:	6123      	str	r3, [r4, #16]
 80042b6:	07d1      	lsls	r1, r2, #31
 80042b8:	d5e8      	bpl.n	800428c <_printf_float+0x194>
 80042ba:	3301      	adds	r3, #1
 80042bc:	e7e5      	b.n	800428a <_printf_float+0x192>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bfd4      	ite	le
 80042c2:	f1c3 0302 	rsble	r3, r3, #2
 80042c6:	2301      	movgt	r3, #1
 80042c8:	4413      	add	r3, r2
 80042ca:	e7de      	b.n	800428a <_printf_float+0x192>
 80042cc:	6823      	ldr	r3, [r4, #0]
 80042ce:	055a      	lsls	r2, r3, #21
 80042d0:	d407      	bmi.n	80042e2 <_printf_float+0x1ea>
 80042d2:	6923      	ldr	r3, [r4, #16]
 80042d4:	4642      	mov	r2, r8
 80042d6:	4631      	mov	r1, r6
 80042d8:	4628      	mov	r0, r5
 80042da:	47b8      	blx	r7
 80042dc:	3001      	adds	r0, #1
 80042de:	d12b      	bne.n	8004338 <_printf_float+0x240>
 80042e0:	e767      	b.n	80041b2 <_printf_float+0xba>
 80042e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80042e6:	f240 80dc 	bls.w	80044a2 <_printf_float+0x3aa>
 80042ea:	2200      	movs	r2, #0
 80042ec:	2300      	movs	r3, #0
 80042ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042f2:	f7fc fbf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d033      	beq.n	8004362 <_printf_float+0x26a>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4a41      	ldr	r2, [pc, #260]	; (8004404 <_printf_float+0x30c>)
 80042fe:	4631      	mov	r1, r6
 8004300:	4628      	mov	r0, r5
 8004302:	47b8      	blx	r7
 8004304:	3001      	adds	r0, #1
 8004306:	f43f af54 	beq.w	80041b2 <_printf_float+0xba>
 800430a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800430e:	429a      	cmp	r2, r3
 8004310:	db02      	blt.n	8004318 <_printf_float+0x220>
 8004312:	6823      	ldr	r3, [r4, #0]
 8004314:	07d8      	lsls	r0, r3, #31
 8004316:	d50f      	bpl.n	8004338 <_printf_float+0x240>
 8004318:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800431c:	4631      	mov	r1, r6
 800431e:	4628      	mov	r0, r5
 8004320:	47b8      	blx	r7
 8004322:	3001      	adds	r0, #1
 8004324:	f43f af45 	beq.w	80041b2 <_printf_float+0xba>
 8004328:	f04f 0800 	mov.w	r8, #0
 800432c:	f104 091a 	add.w	r9, r4, #26
 8004330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004332:	3b01      	subs	r3, #1
 8004334:	4543      	cmp	r3, r8
 8004336:	dc09      	bgt.n	800434c <_printf_float+0x254>
 8004338:	6823      	ldr	r3, [r4, #0]
 800433a:	079b      	lsls	r3, r3, #30
 800433c:	f100 8103 	bmi.w	8004546 <_printf_float+0x44e>
 8004340:	68e0      	ldr	r0, [r4, #12]
 8004342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004344:	4298      	cmp	r0, r3
 8004346:	bfb8      	it	lt
 8004348:	4618      	movlt	r0, r3
 800434a:	e734      	b.n	80041b6 <_printf_float+0xbe>
 800434c:	2301      	movs	r3, #1
 800434e:	464a      	mov	r2, r9
 8004350:	4631      	mov	r1, r6
 8004352:	4628      	mov	r0, r5
 8004354:	47b8      	blx	r7
 8004356:	3001      	adds	r0, #1
 8004358:	f43f af2b 	beq.w	80041b2 <_printf_float+0xba>
 800435c:	f108 0801 	add.w	r8, r8, #1
 8004360:	e7e6      	b.n	8004330 <_printf_float+0x238>
 8004362:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	dc2b      	bgt.n	80043c0 <_printf_float+0x2c8>
 8004368:	2301      	movs	r3, #1
 800436a:	4a26      	ldr	r2, [pc, #152]	; (8004404 <_printf_float+0x30c>)
 800436c:	4631      	mov	r1, r6
 800436e:	4628      	mov	r0, r5
 8004370:	47b8      	blx	r7
 8004372:	3001      	adds	r0, #1
 8004374:	f43f af1d 	beq.w	80041b2 <_printf_float+0xba>
 8004378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800437a:	b923      	cbnz	r3, 8004386 <_printf_float+0x28e>
 800437c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800437e:	b913      	cbnz	r3, 8004386 <_printf_float+0x28e>
 8004380:	6823      	ldr	r3, [r4, #0]
 8004382:	07d9      	lsls	r1, r3, #31
 8004384:	d5d8      	bpl.n	8004338 <_printf_float+0x240>
 8004386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800438a:	4631      	mov	r1, r6
 800438c:	4628      	mov	r0, r5
 800438e:	47b8      	blx	r7
 8004390:	3001      	adds	r0, #1
 8004392:	f43f af0e 	beq.w	80041b2 <_printf_float+0xba>
 8004396:	f04f 0900 	mov.w	r9, #0
 800439a:	f104 0a1a 	add.w	sl, r4, #26
 800439e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a0:	425b      	negs	r3, r3
 80043a2:	454b      	cmp	r3, r9
 80043a4:	dc01      	bgt.n	80043aa <_printf_float+0x2b2>
 80043a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043a8:	e794      	b.n	80042d4 <_printf_float+0x1dc>
 80043aa:	2301      	movs	r3, #1
 80043ac:	4652      	mov	r2, sl
 80043ae:	4631      	mov	r1, r6
 80043b0:	4628      	mov	r0, r5
 80043b2:	47b8      	blx	r7
 80043b4:	3001      	adds	r0, #1
 80043b6:	f43f aefc 	beq.w	80041b2 <_printf_float+0xba>
 80043ba:	f109 0901 	add.w	r9, r9, #1
 80043be:	e7ee      	b.n	800439e <_printf_float+0x2a6>
 80043c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043c4:	429a      	cmp	r2, r3
 80043c6:	bfa8      	it	ge
 80043c8:	461a      	movge	r2, r3
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	4691      	mov	r9, r2
 80043ce:	dd07      	ble.n	80043e0 <_printf_float+0x2e8>
 80043d0:	4613      	mov	r3, r2
 80043d2:	4631      	mov	r1, r6
 80043d4:	4642      	mov	r2, r8
 80043d6:	4628      	mov	r0, r5
 80043d8:	47b8      	blx	r7
 80043da:	3001      	adds	r0, #1
 80043dc:	f43f aee9 	beq.w	80041b2 <_printf_float+0xba>
 80043e0:	f104 031a 	add.w	r3, r4, #26
 80043e4:	f04f 0b00 	mov.w	fp, #0
 80043e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80043ec:	9306      	str	r3, [sp, #24]
 80043ee:	e015      	b.n	800441c <_printf_float+0x324>
 80043f0:	7fefffff 	.word	0x7fefffff
 80043f4:	080067fc 	.word	0x080067fc
 80043f8:	080067f8 	.word	0x080067f8
 80043fc:	08006804 	.word	0x08006804
 8004400:	08006800 	.word	0x08006800
 8004404:	08006808 	.word	0x08006808
 8004408:	2301      	movs	r3, #1
 800440a:	9a06      	ldr	r2, [sp, #24]
 800440c:	4631      	mov	r1, r6
 800440e:	4628      	mov	r0, r5
 8004410:	47b8      	blx	r7
 8004412:	3001      	adds	r0, #1
 8004414:	f43f aecd 	beq.w	80041b2 <_printf_float+0xba>
 8004418:	f10b 0b01 	add.w	fp, fp, #1
 800441c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004420:	ebaa 0309 	sub.w	r3, sl, r9
 8004424:	455b      	cmp	r3, fp
 8004426:	dcef      	bgt.n	8004408 <_printf_float+0x310>
 8004428:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800442c:	429a      	cmp	r2, r3
 800442e:	44d0      	add	r8, sl
 8004430:	db15      	blt.n	800445e <_printf_float+0x366>
 8004432:	6823      	ldr	r3, [r4, #0]
 8004434:	07da      	lsls	r2, r3, #31
 8004436:	d412      	bmi.n	800445e <_printf_float+0x366>
 8004438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800443a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800443c:	eba3 020a 	sub.w	r2, r3, sl
 8004440:	eba3 0a01 	sub.w	sl, r3, r1
 8004444:	4592      	cmp	sl, r2
 8004446:	bfa8      	it	ge
 8004448:	4692      	movge	sl, r2
 800444a:	f1ba 0f00 	cmp.w	sl, #0
 800444e:	dc0e      	bgt.n	800446e <_printf_float+0x376>
 8004450:	f04f 0800 	mov.w	r8, #0
 8004454:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004458:	f104 091a 	add.w	r9, r4, #26
 800445c:	e019      	b.n	8004492 <_printf_float+0x39a>
 800445e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004462:	4631      	mov	r1, r6
 8004464:	4628      	mov	r0, r5
 8004466:	47b8      	blx	r7
 8004468:	3001      	adds	r0, #1
 800446a:	d1e5      	bne.n	8004438 <_printf_float+0x340>
 800446c:	e6a1      	b.n	80041b2 <_printf_float+0xba>
 800446e:	4653      	mov	r3, sl
 8004470:	4642      	mov	r2, r8
 8004472:	4631      	mov	r1, r6
 8004474:	4628      	mov	r0, r5
 8004476:	47b8      	blx	r7
 8004478:	3001      	adds	r0, #1
 800447a:	d1e9      	bne.n	8004450 <_printf_float+0x358>
 800447c:	e699      	b.n	80041b2 <_printf_float+0xba>
 800447e:	2301      	movs	r3, #1
 8004480:	464a      	mov	r2, r9
 8004482:	4631      	mov	r1, r6
 8004484:	4628      	mov	r0, r5
 8004486:	47b8      	blx	r7
 8004488:	3001      	adds	r0, #1
 800448a:	f43f ae92 	beq.w	80041b2 <_printf_float+0xba>
 800448e:	f108 0801 	add.w	r8, r8, #1
 8004492:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	eba3 030a 	sub.w	r3, r3, sl
 800449c:	4543      	cmp	r3, r8
 800449e:	dcee      	bgt.n	800447e <_printf_float+0x386>
 80044a0:	e74a      	b.n	8004338 <_printf_float+0x240>
 80044a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044a4:	2a01      	cmp	r2, #1
 80044a6:	dc01      	bgt.n	80044ac <_printf_float+0x3b4>
 80044a8:	07db      	lsls	r3, r3, #31
 80044aa:	d53a      	bpl.n	8004522 <_printf_float+0x42a>
 80044ac:	2301      	movs	r3, #1
 80044ae:	4642      	mov	r2, r8
 80044b0:	4631      	mov	r1, r6
 80044b2:	4628      	mov	r0, r5
 80044b4:	47b8      	blx	r7
 80044b6:	3001      	adds	r0, #1
 80044b8:	f43f ae7b 	beq.w	80041b2 <_printf_float+0xba>
 80044bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044c0:	4631      	mov	r1, r6
 80044c2:	4628      	mov	r0, r5
 80044c4:	47b8      	blx	r7
 80044c6:	3001      	adds	r0, #1
 80044c8:	f108 0801 	add.w	r8, r8, #1
 80044cc:	f43f ae71 	beq.w	80041b2 <_printf_float+0xba>
 80044d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044d2:	2200      	movs	r2, #0
 80044d4:	f103 3aff 	add.w	sl, r3, #4294967295
 80044d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044dc:	2300      	movs	r3, #0
 80044de:	f7fc fafb 	bl	8000ad8 <__aeabi_dcmpeq>
 80044e2:	b9c8      	cbnz	r0, 8004518 <_printf_float+0x420>
 80044e4:	4653      	mov	r3, sl
 80044e6:	4642      	mov	r2, r8
 80044e8:	4631      	mov	r1, r6
 80044ea:	4628      	mov	r0, r5
 80044ec:	47b8      	blx	r7
 80044ee:	3001      	adds	r0, #1
 80044f0:	d10e      	bne.n	8004510 <_printf_float+0x418>
 80044f2:	e65e      	b.n	80041b2 <_printf_float+0xba>
 80044f4:	2301      	movs	r3, #1
 80044f6:	4652      	mov	r2, sl
 80044f8:	4631      	mov	r1, r6
 80044fa:	4628      	mov	r0, r5
 80044fc:	47b8      	blx	r7
 80044fe:	3001      	adds	r0, #1
 8004500:	f43f ae57 	beq.w	80041b2 <_printf_float+0xba>
 8004504:	f108 0801 	add.w	r8, r8, #1
 8004508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800450a:	3b01      	subs	r3, #1
 800450c:	4543      	cmp	r3, r8
 800450e:	dcf1      	bgt.n	80044f4 <_printf_float+0x3fc>
 8004510:	464b      	mov	r3, r9
 8004512:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004516:	e6de      	b.n	80042d6 <_printf_float+0x1de>
 8004518:	f04f 0800 	mov.w	r8, #0
 800451c:	f104 0a1a 	add.w	sl, r4, #26
 8004520:	e7f2      	b.n	8004508 <_printf_float+0x410>
 8004522:	2301      	movs	r3, #1
 8004524:	e7df      	b.n	80044e6 <_printf_float+0x3ee>
 8004526:	2301      	movs	r3, #1
 8004528:	464a      	mov	r2, r9
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	f43f ae3e 	beq.w	80041b2 <_printf_float+0xba>
 8004536:	f108 0801 	add.w	r8, r8, #1
 800453a:	68e3      	ldr	r3, [r4, #12]
 800453c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	4543      	cmp	r3, r8
 8004542:	dcf0      	bgt.n	8004526 <_printf_float+0x42e>
 8004544:	e6fc      	b.n	8004340 <_printf_float+0x248>
 8004546:	f04f 0800 	mov.w	r8, #0
 800454a:	f104 0919 	add.w	r9, r4, #25
 800454e:	e7f4      	b.n	800453a <_printf_float+0x442>
 8004550:	2900      	cmp	r1, #0
 8004552:	f43f ae8b 	beq.w	800426c <_printf_float+0x174>
 8004556:	2300      	movs	r3, #0
 8004558:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800455c:	ab09      	add	r3, sp, #36	; 0x24
 800455e:	9300      	str	r3, [sp, #0]
 8004560:	ec49 8b10 	vmov	d0, r8, r9
 8004564:	6022      	str	r2, [r4, #0]
 8004566:	f8cd a004 	str.w	sl, [sp, #4]
 800456a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800456e:	4628      	mov	r0, r5
 8004570:	f7ff fd2e 	bl	8003fd0 <__cvt>
 8004574:	4680      	mov	r8, r0
 8004576:	e648      	b.n	800420a <_printf_float+0x112>

08004578 <_printf_common>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	4691      	mov	r9, r2
 800457e:	461f      	mov	r7, r3
 8004580:	688a      	ldr	r2, [r1, #8]
 8004582:	690b      	ldr	r3, [r1, #16]
 8004584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004588:	4293      	cmp	r3, r2
 800458a:	bfb8      	it	lt
 800458c:	4613      	movlt	r3, r2
 800458e:	f8c9 3000 	str.w	r3, [r9]
 8004592:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004596:	4606      	mov	r6, r0
 8004598:	460c      	mov	r4, r1
 800459a:	b112      	cbz	r2, 80045a2 <_printf_common+0x2a>
 800459c:	3301      	adds	r3, #1
 800459e:	f8c9 3000 	str.w	r3, [r9]
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	0699      	lsls	r1, r3, #26
 80045a6:	bf42      	ittt	mi
 80045a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045ac:	3302      	addmi	r3, #2
 80045ae:	f8c9 3000 	strmi.w	r3, [r9]
 80045b2:	6825      	ldr	r5, [r4, #0]
 80045b4:	f015 0506 	ands.w	r5, r5, #6
 80045b8:	d107      	bne.n	80045ca <_printf_common+0x52>
 80045ba:	f104 0a19 	add.w	sl, r4, #25
 80045be:	68e3      	ldr	r3, [r4, #12]
 80045c0:	f8d9 2000 	ldr.w	r2, [r9]
 80045c4:	1a9b      	subs	r3, r3, r2
 80045c6:	42ab      	cmp	r3, r5
 80045c8:	dc28      	bgt.n	800461c <_printf_common+0xa4>
 80045ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045ce:	6822      	ldr	r2, [r4, #0]
 80045d0:	3300      	adds	r3, #0
 80045d2:	bf18      	it	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	0692      	lsls	r2, r2, #26
 80045d8:	d42d      	bmi.n	8004636 <_printf_common+0xbe>
 80045da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045de:	4639      	mov	r1, r7
 80045e0:	4630      	mov	r0, r6
 80045e2:	47c0      	blx	r8
 80045e4:	3001      	adds	r0, #1
 80045e6:	d020      	beq.n	800462a <_printf_common+0xb2>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	68e5      	ldr	r5, [r4, #12]
 80045ec:	f8d9 2000 	ldr.w	r2, [r9]
 80045f0:	f003 0306 	and.w	r3, r3, #6
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	bf08      	it	eq
 80045f8:	1aad      	subeq	r5, r5, r2
 80045fa:	68a3      	ldr	r3, [r4, #8]
 80045fc:	6922      	ldr	r2, [r4, #16]
 80045fe:	bf0c      	ite	eq
 8004600:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004604:	2500      	movne	r5, #0
 8004606:	4293      	cmp	r3, r2
 8004608:	bfc4      	itt	gt
 800460a:	1a9b      	subgt	r3, r3, r2
 800460c:	18ed      	addgt	r5, r5, r3
 800460e:	f04f 0900 	mov.w	r9, #0
 8004612:	341a      	adds	r4, #26
 8004614:	454d      	cmp	r5, r9
 8004616:	d11a      	bne.n	800464e <_printf_common+0xd6>
 8004618:	2000      	movs	r0, #0
 800461a:	e008      	b.n	800462e <_printf_common+0xb6>
 800461c:	2301      	movs	r3, #1
 800461e:	4652      	mov	r2, sl
 8004620:	4639      	mov	r1, r7
 8004622:	4630      	mov	r0, r6
 8004624:	47c0      	blx	r8
 8004626:	3001      	adds	r0, #1
 8004628:	d103      	bne.n	8004632 <_printf_common+0xba>
 800462a:	f04f 30ff 	mov.w	r0, #4294967295
 800462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004632:	3501      	adds	r5, #1
 8004634:	e7c3      	b.n	80045be <_printf_common+0x46>
 8004636:	18e1      	adds	r1, r4, r3
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	2030      	movs	r0, #48	; 0x30
 800463c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004640:	4422      	add	r2, r4
 8004642:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004646:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800464a:	3302      	adds	r3, #2
 800464c:	e7c5      	b.n	80045da <_printf_common+0x62>
 800464e:	2301      	movs	r3, #1
 8004650:	4622      	mov	r2, r4
 8004652:	4639      	mov	r1, r7
 8004654:	4630      	mov	r0, r6
 8004656:	47c0      	blx	r8
 8004658:	3001      	adds	r0, #1
 800465a:	d0e6      	beq.n	800462a <_printf_common+0xb2>
 800465c:	f109 0901 	add.w	r9, r9, #1
 8004660:	e7d8      	b.n	8004614 <_printf_common+0x9c>
	...

08004664 <_printf_i>:
 8004664:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004668:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800466c:	460c      	mov	r4, r1
 800466e:	7e09      	ldrb	r1, [r1, #24]
 8004670:	b085      	sub	sp, #20
 8004672:	296e      	cmp	r1, #110	; 0x6e
 8004674:	4617      	mov	r7, r2
 8004676:	4606      	mov	r6, r0
 8004678:	4698      	mov	r8, r3
 800467a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800467c:	f000 80b3 	beq.w	80047e6 <_printf_i+0x182>
 8004680:	d822      	bhi.n	80046c8 <_printf_i+0x64>
 8004682:	2963      	cmp	r1, #99	; 0x63
 8004684:	d036      	beq.n	80046f4 <_printf_i+0x90>
 8004686:	d80a      	bhi.n	800469e <_printf_i+0x3a>
 8004688:	2900      	cmp	r1, #0
 800468a:	f000 80b9 	beq.w	8004800 <_printf_i+0x19c>
 800468e:	2958      	cmp	r1, #88	; 0x58
 8004690:	f000 8083 	beq.w	800479a <_printf_i+0x136>
 8004694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004698:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800469c:	e032      	b.n	8004704 <_printf_i+0xa0>
 800469e:	2964      	cmp	r1, #100	; 0x64
 80046a0:	d001      	beq.n	80046a6 <_printf_i+0x42>
 80046a2:	2969      	cmp	r1, #105	; 0x69
 80046a4:	d1f6      	bne.n	8004694 <_printf_i+0x30>
 80046a6:	6820      	ldr	r0, [r4, #0]
 80046a8:	6813      	ldr	r3, [r2, #0]
 80046aa:	0605      	lsls	r5, r0, #24
 80046ac:	f103 0104 	add.w	r1, r3, #4
 80046b0:	d52a      	bpl.n	8004708 <_printf_i+0xa4>
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	6011      	str	r1, [r2, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	da03      	bge.n	80046c2 <_printf_i+0x5e>
 80046ba:	222d      	movs	r2, #45	; 0x2d
 80046bc:	425b      	negs	r3, r3
 80046be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046c2:	486f      	ldr	r0, [pc, #444]	; (8004880 <_printf_i+0x21c>)
 80046c4:	220a      	movs	r2, #10
 80046c6:	e039      	b.n	800473c <_printf_i+0xd8>
 80046c8:	2973      	cmp	r1, #115	; 0x73
 80046ca:	f000 809d 	beq.w	8004808 <_printf_i+0x1a4>
 80046ce:	d808      	bhi.n	80046e2 <_printf_i+0x7e>
 80046d0:	296f      	cmp	r1, #111	; 0x6f
 80046d2:	d020      	beq.n	8004716 <_printf_i+0xb2>
 80046d4:	2970      	cmp	r1, #112	; 0x70
 80046d6:	d1dd      	bne.n	8004694 <_printf_i+0x30>
 80046d8:	6823      	ldr	r3, [r4, #0]
 80046da:	f043 0320 	orr.w	r3, r3, #32
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	e003      	b.n	80046ea <_printf_i+0x86>
 80046e2:	2975      	cmp	r1, #117	; 0x75
 80046e4:	d017      	beq.n	8004716 <_printf_i+0xb2>
 80046e6:	2978      	cmp	r1, #120	; 0x78
 80046e8:	d1d4      	bne.n	8004694 <_printf_i+0x30>
 80046ea:	2378      	movs	r3, #120	; 0x78
 80046ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046f0:	4864      	ldr	r0, [pc, #400]	; (8004884 <_printf_i+0x220>)
 80046f2:	e055      	b.n	80047a0 <_printf_i+0x13c>
 80046f4:	6813      	ldr	r3, [r2, #0]
 80046f6:	1d19      	adds	r1, r3, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	6011      	str	r1, [r2, #0]
 80046fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004700:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004704:	2301      	movs	r3, #1
 8004706:	e08c      	b.n	8004822 <_printf_i+0x1be>
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6011      	str	r1, [r2, #0]
 800470c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004710:	bf18      	it	ne
 8004712:	b21b      	sxthne	r3, r3
 8004714:	e7cf      	b.n	80046b6 <_printf_i+0x52>
 8004716:	6813      	ldr	r3, [r2, #0]
 8004718:	6825      	ldr	r5, [r4, #0]
 800471a:	1d18      	adds	r0, r3, #4
 800471c:	6010      	str	r0, [r2, #0]
 800471e:	0628      	lsls	r0, r5, #24
 8004720:	d501      	bpl.n	8004726 <_printf_i+0xc2>
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	e002      	b.n	800472c <_printf_i+0xc8>
 8004726:	0668      	lsls	r0, r5, #25
 8004728:	d5fb      	bpl.n	8004722 <_printf_i+0xbe>
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	4854      	ldr	r0, [pc, #336]	; (8004880 <_printf_i+0x21c>)
 800472e:	296f      	cmp	r1, #111	; 0x6f
 8004730:	bf14      	ite	ne
 8004732:	220a      	movne	r2, #10
 8004734:	2208      	moveq	r2, #8
 8004736:	2100      	movs	r1, #0
 8004738:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800473c:	6865      	ldr	r5, [r4, #4]
 800473e:	60a5      	str	r5, [r4, #8]
 8004740:	2d00      	cmp	r5, #0
 8004742:	f2c0 8095 	blt.w	8004870 <_printf_i+0x20c>
 8004746:	6821      	ldr	r1, [r4, #0]
 8004748:	f021 0104 	bic.w	r1, r1, #4
 800474c:	6021      	str	r1, [r4, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d13d      	bne.n	80047ce <_printf_i+0x16a>
 8004752:	2d00      	cmp	r5, #0
 8004754:	f040 808e 	bne.w	8004874 <_printf_i+0x210>
 8004758:	4665      	mov	r5, ip
 800475a:	2a08      	cmp	r2, #8
 800475c:	d10b      	bne.n	8004776 <_printf_i+0x112>
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	07db      	lsls	r3, r3, #31
 8004762:	d508      	bpl.n	8004776 <_printf_i+0x112>
 8004764:	6923      	ldr	r3, [r4, #16]
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	bfde      	ittt	le
 800476c:	2330      	movle	r3, #48	; 0x30
 800476e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004772:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004776:	ebac 0305 	sub.w	r3, ip, r5
 800477a:	6123      	str	r3, [r4, #16]
 800477c:	f8cd 8000 	str.w	r8, [sp]
 8004780:	463b      	mov	r3, r7
 8004782:	aa03      	add	r2, sp, #12
 8004784:	4621      	mov	r1, r4
 8004786:	4630      	mov	r0, r6
 8004788:	f7ff fef6 	bl	8004578 <_printf_common>
 800478c:	3001      	adds	r0, #1
 800478e:	d14d      	bne.n	800482c <_printf_i+0x1c8>
 8004790:	f04f 30ff 	mov.w	r0, #4294967295
 8004794:	b005      	add	sp, #20
 8004796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800479a:	4839      	ldr	r0, [pc, #228]	; (8004880 <_printf_i+0x21c>)
 800479c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80047a0:	6813      	ldr	r3, [r2, #0]
 80047a2:	6821      	ldr	r1, [r4, #0]
 80047a4:	1d1d      	adds	r5, r3, #4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6015      	str	r5, [r2, #0]
 80047aa:	060a      	lsls	r2, r1, #24
 80047ac:	d50b      	bpl.n	80047c6 <_printf_i+0x162>
 80047ae:	07ca      	lsls	r2, r1, #31
 80047b0:	bf44      	itt	mi
 80047b2:	f041 0120 	orrmi.w	r1, r1, #32
 80047b6:	6021      	strmi	r1, [r4, #0]
 80047b8:	b91b      	cbnz	r3, 80047c2 <_printf_i+0x15e>
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	f022 0220 	bic.w	r2, r2, #32
 80047c0:	6022      	str	r2, [r4, #0]
 80047c2:	2210      	movs	r2, #16
 80047c4:	e7b7      	b.n	8004736 <_printf_i+0xd2>
 80047c6:	064d      	lsls	r5, r1, #25
 80047c8:	bf48      	it	mi
 80047ca:	b29b      	uxthmi	r3, r3
 80047cc:	e7ef      	b.n	80047ae <_printf_i+0x14a>
 80047ce:	4665      	mov	r5, ip
 80047d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80047d4:	fb02 3311 	mls	r3, r2, r1, r3
 80047d8:	5cc3      	ldrb	r3, [r0, r3]
 80047da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80047de:	460b      	mov	r3, r1
 80047e0:	2900      	cmp	r1, #0
 80047e2:	d1f5      	bne.n	80047d0 <_printf_i+0x16c>
 80047e4:	e7b9      	b.n	800475a <_printf_i+0xf6>
 80047e6:	6813      	ldr	r3, [r2, #0]
 80047e8:	6825      	ldr	r5, [r4, #0]
 80047ea:	6961      	ldr	r1, [r4, #20]
 80047ec:	1d18      	adds	r0, r3, #4
 80047ee:	6010      	str	r0, [r2, #0]
 80047f0:	0628      	lsls	r0, r5, #24
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	d501      	bpl.n	80047fa <_printf_i+0x196>
 80047f6:	6019      	str	r1, [r3, #0]
 80047f8:	e002      	b.n	8004800 <_printf_i+0x19c>
 80047fa:	066a      	lsls	r2, r5, #25
 80047fc:	d5fb      	bpl.n	80047f6 <_printf_i+0x192>
 80047fe:	8019      	strh	r1, [r3, #0]
 8004800:	2300      	movs	r3, #0
 8004802:	6123      	str	r3, [r4, #16]
 8004804:	4665      	mov	r5, ip
 8004806:	e7b9      	b.n	800477c <_printf_i+0x118>
 8004808:	6813      	ldr	r3, [r2, #0]
 800480a:	1d19      	adds	r1, r3, #4
 800480c:	6011      	str	r1, [r2, #0]
 800480e:	681d      	ldr	r5, [r3, #0]
 8004810:	6862      	ldr	r2, [r4, #4]
 8004812:	2100      	movs	r1, #0
 8004814:	4628      	mov	r0, r5
 8004816:	f7fb fceb 	bl	80001f0 <memchr>
 800481a:	b108      	cbz	r0, 8004820 <_printf_i+0x1bc>
 800481c:	1b40      	subs	r0, r0, r5
 800481e:	6060      	str	r0, [r4, #4]
 8004820:	6863      	ldr	r3, [r4, #4]
 8004822:	6123      	str	r3, [r4, #16]
 8004824:	2300      	movs	r3, #0
 8004826:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800482a:	e7a7      	b.n	800477c <_printf_i+0x118>
 800482c:	6923      	ldr	r3, [r4, #16]
 800482e:	462a      	mov	r2, r5
 8004830:	4639      	mov	r1, r7
 8004832:	4630      	mov	r0, r6
 8004834:	47c0      	blx	r8
 8004836:	3001      	adds	r0, #1
 8004838:	d0aa      	beq.n	8004790 <_printf_i+0x12c>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	079b      	lsls	r3, r3, #30
 800483e:	d413      	bmi.n	8004868 <_printf_i+0x204>
 8004840:	68e0      	ldr	r0, [r4, #12]
 8004842:	9b03      	ldr	r3, [sp, #12]
 8004844:	4298      	cmp	r0, r3
 8004846:	bfb8      	it	lt
 8004848:	4618      	movlt	r0, r3
 800484a:	e7a3      	b.n	8004794 <_printf_i+0x130>
 800484c:	2301      	movs	r3, #1
 800484e:	464a      	mov	r2, r9
 8004850:	4639      	mov	r1, r7
 8004852:	4630      	mov	r0, r6
 8004854:	47c0      	blx	r8
 8004856:	3001      	adds	r0, #1
 8004858:	d09a      	beq.n	8004790 <_printf_i+0x12c>
 800485a:	3501      	adds	r5, #1
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	9a03      	ldr	r2, [sp, #12]
 8004860:	1a9b      	subs	r3, r3, r2
 8004862:	42ab      	cmp	r3, r5
 8004864:	dcf2      	bgt.n	800484c <_printf_i+0x1e8>
 8004866:	e7eb      	b.n	8004840 <_printf_i+0x1dc>
 8004868:	2500      	movs	r5, #0
 800486a:	f104 0919 	add.w	r9, r4, #25
 800486e:	e7f5      	b.n	800485c <_printf_i+0x1f8>
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1ac      	bne.n	80047ce <_printf_i+0x16a>
 8004874:	7803      	ldrb	r3, [r0, #0]
 8004876:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800487a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800487e:	e76c      	b.n	800475a <_printf_i+0xf6>
 8004880:	0800680a 	.word	0x0800680a
 8004884:	0800681b 	.word	0x0800681b

08004888 <iprintf>:
 8004888:	b40f      	push	{r0, r1, r2, r3}
 800488a:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <iprintf+0x2c>)
 800488c:	b513      	push	{r0, r1, r4, lr}
 800488e:	681c      	ldr	r4, [r3, #0]
 8004890:	b124      	cbz	r4, 800489c <iprintf+0x14>
 8004892:	69a3      	ldr	r3, [r4, #24]
 8004894:	b913      	cbnz	r3, 800489c <iprintf+0x14>
 8004896:	4620      	mov	r0, r4
 8004898:	f001 f882 	bl	80059a0 <__sinit>
 800489c:	ab05      	add	r3, sp, #20
 800489e:	9a04      	ldr	r2, [sp, #16]
 80048a0:	68a1      	ldr	r1, [r4, #8]
 80048a2:	9301      	str	r3, [sp, #4]
 80048a4:	4620      	mov	r0, r4
 80048a6:	f001 fd45 	bl	8006334 <_vfiprintf_r>
 80048aa:	b002      	add	sp, #8
 80048ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048b0:	b004      	add	sp, #16
 80048b2:	4770      	bx	lr
 80048b4:	2000000c 	.word	0x2000000c

080048b8 <_puts_r>:
 80048b8:	b570      	push	{r4, r5, r6, lr}
 80048ba:	460e      	mov	r6, r1
 80048bc:	4605      	mov	r5, r0
 80048be:	b118      	cbz	r0, 80048c8 <_puts_r+0x10>
 80048c0:	6983      	ldr	r3, [r0, #24]
 80048c2:	b90b      	cbnz	r3, 80048c8 <_puts_r+0x10>
 80048c4:	f001 f86c 	bl	80059a0 <__sinit>
 80048c8:	69ab      	ldr	r3, [r5, #24]
 80048ca:	68ac      	ldr	r4, [r5, #8]
 80048cc:	b913      	cbnz	r3, 80048d4 <_puts_r+0x1c>
 80048ce:	4628      	mov	r0, r5
 80048d0:	f001 f866 	bl	80059a0 <__sinit>
 80048d4:	4b23      	ldr	r3, [pc, #140]	; (8004964 <_puts_r+0xac>)
 80048d6:	429c      	cmp	r4, r3
 80048d8:	d117      	bne.n	800490a <_puts_r+0x52>
 80048da:	686c      	ldr	r4, [r5, #4]
 80048dc:	89a3      	ldrh	r3, [r4, #12]
 80048de:	071b      	lsls	r3, r3, #28
 80048e0:	d51d      	bpl.n	800491e <_puts_r+0x66>
 80048e2:	6923      	ldr	r3, [r4, #16]
 80048e4:	b1db      	cbz	r3, 800491e <_puts_r+0x66>
 80048e6:	3e01      	subs	r6, #1
 80048e8:	68a3      	ldr	r3, [r4, #8]
 80048ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048ee:	3b01      	subs	r3, #1
 80048f0:	60a3      	str	r3, [r4, #8]
 80048f2:	b9e9      	cbnz	r1, 8004930 <_puts_r+0x78>
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	da2e      	bge.n	8004956 <_puts_r+0x9e>
 80048f8:	4622      	mov	r2, r4
 80048fa:	210a      	movs	r1, #10
 80048fc:	4628      	mov	r0, r5
 80048fe:	f000 f859 	bl	80049b4 <__swbuf_r>
 8004902:	3001      	adds	r0, #1
 8004904:	d011      	beq.n	800492a <_puts_r+0x72>
 8004906:	200a      	movs	r0, #10
 8004908:	e011      	b.n	800492e <_puts_r+0x76>
 800490a:	4b17      	ldr	r3, [pc, #92]	; (8004968 <_puts_r+0xb0>)
 800490c:	429c      	cmp	r4, r3
 800490e:	d101      	bne.n	8004914 <_puts_r+0x5c>
 8004910:	68ac      	ldr	r4, [r5, #8]
 8004912:	e7e3      	b.n	80048dc <_puts_r+0x24>
 8004914:	4b15      	ldr	r3, [pc, #84]	; (800496c <_puts_r+0xb4>)
 8004916:	429c      	cmp	r4, r3
 8004918:	bf08      	it	eq
 800491a:	68ec      	ldreq	r4, [r5, #12]
 800491c:	e7de      	b.n	80048dc <_puts_r+0x24>
 800491e:	4621      	mov	r1, r4
 8004920:	4628      	mov	r0, r5
 8004922:	f000 f899 	bl	8004a58 <__swsetup_r>
 8004926:	2800      	cmp	r0, #0
 8004928:	d0dd      	beq.n	80048e6 <_puts_r+0x2e>
 800492a:	f04f 30ff 	mov.w	r0, #4294967295
 800492e:	bd70      	pop	{r4, r5, r6, pc}
 8004930:	2b00      	cmp	r3, #0
 8004932:	da04      	bge.n	800493e <_puts_r+0x86>
 8004934:	69a2      	ldr	r2, [r4, #24]
 8004936:	429a      	cmp	r2, r3
 8004938:	dc06      	bgt.n	8004948 <_puts_r+0x90>
 800493a:	290a      	cmp	r1, #10
 800493c:	d004      	beq.n	8004948 <_puts_r+0x90>
 800493e:	6823      	ldr	r3, [r4, #0]
 8004940:	1c5a      	adds	r2, r3, #1
 8004942:	6022      	str	r2, [r4, #0]
 8004944:	7019      	strb	r1, [r3, #0]
 8004946:	e7cf      	b.n	80048e8 <_puts_r+0x30>
 8004948:	4622      	mov	r2, r4
 800494a:	4628      	mov	r0, r5
 800494c:	f000 f832 	bl	80049b4 <__swbuf_r>
 8004950:	3001      	adds	r0, #1
 8004952:	d1c9      	bne.n	80048e8 <_puts_r+0x30>
 8004954:	e7e9      	b.n	800492a <_puts_r+0x72>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	200a      	movs	r0, #10
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	6022      	str	r2, [r4, #0]
 800495e:	7018      	strb	r0, [r3, #0]
 8004960:	e7e5      	b.n	800492e <_puts_r+0x76>
 8004962:	bf00      	nop
 8004964:	0800685c 	.word	0x0800685c
 8004968:	0800687c 	.word	0x0800687c
 800496c:	0800683c 	.word	0x0800683c

08004970 <puts>:
 8004970:	4b02      	ldr	r3, [pc, #8]	; (800497c <puts+0xc>)
 8004972:	4601      	mov	r1, r0
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	f7ff bf9f 	b.w	80048b8 <_puts_r>
 800497a:	bf00      	nop
 800497c:	2000000c 	.word	0x2000000c

08004980 <strstr>:
 8004980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004982:	7803      	ldrb	r3, [r0, #0]
 8004984:	b17b      	cbz	r3, 80049a6 <strstr+0x26>
 8004986:	4604      	mov	r4, r0
 8004988:	7823      	ldrb	r3, [r4, #0]
 800498a:	4620      	mov	r0, r4
 800498c:	1c66      	adds	r6, r4, #1
 800498e:	b17b      	cbz	r3, 80049b0 <strstr+0x30>
 8004990:	1e4a      	subs	r2, r1, #1
 8004992:	1e63      	subs	r3, r4, #1
 8004994:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004998:	b14d      	cbz	r5, 80049ae <strstr+0x2e>
 800499a:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800499e:	42af      	cmp	r7, r5
 80049a0:	4634      	mov	r4, r6
 80049a2:	d0f7      	beq.n	8004994 <strstr+0x14>
 80049a4:	e7f0      	b.n	8004988 <strstr+0x8>
 80049a6:	780b      	ldrb	r3, [r1, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf18      	it	ne
 80049ac:	2000      	movne	r0, #0
 80049ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b0:	4618      	mov	r0, r3
 80049b2:	e7fc      	b.n	80049ae <strstr+0x2e>

080049b4 <__swbuf_r>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	460e      	mov	r6, r1
 80049b8:	4614      	mov	r4, r2
 80049ba:	4605      	mov	r5, r0
 80049bc:	b118      	cbz	r0, 80049c6 <__swbuf_r+0x12>
 80049be:	6983      	ldr	r3, [r0, #24]
 80049c0:	b90b      	cbnz	r3, 80049c6 <__swbuf_r+0x12>
 80049c2:	f000 ffed 	bl	80059a0 <__sinit>
 80049c6:	4b21      	ldr	r3, [pc, #132]	; (8004a4c <__swbuf_r+0x98>)
 80049c8:	429c      	cmp	r4, r3
 80049ca:	d12a      	bne.n	8004a22 <__swbuf_r+0x6e>
 80049cc:	686c      	ldr	r4, [r5, #4]
 80049ce:	69a3      	ldr	r3, [r4, #24]
 80049d0:	60a3      	str	r3, [r4, #8]
 80049d2:	89a3      	ldrh	r3, [r4, #12]
 80049d4:	071a      	lsls	r2, r3, #28
 80049d6:	d52e      	bpl.n	8004a36 <__swbuf_r+0x82>
 80049d8:	6923      	ldr	r3, [r4, #16]
 80049da:	b363      	cbz	r3, 8004a36 <__swbuf_r+0x82>
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	6820      	ldr	r0, [r4, #0]
 80049e0:	1ac0      	subs	r0, r0, r3
 80049e2:	6963      	ldr	r3, [r4, #20]
 80049e4:	b2f6      	uxtb	r6, r6
 80049e6:	4283      	cmp	r3, r0
 80049e8:	4637      	mov	r7, r6
 80049ea:	dc04      	bgt.n	80049f6 <__swbuf_r+0x42>
 80049ec:	4621      	mov	r1, r4
 80049ee:	4628      	mov	r0, r5
 80049f0:	f000 ff6c 	bl	80058cc <_fflush_r>
 80049f4:	bb28      	cbnz	r0, 8004a42 <__swbuf_r+0x8e>
 80049f6:	68a3      	ldr	r3, [r4, #8]
 80049f8:	3b01      	subs	r3, #1
 80049fa:	60a3      	str	r3, [r4, #8]
 80049fc:	6823      	ldr	r3, [r4, #0]
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	6022      	str	r2, [r4, #0]
 8004a02:	701e      	strb	r6, [r3, #0]
 8004a04:	6963      	ldr	r3, [r4, #20]
 8004a06:	3001      	adds	r0, #1
 8004a08:	4283      	cmp	r3, r0
 8004a0a:	d004      	beq.n	8004a16 <__swbuf_r+0x62>
 8004a0c:	89a3      	ldrh	r3, [r4, #12]
 8004a0e:	07db      	lsls	r3, r3, #31
 8004a10:	d519      	bpl.n	8004a46 <__swbuf_r+0x92>
 8004a12:	2e0a      	cmp	r6, #10
 8004a14:	d117      	bne.n	8004a46 <__swbuf_r+0x92>
 8004a16:	4621      	mov	r1, r4
 8004a18:	4628      	mov	r0, r5
 8004a1a:	f000 ff57 	bl	80058cc <_fflush_r>
 8004a1e:	b190      	cbz	r0, 8004a46 <__swbuf_r+0x92>
 8004a20:	e00f      	b.n	8004a42 <__swbuf_r+0x8e>
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <__swbuf_r+0x9c>)
 8004a24:	429c      	cmp	r4, r3
 8004a26:	d101      	bne.n	8004a2c <__swbuf_r+0x78>
 8004a28:	68ac      	ldr	r4, [r5, #8]
 8004a2a:	e7d0      	b.n	80049ce <__swbuf_r+0x1a>
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <__swbuf_r+0xa0>)
 8004a2e:	429c      	cmp	r4, r3
 8004a30:	bf08      	it	eq
 8004a32:	68ec      	ldreq	r4, [r5, #12]
 8004a34:	e7cb      	b.n	80049ce <__swbuf_r+0x1a>
 8004a36:	4621      	mov	r1, r4
 8004a38:	4628      	mov	r0, r5
 8004a3a:	f000 f80d 	bl	8004a58 <__swsetup_r>
 8004a3e:	2800      	cmp	r0, #0
 8004a40:	d0cc      	beq.n	80049dc <__swbuf_r+0x28>
 8004a42:	f04f 37ff 	mov.w	r7, #4294967295
 8004a46:	4638      	mov	r0, r7
 8004a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	0800685c 	.word	0x0800685c
 8004a50:	0800687c 	.word	0x0800687c
 8004a54:	0800683c 	.word	0x0800683c

08004a58 <__swsetup_r>:
 8004a58:	4b32      	ldr	r3, [pc, #200]	; (8004b24 <__swsetup_r+0xcc>)
 8004a5a:	b570      	push	{r4, r5, r6, lr}
 8004a5c:	681d      	ldr	r5, [r3, #0]
 8004a5e:	4606      	mov	r6, r0
 8004a60:	460c      	mov	r4, r1
 8004a62:	b125      	cbz	r5, 8004a6e <__swsetup_r+0x16>
 8004a64:	69ab      	ldr	r3, [r5, #24]
 8004a66:	b913      	cbnz	r3, 8004a6e <__swsetup_r+0x16>
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f000 ff99 	bl	80059a0 <__sinit>
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <__swsetup_r+0xd0>)
 8004a70:	429c      	cmp	r4, r3
 8004a72:	d10f      	bne.n	8004a94 <__swsetup_r+0x3c>
 8004a74:	686c      	ldr	r4, [r5, #4]
 8004a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	0715      	lsls	r5, r2, #28
 8004a7e:	d42c      	bmi.n	8004ada <__swsetup_r+0x82>
 8004a80:	06d0      	lsls	r0, r2, #27
 8004a82:	d411      	bmi.n	8004aa8 <__swsetup_r+0x50>
 8004a84:	2209      	movs	r2, #9
 8004a86:	6032      	str	r2, [r6, #0]
 8004a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a92:	e03e      	b.n	8004b12 <__swsetup_r+0xba>
 8004a94:	4b25      	ldr	r3, [pc, #148]	; (8004b2c <__swsetup_r+0xd4>)
 8004a96:	429c      	cmp	r4, r3
 8004a98:	d101      	bne.n	8004a9e <__swsetup_r+0x46>
 8004a9a:	68ac      	ldr	r4, [r5, #8]
 8004a9c:	e7eb      	b.n	8004a76 <__swsetup_r+0x1e>
 8004a9e:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <__swsetup_r+0xd8>)
 8004aa0:	429c      	cmp	r4, r3
 8004aa2:	bf08      	it	eq
 8004aa4:	68ec      	ldreq	r4, [r5, #12]
 8004aa6:	e7e6      	b.n	8004a76 <__swsetup_r+0x1e>
 8004aa8:	0751      	lsls	r1, r2, #29
 8004aaa:	d512      	bpl.n	8004ad2 <__swsetup_r+0x7a>
 8004aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004aae:	b141      	cbz	r1, 8004ac2 <__swsetup_r+0x6a>
 8004ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ab4:	4299      	cmp	r1, r3
 8004ab6:	d002      	beq.n	8004abe <__swsetup_r+0x66>
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f001 fb69 	bl	8006190 <_free_r>
 8004abe:	2300      	movs	r3, #0
 8004ac0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ac2:	89a3      	ldrh	r3, [r4, #12]
 8004ac4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ac8:	81a3      	strh	r3, [r4, #12]
 8004aca:	2300      	movs	r3, #0
 8004acc:	6063      	str	r3, [r4, #4]
 8004ace:	6923      	ldr	r3, [r4, #16]
 8004ad0:	6023      	str	r3, [r4, #0]
 8004ad2:	89a3      	ldrh	r3, [r4, #12]
 8004ad4:	f043 0308 	orr.w	r3, r3, #8
 8004ad8:	81a3      	strh	r3, [r4, #12]
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	b94b      	cbnz	r3, 8004af2 <__swsetup_r+0x9a>
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae8:	d003      	beq.n	8004af2 <__swsetup_r+0x9a>
 8004aea:	4621      	mov	r1, r4
 8004aec:	4630      	mov	r0, r6
 8004aee:	f001 f813 	bl	8005b18 <__smakebuf_r>
 8004af2:	89a2      	ldrh	r2, [r4, #12]
 8004af4:	f012 0301 	ands.w	r3, r2, #1
 8004af8:	d00c      	beq.n	8004b14 <__swsetup_r+0xbc>
 8004afa:	2300      	movs	r3, #0
 8004afc:	60a3      	str	r3, [r4, #8]
 8004afe:	6963      	ldr	r3, [r4, #20]
 8004b00:	425b      	negs	r3, r3
 8004b02:	61a3      	str	r3, [r4, #24]
 8004b04:	6923      	ldr	r3, [r4, #16]
 8004b06:	b953      	cbnz	r3, 8004b1e <__swsetup_r+0xc6>
 8004b08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b0c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004b10:	d1ba      	bne.n	8004a88 <__swsetup_r+0x30>
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	0792      	lsls	r2, r2, #30
 8004b16:	bf58      	it	pl
 8004b18:	6963      	ldrpl	r3, [r4, #20]
 8004b1a:	60a3      	str	r3, [r4, #8]
 8004b1c:	e7f2      	b.n	8004b04 <__swsetup_r+0xac>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e7f7      	b.n	8004b12 <__swsetup_r+0xba>
 8004b22:	bf00      	nop
 8004b24:	2000000c 	.word	0x2000000c
 8004b28:	0800685c 	.word	0x0800685c
 8004b2c:	0800687c 	.word	0x0800687c
 8004b30:	0800683c 	.word	0x0800683c

08004b34 <quorem>:
 8004b34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b38:	6903      	ldr	r3, [r0, #16]
 8004b3a:	690c      	ldr	r4, [r1, #16]
 8004b3c:	42a3      	cmp	r3, r4
 8004b3e:	4680      	mov	r8, r0
 8004b40:	f2c0 8082 	blt.w	8004c48 <quorem+0x114>
 8004b44:	3c01      	subs	r4, #1
 8004b46:	f101 0714 	add.w	r7, r1, #20
 8004b4a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004b4e:	f100 0614 	add.w	r6, r0, #20
 8004b52:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004b56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004b5a:	eb06 030c 	add.w	r3, r6, ip
 8004b5e:	3501      	adds	r5, #1
 8004b60:	eb07 090c 	add.w	r9, r7, ip
 8004b64:	9301      	str	r3, [sp, #4]
 8004b66:	fbb0 f5f5 	udiv	r5, r0, r5
 8004b6a:	b395      	cbz	r5, 8004bd2 <quorem+0x9e>
 8004b6c:	f04f 0a00 	mov.w	sl, #0
 8004b70:	4638      	mov	r0, r7
 8004b72:	46b6      	mov	lr, r6
 8004b74:	46d3      	mov	fp, sl
 8004b76:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b7a:	b293      	uxth	r3, r2
 8004b7c:	fb05 a303 	mla	r3, r5, r3, sl
 8004b80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	ebab 0303 	sub.w	r3, fp, r3
 8004b8a:	0c12      	lsrs	r2, r2, #16
 8004b8c:	f8de b000 	ldr.w	fp, [lr]
 8004b90:	fb05 a202 	mla	r2, r5, r2, sl
 8004b94:	fa13 f38b 	uxtah	r3, r3, fp
 8004b98:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004b9c:	fa1f fb82 	uxth.w	fp, r2
 8004ba0:	f8de 2000 	ldr.w	r2, [lr]
 8004ba4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004ba8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bb2:	4581      	cmp	r9, r0
 8004bb4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004bb8:	f84e 3b04 	str.w	r3, [lr], #4
 8004bbc:	d2db      	bcs.n	8004b76 <quorem+0x42>
 8004bbe:	f856 300c 	ldr.w	r3, [r6, ip]
 8004bc2:	b933      	cbnz	r3, 8004bd2 <quorem+0x9e>
 8004bc4:	9b01      	ldr	r3, [sp, #4]
 8004bc6:	3b04      	subs	r3, #4
 8004bc8:	429e      	cmp	r6, r3
 8004bca:	461a      	mov	r2, r3
 8004bcc:	d330      	bcc.n	8004c30 <quorem+0xfc>
 8004bce:	f8c8 4010 	str.w	r4, [r8, #16]
 8004bd2:	4640      	mov	r0, r8
 8004bd4:	f001 fa08 	bl	8005fe8 <__mcmp>
 8004bd8:	2800      	cmp	r0, #0
 8004bda:	db25      	blt.n	8004c28 <quorem+0xf4>
 8004bdc:	3501      	adds	r5, #1
 8004bde:	4630      	mov	r0, r6
 8004be0:	f04f 0c00 	mov.w	ip, #0
 8004be4:	f857 2b04 	ldr.w	r2, [r7], #4
 8004be8:	f8d0 e000 	ldr.w	lr, [r0]
 8004bec:	b293      	uxth	r3, r2
 8004bee:	ebac 0303 	sub.w	r3, ip, r3
 8004bf2:	0c12      	lsrs	r2, r2, #16
 8004bf4:	fa13 f38e 	uxtah	r3, r3, lr
 8004bf8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004bfc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c06:	45b9      	cmp	r9, r7
 8004c08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c0c:	f840 3b04 	str.w	r3, [r0], #4
 8004c10:	d2e8      	bcs.n	8004be4 <quorem+0xb0>
 8004c12:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004c16:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004c1a:	b92a      	cbnz	r2, 8004c28 <quorem+0xf4>
 8004c1c:	3b04      	subs	r3, #4
 8004c1e:	429e      	cmp	r6, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	d30b      	bcc.n	8004c3c <quorem+0x108>
 8004c24:	f8c8 4010 	str.w	r4, [r8, #16]
 8004c28:	4628      	mov	r0, r5
 8004c2a:	b003      	add	sp, #12
 8004c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c30:	6812      	ldr	r2, [r2, #0]
 8004c32:	3b04      	subs	r3, #4
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	d1ca      	bne.n	8004bce <quorem+0x9a>
 8004c38:	3c01      	subs	r4, #1
 8004c3a:	e7c5      	b.n	8004bc8 <quorem+0x94>
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	3b04      	subs	r3, #4
 8004c40:	2a00      	cmp	r2, #0
 8004c42:	d1ef      	bne.n	8004c24 <quorem+0xf0>
 8004c44:	3c01      	subs	r4, #1
 8004c46:	e7ea      	b.n	8004c1e <quorem+0xea>
 8004c48:	2000      	movs	r0, #0
 8004c4a:	e7ee      	b.n	8004c2a <quorem+0xf6>
 8004c4c:	0000      	movs	r0, r0
	...

08004c50 <_dtoa_r>:
 8004c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c54:	ec57 6b10 	vmov	r6, r7, d0
 8004c58:	b097      	sub	sp, #92	; 0x5c
 8004c5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c5c:	9106      	str	r1, [sp, #24]
 8004c5e:	4604      	mov	r4, r0
 8004c60:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c62:	9312      	str	r3, [sp, #72]	; 0x48
 8004c64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c68:	e9cd 6700 	strd	r6, r7, [sp]
 8004c6c:	b93d      	cbnz	r5, 8004c7e <_dtoa_r+0x2e>
 8004c6e:	2010      	movs	r0, #16
 8004c70:	f000 ff92 	bl	8005b98 <malloc>
 8004c74:	6260      	str	r0, [r4, #36]	; 0x24
 8004c76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c7a:	6005      	str	r5, [r0, #0]
 8004c7c:	60c5      	str	r5, [r0, #12]
 8004c7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	b151      	cbz	r1, 8004c9a <_dtoa_r+0x4a>
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	604a      	str	r2, [r1, #4]
 8004c88:	2301      	movs	r3, #1
 8004c8a:	4093      	lsls	r3, r2
 8004c8c:	608b      	str	r3, [r1, #8]
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f000 ffc9 	bl	8005c26 <_Bfree>
 8004c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	1e3b      	subs	r3, r7, #0
 8004c9c:	bfbb      	ittet	lt
 8004c9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ca2:	9301      	strlt	r3, [sp, #4]
 8004ca4:	2300      	movge	r3, #0
 8004ca6:	2201      	movlt	r2, #1
 8004ca8:	bfac      	ite	ge
 8004caa:	f8c8 3000 	strge.w	r3, [r8]
 8004cae:	f8c8 2000 	strlt.w	r2, [r8]
 8004cb2:	4baf      	ldr	r3, [pc, #700]	; (8004f70 <_dtoa_r+0x320>)
 8004cb4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004cb8:	ea33 0308 	bics.w	r3, r3, r8
 8004cbc:	d114      	bne.n	8004ce8 <_dtoa_r+0x98>
 8004cbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cc0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	9b00      	ldr	r3, [sp, #0]
 8004cc8:	b923      	cbnz	r3, 8004cd4 <_dtoa_r+0x84>
 8004cca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	f000 8542 	beq.w	8005758 <_dtoa_r+0xb08>
 8004cd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cd6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004f84 <_dtoa_r+0x334>
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 8544 	beq.w	8005768 <_dtoa_r+0xb18>
 8004ce0:	f10b 0303 	add.w	r3, fp, #3
 8004ce4:	f000 bd3e 	b.w	8005764 <_dtoa_r+0xb14>
 8004ce8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004cec:	2200      	movs	r2, #0
 8004cee:	2300      	movs	r3, #0
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	4639      	mov	r1, r7
 8004cf4:	f7fb fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cf8:	4681      	mov	r9, r0
 8004cfa:	b168      	cbz	r0, 8004d18 <_dtoa_r+0xc8>
 8004cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004cfe:	2301      	movs	r3, #1
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	f000 8524 	beq.w	8005752 <_dtoa_r+0xb02>
 8004d0a:	4b9a      	ldr	r3, [pc, #616]	; (8004f74 <_dtoa_r+0x324>)
 8004d0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004d0e:	f103 3bff 	add.w	fp, r3, #4294967295
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	f000 bd28 	b.w	8005768 <_dtoa_r+0xb18>
 8004d18:	aa14      	add	r2, sp, #80	; 0x50
 8004d1a:	a915      	add	r1, sp, #84	; 0x54
 8004d1c:	ec47 6b10 	vmov	d0, r6, r7
 8004d20:	4620      	mov	r0, r4
 8004d22:	f001 f9d8 	bl	80060d6 <__d2b>
 8004d26:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004d2a:	9004      	str	r0, [sp, #16]
 8004d2c:	2d00      	cmp	r5, #0
 8004d2e:	d07c      	beq.n	8004e2a <_dtoa_r+0x1da>
 8004d30:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004d34:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004d38:	46b2      	mov	sl, r6
 8004d3a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004d3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d42:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004d46:	2200      	movs	r2, #0
 8004d48:	4b8b      	ldr	r3, [pc, #556]	; (8004f78 <_dtoa_r+0x328>)
 8004d4a:	4650      	mov	r0, sl
 8004d4c:	4659      	mov	r1, fp
 8004d4e:	f7fb faa3 	bl	8000298 <__aeabi_dsub>
 8004d52:	a381      	add	r3, pc, #516	; (adr r3, 8004f58 <_dtoa_r+0x308>)
 8004d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d58:	f7fb fc56 	bl	8000608 <__aeabi_dmul>
 8004d5c:	a380      	add	r3, pc, #512	; (adr r3, 8004f60 <_dtoa_r+0x310>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f7fb fa9b 	bl	800029c <__adddf3>
 8004d66:	4606      	mov	r6, r0
 8004d68:	4628      	mov	r0, r5
 8004d6a:	460f      	mov	r7, r1
 8004d6c:	f7fb fbe2 	bl	8000534 <__aeabi_i2d>
 8004d70:	a37d      	add	r3, pc, #500	; (adr r3, 8004f68 <_dtoa_r+0x318>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f7fb fc47 	bl	8000608 <__aeabi_dmul>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4630      	mov	r0, r6
 8004d80:	4639      	mov	r1, r7
 8004d82:	f7fb fa8b 	bl	800029c <__adddf3>
 8004d86:	4606      	mov	r6, r0
 8004d88:	460f      	mov	r7, r1
 8004d8a:	f7fb feed 	bl	8000b68 <__aeabi_d2iz>
 8004d8e:	2200      	movs	r2, #0
 8004d90:	4682      	mov	sl, r0
 8004d92:	2300      	movs	r3, #0
 8004d94:	4630      	mov	r0, r6
 8004d96:	4639      	mov	r1, r7
 8004d98:	f7fb fea8 	bl	8000aec <__aeabi_dcmplt>
 8004d9c:	b148      	cbz	r0, 8004db2 <_dtoa_r+0x162>
 8004d9e:	4650      	mov	r0, sl
 8004da0:	f7fb fbc8 	bl	8000534 <__aeabi_i2d>
 8004da4:	4632      	mov	r2, r6
 8004da6:	463b      	mov	r3, r7
 8004da8:	f7fb fe96 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dac:	b908      	cbnz	r0, 8004db2 <_dtoa_r+0x162>
 8004dae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004db2:	f1ba 0f16 	cmp.w	sl, #22
 8004db6:	d859      	bhi.n	8004e6c <_dtoa_r+0x21c>
 8004db8:	4970      	ldr	r1, [pc, #448]	; (8004f7c <_dtoa_r+0x32c>)
 8004dba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004dbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004dc6:	f7fb feaf 	bl	8000b28 <__aeabi_dcmpgt>
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d050      	beq.n	8004e70 <_dtoa_r+0x220>
 8004dce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dd6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004dd8:	1b5d      	subs	r5, r3, r5
 8004dda:	f1b5 0801 	subs.w	r8, r5, #1
 8004dde:	bf49      	itett	mi
 8004de0:	f1c5 0301 	rsbmi	r3, r5, #1
 8004de4:	2300      	movpl	r3, #0
 8004de6:	9305      	strmi	r3, [sp, #20]
 8004de8:	f04f 0800 	movmi.w	r8, #0
 8004dec:	bf58      	it	pl
 8004dee:	9305      	strpl	r3, [sp, #20]
 8004df0:	f1ba 0f00 	cmp.w	sl, #0
 8004df4:	db3e      	blt.n	8004e74 <_dtoa_r+0x224>
 8004df6:	2300      	movs	r3, #0
 8004df8:	44d0      	add	r8, sl
 8004dfa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004dfe:	9307      	str	r3, [sp, #28]
 8004e00:	9b06      	ldr	r3, [sp, #24]
 8004e02:	2b09      	cmp	r3, #9
 8004e04:	f200 8090 	bhi.w	8004f28 <_dtoa_r+0x2d8>
 8004e08:	2b05      	cmp	r3, #5
 8004e0a:	bfc4      	itt	gt
 8004e0c:	3b04      	subgt	r3, #4
 8004e0e:	9306      	strgt	r3, [sp, #24]
 8004e10:	9b06      	ldr	r3, [sp, #24]
 8004e12:	f1a3 0302 	sub.w	r3, r3, #2
 8004e16:	bfcc      	ite	gt
 8004e18:	2500      	movgt	r5, #0
 8004e1a:	2501      	movle	r5, #1
 8004e1c:	2b03      	cmp	r3, #3
 8004e1e:	f200 808f 	bhi.w	8004f40 <_dtoa_r+0x2f0>
 8004e22:	e8df f003 	tbb	[pc, r3]
 8004e26:	7f7d      	.short	0x7f7d
 8004e28:	7131      	.short	0x7131
 8004e2a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004e2e:	441d      	add	r5, r3
 8004e30:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004e34:	2820      	cmp	r0, #32
 8004e36:	dd13      	ble.n	8004e60 <_dtoa_r+0x210>
 8004e38:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004e3c:	9b00      	ldr	r3, [sp, #0]
 8004e3e:	fa08 f800 	lsl.w	r8, r8, r0
 8004e42:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004e46:	fa23 f000 	lsr.w	r0, r3, r0
 8004e4a:	ea48 0000 	orr.w	r0, r8, r0
 8004e4e:	f7fb fb61 	bl	8000514 <__aeabi_ui2d>
 8004e52:	2301      	movs	r3, #1
 8004e54:	4682      	mov	sl, r0
 8004e56:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004e5a:	3d01      	subs	r5, #1
 8004e5c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e5e:	e772      	b.n	8004d46 <_dtoa_r+0xf6>
 8004e60:	9b00      	ldr	r3, [sp, #0]
 8004e62:	f1c0 0020 	rsb	r0, r0, #32
 8004e66:	fa03 f000 	lsl.w	r0, r3, r0
 8004e6a:	e7f0      	b.n	8004e4e <_dtoa_r+0x1fe>
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e7b1      	b.n	8004dd4 <_dtoa_r+0x184>
 8004e70:	900f      	str	r0, [sp, #60]	; 0x3c
 8004e72:	e7b0      	b.n	8004dd6 <_dtoa_r+0x186>
 8004e74:	9b05      	ldr	r3, [sp, #20]
 8004e76:	eba3 030a 	sub.w	r3, r3, sl
 8004e7a:	9305      	str	r3, [sp, #20]
 8004e7c:	f1ca 0300 	rsb	r3, sl, #0
 8004e80:	9307      	str	r3, [sp, #28]
 8004e82:	2300      	movs	r3, #0
 8004e84:	930e      	str	r3, [sp, #56]	; 0x38
 8004e86:	e7bb      	b.n	8004e00 <_dtoa_r+0x1b0>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	930a      	str	r3, [sp, #40]	; 0x28
 8004e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	dd59      	ble.n	8004f46 <_dtoa_r+0x2f6>
 8004e92:	9302      	str	r3, [sp, #8]
 8004e94:	4699      	mov	r9, r3
 8004e96:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004e98:	2200      	movs	r2, #0
 8004e9a:	6072      	str	r2, [r6, #4]
 8004e9c:	2204      	movs	r2, #4
 8004e9e:	f102 0014 	add.w	r0, r2, #20
 8004ea2:	4298      	cmp	r0, r3
 8004ea4:	6871      	ldr	r1, [r6, #4]
 8004ea6:	d953      	bls.n	8004f50 <_dtoa_r+0x300>
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f000 fe88 	bl	8005bbe <_Balloc>
 8004eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004eb0:	6030      	str	r0, [r6, #0]
 8004eb2:	f1b9 0f0e 	cmp.w	r9, #14
 8004eb6:	f8d3 b000 	ldr.w	fp, [r3]
 8004eba:	f200 80e6 	bhi.w	800508a <_dtoa_r+0x43a>
 8004ebe:	2d00      	cmp	r5, #0
 8004ec0:	f000 80e3 	beq.w	800508a <_dtoa_r+0x43a>
 8004ec4:	ed9d 7b00 	vldr	d7, [sp]
 8004ec8:	f1ba 0f00 	cmp.w	sl, #0
 8004ecc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004ed0:	dd74      	ble.n	8004fbc <_dtoa_r+0x36c>
 8004ed2:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <_dtoa_r+0x32c>)
 8004ed4:	f00a 030f 	and.w	r3, sl, #15
 8004ed8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004edc:	ed93 7b00 	vldr	d7, [r3]
 8004ee0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004ee4:	06f0      	lsls	r0, r6, #27
 8004ee6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004eea:	d565      	bpl.n	8004fb8 <_dtoa_r+0x368>
 8004eec:	4b24      	ldr	r3, [pc, #144]	; (8004f80 <_dtoa_r+0x330>)
 8004eee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ef2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ef6:	f7fb fcb1 	bl	800085c <__aeabi_ddiv>
 8004efa:	e9cd 0100 	strd	r0, r1, [sp]
 8004efe:	f006 060f 	and.w	r6, r6, #15
 8004f02:	2503      	movs	r5, #3
 8004f04:	4f1e      	ldr	r7, [pc, #120]	; (8004f80 <_dtoa_r+0x330>)
 8004f06:	e04c      	b.n	8004fa2 <_dtoa_r+0x352>
 8004f08:	2301      	movs	r3, #1
 8004f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8004f0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f0e:	4453      	add	r3, sl
 8004f10:	f103 0901 	add.w	r9, r3, #1
 8004f14:	9302      	str	r3, [sp, #8]
 8004f16:	464b      	mov	r3, r9
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	bfb8      	it	lt
 8004f1c:	2301      	movlt	r3, #1
 8004f1e:	e7ba      	b.n	8004e96 <_dtoa_r+0x246>
 8004f20:	2300      	movs	r3, #0
 8004f22:	e7b2      	b.n	8004e8a <_dtoa_r+0x23a>
 8004f24:	2300      	movs	r3, #0
 8004f26:	e7f0      	b.n	8004f0a <_dtoa_r+0x2ba>
 8004f28:	2501      	movs	r5, #1
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	9306      	str	r3, [sp, #24]
 8004f2e:	950a      	str	r5, [sp, #40]	; 0x28
 8004f30:	f04f 33ff 	mov.w	r3, #4294967295
 8004f34:	9302      	str	r3, [sp, #8]
 8004f36:	4699      	mov	r9, r3
 8004f38:	2200      	movs	r2, #0
 8004f3a:	2312      	movs	r3, #18
 8004f3c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004f3e:	e7aa      	b.n	8004e96 <_dtoa_r+0x246>
 8004f40:	2301      	movs	r3, #1
 8004f42:	930a      	str	r3, [sp, #40]	; 0x28
 8004f44:	e7f4      	b.n	8004f30 <_dtoa_r+0x2e0>
 8004f46:	2301      	movs	r3, #1
 8004f48:	9302      	str	r3, [sp, #8]
 8004f4a:	4699      	mov	r9, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	e7f5      	b.n	8004f3c <_dtoa_r+0x2ec>
 8004f50:	3101      	adds	r1, #1
 8004f52:	6071      	str	r1, [r6, #4]
 8004f54:	0052      	lsls	r2, r2, #1
 8004f56:	e7a2      	b.n	8004e9e <_dtoa_r+0x24e>
 8004f58:	636f4361 	.word	0x636f4361
 8004f5c:	3fd287a7 	.word	0x3fd287a7
 8004f60:	8b60c8b3 	.word	0x8b60c8b3
 8004f64:	3fc68a28 	.word	0x3fc68a28
 8004f68:	509f79fb 	.word	0x509f79fb
 8004f6c:	3fd34413 	.word	0x3fd34413
 8004f70:	7ff00000 	.word	0x7ff00000
 8004f74:	08006809 	.word	0x08006809
 8004f78:	3ff80000 	.word	0x3ff80000
 8004f7c:	080068c8 	.word	0x080068c8
 8004f80:	080068a0 	.word	0x080068a0
 8004f84:	08006835 	.word	0x08006835
 8004f88:	07f1      	lsls	r1, r6, #31
 8004f8a:	d508      	bpl.n	8004f9e <_dtoa_r+0x34e>
 8004f8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f94:	f7fb fb38 	bl	8000608 <__aeabi_dmul>
 8004f98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f9c:	3501      	adds	r5, #1
 8004f9e:	1076      	asrs	r6, r6, #1
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	2e00      	cmp	r6, #0
 8004fa4:	d1f0      	bne.n	8004f88 <_dtoa_r+0x338>
 8004fa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fae:	f7fb fc55 	bl	800085c <__aeabi_ddiv>
 8004fb2:	e9cd 0100 	strd	r0, r1, [sp]
 8004fb6:	e01a      	b.n	8004fee <_dtoa_r+0x39e>
 8004fb8:	2502      	movs	r5, #2
 8004fba:	e7a3      	b.n	8004f04 <_dtoa_r+0x2b4>
 8004fbc:	f000 80a0 	beq.w	8005100 <_dtoa_r+0x4b0>
 8004fc0:	f1ca 0600 	rsb	r6, sl, #0
 8004fc4:	4b9f      	ldr	r3, [pc, #636]	; (8005244 <_dtoa_r+0x5f4>)
 8004fc6:	4fa0      	ldr	r7, [pc, #640]	; (8005248 <_dtoa_r+0x5f8>)
 8004fc8:	f006 020f 	and.w	r2, r6, #15
 8004fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004fd8:	f7fb fb16 	bl	8000608 <__aeabi_dmul>
 8004fdc:	e9cd 0100 	strd	r0, r1, [sp]
 8004fe0:	1136      	asrs	r6, r6, #4
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	2502      	movs	r5, #2
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	d17f      	bne.n	80050ea <_dtoa_r+0x49a>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1e1      	bne.n	8004fb2 <_dtoa_r+0x362>
 8004fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	f000 8087 	beq.w	8005104 <_dtoa_r+0x4b4>
 8004ff6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	4b93      	ldr	r3, [pc, #588]	; (800524c <_dtoa_r+0x5fc>)
 8004ffe:	4630      	mov	r0, r6
 8005000:	4639      	mov	r1, r7
 8005002:	f7fb fd73 	bl	8000aec <__aeabi_dcmplt>
 8005006:	2800      	cmp	r0, #0
 8005008:	d07c      	beq.n	8005104 <_dtoa_r+0x4b4>
 800500a:	f1b9 0f00 	cmp.w	r9, #0
 800500e:	d079      	beq.n	8005104 <_dtoa_r+0x4b4>
 8005010:	9b02      	ldr	r3, [sp, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	dd35      	ble.n	8005082 <_dtoa_r+0x432>
 8005016:	f10a 33ff 	add.w	r3, sl, #4294967295
 800501a:	9308      	str	r3, [sp, #32]
 800501c:	4639      	mov	r1, r7
 800501e:	2200      	movs	r2, #0
 8005020:	4b8b      	ldr	r3, [pc, #556]	; (8005250 <_dtoa_r+0x600>)
 8005022:	4630      	mov	r0, r6
 8005024:	f7fb faf0 	bl	8000608 <__aeabi_dmul>
 8005028:	e9cd 0100 	strd	r0, r1, [sp]
 800502c:	9f02      	ldr	r7, [sp, #8]
 800502e:	3501      	adds	r5, #1
 8005030:	4628      	mov	r0, r5
 8005032:	f7fb fa7f 	bl	8000534 <__aeabi_i2d>
 8005036:	e9dd 2300 	ldrd	r2, r3, [sp]
 800503a:	f7fb fae5 	bl	8000608 <__aeabi_dmul>
 800503e:	2200      	movs	r2, #0
 8005040:	4b84      	ldr	r3, [pc, #528]	; (8005254 <_dtoa_r+0x604>)
 8005042:	f7fb f92b 	bl	800029c <__adddf3>
 8005046:	4605      	mov	r5, r0
 8005048:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800504c:	2f00      	cmp	r7, #0
 800504e:	d15d      	bne.n	800510c <_dtoa_r+0x4bc>
 8005050:	2200      	movs	r2, #0
 8005052:	4b81      	ldr	r3, [pc, #516]	; (8005258 <_dtoa_r+0x608>)
 8005054:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005058:	f7fb f91e 	bl	8000298 <__aeabi_dsub>
 800505c:	462a      	mov	r2, r5
 800505e:	4633      	mov	r3, r6
 8005060:	e9cd 0100 	strd	r0, r1, [sp]
 8005064:	f7fb fd60 	bl	8000b28 <__aeabi_dcmpgt>
 8005068:	2800      	cmp	r0, #0
 800506a:	f040 8288 	bne.w	800557e <_dtoa_r+0x92e>
 800506e:	462a      	mov	r2, r5
 8005070:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005074:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005078:	f7fb fd38 	bl	8000aec <__aeabi_dcmplt>
 800507c:	2800      	cmp	r0, #0
 800507e:	f040 827c 	bne.w	800557a <_dtoa_r+0x92a>
 8005082:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005086:	e9cd 2300 	strd	r2, r3, [sp]
 800508a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800508c:	2b00      	cmp	r3, #0
 800508e:	f2c0 8150 	blt.w	8005332 <_dtoa_r+0x6e2>
 8005092:	f1ba 0f0e 	cmp.w	sl, #14
 8005096:	f300 814c 	bgt.w	8005332 <_dtoa_r+0x6e2>
 800509a:	4b6a      	ldr	r3, [pc, #424]	; (8005244 <_dtoa_r+0x5f4>)
 800509c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050a0:	ed93 7b00 	vldr	d7, [r3]
 80050a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80050ac:	f280 80d8 	bge.w	8005260 <_dtoa_r+0x610>
 80050b0:	f1b9 0f00 	cmp.w	r9, #0
 80050b4:	f300 80d4 	bgt.w	8005260 <_dtoa_r+0x610>
 80050b8:	f040 825e 	bne.w	8005578 <_dtoa_r+0x928>
 80050bc:	2200      	movs	r2, #0
 80050be:	4b66      	ldr	r3, [pc, #408]	; (8005258 <_dtoa_r+0x608>)
 80050c0:	ec51 0b17 	vmov	r0, r1, d7
 80050c4:	f7fb faa0 	bl	8000608 <__aeabi_dmul>
 80050c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050cc:	f7fb fd22 	bl	8000b14 <__aeabi_dcmpge>
 80050d0:	464f      	mov	r7, r9
 80050d2:	464e      	mov	r6, r9
 80050d4:	2800      	cmp	r0, #0
 80050d6:	f040 8234 	bne.w	8005542 <_dtoa_r+0x8f2>
 80050da:	2331      	movs	r3, #49	; 0x31
 80050dc:	f10b 0501 	add.w	r5, fp, #1
 80050e0:	f88b 3000 	strb.w	r3, [fp]
 80050e4:	f10a 0a01 	add.w	sl, sl, #1
 80050e8:	e22f      	b.n	800554a <_dtoa_r+0x8fa>
 80050ea:	07f2      	lsls	r2, r6, #31
 80050ec:	d505      	bpl.n	80050fa <_dtoa_r+0x4aa>
 80050ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f2:	f7fb fa89 	bl	8000608 <__aeabi_dmul>
 80050f6:	3501      	adds	r5, #1
 80050f8:	2301      	movs	r3, #1
 80050fa:	1076      	asrs	r6, r6, #1
 80050fc:	3708      	adds	r7, #8
 80050fe:	e772      	b.n	8004fe6 <_dtoa_r+0x396>
 8005100:	2502      	movs	r5, #2
 8005102:	e774      	b.n	8004fee <_dtoa_r+0x39e>
 8005104:	f8cd a020 	str.w	sl, [sp, #32]
 8005108:	464f      	mov	r7, r9
 800510a:	e791      	b.n	8005030 <_dtoa_r+0x3e0>
 800510c:	4b4d      	ldr	r3, [pc, #308]	; (8005244 <_dtoa_r+0x5f4>)
 800510e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005112:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005118:	2b00      	cmp	r3, #0
 800511a:	d047      	beq.n	80051ac <_dtoa_r+0x55c>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	2000      	movs	r0, #0
 8005122:	494e      	ldr	r1, [pc, #312]	; (800525c <_dtoa_r+0x60c>)
 8005124:	f7fb fb9a 	bl	800085c <__aeabi_ddiv>
 8005128:	462a      	mov	r2, r5
 800512a:	4633      	mov	r3, r6
 800512c:	f7fb f8b4 	bl	8000298 <__aeabi_dsub>
 8005130:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005134:	465d      	mov	r5, fp
 8005136:	e9dd 0100 	ldrd	r0, r1, [sp]
 800513a:	f7fb fd15 	bl	8000b68 <__aeabi_d2iz>
 800513e:	4606      	mov	r6, r0
 8005140:	f7fb f9f8 	bl	8000534 <__aeabi_i2d>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800514c:	f7fb f8a4 	bl	8000298 <__aeabi_dsub>
 8005150:	3630      	adds	r6, #48	; 0x30
 8005152:	f805 6b01 	strb.w	r6, [r5], #1
 8005156:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800515a:	e9cd 0100 	strd	r0, r1, [sp]
 800515e:	f7fb fcc5 	bl	8000aec <__aeabi_dcmplt>
 8005162:	2800      	cmp	r0, #0
 8005164:	d163      	bne.n	800522e <_dtoa_r+0x5de>
 8005166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800516a:	2000      	movs	r0, #0
 800516c:	4937      	ldr	r1, [pc, #220]	; (800524c <_dtoa_r+0x5fc>)
 800516e:	f7fb f893 	bl	8000298 <__aeabi_dsub>
 8005172:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005176:	f7fb fcb9 	bl	8000aec <__aeabi_dcmplt>
 800517a:	2800      	cmp	r0, #0
 800517c:	f040 80b7 	bne.w	80052ee <_dtoa_r+0x69e>
 8005180:	eba5 030b 	sub.w	r3, r5, fp
 8005184:	429f      	cmp	r7, r3
 8005186:	f77f af7c 	ble.w	8005082 <_dtoa_r+0x432>
 800518a:	2200      	movs	r2, #0
 800518c:	4b30      	ldr	r3, [pc, #192]	; (8005250 <_dtoa_r+0x600>)
 800518e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005192:	f7fb fa39 	bl	8000608 <__aeabi_dmul>
 8005196:	2200      	movs	r2, #0
 8005198:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800519c:	4b2c      	ldr	r3, [pc, #176]	; (8005250 <_dtoa_r+0x600>)
 800519e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051a2:	f7fb fa31 	bl	8000608 <__aeabi_dmul>
 80051a6:	e9cd 0100 	strd	r0, r1, [sp]
 80051aa:	e7c4      	b.n	8005136 <_dtoa_r+0x4e6>
 80051ac:	462a      	mov	r2, r5
 80051ae:	4633      	mov	r3, r6
 80051b0:	f7fb fa2a 	bl	8000608 <__aeabi_dmul>
 80051b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80051b8:	eb0b 0507 	add.w	r5, fp, r7
 80051bc:	465e      	mov	r6, fp
 80051be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051c2:	f7fb fcd1 	bl	8000b68 <__aeabi_d2iz>
 80051c6:	4607      	mov	r7, r0
 80051c8:	f7fb f9b4 	bl	8000534 <__aeabi_i2d>
 80051cc:	3730      	adds	r7, #48	; 0x30
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051d6:	f7fb f85f 	bl	8000298 <__aeabi_dsub>
 80051da:	f806 7b01 	strb.w	r7, [r6], #1
 80051de:	42ae      	cmp	r6, r5
 80051e0:	e9cd 0100 	strd	r0, r1, [sp]
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	d126      	bne.n	8005238 <_dtoa_r+0x5e8>
 80051ea:	4b1c      	ldr	r3, [pc, #112]	; (800525c <_dtoa_r+0x60c>)
 80051ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80051f0:	f7fb f854 	bl	800029c <__adddf3>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051fc:	f7fb fc94 	bl	8000b28 <__aeabi_dcmpgt>
 8005200:	2800      	cmp	r0, #0
 8005202:	d174      	bne.n	80052ee <_dtoa_r+0x69e>
 8005204:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005208:	2000      	movs	r0, #0
 800520a:	4914      	ldr	r1, [pc, #80]	; (800525c <_dtoa_r+0x60c>)
 800520c:	f7fb f844 	bl	8000298 <__aeabi_dsub>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005218:	f7fb fc68 	bl	8000aec <__aeabi_dcmplt>
 800521c:	2800      	cmp	r0, #0
 800521e:	f43f af30 	beq.w	8005082 <_dtoa_r+0x432>
 8005222:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005226:	2b30      	cmp	r3, #48	; 0x30
 8005228:	f105 32ff 	add.w	r2, r5, #4294967295
 800522c:	d002      	beq.n	8005234 <_dtoa_r+0x5e4>
 800522e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005232:	e04a      	b.n	80052ca <_dtoa_r+0x67a>
 8005234:	4615      	mov	r5, r2
 8005236:	e7f4      	b.n	8005222 <_dtoa_r+0x5d2>
 8005238:	4b05      	ldr	r3, [pc, #20]	; (8005250 <_dtoa_r+0x600>)
 800523a:	f7fb f9e5 	bl	8000608 <__aeabi_dmul>
 800523e:	e9cd 0100 	strd	r0, r1, [sp]
 8005242:	e7bc      	b.n	80051be <_dtoa_r+0x56e>
 8005244:	080068c8 	.word	0x080068c8
 8005248:	080068a0 	.word	0x080068a0
 800524c:	3ff00000 	.word	0x3ff00000
 8005250:	40240000 	.word	0x40240000
 8005254:	401c0000 	.word	0x401c0000
 8005258:	40140000 	.word	0x40140000
 800525c:	3fe00000 	.word	0x3fe00000
 8005260:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005264:	465d      	mov	r5, fp
 8005266:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800526a:	4630      	mov	r0, r6
 800526c:	4639      	mov	r1, r7
 800526e:	f7fb faf5 	bl	800085c <__aeabi_ddiv>
 8005272:	f7fb fc79 	bl	8000b68 <__aeabi_d2iz>
 8005276:	4680      	mov	r8, r0
 8005278:	f7fb f95c 	bl	8000534 <__aeabi_i2d>
 800527c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005280:	f7fb f9c2 	bl	8000608 <__aeabi_dmul>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4630      	mov	r0, r6
 800528a:	4639      	mov	r1, r7
 800528c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005290:	f7fb f802 	bl	8000298 <__aeabi_dsub>
 8005294:	f805 6b01 	strb.w	r6, [r5], #1
 8005298:	eba5 060b 	sub.w	r6, r5, fp
 800529c:	45b1      	cmp	r9, r6
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	d139      	bne.n	8005318 <_dtoa_r+0x6c8>
 80052a4:	f7fa fffa 	bl	800029c <__adddf3>
 80052a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ac:	4606      	mov	r6, r0
 80052ae:	460f      	mov	r7, r1
 80052b0:	f7fb fc3a 	bl	8000b28 <__aeabi_dcmpgt>
 80052b4:	b9c8      	cbnz	r0, 80052ea <_dtoa_r+0x69a>
 80052b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80052ba:	4630      	mov	r0, r6
 80052bc:	4639      	mov	r1, r7
 80052be:	f7fb fc0b 	bl	8000ad8 <__aeabi_dcmpeq>
 80052c2:	b110      	cbz	r0, 80052ca <_dtoa_r+0x67a>
 80052c4:	f018 0f01 	tst.w	r8, #1
 80052c8:	d10f      	bne.n	80052ea <_dtoa_r+0x69a>
 80052ca:	9904      	ldr	r1, [sp, #16]
 80052cc:	4620      	mov	r0, r4
 80052ce:	f000 fcaa 	bl	8005c26 <_Bfree>
 80052d2:	2300      	movs	r3, #0
 80052d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052d6:	702b      	strb	r3, [r5, #0]
 80052d8:	f10a 0301 	add.w	r3, sl, #1
 80052dc:	6013      	str	r3, [r2, #0]
 80052de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8241 	beq.w	8005768 <_dtoa_r+0xb18>
 80052e6:	601d      	str	r5, [r3, #0]
 80052e8:	e23e      	b.n	8005768 <_dtoa_r+0xb18>
 80052ea:	f8cd a020 	str.w	sl, [sp, #32]
 80052ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80052f2:	2a39      	cmp	r2, #57	; 0x39
 80052f4:	f105 33ff 	add.w	r3, r5, #4294967295
 80052f8:	d108      	bne.n	800530c <_dtoa_r+0x6bc>
 80052fa:	459b      	cmp	fp, r3
 80052fc:	d10a      	bne.n	8005314 <_dtoa_r+0x6c4>
 80052fe:	9b08      	ldr	r3, [sp, #32]
 8005300:	3301      	adds	r3, #1
 8005302:	9308      	str	r3, [sp, #32]
 8005304:	2330      	movs	r3, #48	; 0x30
 8005306:	f88b 3000 	strb.w	r3, [fp]
 800530a:	465b      	mov	r3, fp
 800530c:	781a      	ldrb	r2, [r3, #0]
 800530e:	3201      	adds	r2, #1
 8005310:	701a      	strb	r2, [r3, #0]
 8005312:	e78c      	b.n	800522e <_dtoa_r+0x5de>
 8005314:	461d      	mov	r5, r3
 8005316:	e7ea      	b.n	80052ee <_dtoa_r+0x69e>
 8005318:	2200      	movs	r2, #0
 800531a:	4b9b      	ldr	r3, [pc, #620]	; (8005588 <_dtoa_r+0x938>)
 800531c:	f7fb f974 	bl	8000608 <__aeabi_dmul>
 8005320:	2200      	movs	r2, #0
 8005322:	2300      	movs	r3, #0
 8005324:	4606      	mov	r6, r0
 8005326:	460f      	mov	r7, r1
 8005328:	f7fb fbd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800532c:	2800      	cmp	r0, #0
 800532e:	d09a      	beq.n	8005266 <_dtoa_r+0x616>
 8005330:	e7cb      	b.n	80052ca <_dtoa_r+0x67a>
 8005332:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005334:	2a00      	cmp	r2, #0
 8005336:	f000 808b 	beq.w	8005450 <_dtoa_r+0x800>
 800533a:	9a06      	ldr	r2, [sp, #24]
 800533c:	2a01      	cmp	r2, #1
 800533e:	dc6e      	bgt.n	800541e <_dtoa_r+0x7ce>
 8005340:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005342:	2a00      	cmp	r2, #0
 8005344:	d067      	beq.n	8005416 <_dtoa_r+0x7c6>
 8005346:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800534a:	9f07      	ldr	r7, [sp, #28]
 800534c:	9d05      	ldr	r5, [sp, #20]
 800534e:	9a05      	ldr	r2, [sp, #20]
 8005350:	2101      	movs	r1, #1
 8005352:	441a      	add	r2, r3
 8005354:	4620      	mov	r0, r4
 8005356:	9205      	str	r2, [sp, #20]
 8005358:	4498      	add	r8, r3
 800535a:	f000 fd04 	bl	8005d66 <__i2b>
 800535e:	4606      	mov	r6, r0
 8005360:	2d00      	cmp	r5, #0
 8005362:	dd0c      	ble.n	800537e <_dtoa_r+0x72e>
 8005364:	f1b8 0f00 	cmp.w	r8, #0
 8005368:	dd09      	ble.n	800537e <_dtoa_r+0x72e>
 800536a:	4545      	cmp	r5, r8
 800536c:	9a05      	ldr	r2, [sp, #20]
 800536e:	462b      	mov	r3, r5
 8005370:	bfa8      	it	ge
 8005372:	4643      	movge	r3, r8
 8005374:	1ad2      	subs	r2, r2, r3
 8005376:	9205      	str	r2, [sp, #20]
 8005378:	1aed      	subs	r5, r5, r3
 800537a:	eba8 0803 	sub.w	r8, r8, r3
 800537e:	9b07      	ldr	r3, [sp, #28]
 8005380:	b1eb      	cbz	r3, 80053be <_dtoa_r+0x76e>
 8005382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005384:	2b00      	cmp	r3, #0
 8005386:	d067      	beq.n	8005458 <_dtoa_r+0x808>
 8005388:	b18f      	cbz	r7, 80053ae <_dtoa_r+0x75e>
 800538a:	4631      	mov	r1, r6
 800538c:	463a      	mov	r2, r7
 800538e:	4620      	mov	r0, r4
 8005390:	f000 fd88 	bl	8005ea4 <__pow5mult>
 8005394:	9a04      	ldr	r2, [sp, #16]
 8005396:	4601      	mov	r1, r0
 8005398:	4606      	mov	r6, r0
 800539a:	4620      	mov	r0, r4
 800539c:	f000 fcec 	bl	8005d78 <__multiply>
 80053a0:	9904      	ldr	r1, [sp, #16]
 80053a2:	9008      	str	r0, [sp, #32]
 80053a4:	4620      	mov	r0, r4
 80053a6:	f000 fc3e 	bl	8005c26 <_Bfree>
 80053aa:	9b08      	ldr	r3, [sp, #32]
 80053ac:	9304      	str	r3, [sp, #16]
 80053ae:	9b07      	ldr	r3, [sp, #28]
 80053b0:	1bda      	subs	r2, r3, r7
 80053b2:	d004      	beq.n	80053be <_dtoa_r+0x76e>
 80053b4:	9904      	ldr	r1, [sp, #16]
 80053b6:	4620      	mov	r0, r4
 80053b8:	f000 fd74 	bl	8005ea4 <__pow5mult>
 80053bc:	9004      	str	r0, [sp, #16]
 80053be:	2101      	movs	r1, #1
 80053c0:	4620      	mov	r0, r4
 80053c2:	f000 fcd0 	bl	8005d66 <__i2b>
 80053c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053c8:	4607      	mov	r7, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 81d0 	beq.w	8005770 <_dtoa_r+0xb20>
 80053d0:	461a      	mov	r2, r3
 80053d2:	4601      	mov	r1, r0
 80053d4:	4620      	mov	r0, r4
 80053d6:	f000 fd65 	bl	8005ea4 <__pow5mult>
 80053da:	9b06      	ldr	r3, [sp, #24]
 80053dc:	2b01      	cmp	r3, #1
 80053de:	4607      	mov	r7, r0
 80053e0:	dc40      	bgt.n	8005464 <_dtoa_r+0x814>
 80053e2:	9b00      	ldr	r3, [sp, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d139      	bne.n	800545c <_dtoa_r+0x80c>
 80053e8:	9b01      	ldr	r3, [sp, #4]
 80053ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d136      	bne.n	8005460 <_dtoa_r+0x810>
 80053f2:	9b01      	ldr	r3, [sp, #4]
 80053f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053f8:	0d1b      	lsrs	r3, r3, #20
 80053fa:	051b      	lsls	r3, r3, #20
 80053fc:	b12b      	cbz	r3, 800540a <_dtoa_r+0x7ba>
 80053fe:	9b05      	ldr	r3, [sp, #20]
 8005400:	3301      	adds	r3, #1
 8005402:	9305      	str	r3, [sp, #20]
 8005404:	f108 0801 	add.w	r8, r8, #1
 8005408:	2301      	movs	r3, #1
 800540a:	9307      	str	r3, [sp, #28]
 800540c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800540e:	2b00      	cmp	r3, #0
 8005410:	d12a      	bne.n	8005468 <_dtoa_r+0x818>
 8005412:	2001      	movs	r0, #1
 8005414:	e030      	b.n	8005478 <_dtoa_r+0x828>
 8005416:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005418:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800541c:	e795      	b.n	800534a <_dtoa_r+0x6fa>
 800541e:	9b07      	ldr	r3, [sp, #28]
 8005420:	f109 37ff 	add.w	r7, r9, #4294967295
 8005424:	42bb      	cmp	r3, r7
 8005426:	bfbf      	itttt	lt
 8005428:	9b07      	ldrlt	r3, [sp, #28]
 800542a:	9707      	strlt	r7, [sp, #28]
 800542c:	1afa      	sublt	r2, r7, r3
 800542e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005430:	bfbb      	ittet	lt
 8005432:	189b      	addlt	r3, r3, r2
 8005434:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005436:	1bdf      	subge	r7, r3, r7
 8005438:	2700      	movlt	r7, #0
 800543a:	f1b9 0f00 	cmp.w	r9, #0
 800543e:	bfb5      	itete	lt
 8005440:	9b05      	ldrlt	r3, [sp, #20]
 8005442:	9d05      	ldrge	r5, [sp, #20]
 8005444:	eba3 0509 	sublt.w	r5, r3, r9
 8005448:	464b      	movge	r3, r9
 800544a:	bfb8      	it	lt
 800544c:	2300      	movlt	r3, #0
 800544e:	e77e      	b.n	800534e <_dtoa_r+0x6fe>
 8005450:	9f07      	ldr	r7, [sp, #28]
 8005452:	9d05      	ldr	r5, [sp, #20]
 8005454:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005456:	e783      	b.n	8005360 <_dtoa_r+0x710>
 8005458:	9a07      	ldr	r2, [sp, #28]
 800545a:	e7ab      	b.n	80053b4 <_dtoa_r+0x764>
 800545c:	2300      	movs	r3, #0
 800545e:	e7d4      	b.n	800540a <_dtoa_r+0x7ba>
 8005460:	9b00      	ldr	r3, [sp, #0]
 8005462:	e7d2      	b.n	800540a <_dtoa_r+0x7ba>
 8005464:	2300      	movs	r3, #0
 8005466:	9307      	str	r3, [sp, #28]
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800546e:	6918      	ldr	r0, [r3, #16]
 8005470:	f000 fc2b 	bl	8005cca <__hi0bits>
 8005474:	f1c0 0020 	rsb	r0, r0, #32
 8005478:	4440      	add	r0, r8
 800547a:	f010 001f 	ands.w	r0, r0, #31
 800547e:	d047      	beq.n	8005510 <_dtoa_r+0x8c0>
 8005480:	f1c0 0320 	rsb	r3, r0, #32
 8005484:	2b04      	cmp	r3, #4
 8005486:	dd3b      	ble.n	8005500 <_dtoa_r+0x8b0>
 8005488:	9b05      	ldr	r3, [sp, #20]
 800548a:	f1c0 001c 	rsb	r0, r0, #28
 800548e:	4403      	add	r3, r0
 8005490:	9305      	str	r3, [sp, #20]
 8005492:	4405      	add	r5, r0
 8005494:	4480      	add	r8, r0
 8005496:	9b05      	ldr	r3, [sp, #20]
 8005498:	2b00      	cmp	r3, #0
 800549a:	dd05      	ble.n	80054a8 <_dtoa_r+0x858>
 800549c:	461a      	mov	r2, r3
 800549e:	9904      	ldr	r1, [sp, #16]
 80054a0:	4620      	mov	r0, r4
 80054a2:	f000 fd4d 	bl	8005f40 <__lshift>
 80054a6:	9004      	str	r0, [sp, #16]
 80054a8:	f1b8 0f00 	cmp.w	r8, #0
 80054ac:	dd05      	ble.n	80054ba <_dtoa_r+0x86a>
 80054ae:	4639      	mov	r1, r7
 80054b0:	4642      	mov	r2, r8
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fd44 	bl	8005f40 <__lshift>
 80054b8:	4607      	mov	r7, r0
 80054ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054bc:	b353      	cbz	r3, 8005514 <_dtoa_r+0x8c4>
 80054be:	4639      	mov	r1, r7
 80054c0:	9804      	ldr	r0, [sp, #16]
 80054c2:	f000 fd91 	bl	8005fe8 <__mcmp>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	da24      	bge.n	8005514 <_dtoa_r+0x8c4>
 80054ca:	2300      	movs	r3, #0
 80054cc:	220a      	movs	r2, #10
 80054ce:	9904      	ldr	r1, [sp, #16]
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 fbbf 	bl	8005c54 <__multadd>
 80054d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d8:	9004      	str	r0, [sp, #16]
 80054da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 814d 	beq.w	800577e <_dtoa_r+0xb2e>
 80054e4:	2300      	movs	r3, #0
 80054e6:	4631      	mov	r1, r6
 80054e8:	220a      	movs	r2, #10
 80054ea:	4620      	mov	r0, r4
 80054ec:	f000 fbb2 	bl	8005c54 <__multadd>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	4606      	mov	r6, r0
 80054f6:	dc4f      	bgt.n	8005598 <_dtoa_r+0x948>
 80054f8:	9b06      	ldr	r3, [sp, #24]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	dd4c      	ble.n	8005598 <_dtoa_r+0x948>
 80054fe:	e011      	b.n	8005524 <_dtoa_r+0x8d4>
 8005500:	d0c9      	beq.n	8005496 <_dtoa_r+0x846>
 8005502:	9a05      	ldr	r2, [sp, #20]
 8005504:	331c      	adds	r3, #28
 8005506:	441a      	add	r2, r3
 8005508:	9205      	str	r2, [sp, #20]
 800550a:	441d      	add	r5, r3
 800550c:	4498      	add	r8, r3
 800550e:	e7c2      	b.n	8005496 <_dtoa_r+0x846>
 8005510:	4603      	mov	r3, r0
 8005512:	e7f6      	b.n	8005502 <_dtoa_r+0x8b2>
 8005514:	f1b9 0f00 	cmp.w	r9, #0
 8005518:	dc38      	bgt.n	800558c <_dtoa_r+0x93c>
 800551a:	9b06      	ldr	r3, [sp, #24]
 800551c:	2b02      	cmp	r3, #2
 800551e:	dd35      	ble.n	800558c <_dtoa_r+0x93c>
 8005520:	f8cd 9008 	str.w	r9, [sp, #8]
 8005524:	9b02      	ldr	r3, [sp, #8]
 8005526:	b963      	cbnz	r3, 8005542 <_dtoa_r+0x8f2>
 8005528:	4639      	mov	r1, r7
 800552a:	2205      	movs	r2, #5
 800552c:	4620      	mov	r0, r4
 800552e:	f000 fb91 	bl	8005c54 <__multadd>
 8005532:	4601      	mov	r1, r0
 8005534:	4607      	mov	r7, r0
 8005536:	9804      	ldr	r0, [sp, #16]
 8005538:	f000 fd56 	bl	8005fe8 <__mcmp>
 800553c:	2800      	cmp	r0, #0
 800553e:	f73f adcc 	bgt.w	80050da <_dtoa_r+0x48a>
 8005542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005544:	465d      	mov	r5, fp
 8005546:	ea6f 0a03 	mvn.w	sl, r3
 800554a:	f04f 0900 	mov.w	r9, #0
 800554e:	4639      	mov	r1, r7
 8005550:	4620      	mov	r0, r4
 8005552:	f000 fb68 	bl	8005c26 <_Bfree>
 8005556:	2e00      	cmp	r6, #0
 8005558:	f43f aeb7 	beq.w	80052ca <_dtoa_r+0x67a>
 800555c:	f1b9 0f00 	cmp.w	r9, #0
 8005560:	d005      	beq.n	800556e <_dtoa_r+0x91e>
 8005562:	45b1      	cmp	r9, r6
 8005564:	d003      	beq.n	800556e <_dtoa_r+0x91e>
 8005566:	4649      	mov	r1, r9
 8005568:	4620      	mov	r0, r4
 800556a:	f000 fb5c 	bl	8005c26 <_Bfree>
 800556e:	4631      	mov	r1, r6
 8005570:	4620      	mov	r0, r4
 8005572:	f000 fb58 	bl	8005c26 <_Bfree>
 8005576:	e6a8      	b.n	80052ca <_dtoa_r+0x67a>
 8005578:	2700      	movs	r7, #0
 800557a:	463e      	mov	r6, r7
 800557c:	e7e1      	b.n	8005542 <_dtoa_r+0x8f2>
 800557e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005582:	463e      	mov	r6, r7
 8005584:	e5a9      	b.n	80050da <_dtoa_r+0x48a>
 8005586:	bf00      	nop
 8005588:	40240000 	.word	0x40240000
 800558c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800558e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 80fa 	beq.w	800578c <_dtoa_r+0xb3c>
 8005598:	2d00      	cmp	r5, #0
 800559a:	dd05      	ble.n	80055a8 <_dtoa_r+0x958>
 800559c:	4631      	mov	r1, r6
 800559e:	462a      	mov	r2, r5
 80055a0:	4620      	mov	r0, r4
 80055a2:	f000 fccd 	bl	8005f40 <__lshift>
 80055a6:	4606      	mov	r6, r0
 80055a8:	9b07      	ldr	r3, [sp, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d04c      	beq.n	8005648 <_dtoa_r+0x9f8>
 80055ae:	6871      	ldr	r1, [r6, #4]
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fb04 	bl	8005bbe <_Balloc>
 80055b6:	6932      	ldr	r2, [r6, #16]
 80055b8:	3202      	adds	r2, #2
 80055ba:	4605      	mov	r5, r0
 80055bc:	0092      	lsls	r2, r2, #2
 80055be:	f106 010c 	add.w	r1, r6, #12
 80055c2:	300c      	adds	r0, #12
 80055c4:	f000 faf0 	bl	8005ba8 <memcpy>
 80055c8:	2201      	movs	r2, #1
 80055ca:	4629      	mov	r1, r5
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 fcb7 	bl	8005f40 <__lshift>
 80055d2:	9b00      	ldr	r3, [sp, #0]
 80055d4:	f8cd b014 	str.w	fp, [sp, #20]
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	46b1      	mov	r9, r6
 80055de:	9307      	str	r3, [sp, #28]
 80055e0:	4606      	mov	r6, r0
 80055e2:	4639      	mov	r1, r7
 80055e4:	9804      	ldr	r0, [sp, #16]
 80055e6:	f7ff faa5 	bl	8004b34 <quorem>
 80055ea:	4649      	mov	r1, r9
 80055ec:	4605      	mov	r5, r0
 80055ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80055f2:	9804      	ldr	r0, [sp, #16]
 80055f4:	f000 fcf8 	bl	8005fe8 <__mcmp>
 80055f8:	4632      	mov	r2, r6
 80055fa:	9000      	str	r0, [sp, #0]
 80055fc:	4639      	mov	r1, r7
 80055fe:	4620      	mov	r0, r4
 8005600:	f000 fd0c 	bl	800601c <__mdiff>
 8005604:	68c3      	ldr	r3, [r0, #12]
 8005606:	4602      	mov	r2, r0
 8005608:	bb03      	cbnz	r3, 800564c <_dtoa_r+0x9fc>
 800560a:	4601      	mov	r1, r0
 800560c:	9008      	str	r0, [sp, #32]
 800560e:	9804      	ldr	r0, [sp, #16]
 8005610:	f000 fcea 	bl	8005fe8 <__mcmp>
 8005614:	9a08      	ldr	r2, [sp, #32]
 8005616:	4603      	mov	r3, r0
 8005618:	4611      	mov	r1, r2
 800561a:	4620      	mov	r0, r4
 800561c:	9308      	str	r3, [sp, #32]
 800561e:	f000 fb02 	bl	8005c26 <_Bfree>
 8005622:	9b08      	ldr	r3, [sp, #32]
 8005624:	b9a3      	cbnz	r3, 8005650 <_dtoa_r+0xa00>
 8005626:	9a06      	ldr	r2, [sp, #24]
 8005628:	b992      	cbnz	r2, 8005650 <_dtoa_r+0xa00>
 800562a:	9a07      	ldr	r2, [sp, #28]
 800562c:	b982      	cbnz	r2, 8005650 <_dtoa_r+0xa00>
 800562e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005632:	d029      	beq.n	8005688 <_dtoa_r+0xa38>
 8005634:	9b00      	ldr	r3, [sp, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	dd01      	ble.n	800563e <_dtoa_r+0x9ee>
 800563a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800563e:	9b05      	ldr	r3, [sp, #20]
 8005640:	1c5d      	adds	r5, r3, #1
 8005642:	f883 8000 	strb.w	r8, [r3]
 8005646:	e782      	b.n	800554e <_dtoa_r+0x8fe>
 8005648:	4630      	mov	r0, r6
 800564a:	e7c2      	b.n	80055d2 <_dtoa_r+0x982>
 800564c:	2301      	movs	r3, #1
 800564e:	e7e3      	b.n	8005618 <_dtoa_r+0x9c8>
 8005650:	9a00      	ldr	r2, [sp, #0]
 8005652:	2a00      	cmp	r2, #0
 8005654:	db04      	blt.n	8005660 <_dtoa_r+0xa10>
 8005656:	d125      	bne.n	80056a4 <_dtoa_r+0xa54>
 8005658:	9a06      	ldr	r2, [sp, #24]
 800565a:	bb1a      	cbnz	r2, 80056a4 <_dtoa_r+0xa54>
 800565c:	9a07      	ldr	r2, [sp, #28]
 800565e:	bb0a      	cbnz	r2, 80056a4 <_dtoa_r+0xa54>
 8005660:	2b00      	cmp	r3, #0
 8005662:	ddec      	ble.n	800563e <_dtoa_r+0x9ee>
 8005664:	2201      	movs	r2, #1
 8005666:	9904      	ldr	r1, [sp, #16]
 8005668:	4620      	mov	r0, r4
 800566a:	f000 fc69 	bl	8005f40 <__lshift>
 800566e:	4639      	mov	r1, r7
 8005670:	9004      	str	r0, [sp, #16]
 8005672:	f000 fcb9 	bl	8005fe8 <__mcmp>
 8005676:	2800      	cmp	r0, #0
 8005678:	dc03      	bgt.n	8005682 <_dtoa_r+0xa32>
 800567a:	d1e0      	bne.n	800563e <_dtoa_r+0x9ee>
 800567c:	f018 0f01 	tst.w	r8, #1
 8005680:	d0dd      	beq.n	800563e <_dtoa_r+0x9ee>
 8005682:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005686:	d1d8      	bne.n	800563a <_dtoa_r+0x9ea>
 8005688:	9b05      	ldr	r3, [sp, #20]
 800568a:	9a05      	ldr	r2, [sp, #20]
 800568c:	1c5d      	adds	r5, r3, #1
 800568e:	2339      	movs	r3, #57	; 0x39
 8005690:	7013      	strb	r3, [r2, #0]
 8005692:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005696:	2b39      	cmp	r3, #57	; 0x39
 8005698:	f105 32ff 	add.w	r2, r5, #4294967295
 800569c:	d04f      	beq.n	800573e <_dtoa_r+0xaee>
 800569e:	3301      	adds	r3, #1
 80056a0:	7013      	strb	r3, [r2, #0]
 80056a2:	e754      	b.n	800554e <_dtoa_r+0x8fe>
 80056a4:	9a05      	ldr	r2, [sp, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f102 0501 	add.w	r5, r2, #1
 80056ac:	dd06      	ble.n	80056bc <_dtoa_r+0xa6c>
 80056ae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056b2:	d0e9      	beq.n	8005688 <_dtoa_r+0xa38>
 80056b4:	f108 0801 	add.w	r8, r8, #1
 80056b8:	9b05      	ldr	r3, [sp, #20]
 80056ba:	e7c2      	b.n	8005642 <_dtoa_r+0x9f2>
 80056bc:	9a02      	ldr	r2, [sp, #8]
 80056be:	f805 8c01 	strb.w	r8, [r5, #-1]
 80056c2:	eba5 030b 	sub.w	r3, r5, fp
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d021      	beq.n	800570e <_dtoa_r+0xabe>
 80056ca:	2300      	movs	r3, #0
 80056cc:	220a      	movs	r2, #10
 80056ce:	9904      	ldr	r1, [sp, #16]
 80056d0:	4620      	mov	r0, r4
 80056d2:	f000 fabf 	bl	8005c54 <__multadd>
 80056d6:	45b1      	cmp	r9, r6
 80056d8:	9004      	str	r0, [sp, #16]
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	f04f 020a 	mov.w	r2, #10
 80056e2:	4649      	mov	r1, r9
 80056e4:	4620      	mov	r0, r4
 80056e6:	d105      	bne.n	80056f4 <_dtoa_r+0xaa4>
 80056e8:	f000 fab4 	bl	8005c54 <__multadd>
 80056ec:	4681      	mov	r9, r0
 80056ee:	4606      	mov	r6, r0
 80056f0:	9505      	str	r5, [sp, #20]
 80056f2:	e776      	b.n	80055e2 <_dtoa_r+0x992>
 80056f4:	f000 faae 	bl	8005c54 <__multadd>
 80056f8:	4631      	mov	r1, r6
 80056fa:	4681      	mov	r9, r0
 80056fc:	2300      	movs	r3, #0
 80056fe:	220a      	movs	r2, #10
 8005700:	4620      	mov	r0, r4
 8005702:	f000 faa7 	bl	8005c54 <__multadd>
 8005706:	4606      	mov	r6, r0
 8005708:	e7f2      	b.n	80056f0 <_dtoa_r+0xaa0>
 800570a:	f04f 0900 	mov.w	r9, #0
 800570e:	2201      	movs	r2, #1
 8005710:	9904      	ldr	r1, [sp, #16]
 8005712:	4620      	mov	r0, r4
 8005714:	f000 fc14 	bl	8005f40 <__lshift>
 8005718:	4639      	mov	r1, r7
 800571a:	9004      	str	r0, [sp, #16]
 800571c:	f000 fc64 	bl	8005fe8 <__mcmp>
 8005720:	2800      	cmp	r0, #0
 8005722:	dcb6      	bgt.n	8005692 <_dtoa_r+0xa42>
 8005724:	d102      	bne.n	800572c <_dtoa_r+0xadc>
 8005726:	f018 0f01 	tst.w	r8, #1
 800572a:	d1b2      	bne.n	8005692 <_dtoa_r+0xa42>
 800572c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005730:	2b30      	cmp	r3, #48	; 0x30
 8005732:	f105 32ff 	add.w	r2, r5, #4294967295
 8005736:	f47f af0a 	bne.w	800554e <_dtoa_r+0x8fe>
 800573a:	4615      	mov	r5, r2
 800573c:	e7f6      	b.n	800572c <_dtoa_r+0xadc>
 800573e:	4593      	cmp	fp, r2
 8005740:	d105      	bne.n	800574e <_dtoa_r+0xafe>
 8005742:	2331      	movs	r3, #49	; 0x31
 8005744:	f10a 0a01 	add.w	sl, sl, #1
 8005748:	f88b 3000 	strb.w	r3, [fp]
 800574c:	e6ff      	b.n	800554e <_dtoa_r+0x8fe>
 800574e:	4615      	mov	r5, r2
 8005750:	e79f      	b.n	8005692 <_dtoa_r+0xa42>
 8005752:	f8df b064 	ldr.w	fp, [pc, #100]	; 80057b8 <_dtoa_r+0xb68>
 8005756:	e007      	b.n	8005768 <_dtoa_r+0xb18>
 8005758:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800575a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80057bc <_dtoa_r+0xb6c>
 800575e:	b11b      	cbz	r3, 8005768 <_dtoa_r+0xb18>
 8005760:	f10b 0308 	add.w	r3, fp, #8
 8005764:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	4658      	mov	r0, fp
 800576a:	b017      	add	sp, #92	; 0x5c
 800576c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005770:	9b06      	ldr	r3, [sp, #24]
 8005772:	2b01      	cmp	r3, #1
 8005774:	f77f ae35 	ble.w	80053e2 <_dtoa_r+0x792>
 8005778:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800577a:	9307      	str	r3, [sp, #28]
 800577c:	e649      	b.n	8005412 <_dtoa_r+0x7c2>
 800577e:	9b02      	ldr	r3, [sp, #8]
 8005780:	2b00      	cmp	r3, #0
 8005782:	dc03      	bgt.n	800578c <_dtoa_r+0xb3c>
 8005784:	9b06      	ldr	r3, [sp, #24]
 8005786:	2b02      	cmp	r3, #2
 8005788:	f73f aecc 	bgt.w	8005524 <_dtoa_r+0x8d4>
 800578c:	465d      	mov	r5, fp
 800578e:	4639      	mov	r1, r7
 8005790:	9804      	ldr	r0, [sp, #16]
 8005792:	f7ff f9cf 	bl	8004b34 <quorem>
 8005796:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800579a:	f805 8b01 	strb.w	r8, [r5], #1
 800579e:	9a02      	ldr	r2, [sp, #8]
 80057a0:	eba5 030b 	sub.w	r3, r5, fp
 80057a4:	429a      	cmp	r2, r3
 80057a6:	ddb0      	ble.n	800570a <_dtoa_r+0xaba>
 80057a8:	2300      	movs	r3, #0
 80057aa:	220a      	movs	r2, #10
 80057ac:	9904      	ldr	r1, [sp, #16]
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 fa50 	bl	8005c54 <__multadd>
 80057b4:	9004      	str	r0, [sp, #16]
 80057b6:	e7ea      	b.n	800578e <_dtoa_r+0xb3e>
 80057b8:	08006808 	.word	0x08006808
 80057bc:	0800682c 	.word	0x0800682c

080057c0 <__sflush_r>:
 80057c0:	898a      	ldrh	r2, [r1, #12]
 80057c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057c6:	4605      	mov	r5, r0
 80057c8:	0710      	lsls	r0, r2, #28
 80057ca:	460c      	mov	r4, r1
 80057cc:	d458      	bmi.n	8005880 <__sflush_r+0xc0>
 80057ce:	684b      	ldr	r3, [r1, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	dc05      	bgt.n	80057e0 <__sflush_r+0x20>
 80057d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	dc02      	bgt.n	80057e0 <__sflush_r+0x20>
 80057da:	2000      	movs	r0, #0
 80057dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057e2:	2e00      	cmp	r6, #0
 80057e4:	d0f9      	beq.n	80057da <__sflush_r+0x1a>
 80057e6:	2300      	movs	r3, #0
 80057e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057ec:	682f      	ldr	r7, [r5, #0]
 80057ee:	6a21      	ldr	r1, [r4, #32]
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	d032      	beq.n	800585a <__sflush_r+0x9a>
 80057f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	075a      	lsls	r2, r3, #29
 80057fa:	d505      	bpl.n	8005808 <__sflush_r+0x48>
 80057fc:	6863      	ldr	r3, [r4, #4]
 80057fe:	1ac0      	subs	r0, r0, r3
 8005800:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005802:	b10b      	cbz	r3, 8005808 <__sflush_r+0x48>
 8005804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005806:	1ac0      	subs	r0, r0, r3
 8005808:	2300      	movs	r3, #0
 800580a:	4602      	mov	r2, r0
 800580c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800580e:	6a21      	ldr	r1, [r4, #32]
 8005810:	4628      	mov	r0, r5
 8005812:	47b0      	blx	r6
 8005814:	1c43      	adds	r3, r0, #1
 8005816:	89a3      	ldrh	r3, [r4, #12]
 8005818:	d106      	bne.n	8005828 <__sflush_r+0x68>
 800581a:	6829      	ldr	r1, [r5, #0]
 800581c:	291d      	cmp	r1, #29
 800581e:	d848      	bhi.n	80058b2 <__sflush_r+0xf2>
 8005820:	4a29      	ldr	r2, [pc, #164]	; (80058c8 <__sflush_r+0x108>)
 8005822:	40ca      	lsrs	r2, r1
 8005824:	07d6      	lsls	r6, r2, #31
 8005826:	d544      	bpl.n	80058b2 <__sflush_r+0xf2>
 8005828:	2200      	movs	r2, #0
 800582a:	6062      	str	r2, [r4, #4]
 800582c:	04d9      	lsls	r1, r3, #19
 800582e:	6922      	ldr	r2, [r4, #16]
 8005830:	6022      	str	r2, [r4, #0]
 8005832:	d504      	bpl.n	800583e <__sflush_r+0x7e>
 8005834:	1c42      	adds	r2, r0, #1
 8005836:	d101      	bne.n	800583c <__sflush_r+0x7c>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b903      	cbnz	r3, 800583e <__sflush_r+0x7e>
 800583c:	6560      	str	r0, [r4, #84]	; 0x54
 800583e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005840:	602f      	str	r7, [r5, #0]
 8005842:	2900      	cmp	r1, #0
 8005844:	d0c9      	beq.n	80057da <__sflush_r+0x1a>
 8005846:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800584a:	4299      	cmp	r1, r3
 800584c:	d002      	beq.n	8005854 <__sflush_r+0x94>
 800584e:	4628      	mov	r0, r5
 8005850:	f000 fc9e 	bl	8006190 <_free_r>
 8005854:	2000      	movs	r0, #0
 8005856:	6360      	str	r0, [r4, #52]	; 0x34
 8005858:	e7c0      	b.n	80057dc <__sflush_r+0x1c>
 800585a:	2301      	movs	r3, #1
 800585c:	4628      	mov	r0, r5
 800585e:	47b0      	blx	r6
 8005860:	1c41      	adds	r1, r0, #1
 8005862:	d1c8      	bne.n	80057f6 <__sflush_r+0x36>
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0c5      	beq.n	80057f6 <__sflush_r+0x36>
 800586a:	2b1d      	cmp	r3, #29
 800586c:	d001      	beq.n	8005872 <__sflush_r+0xb2>
 800586e:	2b16      	cmp	r3, #22
 8005870:	d101      	bne.n	8005876 <__sflush_r+0xb6>
 8005872:	602f      	str	r7, [r5, #0]
 8005874:	e7b1      	b.n	80057da <__sflush_r+0x1a>
 8005876:	89a3      	ldrh	r3, [r4, #12]
 8005878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	e7ad      	b.n	80057dc <__sflush_r+0x1c>
 8005880:	690f      	ldr	r7, [r1, #16]
 8005882:	2f00      	cmp	r7, #0
 8005884:	d0a9      	beq.n	80057da <__sflush_r+0x1a>
 8005886:	0793      	lsls	r3, r2, #30
 8005888:	680e      	ldr	r6, [r1, #0]
 800588a:	bf08      	it	eq
 800588c:	694b      	ldreq	r3, [r1, #20]
 800588e:	600f      	str	r7, [r1, #0]
 8005890:	bf18      	it	ne
 8005892:	2300      	movne	r3, #0
 8005894:	eba6 0807 	sub.w	r8, r6, r7
 8005898:	608b      	str	r3, [r1, #8]
 800589a:	f1b8 0f00 	cmp.w	r8, #0
 800589e:	dd9c      	ble.n	80057da <__sflush_r+0x1a>
 80058a0:	4643      	mov	r3, r8
 80058a2:	463a      	mov	r2, r7
 80058a4:	6a21      	ldr	r1, [r4, #32]
 80058a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80058a8:	4628      	mov	r0, r5
 80058aa:	47b0      	blx	r6
 80058ac:	2800      	cmp	r0, #0
 80058ae:	dc06      	bgt.n	80058be <__sflush_r+0xfe>
 80058b0:	89a3      	ldrh	r3, [r4, #12]
 80058b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058b6:	81a3      	strh	r3, [r4, #12]
 80058b8:	f04f 30ff 	mov.w	r0, #4294967295
 80058bc:	e78e      	b.n	80057dc <__sflush_r+0x1c>
 80058be:	4407      	add	r7, r0
 80058c0:	eba8 0800 	sub.w	r8, r8, r0
 80058c4:	e7e9      	b.n	800589a <__sflush_r+0xda>
 80058c6:	bf00      	nop
 80058c8:	20400001 	.word	0x20400001

080058cc <_fflush_r>:
 80058cc:	b538      	push	{r3, r4, r5, lr}
 80058ce:	690b      	ldr	r3, [r1, #16]
 80058d0:	4605      	mov	r5, r0
 80058d2:	460c      	mov	r4, r1
 80058d4:	b1db      	cbz	r3, 800590e <_fflush_r+0x42>
 80058d6:	b118      	cbz	r0, 80058e0 <_fflush_r+0x14>
 80058d8:	6983      	ldr	r3, [r0, #24]
 80058da:	b90b      	cbnz	r3, 80058e0 <_fflush_r+0x14>
 80058dc:	f000 f860 	bl	80059a0 <__sinit>
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <_fflush_r+0x48>)
 80058e2:	429c      	cmp	r4, r3
 80058e4:	d109      	bne.n	80058fa <_fflush_r+0x2e>
 80058e6:	686c      	ldr	r4, [r5, #4]
 80058e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ec:	b17b      	cbz	r3, 800590e <_fflush_r+0x42>
 80058ee:	4621      	mov	r1, r4
 80058f0:	4628      	mov	r0, r5
 80058f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f6:	f7ff bf63 	b.w	80057c0 <__sflush_r>
 80058fa:	4b07      	ldr	r3, [pc, #28]	; (8005918 <_fflush_r+0x4c>)
 80058fc:	429c      	cmp	r4, r3
 80058fe:	d101      	bne.n	8005904 <_fflush_r+0x38>
 8005900:	68ac      	ldr	r4, [r5, #8]
 8005902:	e7f1      	b.n	80058e8 <_fflush_r+0x1c>
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <_fflush_r+0x50>)
 8005906:	429c      	cmp	r4, r3
 8005908:	bf08      	it	eq
 800590a:	68ec      	ldreq	r4, [r5, #12]
 800590c:	e7ec      	b.n	80058e8 <_fflush_r+0x1c>
 800590e:	2000      	movs	r0, #0
 8005910:	bd38      	pop	{r3, r4, r5, pc}
 8005912:	bf00      	nop
 8005914:	0800685c 	.word	0x0800685c
 8005918:	0800687c 	.word	0x0800687c
 800591c:	0800683c 	.word	0x0800683c

08005920 <std>:
 8005920:	2300      	movs	r3, #0
 8005922:	b510      	push	{r4, lr}
 8005924:	4604      	mov	r4, r0
 8005926:	e9c0 3300 	strd	r3, r3, [r0]
 800592a:	6083      	str	r3, [r0, #8]
 800592c:	8181      	strh	r1, [r0, #12]
 800592e:	6643      	str	r3, [r0, #100]	; 0x64
 8005930:	81c2      	strh	r2, [r0, #14]
 8005932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005936:	6183      	str	r3, [r0, #24]
 8005938:	4619      	mov	r1, r3
 800593a:	2208      	movs	r2, #8
 800593c:	305c      	adds	r0, #92	; 0x5c
 800593e:	f7fe fb3f 	bl	8003fc0 <memset>
 8005942:	4b05      	ldr	r3, [pc, #20]	; (8005958 <std+0x38>)
 8005944:	6263      	str	r3, [r4, #36]	; 0x24
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <std+0x3c>)
 8005948:	62a3      	str	r3, [r4, #40]	; 0x28
 800594a:	4b05      	ldr	r3, [pc, #20]	; (8005960 <std+0x40>)
 800594c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800594e:	4b05      	ldr	r3, [pc, #20]	; (8005964 <std+0x44>)
 8005950:	6224      	str	r4, [r4, #32]
 8005952:	6323      	str	r3, [r4, #48]	; 0x30
 8005954:	bd10      	pop	{r4, pc}
 8005956:	bf00      	nop
 8005958:	08006581 	.word	0x08006581
 800595c:	080065a3 	.word	0x080065a3
 8005960:	080065db 	.word	0x080065db
 8005964:	080065ff 	.word	0x080065ff

08005968 <_cleanup_r>:
 8005968:	4901      	ldr	r1, [pc, #4]	; (8005970 <_cleanup_r+0x8>)
 800596a:	f000 b885 	b.w	8005a78 <_fwalk_reent>
 800596e:	bf00      	nop
 8005970:	080058cd 	.word	0x080058cd

08005974 <__sfmoreglue>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	1e4a      	subs	r2, r1, #1
 8005978:	2568      	movs	r5, #104	; 0x68
 800597a:	4355      	muls	r5, r2
 800597c:	460e      	mov	r6, r1
 800597e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005982:	f000 fc53 	bl	800622c <_malloc_r>
 8005986:	4604      	mov	r4, r0
 8005988:	b140      	cbz	r0, 800599c <__sfmoreglue+0x28>
 800598a:	2100      	movs	r1, #0
 800598c:	e9c0 1600 	strd	r1, r6, [r0]
 8005990:	300c      	adds	r0, #12
 8005992:	60a0      	str	r0, [r4, #8]
 8005994:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005998:	f7fe fb12 	bl	8003fc0 <memset>
 800599c:	4620      	mov	r0, r4
 800599e:	bd70      	pop	{r4, r5, r6, pc}

080059a0 <__sinit>:
 80059a0:	6983      	ldr	r3, [r0, #24]
 80059a2:	b510      	push	{r4, lr}
 80059a4:	4604      	mov	r4, r0
 80059a6:	bb33      	cbnz	r3, 80059f6 <__sinit+0x56>
 80059a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80059ac:	6503      	str	r3, [r0, #80]	; 0x50
 80059ae:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <__sinit+0x58>)
 80059b0:	4a12      	ldr	r2, [pc, #72]	; (80059fc <__sinit+0x5c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6282      	str	r2, [r0, #40]	; 0x28
 80059b6:	4298      	cmp	r0, r3
 80059b8:	bf04      	itt	eq
 80059ba:	2301      	moveq	r3, #1
 80059bc:	6183      	streq	r3, [r0, #24]
 80059be:	f000 f81f 	bl	8005a00 <__sfp>
 80059c2:	6060      	str	r0, [r4, #4]
 80059c4:	4620      	mov	r0, r4
 80059c6:	f000 f81b 	bl	8005a00 <__sfp>
 80059ca:	60a0      	str	r0, [r4, #8]
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 f817 	bl	8005a00 <__sfp>
 80059d2:	2200      	movs	r2, #0
 80059d4:	60e0      	str	r0, [r4, #12]
 80059d6:	2104      	movs	r1, #4
 80059d8:	6860      	ldr	r0, [r4, #4]
 80059da:	f7ff ffa1 	bl	8005920 <std>
 80059de:	2201      	movs	r2, #1
 80059e0:	2109      	movs	r1, #9
 80059e2:	68a0      	ldr	r0, [r4, #8]
 80059e4:	f7ff ff9c 	bl	8005920 <std>
 80059e8:	2202      	movs	r2, #2
 80059ea:	2112      	movs	r1, #18
 80059ec:	68e0      	ldr	r0, [r4, #12]
 80059ee:	f7ff ff97 	bl	8005920 <std>
 80059f2:	2301      	movs	r3, #1
 80059f4:	61a3      	str	r3, [r4, #24]
 80059f6:	bd10      	pop	{r4, pc}
 80059f8:	080067f4 	.word	0x080067f4
 80059fc:	08005969 	.word	0x08005969

08005a00 <__sfp>:
 8005a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a02:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <__sfp+0x70>)
 8005a04:	681e      	ldr	r6, [r3, #0]
 8005a06:	69b3      	ldr	r3, [r6, #24]
 8005a08:	4607      	mov	r7, r0
 8005a0a:	b913      	cbnz	r3, 8005a12 <__sfp+0x12>
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f7ff ffc7 	bl	80059a0 <__sinit>
 8005a12:	3648      	adds	r6, #72	; 0x48
 8005a14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	d503      	bpl.n	8005a24 <__sfp+0x24>
 8005a1c:	6833      	ldr	r3, [r6, #0]
 8005a1e:	b133      	cbz	r3, 8005a2e <__sfp+0x2e>
 8005a20:	6836      	ldr	r6, [r6, #0]
 8005a22:	e7f7      	b.n	8005a14 <__sfp+0x14>
 8005a24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005a28:	b16d      	cbz	r5, 8005a46 <__sfp+0x46>
 8005a2a:	3468      	adds	r4, #104	; 0x68
 8005a2c:	e7f4      	b.n	8005a18 <__sfp+0x18>
 8005a2e:	2104      	movs	r1, #4
 8005a30:	4638      	mov	r0, r7
 8005a32:	f7ff ff9f 	bl	8005974 <__sfmoreglue>
 8005a36:	6030      	str	r0, [r6, #0]
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d1f1      	bne.n	8005a20 <__sfp+0x20>
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4604      	mov	r4, r0
 8005a42:	4620      	mov	r0, r4
 8005a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <__sfp+0x74>)
 8005a48:	6665      	str	r5, [r4, #100]	; 0x64
 8005a4a:	e9c4 5500 	strd	r5, r5, [r4]
 8005a4e:	60a5      	str	r5, [r4, #8]
 8005a50:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005a54:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005a58:	2208      	movs	r2, #8
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005a60:	f7fe faae 	bl	8003fc0 <memset>
 8005a64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005a68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005a6c:	e7e9      	b.n	8005a42 <__sfp+0x42>
 8005a6e:	bf00      	nop
 8005a70:	080067f4 	.word	0x080067f4
 8005a74:	ffff0001 	.word	0xffff0001

08005a78 <_fwalk_reent>:
 8005a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a7c:	4680      	mov	r8, r0
 8005a7e:	4689      	mov	r9, r1
 8005a80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a84:	2600      	movs	r6, #0
 8005a86:	b914      	cbnz	r4, 8005a8e <_fwalk_reent+0x16>
 8005a88:	4630      	mov	r0, r6
 8005a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005a92:	3f01      	subs	r7, #1
 8005a94:	d501      	bpl.n	8005a9a <_fwalk_reent+0x22>
 8005a96:	6824      	ldr	r4, [r4, #0]
 8005a98:	e7f5      	b.n	8005a86 <_fwalk_reent+0xe>
 8005a9a:	89ab      	ldrh	r3, [r5, #12]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d907      	bls.n	8005ab0 <_fwalk_reent+0x38>
 8005aa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005aa4:	3301      	adds	r3, #1
 8005aa6:	d003      	beq.n	8005ab0 <_fwalk_reent+0x38>
 8005aa8:	4629      	mov	r1, r5
 8005aaa:	4640      	mov	r0, r8
 8005aac:	47c8      	blx	r9
 8005aae:	4306      	orrs	r6, r0
 8005ab0:	3568      	adds	r5, #104	; 0x68
 8005ab2:	e7ee      	b.n	8005a92 <_fwalk_reent+0x1a>

08005ab4 <_localeconv_r>:
 8005ab4:	4b04      	ldr	r3, [pc, #16]	; (8005ac8 <_localeconv_r+0x14>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a18      	ldr	r0, [r3, #32]
 8005aba:	4b04      	ldr	r3, [pc, #16]	; (8005acc <_localeconv_r+0x18>)
 8005abc:	2800      	cmp	r0, #0
 8005abe:	bf08      	it	eq
 8005ac0:	4618      	moveq	r0, r3
 8005ac2:	30f0      	adds	r0, #240	; 0xf0
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop
 8005ac8:	2000000c 	.word	0x2000000c
 8005acc:	20000070 	.word	0x20000070

08005ad0 <__swhatbuf_r>:
 8005ad0:	b570      	push	{r4, r5, r6, lr}
 8005ad2:	460e      	mov	r6, r1
 8005ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	b096      	sub	sp, #88	; 0x58
 8005adc:	4614      	mov	r4, r2
 8005ade:	461d      	mov	r5, r3
 8005ae0:	da07      	bge.n	8005af2 <__swhatbuf_r+0x22>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	602b      	str	r3, [r5, #0]
 8005ae6:	89b3      	ldrh	r3, [r6, #12]
 8005ae8:	061a      	lsls	r2, r3, #24
 8005aea:	d410      	bmi.n	8005b0e <__swhatbuf_r+0x3e>
 8005aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005af0:	e00e      	b.n	8005b10 <__swhatbuf_r+0x40>
 8005af2:	466a      	mov	r2, sp
 8005af4:	f000 fdaa 	bl	800664c <_fstat_r>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	dbf2      	blt.n	8005ae2 <__swhatbuf_r+0x12>
 8005afc:	9a01      	ldr	r2, [sp, #4]
 8005afe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b06:	425a      	negs	r2, r3
 8005b08:	415a      	adcs	r2, r3
 8005b0a:	602a      	str	r2, [r5, #0]
 8005b0c:	e7ee      	b.n	8005aec <__swhatbuf_r+0x1c>
 8005b0e:	2340      	movs	r3, #64	; 0x40
 8005b10:	2000      	movs	r0, #0
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	b016      	add	sp, #88	; 0x58
 8005b16:	bd70      	pop	{r4, r5, r6, pc}

08005b18 <__smakebuf_r>:
 8005b18:	898b      	ldrh	r3, [r1, #12]
 8005b1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b1c:	079d      	lsls	r5, r3, #30
 8005b1e:	4606      	mov	r6, r0
 8005b20:	460c      	mov	r4, r1
 8005b22:	d507      	bpl.n	8005b34 <__smakebuf_r+0x1c>
 8005b24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	6123      	str	r3, [r4, #16]
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	6163      	str	r3, [r4, #20]
 8005b30:	b002      	add	sp, #8
 8005b32:	bd70      	pop	{r4, r5, r6, pc}
 8005b34:	ab01      	add	r3, sp, #4
 8005b36:	466a      	mov	r2, sp
 8005b38:	f7ff ffca 	bl	8005ad0 <__swhatbuf_r>
 8005b3c:	9900      	ldr	r1, [sp, #0]
 8005b3e:	4605      	mov	r5, r0
 8005b40:	4630      	mov	r0, r6
 8005b42:	f000 fb73 	bl	800622c <_malloc_r>
 8005b46:	b948      	cbnz	r0, 8005b5c <__smakebuf_r+0x44>
 8005b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b4c:	059a      	lsls	r2, r3, #22
 8005b4e:	d4ef      	bmi.n	8005b30 <__smakebuf_r+0x18>
 8005b50:	f023 0303 	bic.w	r3, r3, #3
 8005b54:	f043 0302 	orr.w	r3, r3, #2
 8005b58:	81a3      	strh	r3, [r4, #12]
 8005b5a:	e7e3      	b.n	8005b24 <__smakebuf_r+0xc>
 8005b5c:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <__smakebuf_r+0x7c>)
 8005b5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	6020      	str	r0, [r4, #0]
 8005b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b68:	81a3      	strh	r3, [r4, #12]
 8005b6a:	9b00      	ldr	r3, [sp, #0]
 8005b6c:	6163      	str	r3, [r4, #20]
 8005b6e:	9b01      	ldr	r3, [sp, #4]
 8005b70:	6120      	str	r0, [r4, #16]
 8005b72:	b15b      	cbz	r3, 8005b8c <__smakebuf_r+0x74>
 8005b74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f000 fd79 	bl	8006670 <_isatty_r>
 8005b7e:	b128      	cbz	r0, 8005b8c <__smakebuf_r+0x74>
 8005b80:	89a3      	ldrh	r3, [r4, #12]
 8005b82:	f023 0303 	bic.w	r3, r3, #3
 8005b86:	f043 0301 	orr.w	r3, r3, #1
 8005b8a:	81a3      	strh	r3, [r4, #12]
 8005b8c:	89a3      	ldrh	r3, [r4, #12]
 8005b8e:	431d      	orrs	r5, r3
 8005b90:	81a5      	strh	r5, [r4, #12]
 8005b92:	e7cd      	b.n	8005b30 <__smakebuf_r+0x18>
 8005b94:	08005969 	.word	0x08005969

08005b98 <malloc>:
 8005b98:	4b02      	ldr	r3, [pc, #8]	; (8005ba4 <malloc+0xc>)
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	f000 bb45 	b.w	800622c <_malloc_r>
 8005ba2:	bf00      	nop
 8005ba4:	2000000c 	.word	0x2000000c

08005ba8 <memcpy>:
 8005ba8:	b510      	push	{r4, lr}
 8005baa:	1e43      	subs	r3, r0, #1
 8005bac:	440a      	add	r2, r1
 8005bae:	4291      	cmp	r1, r2
 8005bb0:	d100      	bne.n	8005bb4 <memcpy+0xc>
 8005bb2:	bd10      	pop	{r4, pc}
 8005bb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bbc:	e7f7      	b.n	8005bae <memcpy+0x6>

08005bbe <_Balloc>:
 8005bbe:	b570      	push	{r4, r5, r6, lr}
 8005bc0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005bc2:	4604      	mov	r4, r0
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	b93d      	cbnz	r5, 8005bd8 <_Balloc+0x1a>
 8005bc8:	2010      	movs	r0, #16
 8005bca:	f7ff ffe5 	bl	8005b98 <malloc>
 8005bce:	6260      	str	r0, [r4, #36]	; 0x24
 8005bd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bd4:	6005      	str	r5, [r0, #0]
 8005bd6:	60c5      	str	r5, [r0, #12]
 8005bd8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005bda:	68eb      	ldr	r3, [r5, #12]
 8005bdc:	b183      	cbz	r3, 8005c00 <_Balloc+0x42>
 8005bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005be6:	b9b8      	cbnz	r0, 8005c18 <_Balloc+0x5a>
 8005be8:	2101      	movs	r1, #1
 8005bea:	fa01 f506 	lsl.w	r5, r1, r6
 8005bee:	1d6a      	adds	r2, r5, #5
 8005bf0:	0092      	lsls	r2, r2, #2
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f000 fabe 	bl	8006174 <_calloc_r>
 8005bf8:	b160      	cbz	r0, 8005c14 <_Balloc+0x56>
 8005bfa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005bfe:	e00e      	b.n	8005c1e <_Balloc+0x60>
 8005c00:	2221      	movs	r2, #33	; 0x21
 8005c02:	2104      	movs	r1, #4
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 fab5 	bl	8006174 <_calloc_r>
 8005c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c0c:	60e8      	str	r0, [r5, #12]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e4      	bne.n	8005bde <_Balloc+0x20>
 8005c14:	2000      	movs	r0, #0
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	6802      	ldr	r2, [r0, #0]
 8005c1a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c24:	e7f7      	b.n	8005c16 <_Balloc+0x58>

08005c26 <_Bfree>:
 8005c26:	b570      	push	{r4, r5, r6, lr}
 8005c28:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005c2a:	4606      	mov	r6, r0
 8005c2c:	460d      	mov	r5, r1
 8005c2e:	b93c      	cbnz	r4, 8005c40 <_Bfree+0x1a>
 8005c30:	2010      	movs	r0, #16
 8005c32:	f7ff ffb1 	bl	8005b98 <malloc>
 8005c36:	6270      	str	r0, [r6, #36]	; 0x24
 8005c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c3c:	6004      	str	r4, [r0, #0]
 8005c3e:	60c4      	str	r4, [r0, #12]
 8005c40:	b13d      	cbz	r5, 8005c52 <_Bfree+0x2c>
 8005c42:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005c44:	686a      	ldr	r2, [r5, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c4c:	6029      	str	r1, [r5, #0]
 8005c4e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005c52:	bd70      	pop	{r4, r5, r6, pc}

08005c54 <__multadd>:
 8005c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c58:	690d      	ldr	r5, [r1, #16]
 8005c5a:	461f      	mov	r7, r3
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	460c      	mov	r4, r1
 8005c60:	f101 0c14 	add.w	ip, r1, #20
 8005c64:	2300      	movs	r3, #0
 8005c66:	f8dc 0000 	ldr.w	r0, [ip]
 8005c6a:	b281      	uxth	r1, r0
 8005c6c:	fb02 7101 	mla	r1, r2, r1, r7
 8005c70:	0c0f      	lsrs	r7, r1, #16
 8005c72:	0c00      	lsrs	r0, r0, #16
 8005c74:	fb02 7000 	mla	r0, r2, r0, r7
 8005c78:	b289      	uxth	r1, r1
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005c80:	429d      	cmp	r5, r3
 8005c82:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005c86:	f84c 1b04 	str.w	r1, [ip], #4
 8005c8a:	dcec      	bgt.n	8005c66 <__multadd+0x12>
 8005c8c:	b1d7      	cbz	r7, 8005cc4 <__multadd+0x70>
 8005c8e:	68a3      	ldr	r3, [r4, #8]
 8005c90:	42ab      	cmp	r3, r5
 8005c92:	dc12      	bgt.n	8005cba <__multadd+0x66>
 8005c94:	6861      	ldr	r1, [r4, #4]
 8005c96:	4630      	mov	r0, r6
 8005c98:	3101      	adds	r1, #1
 8005c9a:	f7ff ff90 	bl	8005bbe <_Balloc>
 8005c9e:	6922      	ldr	r2, [r4, #16]
 8005ca0:	3202      	adds	r2, #2
 8005ca2:	f104 010c 	add.w	r1, r4, #12
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	0092      	lsls	r2, r2, #2
 8005caa:	300c      	adds	r0, #12
 8005cac:	f7ff ff7c 	bl	8005ba8 <memcpy>
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f7ff ffb7 	bl	8005c26 <_Bfree>
 8005cb8:	4644      	mov	r4, r8
 8005cba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cbe:	3501      	adds	r5, #1
 8005cc0:	615f      	str	r7, [r3, #20]
 8005cc2:	6125      	str	r5, [r4, #16]
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005cca <__hi0bits>:
 8005cca:	0c02      	lsrs	r2, r0, #16
 8005ccc:	0412      	lsls	r2, r2, #16
 8005cce:	4603      	mov	r3, r0
 8005cd0:	b9b2      	cbnz	r2, 8005d00 <__hi0bits+0x36>
 8005cd2:	0403      	lsls	r3, r0, #16
 8005cd4:	2010      	movs	r0, #16
 8005cd6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005cda:	bf04      	itt	eq
 8005cdc:	021b      	lsleq	r3, r3, #8
 8005cde:	3008      	addeq	r0, #8
 8005ce0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ce4:	bf04      	itt	eq
 8005ce6:	011b      	lsleq	r3, r3, #4
 8005ce8:	3004      	addeq	r0, #4
 8005cea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005cee:	bf04      	itt	eq
 8005cf0:	009b      	lsleq	r3, r3, #2
 8005cf2:	3002      	addeq	r0, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	db06      	blt.n	8005d06 <__hi0bits+0x3c>
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	d503      	bpl.n	8005d04 <__hi0bits+0x3a>
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	4770      	bx	lr
 8005d00:	2000      	movs	r0, #0
 8005d02:	e7e8      	b.n	8005cd6 <__hi0bits+0xc>
 8005d04:	2020      	movs	r0, #32
 8005d06:	4770      	bx	lr

08005d08 <__lo0bits>:
 8005d08:	6803      	ldr	r3, [r0, #0]
 8005d0a:	f013 0207 	ands.w	r2, r3, #7
 8005d0e:	4601      	mov	r1, r0
 8005d10:	d00b      	beq.n	8005d2a <__lo0bits+0x22>
 8005d12:	07da      	lsls	r2, r3, #31
 8005d14:	d423      	bmi.n	8005d5e <__lo0bits+0x56>
 8005d16:	0798      	lsls	r0, r3, #30
 8005d18:	bf49      	itett	mi
 8005d1a:	085b      	lsrmi	r3, r3, #1
 8005d1c:	089b      	lsrpl	r3, r3, #2
 8005d1e:	2001      	movmi	r0, #1
 8005d20:	600b      	strmi	r3, [r1, #0]
 8005d22:	bf5c      	itt	pl
 8005d24:	600b      	strpl	r3, [r1, #0]
 8005d26:	2002      	movpl	r0, #2
 8005d28:	4770      	bx	lr
 8005d2a:	b298      	uxth	r0, r3
 8005d2c:	b9a8      	cbnz	r0, 8005d5a <__lo0bits+0x52>
 8005d2e:	0c1b      	lsrs	r3, r3, #16
 8005d30:	2010      	movs	r0, #16
 8005d32:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d36:	bf04      	itt	eq
 8005d38:	0a1b      	lsreq	r3, r3, #8
 8005d3a:	3008      	addeq	r0, #8
 8005d3c:	071a      	lsls	r2, r3, #28
 8005d3e:	bf04      	itt	eq
 8005d40:	091b      	lsreq	r3, r3, #4
 8005d42:	3004      	addeq	r0, #4
 8005d44:	079a      	lsls	r2, r3, #30
 8005d46:	bf04      	itt	eq
 8005d48:	089b      	lsreq	r3, r3, #2
 8005d4a:	3002      	addeq	r0, #2
 8005d4c:	07da      	lsls	r2, r3, #31
 8005d4e:	d402      	bmi.n	8005d56 <__lo0bits+0x4e>
 8005d50:	085b      	lsrs	r3, r3, #1
 8005d52:	d006      	beq.n	8005d62 <__lo0bits+0x5a>
 8005d54:	3001      	adds	r0, #1
 8005d56:	600b      	str	r3, [r1, #0]
 8005d58:	4770      	bx	lr
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	e7e9      	b.n	8005d32 <__lo0bits+0x2a>
 8005d5e:	2000      	movs	r0, #0
 8005d60:	4770      	bx	lr
 8005d62:	2020      	movs	r0, #32
 8005d64:	4770      	bx	lr

08005d66 <__i2b>:
 8005d66:	b510      	push	{r4, lr}
 8005d68:	460c      	mov	r4, r1
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	f7ff ff27 	bl	8005bbe <_Balloc>
 8005d70:	2201      	movs	r2, #1
 8005d72:	6144      	str	r4, [r0, #20]
 8005d74:	6102      	str	r2, [r0, #16]
 8005d76:	bd10      	pop	{r4, pc}

08005d78 <__multiply>:
 8005d78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	4614      	mov	r4, r2
 8005d7e:	690a      	ldr	r2, [r1, #16]
 8005d80:	6923      	ldr	r3, [r4, #16]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	bfb8      	it	lt
 8005d86:	460b      	movlt	r3, r1
 8005d88:	4688      	mov	r8, r1
 8005d8a:	bfbc      	itt	lt
 8005d8c:	46a0      	movlt	r8, r4
 8005d8e:	461c      	movlt	r4, r3
 8005d90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d94:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d98:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d9c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005da0:	eb07 0609 	add.w	r6, r7, r9
 8005da4:	42b3      	cmp	r3, r6
 8005da6:	bfb8      	it	lt
 8005da8:	3101      	addlt	r1, #1
 8005daa:	f7ff ff08 	bl	8005bbe <_Balloc>
 8005dae:	f100 0514 	add.w	r5, r0, #20
 8005db2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005db6:	462b      	mov	r3, r5
 8005db8:	2200      	movs	r2, #0
 8005dba:	4573      	cmp	r3, lr
 8005dbc:	d316      	bcc.n	8005dec <__multiply+0x74>
 8005dbe:	f104 0214 	add.w	r2, r4, #20
 8005dc2:	f108 0114 	add.w	r1, r8, #20
 8005dc6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005dca:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005dce:	9300      	str	r3, [sp, #0]
 8005dd0:	9b00      	ldr	r3, [sp, #0]
 8005dd2:	9201      	str	r2, [sp, #4]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d80c      	bhi.n	8005df2 <__multiply+0x7a>
 8005dd8:	2e00      	cmp	r6, #0
 8005dda:	dd03      	ble.n	8005de4 <__multiply+0x6c>
 8005ddc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d05d      	beq.n	8005ea0 <__multiply+0x128>
 8005de4:	6106      	str	r6, [r0, #16]
 8005de6:	b003      	add	sp, #12
 8005de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dec:	f843 2b04 	str.w	r2, [r3], #4
 8005df0:	e7e3      	b.n	8005dba <__multiply+0x42>
 8005df2:	f8b2 b000 	ldrh.w	fp, [r2]
 8005df6:	f1bb 0f00 	cmp.w	fp, #0
 8005dfa:	d023      	beq.n	8005e44 <__multiply+0xcc>
 8005dfc:	4689      	mov	r9, r1
 8005dfe:	46ac      	mov	ip, r5
 8005e00:	f04f 0800 	mov.w	r8, #0
 8005e04:	f859 4b04 	ldr.w	r4, [r9], #4
 8005e08:	f8dc a000 	ldr.w	sl, [ip]
 8005e0c:	b2a3      	uxth	r3, r4
 8005e0e:	fa1f fa8a 	uxth.w	sl, sl
 8005e12:	fb0b a303 	mla	r3, fp, r3, sl
 8005e16:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e1a:	f8dc 4000 	ldr.w	r4, [ip]
 8005e1e:	4443      	add	r3, r8
 8005e20:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005e24:	fb0b 840a 	mla	r4, fp, sl, r8
 8005e28:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005e2c:	46e2      	mov	sl, ip
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e34:	454f      	cmp	r7, r9
 8005e36:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005e3a:	f84a 3b04 	str.w	r3, [sl], #4
 8005e3e:	d82b      	bhi.n	8005e98 <__multiply+0x120>
 8005e40:	f8cc 8004 	str.w	r8, [ip, #4]
 8005e44:	9b01      	ldr	r3, [sp, #4]
 8005e46:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005e4a:	3204      	adds	r2, #4
 8005e4c:	f1ba 0f00 	cmp.w	sl, #0
 8005e50:	d020      	beq.n	8005e94 <__multiply+0x11c>
 8005e52:	682b      	ldr	r3, [r5, #0]
 8005e54:	4689      	mov	r9, r1
 8005e56:	46a8      	mov	r8, r5
 8005e58:	f04f 0b00 	mov.w	fp, #0
 8005e5c:	f8b9 c000 	ldrh.w	ip, [r9]
 8005e60:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005e64:	fb0a 440c 	mla	r4, sl, ip, r4
 8005e68:	445c      	add	r4, fp
 8005e6a:	46c4      	mov	ip, r8
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e72:	f84c 3b04 	str.w	r3, [ip], #4
 8005e76:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e7a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	fb0a b303 	mla	r3, sl, r3, fp
 8005e84:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e88:	454f      	cmp	r7, r9
 8005e8a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005e8e:	d805      	bhi.n	8005e9c <__multiply+0x124>
 8005e90:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e94:	3504      	adds	r5, #4
 8005e96:	e79b      	b.n	8005dd0 <__multiply+0x58>
 8005e98:	46d4      	mov	ip, sl
 8005e9a:	e7b3      	b.n	8005e04 <__multiply+0x8c>
 8005e9c:	46e0      	mov	r8, ip
 8005e9e:	e7dd      	b.n	8005e5c <__multiply+0xe4>
 8005ea0:	3e01      	subs	r6, #1
 8005ea2:	e799      	b.n	8005dd8 <__multiply+0x60>

08005ea4 <__pow5mult>:
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	4615      	mov	r5, r2
 8005eaa:	f012 0203 	ands.w	r2, r2, #3
 8005eae:	4606      	mov	r6, r0
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	d007      	beq.n	8005ec4 <__pow5mult+0x20>
 8005eb4:	3a01      	subs	r2, #1
 8005eb6:	4c21      	ldr	r4, [pc, #132]	; (8005f3c <__pow5mult+0x98>)
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ebe:	f7ff fec9 	bl	8005c54 <__multadd>
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	10ad      	asrs	r5, r5, #2
 8005ec6:	d035      	beq.n	8005f34 <__pow5mult+0x90>
 8005ec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005eca:	b93c      	cbnz	r4, 8005edc <__pow5mult+0x38>
 8005ecc:	2010      	movs	r0, #16
 8005ece:	f7ff fe63 	bl	8005b98 <malloc>
 8005ed2:	6270      	str	r0, [r6, #36]	; 0x24
 8005ed4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ed8:	6004      	str	r4, [r0, #0]
 8005eda:	60c4      	str	r4, [r0, #12]
 8005edc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ee0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ee4:	b94c      	cbnz	r4, 8005efa <__pow5mult+0x56>
 8005ee6:	f240 2171 	movw	r1, #625	; 0x271
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7ff ff3b 	bl	8005d66 <__i2b>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	07eb      	lsls	r3, r5, #31
 8005f00:	d50a      	bpl.n	8005f18 <__pow5mult+0x74>
 8005f02:	4639      	mov	r1, r7
 8005f04:	4622      	mov	r2, r4
 8005f06:	4630      	mov	r0, r6
 8005f08:	f7ff ff36 	bl	8005d78 <__multiply>
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	4681      	mov	r9, r0
 8005f10:	4630      	mov	r0, r6
 8005f12:	f7ff fe88 	bl	8005c26 <_Bfree>
 8005f16:	464f      	mov	r7, r9
 8005f18:	106d      	asrs	r5, r5, #1
 8005f1a:	d00b      	beq.n	8005f34 <__pow5mult+0x90>
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	b938      	cbnz	r0, 8005f30 <__pow5mult+0x8c>
 8005f20:	4622      	mov	r2, r4
 8005f22:	4621      	mov	r1, r4
 8005f24:	4630      	mov	r0, r6
 8005f26:	f7ff ff27 	bl	8005d78 <__multiply>
 8005f2a:	6020      	str	r0, [r4, #0]
 8005f2c:	f8c0 8000 	str.w	r8, [r0]
 8005f30:	4604      	mov	r4, r0
 8005f32:	e7e4      	b.n	8005efe <__pow5mult+0x5a>
 8005f34:	4638      	mov	r0, r7
 8005f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f3a:	bf00      	nop
 8005f3c:	08006990 	.word	0x08006990

08005f40 <__lshift>:
 8005f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	460c      	mov	r4, r1
 8005f46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	6849      	ldr	r1, [r1, #4]
 8005f4e:	eb0a 0903 	add.w	r9, sl, r3
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	4607      	mov	r7, r0
 8005f56:	4616      	mov	r6, r2
 8005f58:	f109 0501 	add.w	r5, r9, #1
 8005f5c:	42ab      	cmp	r3, r5
 8005f5e:	db32      	blt.n	8005fc6 <__lshift+0x86>
 8005f60:	4638      	mov	r0, r7
 8005f62:	f7ff fe2c 	bl	8005bbe <_Balloc>
 8005f66:	2300      	movs	r3, #0
 8005f68:	4680      	mov	r8, r0
 8005f6a:	f100 0114 	add.w	r1, r0, #20
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4553      	cmp	r3, sl
 8005f72:	db2b      	blt.n	8005fcc <__lshift+0x8c>
 8005f74:	6920      	ldr	r0, [r4, #16]
 8005f76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f7a:	f104 0314 	add.w	r3, r4, #20
 8005f7e:	f016 021f 	ands.w	r2, r6, #31
 8005f82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f8a:	d025      	beq.n	8005fd8 <__lshift+0x98>
 8005f8c:	f1c2 0e20 	rsb	lr, r2, #32
 8005f90:	2000      	movs	r0, #0
 8005f92:	681e      	ldr	r6, [r3, #0]
 8005f94:	468a      	mov	sl, r1
 8005f96:	4096      	lsls	r6, r2
 8005f98:	4330      	orrs	r0, r6
 8005f9a:	f84a 0b04 	str.w	r0, [sl], #4
 8005f9e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005fa2:	459c      	cmp	ip, r3
 8005fa4:	fa20 f00e 	lsr.w	r0, r0, lr
 8005fa8:	d814      	bhi.n	8005fd4 <__lshift+0x94>
 8005faa:	6048      	str	r0, [r1, #4]
 8005fac:	b108      	cbz	r0, 8005fb2 <__lshift+0x72>
 8005fae:	f109 0502 	add.w	r5, r9, #2
 8005fb2:	3d01      	subs	r5, #1
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	f8c8 5010 	str.w	r5, [r8, #16]
 8005fba:	4621      	mov	r1, r4
 8005fbc:	f7ff fe33 	bl	8005c26 <_Bfree>
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc6:	3101      	adds	r1, #1
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	e7c7      	b.n	8005f5c <__lshift+0x1c>
 8005fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	e7cd      	b.n	8005f70 <__lshift+0x30>
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	e7dc      	b.n	8005f92 <__lshift+0x52>
 8005fd8:	3904      	subs	r1, #4
 8005fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fde:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fe2:	459c      	cmp	ip, r3
 8005fe4:	d8f9      	bhi.n	8005fda <__lshift+0x9a>
 8005fe6:	e7e4      	b.n	8005fb2 <__lshift+0x72>

08005fe8 <__mcmp>:
 8005fe8:	6903      	ldr	r3, [r0, #16]
 8005fea:	690a      	ldr	r2, [r1, #16]
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	b530      	push	{r4, r5, lr}
 8005ff0:	d10c      	bne.n	800600c <__mcmp+0x24>
 8005ff2:	0092      	lsls	r2, r2, #2
 8005ff4:	3014      	adds	r0, #20
 8005ff6:	3114      	adds	r1, #20
 8005ff8:	1884      	adds	r4, r0, r2
 8005ffa:	4411      	add	r1, r2
 8005ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006004:	4295      	cmp	r5, r2
 8006006:	d003      	beq.n	8006010 <__mcmp+0x28>
 8006008:	d305      	bcc.n	8006016 <__mcmp+0x2e>
 800600a:	2301      	movs	r3, #1
 800600c:	4618      	mov	r0, r3
 800600e:	bd30      	pop	{r4, r5, pc}
 8006010:	42a0      	cmp	r0, r4
 8006012:	d3f3      	bcc.n	8005ffc <__mcmp+0x14>
 8006014:	e7fa      	b.n	800600c <__mcmp+0x24>
 8006016:	f04f 33ff 	mov.w	r3, #4294967295
 800601a:	e7f7      	b.n	800600c <__mcmp+0x24>

0800601c <__mdiff>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	460d      	mov	r5, r1
 8006022:	4607      	mov	r7, r0
 8006024:	4611      	mov	r1, r2
 8006026:	4628      	mov	r0, r5
 8006028:	4614      	mov	r4, r2
 800602a:	f7ff ffdd 	bl	8005fe8 <__mcmp>
 800602e:	1e06      	subs	r6, r0, #0
 8006030:	d108      	bne.n	8006044 <__mdiff+0x28>
 8006032:	4631      	mov	r1, r6
 8006034:	4638      	mov	r0, r7
 8006036:	f7ff fdc2 	bl	8005bbe <_Balloc>
 800603a:	2301      	movs	r3, #1
 800603c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006044:	bfa4      	itt	ge
 8006046:	4623      	movge	r3, r4
 8006048:	462c      	movge	r4, r5
 800604a:	4638      	mov	r0, r7
 800604c:	6861      	ldr	r1, [r4, #4]
 800604e:	bfa6      	itte	ge
 8006050:	461d      	movge	r5, r3
 8006052:	2600      	movge	r6, #0
 8006054:	2601      	movlt	r6, #1
 8006056:	f7ff fdb2 	bl	8005bbe <_Balloc>
 800605a:	692b      	ldr	r3, [r5, #16]
 800605c:	60c6      	str	r6, [r0, #12]
 800605e:	6926      	ldr	r6, [r4, #16]
 8006060:	f105 0914 	add.w	r9, r5, #20
 8006064:	f104 0214 	add.w	r2, r4, #20
 8006068:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800606c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006070:	f100 0514 	add.w	r5, r0, #20
 8006074:	f04f 0e00 	mov.w	lr, #0
 8006078:	f852 ab04 	ldr.w	sl, [r2], #4
 800607c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006080:	fa1e f18a 	uxtah	r1, lr, sl
 8006084:	b2a3      	uxth	r3, r4
 8006086:	1ac9      	subs	r1, r1, r3
 8006088:	0c23      	lsrs	r3, r4, #16
 800608a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800608e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006092:	b289      	uxth	r1, r1
 8006094:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006098:	45c8      	cmp	r8, r9
 800609a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800609e:	4694      	mov	ip, r2
 80060a0:	f845 3b04 	str.w	r3, [r5], #4
 80060a4:	d8e8      	bhi.n	8006078 <__mdiff+0x5c>
 80060a6:	45bc      	cmp	ip, r7
 80060a8:	d304      	bcc.n	80060b4 <__mdiff+0x98>
 80060aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80060ae:	b183      	cbz	r3, 80060d2 <__mdiff+0xb6>
 80060b0:	6106      	str	r6, [r0, #16]
 80060b2:	e7c5      	b.n	8006040 <__mdiff+0x24>
 80060b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80060b8:	fa1e f381 	uxtah	r3, lr, r1
 80060bc:	141a      	asrs	r2, r3, #16
 80060be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80060cc:	f845 3b04 	str.w	r3, [r5], #4
 80060d0:	e7e9      	b.n	80060a6 <__mdiff+0x8a>
 80060d2:	3e01      	subs	r6, #1
 80060d4:	e7e9      	b.n	80060aa <__mdiff+0x8e>

080060d6 <__d2b>:
 80060d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060da:	460e      	mov	r6, r1
 80060dc:	2101      	movs	r1, #1
 80060de:	ec59 8b10 	vmov	r8, r9, d0
 80060e2:	4615      	mov	r5, r2
 80060e4:	f7ff fd6b 	bl	8005bbe <_Balloc>
 80060e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060ec:	4607      	mov	r7, r0
 80060ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060f2:	bb34      	cbnz	r4, 8006142 <__d2b+0x6c>
 80060f4:	9301      	str	r3, [sp, #4]
 80060f6:	f1b8 0300 	subs.w	r3, r8, #0
 80060fa:	d027      	beq.n	800614c <__d2b+0x76>
 80060fc:	a802      	add	r0, sp, #8
 80060fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006102:	f7ff fe01 	bl	8005d08 <__lo0bits>
 8006106:	9900      	ldr	r1, [sp, #0]
 8006108:	b1f0      	cbz	r0, 8006148 <__d2b+0x72>
 800610a:	9a01      	ldr	r2, [sp, #4]
 800610c:	f1c0 0320 	rsb	r3, r0, #32
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	430b      	orrs	r3, r1
 8006116:	40c2      	lsrs	r2, r0
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	9201      	str	r2, [sp, #4]
 800611c:	9b01      	ldr	r3, [sp, #4]
 800611e:	61bb      	str	r3, [r7, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	bf14      	ite	ne
 8006124:	2102      	movne	r1, #2
 8006126:	2101      	moveq	r1, #1
 8006128:	6139      	str	r1, [r7, #16]
 800612a:	b1c4      	cbz	r4, 800615e <__d2b+0x88>
 800612c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006130:	4404      	add	r4, r0
 8006132:	6034      	str	r4, [r6, #0]
 8006134:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006138:	6028      	str	r0, [r5, #0]
 800613a:	4638      	mov	r0, r7
 800613c:	b003      	add	sp, #12
 800613e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006146:	e7d5      	b.n	80060f4 <__d2b+0x1e>
 8006148:	6179      	str	r1, [r7, #20]
 800614a:	e7e7      	b.n	800611c <__d2b+0x46>
 800614c:	a801      	add	r0, sp, #4
 800614e:	f7ff fddb 	bl	8005d08 <__lo0bits>
 8006152:	9b01      	ldr	r3, [sp, #4]
 8006154:	617b      	str	r3, [r7, #20]
 8006156:	2101      	movs	r1, #1
 8006158:	6139      	str	r1, [r7, #16]
 800615a:	3020      	adds	r0, #32
 800615c:	e7e5      	b.n	800612a <__d2b+0x54>
 800615e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006162:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006166:	6030      	str	r0, [r6, #0]
 8006168:	6918      	ldr	r0, [r3, #16]
 800616a:	f7ff fdae 	bl	8005cca <__hi0bits>
 800616e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006172:	e7e1      	b.n	8006138 <__d2b+0x62>

08006174 <_calloc_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	fb02 f401 	mul.w	r4, r2, r1
 800617a:	4621      	mov	r1, r4
 800617c:	f000 f856 	bl	800622c <_malloc_r>
 8006180:	4605      	mov	r5, r0
 8006182:	b118      	cbz	r0, 800618c <_calloc_r+0x18>
 8006184:	4622      	mov	r2, r4
 8006186:	2100      	movs	r1, #0
 8006188:	f7fd ff1a 	bl	8003fc0 <memset>
 800618c:	4628      	mov	r0, r5
 800618e:	bd38      	pop	{r3, r4, r5, pc}

08006190 <_free_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4605      	mov	r5, r0
 8006194:	2900      	cmp	r1, #0
 8006196:	d045      	beq.n	8006224 <_free_r+0x94>
 8006198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800619c:	1f0c      	subs	r4, r1, #4
 800619e:	2b00      	cmp	r3, #0
 80061a0:	bfb8      	it	lt
 80061a2:	18e4      	addlt	r4, r4, r3
 80061a4:	f000 fa98 	bl	80066d8 <__malloc_lock>
 80061a8:	4a1f      	ldr	r2, [pc, #124]	; (8006228 <_free_r+0x98>)
 80061aa:	6813      	ldr	r3, [r2, #0]
 80061ac:	4610      	mov	r0, r2
 80061ae:	b933      	cbnz	r3, 80061be <_free_r+0x2e>
 80061b0:	6063      	str	r3, [r4, #4]
 80061b2:	6014      	str	r4, [r2, #0]
 80061b4:	4628      	mov	r0, r5
 80061b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061ba:	f000 ba8e 	b.w	80066da <__malloc_unlock>
 80061be:	42a3      	cmp	r3, r4
 80061c0:	d90c      	bls.n	80061dc <_free_r+0x4c>
 80061c2:	6821      	ldr	r1, [r4, #0]
 80061c4:	1862      	adds	r2, r4, r1
 80061c6:	4293      	cmp	r3, r2
 80061c8:	bf04      	itt	eq
 80061ca:	681a      	ldreq	r2, [r3, #0]
 80061cc:	685b      	ldreq	r3, [r3, #4]
 80061ce:	6063      	str	r3, [r4, #4]
 80061d0:	bf04      	itt	eq
 80061d2:	1852      	addeq	r2, r2, r1
 80061d4:	6022      	streq	r2, [r4, #0]
 80061d6:	6004      	str	r4, [r0, #0]
 80061d8:	e7ec      	b.n	80061b4 <_free_r+0x24>
 80061da:	4613      	mov	r3, r2
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	b10a      	cbz	r2, 80061e4 <_free_r+0x54>
 80061e0:	42a2      	cmp	r2, r4
 80061e2:	d9fa      	bls.n	80061da <_free_r+0x4a>
 80061e4:	6819      	ldr	r1, [r3, #0]
 80061e6:	1858      	adds	r0, r3, r1
 80061e8:	42a0      	cmp	r0, r4
 80061ea:	d10b      	bne.n	8006204 <_free_r+0x74>
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	4401      	add	r1, r0
 80061f0:	1858      	adds	r0, r3, r1
 80061f2:	4282      	cmp	r2, r0
 80061f4:	6019      	str	r1, [r3, #0]
 80061f6:	d1dd      	bne.n	80061b4 <_free_r+0x24>
 80061f8:	6810      	ldr	r0, [r2, #0]
 80061fa:	6852      	ldr	r2, [r2, #4]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	4401      	add	r1, r0
 8006200:	6019      	str	r1, [r3, #0]
 8006202:	e7d7      	b.n	80061b4 <_free_r+0x24>
 8006204:	d902      	bls.n	800620c <_free_r+0x7c>
 8006206:	230c      	movs	r3, #12
 8006208:	602b      	str	r3, [r5, #0]
 800620a:	e7d3      	b.n	80061b4 <_free_r+0x24>
 800620c:	6820      	ldr	r0, [r4, #0]
 800620e:	1821      	adds	r1, r4, r0
 8006210:	428a      	cmp	r2, r1
 8006212:	bf04      	itt	eq
 8006214:	6811      	ldreq	r1, [r2, #0]
 8006216:	6852      	ldreq	r2, [r2, #4]
 8006218:	6062      	str	r2, [r4, #4]
 800621a:	bf04      	itt	eq
 800621c:	1809      	addeq	r1, r1, r0
 800621e:	6021      	streq	r1, [r4, #0]
 8006220:	605c      	str	r4, [r3, #4]
 8006222:	e7c7      	b.n	80061b4 <_free_r+0x24>
 8006224:	bd38      	pop	{r3, r4, r5, pc}
 8006226:	bf00      	nop
 8006228:	200001fc 	.word	0x200001fc

0800622c <_malloc_r>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	1ccd      	adds	r5, r1, #3
 8006230:	f025 0503 	bic.w	r5, r5, #3
 8006234:	3508      	adds	r5, #8
 8006236:	2d0c      	cmp	r5, #12
 8006238:	bf38      	it	cc
 800623a:	250c      	movcc	r5, #12
 800623c:	2d00      	cmp	r5, #0
 800623e:	4606      	mov	r6, r0
 8006240:	db01      	blt.n	8006246 <_malloc_r+0x1a>
 8006242:	42a9      	cmp	r1, r5
 8006244:	d903      	bls.n	800624e <_malloc_r+0x22>
 8006246:	230c      	movs	r3, #12
 8006248:	6033      	str	r3, [r6, #0]
 800624a:	2000      	movs	r0, #0
 800624c:	bd70      	pop	{r4, r5, r6, pc}
 800624e:	f000 fa43 	bl	80066d8 <__malloc_lock>
 8006252:	4a21      	ldr	r2, [pc, #132]	; (80062d8 <_malloc_r+0xac>)
 8006254:	6814      	ldr	r4, [r2, #0]
 8006256:	4621      	mov	r1, r4
 8006258:	b991      	cbnz	r1, 8006280 <_malloc_r+0x54>
 800625a:	4c20      	ldr	r4, [pc, #128]	; (80062dc <_malloc_r+0xb0>)
 800625c:	6823      	ldr	r3, [r4, #0]
 800625e:	b91b      	cbnz	r3, 8006268 <_malloc_r+0x3c>
 8006260:	4630      	mov	r0, r6
 8006262:	f000 f97d 	bl	8006560 <_sbrk_r>
 8006266:	6020      	str	r0, [r4, #0]
 8006268:	4629      	mov	r1, r5
 800626a:	4630      	mov	r0, r6
 800626c:	f000 f978 	bl	8006560 <_sbrk_r>
 8006270:	1c43      	adds	r3, r0, #1
 8006272:	d124      	bne.n	80062be <_malloc_r+0x92>
 8006274:	230c      	movs	r3, #12
 8006276:	6033      	str	r3, [r6, #0]
 8006278:	4630      	mov	r0, r6
 800627a:	f000 fa2e 	bl	80066da <__malloc_unlock>
 800627e:	e7e4      	b.n	800624a <_malloc_r+0x1e>
 8006280:	680b      	ldr	r3, [r1, #0]
 8006282:	1b5b      	subs	r3, r3, r5
 8006284:	d418      	bmi.n	80062b8 <_malloc_r+0x8c>
 8006286:	2b0b      	cmp	r3, #11
 8006288:	d90f      	bls.n	80062aa <_malloc_r+0x7e>
 800628a:	600b      	str	r3, [r1, #0]
 800628c:	50cd      	str	r5, [r1, r3]
 800628e:	18cc      	adds	r4, r1, r3
 8006290:	4630      	mov	r0, r6
 8006292:	f000 fa22 	bl	80066da <__malloc_unlock>
 8006296:	f104 000b 	add.w	r0, r4, #11
 800629a:	1d23      	adds	r3, r4, #4
 800629c:	f020 0007 	bic.w	r0, r0, #7
 80062a0:	1ac3      	subs	r3, r0, r3
 80062a2:	d0d3      	beq.n	800624c <_malloc_r+0x20>
 80062a4:	425a      	negs	r2, r3
 80062a6:	50e2      	str	r2, [r4, r3]
 80062a8:	e7d0      	b.n	800624c <_malloc_r+0x20>
 80062aa:	428c      	cmp	r4, r1
 80062ac:	684b      	ldr	r3, [r1, #4]
 80062ae:	bf16      	itet	ne
 80062b0:	6063      	strne	r3, [r4, #4]
 80062b2:	6013      	streq	r3, [r2, #0]
 80062b4:	460c      	movne	r4, r1
 80062b6:	e7eb      	b.n	8006290 <_malloc_r+0x64>
 80062b8:	460c      	mov	r4, r1
 80062ba:	6849      	ldr	r1, [r1, #4]
 80062bc:	e7cc      	b.n	8006258 <_malloc_r+0x2c>
 80062be:	1cc4      	adds	r4, r0, #3
 80062c0:	f024 0403 	bic.w	r4, r4, #3
 80062c4:	42a0      	cmp	r0, r4
 80062c6:	d005      	beq.n	80062d4 <_malloc_r+0xa8>
 80062c8:	1a21      	subs	r1, r4, r0
 80062ca:	4630      	mov	r0, r6
 80062cc:	f000 f948 	bl	8006560 <_sbrk_r>
 80062d0:	3001      	adds	r0, #1
 80062d2:	d0cf      	beq.n	8006274 <_malloc_r+0x48>
 80062d4:	6025      	str	r5, [r4, #0]
 80062d6:	e7db      	b.n	8006290 <_malloc_r+0x64>
 80062d8:	200001fc 	.word	0x200001fc
 80062dc:	20000200 	.word	0x20000200

080062e0 <__sfputc_r>:
 80062e0:	6893      	ldr	r3, [r2, #8]
 80062e2:	3b01      	subs	r3, #1
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	b410      	push	{r4}
 80062e8:	6093      	str	r3, [r2, #8]
 80062ea:	da08      	bge.n	80062fe <__sfputc_r+0x1e>
 80062ec:	6994      	ldr	r4, [r2, #24]
 80062ee:	42a3      	cmp	r3, r4
 80062f0:	db01      	blt.n	80062f6 <__sfputc_r+0x16>
 80062f2:	290a      	cmp	r1, #10
 80062f4:	d103      	bne.n	80062fe <__sfputc_r+0x1e>
 80062f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062fa:	f7fe bb5b 	b.w	80049b4 <__swbuf_r>
 80062fe:	6813      	ldr	r3, [r2, #0]
 8006300:	1c58      	adds	r0, r3, #1
 8006302:	6010      	str	r0, [r2, #0]
 8006304:	7019      	strb	r1, [r3, #0]
 8006306:	4608      	mov	r0, r1
 8006308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800630c:	4770      	bx	lr

0800630e <__sfputs_r>:
 800630e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006310:	4606      	mov	r6, r0
 8006312:	460f      	mov	r7, r1
 8006314:	4614      	mov	r4, r2
 8006316:	18d5      	adds	r5, r2, r3
 8006318:	42ac      	cmp	r4, r5
 800631a:	d101      	bne.n	8006320 <__sfputs_r+0x12>
 800631c:	2000      	movs	r0, #0
 800631e:	e007      	b.n	8006330 <__sfputs_r+0x22>
 8006320:	463a      	mov	r2, r7
 8006322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006326:	4630      	mov	r0, r6
 8006328:	f7ff ffda 	bl	80062e0 <__sfputc_r>
 800632c:	1c43      	adds	r3, r0, #1
 800632e:	d1f3      	bne.n	8006318 <__sfputs_r+0xa>
 8006330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006334 <_vfiprintf_r>:
 8006334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006338:	460c      	mov	r4, r1
 800633a:	b09d      	sub	sp, #116	; 0x74
 800633c:	4617      	mov	r7, r2
 800633e:	461d      	mov	r5, r3
 8006340:	4606      	mov	r6, r0
 8006342:	b118      	cbz	r0, 800634c <_vfiprintf_r+0x18>
 8006344:	6983      	ldr	r3, [r0, #24]
 8006346:	b90b      	cbnz	r3, 800634c <_vfiprintf_r+0x18>
 8006348:	f7ff fb2a 	bl	80059a0 <__sinit>
 800634c:	4b7c      	ldr	r3, [pc, #496]	; (8006540 <_vfiprintf_r+0x20c>)
 800634e:	429c      	cmp	r4, r3
 8006350:	d158      	bne.n	8006404 <_vfiprintf_r+0xd0>
 8006352:	6874      	ldr	r4, [r6, #4]
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	0718      	lsls	r0, r3, #28
 8006358:	d55e      	bpl.n	8006418 <_vfiprintf_r+0xe4>
 800635a:	6923      	ldr	r3, [r4, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d05b      	beq.n	8006418 <_vfiprintf_r+0xe4>
 8006360:	2300      	movs	r3, #0
 8006362:	9309      	str	r3, [sp, #36]	; 0x24
 8006364:	2320      	movs	r3, #32
 8006366:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800636a:	2330      	movs	r3, #48	; 0x30
 800636c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006370:	9503      	str	r5, [sp, #12]
 8006372:	f04f 0b01 	mov.w	fp, #1
 8006376:	46b8      	mov	r8, r7
 8006378:	4645      	mov	r5, r8
 800637a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800637e:	b10b      	cbz	r3, 8006384 <_vfiprintf_r+0x50>
 8006380:	2b25      	cmp	r3, #37	; 0x25
 8006382:	d154      	bne.n	800642e <_vfiprintf_r+0xfa>
 8006384:	ebb8 0a07 	subs.w	sl, r8, r7
 8006388:	d00b      	beq.n	80063a2 <_vfiprintf_r+0x6e>
 800638a:	4653      	mov	r3, sl
 800638c:	463a      	mov	r2, r7
 800638e:	4621      	mov	r1, r4
 8006390:	4630      	mov	r0, r6
 8006392:	f7ff ffbc 	bl	800630e <__sfputs_r>
 8006396:	3001      	adds	r0, #1
 8006398:	f000 80c2 	beq.w	8006520 <_vfiprintf_r+0x1ec>
 800639c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639e:	4453      	add	r3, sl
 80063a0:	9309      	str	r3, [sp, #36]	; 0x24
 80063a2:	f898 3000 	ldrb.w	r3, [r8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 80ba 	beq.w	8006520 <_vfiprintf_r+0x1ec>
 80063ac:	2300      	movs	r3, #0
 80063ae:	f04f 32ff 	mov.w	r2, #4294967295
 80063b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063b6:	9304      	str	r3, [sp, #16]
 80063b8:	9307      	str	r3, [sp, #28]
 80063ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063be:	931a      	str	r3, [sp, #104]	; 0x68
 80063c0:	46a8      	mov	r8, r5
 80063c2:	2205      	movs	r2, #5
 80063c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80063c8:	485e      	ldr	r0, [pc, #376]	; (8006544 <_vfiprintf_r+0x210>)
 80063ca:	f7f9 ff11 	bl	80001f0 <memchr>
 80063ce:	9b04      	ldr	r3, [sp, #16]
 80063d0:	bb78      	cbnz	r0, 8006432 <_vfiprintf_r+0xfe>
 80063d2:	06d9      	lsls	r1, r3, #27
 80063d4:	bf44      	itt	mi
 80063d6:	2220      	movmi	r2, #32
 80063d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063dc:	071a      	lsls	r2, r3, #28
 80063de:	bf44      	itt	mi
 80063e0:	222b      	movmi	r2, #43	; 0x2b
 80063e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80063e6:	782a      	ldrb	r2, [r5, #0]
 80063e8:	2a2a      	cmp	r2, #42	; 0x2a
 80063ea:	d02a      	beq.n	8006442 <_vfiprintf_r+0x10e>
 80063ec:	9a07      	ldr	r2, [sp, #28]
 80063ee:	46a8      	mov	r8, r5
 80063f0:	2000      	movs	r0, #0
 80063f2:	250a      	movs	r5, #10
 80063f4:	4641      	mov	r1, r8
 80063f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063fa:	3b30      	subs	r3, #48	; 0x30
 80063fc:	2b09      	cmp	r3, #9
 80063fe:	d969      	bls.n	80064d4 <_vfiprintf_r+0x1a0>
 8006400:	b360      	cbz	r0, 800645c <_vfiprintf_r+0x128>
 8006402:	e024      	b.n	800644e <_vfiprintf_r+0x11a>
 8006404:	4b50      	ldr	r3, [pc, #320]	; (8006548 <_vfiprintf_r+0x214>)
 8006406:	429c      	cmp	r4, r3
 8006408:	d101      	bne.n	800640e <_vfiprintf_r+0xda>
 800640a:	68b4      	ldr	r4, [r6, #8]
 800640c:	e7a2      	b.n	8006354 <_vfiprintf_r+0x20>
 800640e:	4b4f      	ldr	r3, [pc, #316]	; (800654c <_vfiprintf_r+0x218>)
 8006410:	429c      	cmp	r4, r3
 8006412:	bf08      	it	eq
 8006414:	68f4      	ldreq	r4, [r6, #12]
 8006416:	e79d      	b.n	8006354 <_vfiprintf_r+0x20>
 8006418:	4621      	mov	r1, r4
 800641a:	4630      	mov	r0, r6
 800641c:	f7fe fb1c 	bl	8004a58 <__swsetup_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	d09d      	beq.n	8006360 <_vfiprintf_r+0x2c>
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	b01d      	add	sp, #116	; 0x74
 800642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642e:	46a8      	mov	r8, r5
 8006430:	e7a2      	b.n	8006378 <_vfiprintf_r+0x44>
 8006432:	4a44      	ldr	r2, [pc, #272]	; (8006544 <_vfiprintf_r+0x210>)
 8006434:	1a80      	subs	r0, r0, r2
 8006436:	fa0b f000 	lsl.w	r0, fp, r0
 800643a:	4318      	orrs	r0, r3
 800643c:	9004      	str	r0, [sp, #16]
 800643e:	4645      	mov	r5, r8
 8006440:	e7be      	b.n	80063c0 <_vfiprintf_r+0x8c>
 8006442:	9a03      	ldr	r2, [sp, #12]
 8006444:	1d11      	adds	r1, r2, #4
 8006446:	6812      	ldr	r2, [r2, #0]
 8006448:	9103      	str	r1, [sp, #12]
 800644a:	2a00      	cmp	r2, #0
 800644c:	db01      	blt.n	8006452 <_vfiprintf_r+0x11e>
 800644e:	9207      	str	r2, [sp, #28]
 8006450:	e004      	b.n	800645c <_vfiprintf_r+0x128>
 8006452:	4252      	negs	r2, r2
 8006454:	f043 0302 	orr.w	r3, r3, #2
 8006458:	9207      	str	r2, [sp, #28]
 800645a:	9304      	str	r3, [sp, #16]
 800645c:	f898 3000 	ldrb.w	r3, [r8]
 8006460:	2b2e      	cmp	r3, #46	; 0x2e
 8006462:	d10e      	bne.n	8006482 <_vfiprintf_r+0x14e>
 8006464:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006468:	2b2a      	cmp	r3, #42	; 0x2a
 800646a:	d138      	bne.n	80064de <_vfiprintf_r+0x1aa>
 800646c:	9b03      	ldr	r3, [sp, #12]
 800646e:	1d1a      	adds	r2, r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	9203      	str	r2, [sp, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	bfb8      	it	lt
 8006478:	f04f 33ff 	movlt.w	r3, #4294967295
 800647c:	f108 0802 	add.w	r8, r8, #2
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	4d33      	ldr	r5, [pc, #204]	; (8006550 <_vfiprintf_r+0x21c>)
 8006484:	f898 1000 	ldrb.w	r1, [r8]
 8006488:	2203      	movs	r2, #3
 800648a:	4628      	mov	r0, r5
 800648c:	f7f9 feb0 	bl	80001f0 <memchr>
 8006490:	b140      	cbz	r0, 80064a4 <_vfiprintf_r+0x170>
 8006492:	2340      	movs	r3, #64	; 0x40
 8006494:	1b40      	subs	r0, r0, r5
 8006496:	fa03 f000 	lsl.w	r0, r3, r0
 800649a:	9b04      	ldr	r3, [sp, #16]
 800649c:	4303      	orrs	r3, r0
 800649e:	f108 0801 	add.w	r8, r8, #1
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	f898 1000 	ldrb.w	r1, [r8]
 80064a8:	482a      	ldr	r0, [pc, #168]	; (8006554 <_vfiprintf_r+0x220>)
 80064aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064ae:	2206      	movs	r2, #6
 80064b0:	f108 0701 	add.w	r7, r8, #1
 80064b4:	f7f9 fe9c 	bl	80001f0 <memchr>
 80064b8:	2800      	cmp	r0, #0
 80064ba:	d037      	beq.n	800652c <_vfiprintf_r+0x1f8>
 80064bc:	4b26      	ldr	r3, [pc, #152]	; (8006558 <_vfiprintf_r+0x224>)
 80064be:	bb1b      	cbnz	r3, 8006508 <_vfiprintf_r+0x1d4>
 80064c0:	9b03      	ldr	r3, [sp, #12]
 80064c2:	3307      	adds	r3, #7
 80064c4:	f023 0307 	bic.w	r3, r3, #7
 80064c8:	3308      	adds	r3, #8
 80064ca:	9303      	str	r3, [sp, #12]
 80064cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ce:	444b      	add	r3, r9
 80064d0:	9309      	str	r3, [sp, #36]	; 0x24
 80064d2:	e750      	b.n	8006376 <_vfiprintf_r+0x42>
 80064d4:	fb05 3202 	mla	r2, r5, r2, r3
 80064d8:	2001      	movs	r0, #1
 80064da:	4688      	mov	r8, r1
 80064dc:	e78a      	b.n	80063f4 <_vfiprintf_r+0xc0>
 80064de:	2300      	movs	r3, #0
 80064e0:	f108 0801 	add.w	r8, r8, #1
 80064e4:	9305      	str	r3, [sp, #20]
 80064e6:	4619      	mov	r1, r3
 80064e8:	250a      	movs	r5, #10
 80064ea:	4640      	mov	r0, r8
 80064ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064f0:	3a30      	subs	r2, #48	; 0x30
 80064f2:	2a09      	cmp	r2, #9
 80064f4:	d903      	bls.n	80064fe <_vfiprintf_r+0x1ca>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d0c3      	beq.n	8006482 <_vfiprintf_r+0x14e>
 80064fa:	9105      	str	r1, [sp, #20]
 80064fc:	e7c1      	b.n	8006482 <_vfiprintf_r+0x14e>
 80064fe:	fb05 2101 	mla	r1, r5, r1, r2
 8006502:	2301      	movs	r3, #1
 8006504:	4680      	mov	r8, r0
 8006506:	e7f0      	b.n	80064ea <_vfiprintf_r+0x1b6>
 8006508:	ab03      	add	r3, sp, #12
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	4622      	mov	r2, r4
 800650e:	4b13      	ldr	r3, [pc, #76]	; (800655c <_vfiprintf_r+0x228>)
 8006510:	a904      	add	r1, sp, #16
 8006512:	4630      	mov	r0, r6
 8006514:	f7fd fdf0 	bl	80040f8 <_printf_float>
 8006518:	f1b0 3fff 	cmp.w	r0, #4294967295
 800651c:	4681      	mov	r9, r0
 800651e:	d1d5      	bne.n	80064cc <_vfiprintf_r+0x198>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	065b      	lsls	r3, r3, #25
 8006524:	f53f af7e 	bmi.w	8006424 <_vfiprintf_r+0xf0>
 8006528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800652a:	e77d      	b.n	8006428 <_vfiprintf_r+0xf4>
 800652c:	ab03      	add	r3, sp, #12
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	4622      	mov	r2, r4
 8006532:	4b0a      	ldr	r3, [pc, #40]	; (800655c <_vfiprintf_r+0x228>)
 8006534:	a904      	add	r1, sp, #16
 8006536:	4630      	mov	r0, r6
 8006538:	f7fe f894 	bl	8004664 <_printf_i>
 800653c:	e7ec      	b.n	8006518 <_vfiprintf_r+0x1e4>
 800653e:	bf00      	nop
 8006540:	0800685c 	.word	0x0800685c
 8006544:	0800699c 	.word	0x0800699c
 8006548:	0800687c 	.word	0x0800687c
 800654c:	0800683c 	.word	0x0800683c
 8006550:	080069a2 	.word	0x080069a2
 8006554:	080069a6 	.word	0x080069a6
 8006558:	080040f9 	.word	0x080040f9
 800655c:	0800630f 	.word	0x0800630f

08006560 <_sbrk_r>:
 8006560:	b538      	push	{r3, r4, r5, lr}
 8006562:	4c06      	ldr	r4, [pc, #24]	; (800657c <_sbrk_r+0x1c>)
 8006564:	2300      	movs	r3, #0
 8006566:	4605      	mov	r5, r0
 8006568:	4608      	mov	r0, r1
 800656a:	6023      	str	r3, [r4, #0]
 800656c:	f7fb fc54 	bl	8001e18 <_sbrk>
 8006570:	1c43      	adds	r3, r0, #1
 8006572:	d102      	bne.n	800657a <_sbrk_r+0x1a>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	b103      	cbz	r3, 800657a <_sbrk_r+0x1a>
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	bd38      	pop	{r3, r4, r5, pc}
 800657c:	20000780 	.word	0x20000780

08006580 <__sread>:
 8006580:	b510      	push	{r4, lr}
 8006582:	460c      	mov	r4, r1
 8006584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006588:	f000 f8a8 	bl	80066dc <_read_r>
 800658c:	2800      	cmp	r0, #0
 800658e:	bfab      	itete	ge
 8006590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006592:	89a3      	ldrhlt	r3, [r4, #12]
 8006594:	181b      	addge	r3, r3, r0
 8006596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800659a:	bfac      	ite	ge
 800659c:	6563      	strge	r3, [r4, #84]	; 0x54
 800659e:	81a3      	strhlt	r3, [r4, #12]
 80065a0:	bd10      	pop	{r4, pc}

080065a2 <__swrite>:
 80065a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a6:	461f      	mov	r7, r3
 80065a8:	898b      	ldrh	r3, [r1, #12]
 80065aa:	05db      	lsls	r3, r3, #23
 80065ac:	4605      	mov	r5, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	4616      	mov	r6, r2
 80065b2:	d505      	bpl.n	80065c0 <__swrite+0x1e>
 80065b4:	2302      	movs	r3, #2
 80065b6:	2200      	movs	r2, #0
 80065b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065bc:	f000 f868 	bl	8006690 <_lseek_r>
 80065c0:	89a3      	ldrh	r3, [r4, #12]
 80065c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065ca:	81a3      	strh	r3, [r4, #12]
 80065cc:	4632      	mov	r2, r6
 80065ce:	463b      	mov	r3, r7
 80065d0:	4628      	mov	r0, r5
 80065d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d6:	f000 b817 	b.w	8006608 <_write_r>

080065da <__sseek>:
 80065da:	b510      	push	{r4, lr}
 80065dc:	460c      	mov	r4, r1
 80065de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065e2:	f000 f855 	bl	8006690 <_lseek_r>
 80065e6:	1c43      	adds	r3, r0, #1
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	bf15      	itete	ne
 80065ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065f6:	81a3      	strheq	r3, [r4, #12]
 80065f8:	bf18      	it	ne
 80065fa:	81a3      	strhne	r3, [r4, #12]
 80065fc:	bd10      	pop	{r4, pc}

080065fe <__sclose>:
 80065fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006602:	f000 b813 	b.w	800662c <_close_r>
	...

08006608 <_write_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	4c07      	ldr	r4, [pc, #28]	; (8006628 <_write_r+0x20>)
 800660c:	4605      	mov	r5, r0
 800660e:	4608      	mov	r0, r1
 8006610:	4611      	mov	r1, r2
 8006612:	2200      	movs	r2, #0
 8006614:	6022      	str	r2, [r4, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	f7fb fbad 	bl	8001d76 <_write>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d102      	bne.n	8006626 <_write_r+0x1e>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	b103      	cbz	r3, 8006626 <_write_r+0x1e>
 8006624:	602b      	str	r3, [r5, #0]
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	20000780 	.word	0x20000780

0800662c <_close_r>:
 800662c:	b538      	push	{r3, r4, r5, lr}
 800662e:	4c06      	ldr	r4, [pc, #24]	; (8006648 <_close_r+0x1c>)
 8006630:	2300      	movs	r3, #0
 8006632:	4605      	mov	r5, r0
 8006634:	4608      	mov	r0, r1
 8006636:	6023      	str	r3, [r4, #0]
 8006638:	f7fb fbb9 	bl	8001dae <_close>
 800663c:	1c43      	adds	r3, r0, #1
 800663e:	d102      	bne.n	8006646 <_close_r+0x1a>
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	b103      	cbz	r3, 8006646 <_close_r+0x1a>
 8006644:	602b      	str	r3, [r5, #0]
 8006646:	bd38      	pop	{r3, r4, r5, pc}
 8006648:	20000780 	.word	0x20000780

0800664c <_fstat_r>:
 800664c:	b538      	push	{r3, r4, r5, lr}
 800664e:	4c07      	ldr	r4, [pc, #28]	; (800666c <_fstat_r+0x20>)
 8006650:	2300      	movs	r3, #0
 8006652:	4605      	mov	r5, r0
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	f7fb fbb4 	bl	8001dc6 <_fstat>
 800665e:	1c43      	adds	r3, r0, #1
 8006660:	d102      	bne.n	8006668 <_fstat_r+0x1c>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	b103      	cbz	r3, 8006668 <_fstat_r+0x1c>
 8006666:	602b      	str	r3, [r5, #0]
 8006668:	bd38      	pop	{r3, r4, r5, pc}
 800666a:	bf00      	nop
 800666c:	20000780 	.word	0x20000780

08006670 <_isatty_r>:
 8006670:	b538      	push	{r3, r4, r5, lr}
 8006672:	4c06      	ldr	r4, [pc, #24]	; (800668c <_isatty_r+0x1c>)
 8006674:	2300      	movs	r3, #0
 8006676:	4605      	mov	r5, r0
 8006678:	4608      	mov	r0, r1
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	f7fb fbb3 	bl	8001de6 <_isatty>
 8006680:	1c43      	adds	r3, r0, #1
 8006682:	d102      	bne.n	800668a <_isatty_r+0x1a>
 8006684:	6823      	ldr	r3, [r4, #0]
 8006686:	b103      	cbz	r3, 800668a <_isatty_r+0x1a>
 8006688:	602b      	str	r3, [r5, #0]
 800668a:	bd38      	pop	{r3, r4, r5, pc}
 800668c:	20000780 	.word	0x20000780

08006690 <_lseek_r>:
 8006690:	b538      	push	{r3, r4, r5, lr}
 8006692:	4c07      	ldr	r4, [pc, #28]	; (80066b0 <_lseek_r+0x20>)
 8006694:	4605      	mov	r5, r0
 8006696:	4608      	mov	r0, r1
 8006698:	4611      	mov	r1, r2
 800669a:	2200      	movs	r2, #0
 800669c:	6022      	str	r2, [r4, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	f7fb fbac 	bl	8001dfc <_lseek>
 80066a4:	1c43      	adds	r3, r0, #1
 80066a6:	d102      	bne.n	80066ae <_lseek_r+0x1e>
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	b103      	cbz	r3, 80066ae <_lseek_r+0x1e>
 80066ac:	602b      	str	r3, [r5, #0]
 80066ae:	bd38      	pop	{r3, r4, r5, pc}
 80066b0:	20000780 	.word	0x20000780

080066b4 <__ascii_mbtowc>:
 80066b4:	b082      	sub	sp, #8
 80066b6:	b901      	cbnz	r1, 80066ba <__ascii_mbtowc+0x6>
 80066b8:	a901      	add	r1, sp, #4
 80066ba:	b142      	cbz	r2, 80066ce <__ascii_mbtowc+0x1a>
 80066bc:	b14b      	cbz	r3, 80066d2 <__ascii_mbtowc+0x1e>
 80066be:	7813      	ldrb	r3, [r2, #0]
 80066c0:	600b      	str	r3, [r1, #0]
 80066c2:	7812      	ldrb	r2, [r2, #0]
 80066c4:	1c10      	adds	r0, r2, #0
 80066c6:	bf18      	it	ne
 80066c8:	2001      	movne	r0, #1
 80066ca:	b002      	add	sp, #8
 80066cc:	4770      	bx	lr
 80066ce:	4610      	mov	r0, r2
 80066d0:	e7fb      	b.n	80066ca <__ascii_mbtowc+0x16>
 80066d2:	f06f 0001 	mvn.w	r0, #1
 80066d6:	e7f8      	b.n	80066ca <__ascii_mbtowc+0x16>

080066d8 <__malloc_lock>:
 80066d8:	4770      	bx	lr

080066da <__malloc_unlock>:
 80066da:	4770      	bx	lr

080066dc <_read_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4c07      	ldr	r4, [pc, #28]	; (80066fc <_read_r+0x20>)
 80066e0:	4605      	mov	r5, r0
 80066e2:	4608      	mov	r0, r1
 80066e4:	4611      	mov	r1, r2
 80066e6:	2200      	movs	r2, #0
 80066e8:	6022      	str	r2, [r4, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	f7fb fb26 	bl	8001d3c <_read>
 80066f0:	1c43      	adds	r3, r0, #1
 80066f2:	d102      	bne.n	80066fa <_read_r+0x1e>
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	b103      	cbz	r3, 80066fa <_read_r+0x1e>
 80066f8:	602b      	str	r3, [r5, #0]
 80066fa:	bd38      	pop	{r3, r4, r5, pc}
 80066fc:	20000780 	.word	0x20000780

08006700 <__ascii_wctomb>:
 8006700:	b149      	cbz	r1, 8006716 <__ascii_wctomb+0x16>
 8006702:	2aff      	cmp	r2, #255	; 0xff
 8006704:	bf85      	ittet	hi
 8006706:	238a      	movhi	r3, #138	; 0x8a
 8006708:	6003      	strhi	r3, [r0, #0]
 800670a:	700a      	strbls	r2, [r1, #0]
 800670c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006710:	bf98      	it	ls
 8006712:	2001      	movls	r0, #1
 8006714:	4770      	bx	lr
 8006716:	4608      	mov	r0, r1
 8006718:	4770      	bx	lr
	...

0800671c <_init>:
 800671c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800671e:	bf00      	nop
 8006720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006722:	bc08      	pop	{r3}
 8006724:	469e      	mov	lr, r3
 8006726:	4770      	bx	lr

08006728 <_fini>:
 8006728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800672a:	bf00      	nop
 800672c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672e:	bc08      	pop	{r3}
 8006730:	469e      	mov	lr, r3
 8006732:	4770      	bx	lr
