
HYAsstSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000678c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08006930  08006930  00016930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cc8  08006cc8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006cc8  08006cc8  00016cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cd0  08006cd0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000154c  200001dc  08006eb4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001728  08006eb4  00021728  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c663  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e42  00000000  00000000  0002c86f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ab8  00000000  00000000  0002e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  0002f170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001704e  00000000  00000000  0002fb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000948e  00000000  00000000  00046ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00089034  00000000  00000000  00050034  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d8  00000000  00000000  000d90e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006914 	.word	0x08006914

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006914 	.word	0x08006914

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <NMEA_Comma_Pos>:

#include <stdio.h>
#include <string.h>
#include "GPSdecode.h"

u8  NMEA_Comma_Pos (u8 *buf, u8 cx) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
	u8 *p = buf;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	60fb      	str	r3, [r7, #12]
	while (cx) {
 8000ec8:	e017      	b.n	8000efa <NMEA_Comma_Pos+0x42>
		if (*buf=='*' || *buf<' ' || *buf>'z') return 0xFF;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b2a      	cmp	r3, #42	; 0x2a
 8000ed0:	d007      	beq.n	8000ee2 <NMEA_Comma_Pos+0x2a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b1f      	cmp	r3, #31
 8000ed8:	d903      	bls.n	8000ee2 <NMEA_Comma_Pos+0x2a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b7a      	cmp	r3, #122	; 0x7a
 8000ee0:	d901      	bls.n	8000ee6 <NMEA_Comma_Pos+0x2e>
 8000ee2:	23ff      	movs	r3, #255	; 0xff
 8000ee4:	e010      	b.n	8000f08 <NMEA_Comma_Pos+0x50>
		if (*buf==',') {-- cx;} buf ++;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b2c      	cmp	r3, #44	; 0x2c
 8000eec:	d102      	bne.n	8000ef4 <NMEA_Comma_Pos+0x3c>
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	70fb      	strb	r3, [r7, #3]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
	while (cx) {
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e4      	bne.n	8000eca <NMEA_Comma_Pos+0x12>
	} return buf - p;
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b2db      	uxtb	r3, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <NMEA_Pow>:

u32 NMEA_Pow (u32 a, u8 n) {
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
	u32 ret = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
	while (n) {
 8000f24:	e011      	b.n	8000f4a <NMEA_Pow+0x36>
		if(n&1) ret *= a;
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <NMEA_Pow+0x26>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	60fb      	str	r3, [r7, #12]
		a *= a, n >>= 1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	085b      	lsrs	r3, r3, #1
 8000f48:	70fb      	strb	r3, [r7, #3]
	while (n) {
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1ea      	bne.n	8000f26 <NMEA_Pow+0x12>
	} return ret;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <NMEA_StrToNum>:

int NMEA_StrToNum (u8 *buf, u8*dx) {
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b088      	sub	sp, #32
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
	u8  *p = buf;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	61fb      	str	r3, [r7, #28]
	u32 ires = 0, fres = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
	u8  ilen = 0, flen = 0, flag = 0, i;
 8000f74:	2300      	movs	r3, #0
 8000f76:	74fb      	strb	r3, [r7, #19]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	74bb      	strb	r3, [r7, #18]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	747b      	strb	r3, [r7, #17]
	int ret;

	while (1) {
		if (*p=='-') {flag |= 0x02; p ++;}
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b2d      	cmp	r3, #45	; 0x2d
 8000f86:	d106      	bne.n	8000f96 <NMEA_StrToNum+0x38>
 8000f88:	7c7b      	ldrb	r3, [r7, #17]
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	747b      	strb	r3, [r7, #17]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	3301      	adds	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
		if (*p==',' || *p=='*') {break;}
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f9c:	d02c      	beq.n	8000ff8 <NMEA_StrToNum+0x9a>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8000fa4:	d028      	beq.n	8000ff8 <NMEA_StrToNum+0x9a>
		if (*p=='.') {flag |= 0x01; p ++;}
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b2e      	cmp	r3, #46	; 0x2e
 8000fac:	d107      	bne.n	8000fbe <NMEA_StrToNum+0x60>
 8000fae:	7c7b      	ldrb	r3, [r7, #17]
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	747b      	strb	r3, [r7, #17]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	e00c      	b.n	8000fd8 <NMEA_StrToNum+0x7a>
		else if (*p<'0' || *p>'9') {
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fc4:	d903      	bls.n	8000fce <NMEA_StrToNum+0x70>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b39      	cmp	r3, #57	; 0x39
 8000fcc:	d904      	bls.n	8000fd8 <NMEA_StrToNum+0x7a>
			ilen = 0; flen = 0; break;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	74fb      	strb	r3, [r7, #19]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	74bb      	strb	r3, [r7, #18]
 8000fd6:	e00f      	b.n	8000ff8 <NMEA_StrToNum+0x9a>
		} if (flag&0x01) {++ flen;}
 8000fd8:	7c7b      	ldrb	r3, [r7, #17]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <NMEA_StrToNum+0x8c>
 8000fe2:	7cbb      	ldrb	r3, [r7, #18]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	74bb      	strb	r3, [r7, #18]
 8000fe8:	e002      	b.n	8000ff0 <NMEA_StrToNum+0x92>
		else {++ ilen;} p ++;
 8000fea:	7cfb      	ldrb	r3, [r7, #19]
 8000fec:	3301      	adds	r3, #1
 8000fee:	74fb      	strb	r3, [r7, #19]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
		if (*p=='-') {flag |= 0x02; p ++;}
 8000ff6:	e7c3      	b.n	8000f80 <NMEA_StrToNum+0x22>
	} if (flag&0x02) {buf ++;}
 8000ff8:	7c7b      	ldrb	r3, [r7, #17]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <NMEA_StrToNum+0xaa>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	607b      	str	r3, [r7, #4]

	for (i=0; i<ilen; ++ i) {
 8001008:	2300      	movs	r3, #0
 800100a:	743b      	strb	r3, [r7, #16]
 800100c:	e019      	b.n	8001042 <NMEA_StrToNum+0xe4>
		ires += NMEA_Pow(10, ilen-i-1)*(buf[i]^'0');
 800100e:	7cfa      	ldrb	r2, [r7, #19]
 8001010:	7c3b      	ldrb	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3b01      	subs	r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4619      	mov	r1, r3
 800101c:	200a      	movs	r0, #10
 800101e:	f7ff ff79 	bl	8000f14 <NMEA_Pow>
 8001022:	4601      	mov	r1, r0
 8001024:	7c3b      	ldrb	r3, [r7, #16]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001030:	b2db      	uxtb	r3, r3
 8001032:	fb03 f301 	mul.w	r3, r3, r1
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4413      	add	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
	for (i=0; i<ilen; ++ i) {
 800103c:	7c3b      	ldrb	r3, [r7, #16]
 800103e:	3301      	adds	r3, #1
 8001040:	743b      	strb	r3, [r7, #16]
 8001042:	7c3a      	ldrb	r2, [r7, #16]
 8001044:	7cfb      	ldrb	r3, [r7, #19]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e1      	bcc.n	800100e <NMEA_StrToNum+0xb0>
	} if (flen>5) {flen = 5;} *dx = flen;
 800104a:	7cbb      	ldrb	r3, [r7, #18]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d901      	bls.n	8001054 <NMEA_StrToNum+0xf6>
 8001050:	2305      	movs	r3, #5
 8001052:	74bb      	strb	r3, [r7, #18]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	7cba      	ldrb	r2, [r7, #18]
 8001058:	701a      	strb	r2, [r3, #0]

	for (i=0; i<flen; ++ i) {
 800105a:	2300      	movs	r3, #0
 800105c:	743b      	strb	r3, [r7, #16]
 800105e:	e01c      	b.n	800109a <NMEA_StrToNum+0x13c>
		fres += NMEA_Pow(10, flen-i-1)*(buf[ilen+i+1]^'0');
 8001060:	7cba      	ldrb	r2, [r7, #18]
 8001062:	7c3b      	ldrb	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3b01      	subs	r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4619      	mov	r1, r3
 800106e:	200a      	movs	r0, #10
 8001070:	f7ff ff50 	bl	8000f14 <NMEA_Pow>
 8001074:	4601      	mov	r1, r0
 8001076:	7cfa      	ldrb	r2, [r7, #19]
 8001078:	7c3b      	ldrb	r3, [r7, #16]
 800107a:	4413      	add	r3, r2
 800107c:	3301      	adds	r3, #1
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001088:	b2db      	uxtb	r3, r3
 800108a:	fb03 f301 	mul.w	r3, r3, r1
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
	for (i=0; i<flen; ++ i) {
 8001094:	7c3b      	ldrb	r3, [r7, #16]
 8001096:	3301      	adds	r3, #1
 8001098:	743b      	strb	r3, [r7, #16]
 800109a:	7c3a      	ldrb	r2, [r7, #16]
 800109c:	7cbb      	ldrb	r3, [r7, #18]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3de      	bcc.n	8001060 <NMEA_StrToNum+0x102>
	} ret = ires * NMEA_Pow(10, flen) + fres;
 80010a2:	7cbb      	ldrb	r3, [r7, #18]
 80010a4:	4619      	mov	r1, r3
 80010a6:	200a      	movs	r0, #10
 80010a8:	f7ff ff34 	bl	8000f14 <NMEA_Pow>
 80010ac:	4602      	mov	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	fb03 f202 	mul.w	r2, r3, r2
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
	return (flag&0x02)? -ret:ret;
 80010ba:	7c7b      	ldrb	r3, [r7, #17]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <NMEA_StrToNum+0x16c>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	425b      	negs	r3, r3
 80010c8:	e000      	b.n	80010cc <NMEA_StrToNum+0x16e>
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <NMEA_GPVTG_Analysis>:
			++ slx;
		} p = p1+1;
	}
}

void NMEA_GPVTG_Analysis(nmea_msg *gpsx,u8 *buf) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	u8 *p1, dx; u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPVTG");
 80010de:	491b      	ldr	r1, [pc, #108]	; (800114c <NMEA_GPVTG_Analysis+0x78>)
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f003 fd49 	bl	8004b78 <strstr>
 80010e6:	60f8      	str	r0, [r7, #12]
	posx = NMEA_Comma_Pos(p1, 7);
 80010e8:	2107      	movs	r1, #7
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff fee4 	bl	8000eb8 <NMEA_Comma_Pos>
 80010f0:	4603      	mov	r3, r0
 80010f2:	72fb      	strb	r3, [r7, #11]
	if(posx^0XFF) {
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	2bff      	cmp	r3, #255	; 0xff
 80010f8:	d024      	beq.n	8001144 <NMEA_GPVTG_Analysis+0x70>
		gpsx->speed = NMEA_StrToNum(p1+posx, &dx);
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	f107 020a 	add.w	r2, r7, #10
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff29 	bl	8000f5e <NMEA_StrToNum>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8a3 2067 	strh.w	r2, [r3, #103]	; 0x67
		if (dx < 3) gpsx->speed *= NMEA_Pow(10, 3-dx);
 8001116:	7abb      	ldrb	r3, [r7, #10]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d813      	bhi.n	8001144 <NMEA_GPVTG_Analysis+0x70>
 800111c:	7abb      	ldrb	r3, [r7, #10]
 800111e:	f1c3 0303 	rsb	r3, r3, #3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	200a      	movs	r0, #10
 8001128:	f7ff fef4 	bl	8000f14 <NMEA_Pow>
 800112c:	4601      	mov	r1, r0
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8b3 3067 	ldrh.w	r3, [r3, #103]	; 0x67
 8001134:	b29a      	uxth	r2, r3
 8001136:	b28b      	uxth	r3, r1
 8001138:	fb12 f303 	smulbb	r3, r2, r3
 800113c:	b29a      	uxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8a3 2067 	strh.w	r2, [r3, #103]	; 0x67
	}
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	08006938 	.word	0x08006938

08001150 <NMEA_GPGGA_Analysis>:

void NMEA_GPGGA_Analysis (nmea_msg *gpsx,u8 *buf) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPGGA");
 800115a:	4910      	ldr	r1, [pc, #64]	; (800119c <NMEA_GPGGA_Analysis+0x4c>)
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f003 fd0b 	bl	8004b78 <strstr>
 8001162:	60f8      	str	r0, [r7, #12]
	posx = NMEA_Comma_Pos(p1, 6);
 8001164:	2106      	movs	r1, #6
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff fea6 	bl	8000eb8 <NMEA_Comma_Pos>
 800116c:	4603      	mov	r3, r0
 800116e:	72fb      	strb	r3, [r7, #11]
	if (posx^0XFF) gpsx->gpssta = NMEA_StrToNum(p1+posx, &dx);
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	2bff      	cmp	r3, #255	; 0xff
 8001174:	d00d      	beq.n	8001192 <NMEA_GPGGA_Analysis+0x42>
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	f107 020a 	add.w	r2, r7, #10
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff feeb 	bl	8000f5e <NMEA_StrToNum>
 8001188:	4603      	mov	r3, r0
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
//	posx = NMEA_Comma_Pos(p1, 7);
//	if (posx^0XFF) gpsx->posslnum = NMEA_StrToNum(p1+posx, &dx);
//	posx = NMEA_Comma_Pos(p1, 9);
//	if (posx^0XFF) gpsx->altitude = NMEA_StrToNum(p1+posx, &dx);
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	08006940 	.word	0x08006940

080011a0 <NMEA_GPGSA_Analysis>:

void NMEA_GPGSA_Analysis (nmea_msg *gpsx, u8 *buf) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPGSA");
 80011aa:	4910      	ldr	r1, [pc, #64]	; (80011ec <NMEA_GPGSA_Analysis+0x4c>)
 80011ac:	6838      	ldr	r0, [r7, #0]
 80011ae:	f003 fce3 	bl	8004b78 <strstr>
 80011b2:	60f8      	str	r0, [r7, #12]
//	for (i=0; i<12; ++ i) {
//		posx = NMEA_Comma_Pos(p1, 3+i);
//		if (posx^0XFF) gpsx->possl[i] = NMEA_StrToNum(p1+posx, &dx);
//		else break;
//	}
	posx = NMEA_Comma_Pos(p1, 15);
 80011b4:	210f      	movs	r1, #15
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff fe7e 	bl	8000eb8 <NMEA_Comma_Pos>
 80011bc:	4603      	mov	r3, r0
 80011be:	72fb      	strb	r3, [r7, #11]
	if (posx^0XFF) gpsx->pdop = NMEA_StrToNum(p1+posx, &dx);
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	2bff      	cmp	r3, #255	; 0xff
 80011c4:	d00d      	beq.n	80011e2 <NMEA_GPGSA_Analysis+0x42>
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	f107 020a 	add.w	r2, r7, #10
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fec3 	bl	8000f5e <NMEA_StrToNum>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8a3 205d 	strh.w	r2, [r3, #93]	; 0x5d
//	posx = NMEA_Comma_Pos(p1, 16);
//	if (posx^0XFF) gpsx->hdop = NMEA_StrToNum(p1+posx, &dx);
//	posx = NMEA_Comma_Pos(p1, 17);
//	if (posx^0XFF) gpsx->vdop = NMEA_StrToNum(p1+posx, &dx);
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	08006948 	.word	0x08006948

080011f0 <NMEA_GPRMC_Analysis>:

void NMEA_GPRMC_Analysis (nmea_msg *gpsx, u8 *buf) {
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	ed2d 8b02 	vpush	{d8}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	u32 temp;
	float rs;
	p1 = (u8*)strstr((const char *)buf, "$GPRMC");
 80011fe:	499e      	ldr	r1, [pc, #632]	; (8001478 <NMEA_GPRMC_Analysis+0x288>)
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	f003 fcb9 	bl	8004b78 <strstr>
 8001206:	61f8      	str	r0, [r7, #28]
	posx = NMEA_Comma_Pos(p1, 1);
 8001208:	2101      	movs	r1, #1
 800120a:	69f8      	ldr	r0, [r7, #28]
 800120c:	f7ff fe54 	bl	8000eb8 <NMEA_Comma_Pos>
 8001210:	4603      	mov	r3, r0
 8001212:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 8001214:	7efb      	ldrb	r3, [r7, #27]
 8001216:	2bff      	cmp	r3, #255	; 0xff
 8001218:	d03a      	beq.n	8001290 <NMEA_GPRMC_Analysis+0xa0>
		temp = NMEA_StrToNum(p1+posx, &dx) / NMEA_Pow(10, dx);
 800121a:	7efb      	ldrb	r3, [r7, #27]
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	4413      	add	r3, r2
 8001220:	f107 020f 	add.w	r2, r7, #15
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fe99 	bl	8000f5e <NMEA_StrToNum>
 800122c:	4603      	mov	r3, r0
 800122e:	461c      	mov	r4, r3
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	4619      	mov	r1, r3
 8001234:	200a      	movs	r0, #10
 8001236:	f7ff fe6d 	bl	8000f14 <NMEA_Pow>
 800123a:	4603      	mov	r3, r0
 800123c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001240:	617b      	str	r3, [r7, #20]
		gpsx->utc.hour = temp/10000;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	4a8d      	ldr	r2, [pc, #564]	; (800147c <NMEA_GPRMC_Analysis+0x28c>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0b5b      	lsrs	r3, r3, #13
 800124c:	b2da      	uxtb	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		gpsx->utc.min  = (temp/100)%100;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	4a8a      	ldr	r2, [pc, #552]	; (8001480 <NMEA_GPRMC_Analysis+0x290>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	095a      	lsrs	r2, r3, #5
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <NMEA_GPRMC_Analysis+0x290>)
 8001260:	fba3 1302 	umull	r1, r3, r3, r2
 8001264:	095b      	lsrs	r3, r3, #5
 8001266:	2164      	movs	r1, #100	; 0x64
 8001268:	fb01 f303 	mul.w	r3, r1, r3
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2da      	uxtb	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		gpsx->utc.sec  = temp%100;
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4b81      	ldr	r3, [pc, #516]	; (8001480 <NMEA_GPRMC_Analysis+0x290>)
 800127a:	fba3 1302 	umull	r1, r3, r3, r2
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2164      	movs	r1, #100	; 0x64
 8001282:	fb01 f303 	mul.w	r3, r1, r3
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	}
	posx = NMEA_Comma_Pos(p1, 3);
 8001290:	2103      	movs	r1, #3
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f7ff fe10 	bl	8000eb8 <NMEA_Comma_Pos>
 8001298:	4603      	mov	r3, r0
 800129a:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 800129c:	7efb      	ldrb	r3, [r7, #27]
 800129e:	2bff      	cmp	r3, #255	; 0xff
 80012a0:	d050      	beq.n	8001344 <NMEA_GPRMC_Analysis+0x154>
		temp = NMEA_StrToNum(p1+posx, &dx);
 80012a2:	7efb      	ldrb	r3, [r7, #27]
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	4413      	add	r3, r2
 80012a8:	f107 020f 	add.w	r2, r7, #15
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fe55 	bl	8000f5e <NMEA_StrToNum>
 80012b4:	4603      	mov	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]
		gpsx->latitude = temp/NMEA_Pow(10, dx+2);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	3302      	adds	r3, #2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4619      	mov	r1, r3
 80012c0:	200a      	movs	r0, #10
 80012c2:	f7ff fe27 	bl	8000f14 <NMEA_Pow>
 80012c6:	4602      	mov	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
		rs = temp%NMEA_Pow(10, dx+2);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3302      	adds	r3, #2
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4619      	mov	r1, r3
 80012da:	200a      	movs	r0, #10
 80012dc:	f7ff fe1a 	bl	8000f14 <NMEA_Pow>
 80012e0:	4602      	mov	r2, r0
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80012e8:	fb02 f201 	mul.w	r2, r2, r1
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f6:	edc7 7a04 	vstr	s15, [r7, #16]
		gpsx->latitude = gpsx->latitude*100000+(rs*NMEA_Pow(10, 5-dx))/60;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a61      	ldr	r2, [pc, #388]	; (8001484 <NMEA_GPRMC_Analysis+0x294>)
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	f1c3 0305 	rsb	r3, r3, #5
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4619      	mov	r1, r3
 8001316:	200a      	movs	r0, #10
 8001318:	f7ff fdfc 	bl	8000f14 <NMEA_Pow>
 800131c:	ee07 0a90 	vmov	s15, r0
 8001320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001324:	edd7 7a04 	vldr	s15, [r7, #16]
 8001328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132c:	eddf 6a56 	vldr	s13, [pc, #344]	; 8001488 <NMEA_GPRMC_Analysis+0x298>
 8001330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001334:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133c:	ee17 2a90 	vmov	r2, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	645a      	str	r2, [r3, #68]	; 0x44
	}
	posx = NMEA_Comma_Pos(p1, 4);
 8001344:	2104      	movs	r1, #4
 8001346:	69f8      	ldr	r0, [r7, #28]
 8001348:	f7ff fdb6 	bl	8000eb8 <NMEA_Comma_Pos>
 800134c:	4603      	mov	r3, r0
 800134e:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) gpsx->nshemi = *(p1+posx);
 8001350:	7efb      	ldrb	r3, [r7, #27]
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d006      	beq.n	8001364 <NMEA_GPRMC_Analysis+0x174>
 8001356:	7efb      	ldrb	r3, [r7, #27]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	4413      	add	r3, r2
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (gpsx->nshemi ^ 'N') gpsx->latitude *= -1;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800136a:	2b4e      	cmp	r3, #78	; 0x4e
 800136c:	d004      	beq.n	8001378 <NMEA_GPRMC_Analysis+0x188>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	425a      	negs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
	posx = NMEA_Comma_Pos(p1,5);
 8001378:	2105      	movs	r1, #5
 800137a:	69f8      	ldr	r0, [r7, #28]
 800137c:	f7ff fd9c 	bl	8000eb8 <NMEA_Comma_Pos>
 8001380:	4603      	mov	r3, r0
 8001382:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 8001384:	7efb      	ldrb	r3, [r7, #27]
 8001386:	2bff      	cmp	r3, #255	; 0xff
 8001388:	d053      	beq.n	8001432 <NMEA_GPRMC_Analysis+0x242>
		temp = NMEA_StrToNum(p1+posx, &dx);
 800138a:	7efb      	ldrb	r3, [r7, #27]
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	4413      	add	r3, r2
 8001390:	f107 020f 	add.w	r2, r7, #15
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fde1 	bl	8000f5e <NMEA_StrToNum>
 800139c:	4603      	mov	r3, r0
 800139e:	617b      	str	r3, [r7, #20]
		gpsx->longitude = temp/NMEA_Pow(10, dx+2);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3302      	adds	r3, #2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4619      	mov	r1, r3
 80013a8:	200a      	movs	r0, #10
 80013aa:	f7ff fdb3 	bl	8000f14 <NMEA_Pow>
 80013ae:	4602      	mov	r2, r0
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
		rs = temp%NMEA_Pow(10, dx+2);
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	3302      	adds	r3, #2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	200a      	movs	r0, #10
 80013c6:	f7ff fda5 	bl	8000f14 <NMEA_Pow>
 80013ca:	4602      	mov	r2, r0
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80013d2:	fb02 f201 	mul.w	r2, r2, r1
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e0:	edc7 7a04 	vstr	s15, [r7, #16]
		gpsx->longitude = gpsx->longitude*100000+(rs*NMEA_Pow(10, 5-dx))/60;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 80013ea:	4a26      	ldr	r2, [pc, #152]	; (8001484 <NMEA_GPRMC_Analysis+0x294>)
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	f1c3 0305 	rsb	r3, r3, #5
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4619      	mov	r1, r3
 8001402:	200a      	movs	r0, #10
 8001404:	f7ff fd86 	bl	8000f14 <NMEA_Pow>
 8001408:	ee07 0a90 	vmov	s15, r0
 800140c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001410:	edd7 7a04 	vldr	s15, [r7, #16]
 8001414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001418:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001488 <NMEA_GPRMC_Analysis+0x298>
 800141c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001420:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001428:	ee17 2a90 	vmov	r2, s15
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
	}
	posx = NMEA_Comma_Pos(p1, 6);
 8001432:	2106      	movs	r1, #6
 8001434:	69f8      	ldr	r0, [r7, #28]
 8001436:	f7ff fd3f 	bl	8000eb8 <NMEA_Comma_Pos>
 800143a:	4603      	mov	r3, r0
 800143c:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) gpsx->ewhemi = *(p1+posx);
 800143e:	7efb      	ldrb	r3, [r7, #27]
 8001440:	2bff      	cmp	r3, #255	; 0xff
 8001442:	d006      	beq.n	8001452 <NMEA_GPRMC_Analysis+0x262>
 8001444:	7efb      	ldrb	r3, [r7, #27]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	if (gpsx->ewhemi ^ 'E') gpsx->longitude *= -1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001458:	2b45      	cmp	r3, #69	; 0x45
 800145a:	d006      	beq.n	800146a <NMEA_GPRMC_Analysis+0x27a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8001462:	425a      	negs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
//		temp = NMEA_StrToNum(p1+posx, &dx);
//		gpsx->utc.date  = temp/10000;
//		gpsx->utc.month = (temp/100)%100;
//		gpsx->utc.year  = 2000+temp%100;
//	}
}
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	ecbd 8b02 	vpop	{d8}
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	bf00      	nop
 8001478:	08006950 	.word	0x08006950
 800147c:	d1b71759 	.word	0xd1b71759
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	000186a0 	.word	0x000186a0
 8001488:	42700000 	.word	0x42700000

0800148c <LED_PC13_INIT>:
  */

#include "LED_OUTPUT.h"
#include "main.h"

inline void LED_PC13_INIT () {
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]
 800149e:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014a0:	2300      	movs	r3, #0
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	4b11      	ldr	r3, [pc, #68]	; (80014ec <LED_PC13_INIT+0x60>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	4a10      	ldr	r2, [pc, #64]	; (80014ec <LED_PC13_INIT+0x60>)
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	6313      	str	r3, [r2, #48]	; 0x30
 80014b0:	4b0e      	ldr	r3, [pc, #56]	; (80014ec <LED_PC13_INIT+0x60>)
 80014b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	603b      	str	r3, [r7, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	480b      	ldr	r0, [pc, #44]	; (80014f0 <LED_PC13_INIT+0x64>)
 80014c4:	f001 f8be 	bl	8002644 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ce:	2301      	movs	r3, #1
 80014d0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	2302      	movs	r3, #2
 80014d8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014da:	1d3b      	adds	r3, r7, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4804      	ldr	r0, [pc, #16]	; (80014f0 <LED_PC13_INIT+0x64>)
 80014e0:	f000 ff2e 	bl	8002340 <HAL_GPIO_Init>
}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40020800 	.word	0x40020800

080014f4 <LED_PC13_BLINK>:

inline void LED_PC13_BLINK (register int delayTime) {
 80014f4:	b598      	push	{r3, r4, r7, lr}
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4604      	mov	r4, r0
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80014fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014fe:	4809      	ldr	r0, [pc, #36]	; (8001524 <LED_PC13_BLINK+0x30>)
 8001500:	f001 f8b9 	bl	8002676 <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 8001504:	4623      	mov	r3, r4
 8001506:	4618      	mov	r0, r3
 8001508:	f000 fdc4 	bl	8002094 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800150c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <LED_PC13_BLINK+0x30>)
 8001512:	f001 f8b0 	bl	8002676 <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 8001516:	4623      	mov	r3, r4
 8001518:	4618      	mov	r0, r3
 800151a:	f000 fdbb 	bl	8002094 <HAL_Delay>
}
 800151e:	bf00      	nop
 8001520:	bd98      	pop	{r3, r4, r7, pc}
 8001522:	bf00      	nop
 8001524:	40020800 	.word	0x40020800

08001528 <LED_OUTPUT_INIT>:
			LED_TEST_OFF(); HAL_Delay(4);
		}
	}
}

inline void LED_OUTPUT_INIT () {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800153c:	2300      	movs	r3, #0
 800153e:	603b      	str	r3, [r7, #0]
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <LED_OUTPUT_INIT+0xc4>)
 8001542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001544:	4a29      	ldr	r2, [pc, #164]	; (80015ec <LED_OUTPUT_INIT+0xc4>)
 8001546:	f043 0301 	orr.w	r3, r3, #1
 800154a:	6313      	str	r3, [r2, #48]	; 0x30
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <LED_OUTPUT_INIT+0xc4>)
 800154e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	603b      	str	r3, [r7, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2180      	movs	r1, #128	; 0x80
 800155c:	4824      	ldr	r0, [pc, #144]	; (80015f0 <LED_OUTPUT_INIT+0xc8>)
 800155e:	f001 f871 	bl	8002644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8001562:	2201      	movs	r2, #1
 8001564:	2140      	movs	r1, #64	; 0x40
 8001566:	4822      	ldr	r0, [pc, #136]	; (80015f0 <LED_OUTPUT_INIT+0xc8>)
 8001568:	f001 f86c 	bl	8002644 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800156c:	2201      	movs	r2, #1
 800156e:	2120      	movs	r1, #32
 8001570:	481f      	ldr	r0, [pc, #124]	; (80015f0 <LED_OUTPUT_INIT+0xc8>)
 8001572:	f001 f867 	bl	8002644 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001582:	2302      	movs	r3, #2
 8001584:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4819      	ldr	r0, [pc, #100]	; (80015f0 <LED_OUTPUT_INIT+0xc8>)
 800158c:	f000 fed8 	bl	8002340 <HAL_GPIO_Init>
	LED_GPSRFS_OFF();
 8001590:	2200      	movs	r2, #0
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	4816      	ldr	r0, [pc, #88]	; (80015f0 <LED_OUTPUT_INIT+0xc8>)
 8001596:	f001 f855 	bl	8002644 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800159a:	2340      	movs	r3, #64	; 0x40
 800159c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159e:	2301      	movs	r3, #1
 80015a0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015a6:	2302      	movs	r3, #2
 80015a8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4619      	mov	r1, r3
 80015ae:	4810      	ldr	r0, [pc, #64]	; (80015f0 <LED_OUTPUT_INIT+0xc8>)
 80015b0:	f000 fec6 	bl	8002340 <HAL_GPIO_Init>
	LED_DATUPD_OFF();
 80015b4:	2200      	movs	r2, #0
 80015b6:	2140      	movs	r1, #64	; 0x40
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <LED_OUTPUT_INIT+0xc8>)
 80015ba:	f001 f843 	bl	8002644 <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015be:	2320      	movs	r3, #32
 80015c0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ca:	2302      	movs	r3, #2
 80015cc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <LED_OUTPUT_INIT+0xc8>)
 80015d4:	f000 feb4 	bl	8002340 <HAL_GPIO_Init>
	LED_ALERT_OFF();
 80015d8:	2200      	movs	r2, #0
 80015da:	2120      	movs	r1, #32
 80015dc:	4804      	ldr	r0, [pc, #16]	; (80015f0 <LED_OUTPUT_INIT+0xc8>)
 80015de:	f001 f831 	bl	8002644 <HAL_GPIO_WritePin>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <LED_OUTPUT_TEST>:

inline void LED_OUTPUT_TEST () {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 80015f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015fc:	f000 fd4a 	bl	8002094 <HAL_Delay>

	LED_GPSRFS_ON ();
 8001600:	2201      	movs	r2, #1
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	4812      	ldr	r0, [pc, #72]	; (8001650 <LED_OUTPUT_TEST+0x5c>)
 8001606:	f001 f81d 	bl	8002644 <HAL_GPIO_WritePin>
	LED_DATUPD_ON ();
 800160a:	2201      	movs	r2, #1
 800160c:	2140      	movs	r1, #64	; 0x40
 800160e:	4810      	ldr	r0, [pc, #64]	; (8001650 <LED_OUTPUT_TEST+0x5c>)
 8001610:	f001 f818 	bl	8002644 <HAL_GPIO_WritePin>
	LED_ALERT_ON  ();
 8001614:	2201      	movs	r2, #1
 8001616:	2120      	movs	r1, #32
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LED_OUTPUT_TEST+0x5c>)
 800161a:	f001 f813 	bl	8002644 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 800161e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001622:	f000 fd37 	bl	8002094 <HAL_Delay>

	LED_GPSRFS_OFF();
 8001626:	2200      	movs	r2, #0
 8001628:	2180      	movs	r1, #128	; 0x80
 800162a:	4809      	ldr	r0, [pc, #36]	; (8001650 <LED_OUTPUT_TEST+0x5c>)
 800162c:	f001 f80a 	bl	8002644 <HAL_GPIO_WritePin>
	LED_DATUPD_OFF();
 8001630:	2200      	movs	r2, #0
 8001632:	2140      	movs	r1, #64	; 0x40
 8001634:	4806      	ldr	r0, [pc, #24]	; (8001650 <LED_OUTPUT_TEST+0x5c>)
 8001636:	f001 f805 	bl	8002644 <HAL_GPIO_WritePin>
	LED_ALERT_OFF ();
 800163a:	2200      	movs	r2, #0
 800163c:	2120      	movs	r1, #32
 800163e:	4804      	ldr	r0, [pc, #16]	; (8001650 <LED_OUTPUT_TEST+0x5c>)
 8001640:	f001 f800 	bl	8002644 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8001644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001648:	f000 fd24 	bl	8002094 <HAL_Delay>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40020000 	.word	0x40020000

08001654 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800165c:	1d39      	adds	r1, r7, #4
 800165e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001662:	2201      	movs	r2, #1
 8001664:	4803      	ldr	r0, [pc, #12]	; (8001674 <__io_putchar+0x20>)
 8001666:	f001 fde2 	bl	800322e <HAL_UART_Transmit>
	return ch;
 800166a:	687b      	ldr	r3, [r7, #4]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200002cc 	.word	0x200002cc

08001678 <GPS_decode>:
uint8_t gps_uart[5000];
nmea_slmsg    NMEAslmsg;
nmea_utc_time NMEAutctime;
nmea_msg      NMEAmsg;

void GPS_decode (void) {
 8001678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800167c:	b084      	sub	sp, #16
 800167e:	af04      	add	r7, sp, #16

	HAL_UART_Receive(&huart2, gps_uart, sizeof(gps_uart), GPS_Delay_Time);
 8001680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	494f      	ldr	r1, [pc, #316]	; (80017c8 <GPS_decode+0x150>)
 800168a:	4850      	ldr	r0, [pc, #320]	; (80017cc <GPS_decode+0x154>)
 800168c:	f001 fe68 	bl	8003360 <HAL_UART_Receive>

	#ifdef SerialGPSdebug
		//printf("USART data:\r\n%s\r\n", gps_uart);
	#endif

	NMEA_GPGGA_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8001690:	494d      	ldr	r1, [pc, #308]	; (80017c8 <GPS_decode+0x150>)
 8001692:	484f      	ldr	r0, [pc, #316]	; (80017d0 <GPS_decode+0x158>)
 8001694:	f7ff fd5c 	bl	8001150 <NMEA_GPGGA_Analysis>

	if (!NMEAmsg.gpssta) {
 8001698:	4b4d      	ldr	r3, [pc, #308]	; (80017d0 <GPS_decode+0x158>)
 800169a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d108      	bne.n	80016b4 <GPS_decode+0x3c>
		LED_GPSRFS_ON();
 80016a2:	2201      	movs	r2, #1
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	484b      	ldr	r0, [pc, #300]	; (80017d4 <GPS_decode+0x15c>)
 80016a8:	f000 ffcc 	bl	8002644 <HAL_GPIO_WritePin>
		#ifdef SerialDebug
			printf("** GPS NO SIGNAL **\r\n");
 80016ac:	484a      	ldr	r0, [pc, #296]	; (80017d8 <GPS_decode+0x160>)
 80016ae:	f003 fa5b 	bl	8004b68 <puts>
			printf("Lat: %.6f, Log: %.6f, Spd: %.6f\r\n", (float)NMEAmsg.latitude/100000, (float)NMEAmsg.longitude/100000, (float)NMEAmsg.speed/1000);
		#endif

		LED_GPSRFS_OFF();
	} //memset (gps_uart, 0, sizeof (gps_uart));
}
 80016b2:	e084      	b.n	80017be <GPS_decode+0x146>
		LED_GPSRFS_ON();
 80016b4:	2201      	movs	r2, #1
 80016b6:	2180      	movs	r1, #128	; 0x80
 80016b8:	4846      	ldr	r0, [pc, #280]	; (80017d4 <GPS_decode+0x15c>)
 80016ba:	f000 ffc3 	bl	8002644 <HAL_GPIO_WritePin>
		NMEA_GPRMC_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 80016be:	4942      	ldr	r1, [pc, #264]	; (80017c8 <GPS_decode+0x150>)
 80016c0:	4843      	ldr	r0, [pc, #268]	; (80017d0 <GPS_decode+0x158>)
 80016c2:	f7ff fd95 	bl	80011f0 <NMEA_GPRMC_Analysis>
		NMEA_GPGSA_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 80016c6:	4940      	ldr	r1, [pc, #256]	; (80017c8 <GPS_decode+0x150>)
 80016c8:	4841      	ldr	r0, [pc, #260]	; (80017d0 <GPS_decode+0x158>)
 80016ca:	f7ff fd69 	bl	80011a0 <NMEA_GPGSA_Analysis>
		NMEA_GPVTG_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 80016ce:	493e      	ldr	r1, [pc, #248]	; (80017c8 <GPS_decode+0x150>)
 80016d0:	483f      	ldr	r0, [pc, #252]	; (80017d0 <GPS_decode+0x158>)
 80016d2:	f7ff fcff 	bl	80010d4 <NMEA_GPVTG_Analysis>
		NMEA_GPRMC_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 80016d6:	493c      	ldr	r1, [pc, #240]	; (80017c8 <GPS_decode+0x150>)
 80016d8:	483d      	ldr	r0, [pc, #244]	; (80017d0 <GPS_decode+0x158>)
 80016da:	f7ff fd89 	bl	80011f0 <NMEA_GPRMC_Analysis>
			printf("\r\n** GPS Serial Debug **\r\n");
 80016de:	483f      	ldr	r0, [pc, #252]	; (80017dc <GPS_decode+0x164>)
 80016e0:	f003 fa42 	bl	8004b68 <puts>
			printf("GPS status: %s, PDOT: %f\r\n", NMEAmsg.gpssta^2? "3D":"2D", (float)NMEAmsg.pdop/10);
 80016e4:	4b3a      	ldr	r3, [pc, #232]	; (80017d0 <GPS_decode+0x158>)
 80016e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d001      	beq.n	80016f2 <GPS_decode+0x7a>
 80016ee:	4c3c      	ldr	r4, [pc, #240]	; (80017e0 <GPS_decode+0x168>)
 80016f0:	e000      	b.n	80016f4 <GPS_decode+0x7c>
 80016f2:	4c3c      	ldr	r4, [pc, #240]	; (80017e4 <GPS_decode+0x16c>)
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <GPS_decode+0x158>)
 80016f6:	f8b3 305d 	ldrh.w	r3, [r3, #93]	; 0x5d
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	ee07 3a90 	vmov	s15, r3
 8001700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001704:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001708:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800170c:	ee16 0a90 	vmov	r0, s13
 8001710:	f7fe ff22 	bl	8000558 <__aeabi_f2d>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4621      	mov	r1, r4
 800171a:	4833      	ldr	r0, [pc, #204]	; (80017e8 <GPS_decode+0x170>)
 800171c:	f003 f9b0 	bl	8004a80 <iprintf>
			printf("UTC time: %02d:%02d:%02d\r\n", NMEAmsg.utc.hour, NMEAmsg.utc.min, NMEAmsg.utc.sec);
 8001720:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <GPS_decode+0x158>)
 8001722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001726:	4619      	mov	r1, r3
 8001728:	4b29      	ldr	r3, [pc, #164]	; (80017d0 <GPS_decode+0x158>)
 800172a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800172e:	461a      	mov	r2, r3
 8001730:	4b27      	ldr	r3, [pc, #156]	; (80017d0 <GPS_decode+0x158>)
 8001732:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001736:	482d      	ldr	r0, [pc, #180]	; (80017ec <GPS_decode+0x174>)
 8001738:	f003 f9a2 	bl	8004a80 <iprintf>
			printf("Lat: %.6f, Log: %.6f, Spd: %.6f\r\n", (float)NMEAmsg.latitude/100000, (float)NMEAmsg.longitude/100000, (float)NMEAmsg.speed/1000);
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <GPS_decode+0x158>)
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	ee07 3a90 	vmov	s15, r3
 8001744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001748:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80017f0 <GPS_decode+0x178>
 800174c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001750:	ee16 0a90 	vmov	r0, s13
 8001754:	f7fe ff00 	bl	8000558 <__aeabi_f2d>
 8001758:	4680      	mov	r8, r0
 800175a:	4689      	mov	r9, r1
 800175c:	4b1c      	ldr	r3, [pc, #112]	; (80017d0 <GPS_decode+0x158>)
 800175e:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8001762:	ee07 3a90 	vmov	s15, r3
 8001766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800176a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80017f0 <GPS_decode+0x178>
 800176e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001772:	ee16 0a90 	vmov	r0, s13
 8001776:	f7fe feef 	bl	8000558 <__aeabi_f2d>
 800177a:	4604      	mov	r4, r0
 800177c:	460d      	mov	r5, r1
 800177e:	4b14      	ldr	r3, [pc, #80]	; (80017d0 <GPS_decode+0x158>)
 8001780:	f8b3 3067 	ldrh.w	r3, [r3, #103]	; 0x67
 8001784:	b29b      	uxth	r3, r3
 8001786:	ee07 3a90 	vmov	s15, r3
 800178a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800178e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80017f4 <GPS_decode+0x17c>
 8001792:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001796:	ee16 0a90 	vmov	r0, s13
 800179a:	f7fe fedd 	bl	8000558 <__aeabi_f2d>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017a6:	e9cd 4500 	strd	r4, r5, [sp]
 80017aa:	4642      	mov	r2, r8
 80017ac:	464b      	mov	r3, r9
 80017ae:	4812      	ldr	r0, [pc, #72]	; (80017f8 <GPS_decode+0x180>)
 80017b0:	f003 f966 	bl	8004a80 <iprintf>
		LED_GPSRFS_OFF();
 80017b4:	2200      	movs	r2, #0
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <GPS_decode+0x15c>)
 80017ba:	f000 ff43 	bl	8002644 <HAL_GPIO_WritePin>
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017c6:	bf00      	nop
 80017c8:	20000310 	.word	0x20000310
 80017cc:	200016e0 	.word	0x200016e0
 80017d0:	20000204 	.word	0x20000204
 80017d4:	40020000 	.word	0x40020000
 80017d8:	08006958 	.word	0x08006958
 80017dc:	08006970 	.word	0x08006970
 80017e0:	0800698c 	.word	0x0800698c
 80017e4:	08006990 	.word	0x08006990
 80017e8:	08006994 	.word	0x08006994
 80017ec:	080069b0 	.word	0x080069b0
 80017f0:	47c35000 	.word	0x47c35000
 80017f4:	447a0000 	.word	0x447a0000
 80017f8:	080069cc 	.word	0x080069cc

080017fc <main>:

#undef GPS_Delay_Time

// main

signed main(void) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0

	HAL_Init();
 8001800:	f000 fbd6 	bl	8001fb0 <HAL_Init>

	SystemClock_Config();
 8001804:	f000 f81c 	bl	8001840 <SystemClock_Config>

	MX_GPIO_Init();
 8001808:	f000 f924 	bl	8001a54 <MX_GPIO_Init>
	MX_I2C1_Init();
 800180c:	f000 f876 	bl	80018fc <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8001810:	f000 f8cc 	bl	80019ac <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 8001814:	f000 f8f4 	bl	8001a00 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 8001818:	f000 f89e 	bl	8001958 <MX_USART1_UART_Init>

	LED_OUTPUT_INIT();
 800181c:	f7ff fe84 	bl	8001528 <LED_OUTPUT_INIT>
	LED_PC13_INIT();
 8001820:	f7ff fe34 	bl	800148c <LED_PC13_INIT>

	LED_OUTPUT_TEST();
 8001824:	f7ff fee6 	bl	80015f4 <LED_OUTPUT_TEST>

	HAL_UART_Receive_IT(&huart2, &gps_init, 1);
 8001828:	2201      	movs	r2, #1
 800182a:	4903      	ldr	r1, [pc, #12]	; (8001838 <main+0x3c>)
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <main+0x40>)
 800182e:	f001 fe3d 	bl	80034ac <HAL_UART_Receive_IT>
		nnnnn = 1919.810;
		printf("%f\r\n\r\n", nnnnn);
	#endif

	while (1) {
		GPS_decode ();
 8001832:	f7ff ff21 	bl	8001678 <GPS_decode>
 8001836:	e7fc      	b.n	8001832 <main+0x36>
 8001838:	2000030c 	.word	0x2000030c
 800183c:	200016e0 	.word	0x200016e0

08001840 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	; 0x50
 8001844:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	; 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f002 fcb2 	bl	80041b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
    */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <SystemClock_Config+0xb4>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	4a21      	ldr	r2, [pc, #132]	; (80018f4 <SystemClock_Config+0xb4>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	; 0x40
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <SystemClock_Config+0xb4>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <SystemClock_Config+0xb8>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <SystemClock_Config+0xb8>)
 800188a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <SystemClock_Config+0xb8>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800189c:	2302      	movs	r3, #2
 800189e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a0:	2301      	movs	r3, #1
 80018a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018a4:	2310      	movs	r3, #16
 80018a6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018ac:	f107 0320 	add.w	r3, r7, #32
 80018b0:	4618      	mov	r0, r3
 80018b2:	f001 f833 	bl	800291c <HAL_RCC_OscConfig>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <SystemClock_Config+0x80>
		Error_Handler();
 80018bc:	f000 f90a 	bl	8001ad4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c0:	230f      	movs	r3, #15
 80018c2:	60fb      	str	r3, [r7, #12]
								 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018c4:	2300      	movs	r3, #0
 80018c6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018c8:	2300      	movs	r3, #0
 80018ca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018cc:	2300      	movs	r3, #0
 80018ce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	2100      	movs	r1, #0
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 fa8e 	bl	8002dfc <HAL_RCC_ClockConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0xaa>
		Error_Handler();
 80018e6:	f000 f8f5 	bl	8001ad4 <Error_Handler>
	}
}
 80018ea:	bf00      	nop
 80018ec:	3750      	adds	r7, #80	; 0x50
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40007000 	.word	0x40007000

080018fc <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_I2C1_Init+0x50>)
 8001902:	4a13      	ldr	r2, [pc, #76]	; (8001950 <MX_I2C1_Init+0x54>)
 8001904:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_I2C1_Init+0x50>)
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <MX_I2C1_Init+0x58>)
 800190a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_I2C1_Init+0x50>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_I2C1_Init+0x50>)
 8001914:	2200      	movs	r2, #0
 8001916:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_I2C1_Init+0x50>)
 800191a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <MX_I2C1_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_I2C1_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_I2C1_Init+0x50>)
 800193a:	f000 feb7 	bl	80026ac <HAL_I2C_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001944:	f000 f8c6 	bl	8001ad4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000270 	.word	0x20000270
 8001950:	40005400 	.word	0x40005400
 8001954:	000186a0 	.word	0x000186a0

08001958 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void) {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	; (80019a8 <MX_USART1_UART_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001962:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_USART1_UART_Init+0x4c>)
 8001990:	f001 fc00 	bl	8003194 <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800199a:	f000 f89b 	bl	8001ad4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200002cc 	.word	0x200002cc
 80019a8:	40011000 	.word	0x40011000

080019ac <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void) {
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <MX_USART2_UART_Init+0x50>)
 80019b4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019bc:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019d2:	220c      	movs	r2, #12
 80019d4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019de:	2200      	movs	r2, #0
 80019e0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_USART2_UART_Init+0x4c>)
 80019e4:	f001 fbd6 	bl	8003194 <HAL_UART_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80019ee:	f000 f871 	bl	8001ad4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200016e0 	.word	0x200016e0
 80019fc:	40004400 	.word	0x40004400

08001a00 <MX_USART6_UART_Init>:
/**
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <MX_USART6_UART_Init+0x50>)
 8001a08:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a10:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_USART6_UART_Init+0x4c>)
 8001a38:	f001 fbac 	bl	8003194 <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001a42:	f000 f847 	bl	8001ad4 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200016a0 	.word	0x200016a0
 8001a50:	40011400 	.word	0x40011400

08001a54 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 030c 	add.w	r3, r7, #12
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_GPIO_Init+0x78>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a16      	ldr	r2, [pc, #88]	; (8001acc <MX_GPIO_Init+0x78>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b14      	ldr	r3, [pc, #80]	; (8001acc <MX_GPIO_Init+0x78>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <MX_GPIO_Init+0x78>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <MX_GPIO_Init+0x78>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <MX_GPIO_Init+0x78>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001aa6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab8:	f107 030c 	add.w	r3, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <MX_GPIO_Init+0x7c>)
 8001ac0:	f000 fc3e 	bl	8002340 <HAL_GPIO_Init>

}
 8001ac4:	bf00      	nop
 8001ac6:	3720      	adds	r7, #32
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40023800 	.word	0x40023800
 8001ad0:	40020000 	.word	0x40020000

08001ad4 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		LED_PC13_BLINK(1000);
 8001ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ade:	f7ff fd09 	bl	80014f4 <LED_PC13_BLINK>
 8001ae2:	e7fa      	b.n	8001ada <Error_Handler+0x6>

08001ae4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	607b      	str	r3, [r7, #4]
 8001aee:	4b10      	ldr	r3, [pc, #64]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a0f      	ldr	r2, [pc, #60]	; (8001b30 <HAL_MspInit+0x4c>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b0d      	ldr	r3, [pc, #52]	; (8001b30 <HAL_MspInit+0x4c>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <HAL_MspInit+0x4c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	; 0x28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a19      	ldr	r2, [pc, #100]	; (8001bb8 <HAL_I2C_MspInit+0x84>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d12b      	bne.n	8001bae <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a17      	ldr	r2, [pc, #92]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b60:	f043 0302 	orr.w	r3, r3, #2
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b72:	23c0      	movs	r3, #192	; 0xc0
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b76:	2312      	movs	r3, #18
 8001b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b82:	2304      	movs	r3, #4
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480c      	ldr	r0, [pc, #48]	; (8001bc0 <HAL_I2C_MspInit+0x8c>)
 8001b8e:	f000 fbd7 	bl	8002340 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a08      	ldr	r2, [pc, #32]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_I2C_MspInit+0x88>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001baa:	60fb      	str	r3, [r7, #12]
 8001bac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bae:	bf00      	nop
 8001bb0:	3728      	adds	r7, #40	; 0x28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40005400 	.word	0x40005400
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	40020400 	.word	0x40020400

08001bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	; 0x38
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a58      	ldr	r2, [pc, #352]	; (8001d44 <HAL_UART_MspInit+0x180>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d135      	bne.n	8001c52 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
 8001bea:	4b57      	ldr	r3, [pc, #348]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a56      	ldr	r2, [pc, #344]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001bf0:	f043 0310 	orr.w	r3, r3, #16
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b54      	ldr	r3, [pc, #336]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	623b      	str	r3, [r7, #32]
 8001c00:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	4b50      	ldr	r3, [pc, #320]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a4f      	ldr	r2, [pc, #316]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b4d      	ldr	r3, [pc, #308]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c30:	2307      	movs	r3, #7
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4844      	ldr	r0, [pc, #272]	; (8001d4c <HAL_UART_MspInit+0x188>)
 8001c3c:	f000 fb80 	bl	8002340 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2025      	movs	r0, #37	; 0x25
 8001c46:	f000 fb22 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c4a:	2025      	movs	r0, #37	; 0x25
 8001c4c:	f000 fb3b 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001c50:	e073      	b.n	8001d3a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a3e      	ldr	r2, [pc, #248]	; (8001d50 <HAL_UART_MspInit+0x18c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d134      	bne.n	8001cc6 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	4b39      	ldr	r3, [pc, #228]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	4a38      	ldr	r2, [pc, #224]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001c66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	4b32      	ldr	r3, [pc, #200]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	4a31      	ldr	r2, [pc, #196]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6313      	str	r3, [r2, #48]	; 0x30
 8001c88:	4b2f      	ldr	r3, [pc, #188]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	617b      	str	r3, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c94:	230c      	movs	r3, #12
 8001c96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ca4:	2307      	movs	r3, #7
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ca8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cac:	4619      	mov	r1, r3
 8001cae:	4827      	ldr	r0, [pc, #156]	; (8001d4c <HAL_UART_MspInit+0x188>)
 8001cb0:	f000 fb46 	bl	8002340 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2026      	movs	r0, #38	; 0x26
 8001cba:	f000 fae8 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cbe:	2026      	movs	r0, #38	; 0x26
 8001cc0:	f000 fb01 	bl	80022c6 <HAL_NVIC_EnableIRQ>
}
 8001cc4:	e039      	b.n	8001d3a <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a22      	ldr	r2, [pc, #136]	; (8001d54 <HAL_UART_MspInit+0x190>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d134      	bne.n	8001d3a <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	4b1c      	ldr	r3, [pc, #112]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd8:	4a1b      	ldr	r2, [pc, #108]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001cda:	f043 0320 	orr.w	r3, r3, #32
 8001cde:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	4a14      	ldr	r2, [pc, #80]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_UART_MspInit+0x184>)
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d22:	4619      	mov	r1, r3
 8001d24:	4809      	ldr	r0, [pc, #36]	; (8001d4c <HAL_UART_MspInit+0x188>)
 8001d26:	f000 fb0b 	bl	8002340 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2047      	movs	r0, #71	; 0x47
 8001d30:	f000 faad 	bl	800228e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001d34:	2047      	movs	r0, #71	; 0x47
 8001d36:	f000 fac6 	bl	80022c6 <HAL_NVIC_EnableIRQ>
}
 8001d3a:	bf00      	nop
 8001d3c:	3738      	adds	r7, #56	; 0x38
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	40011000 	.word	0x40011000
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40020000 	.word	0x40020000
 8001d50:	40004400 	.word	0x40004400
 8001d54:	40011400 	.word	0x40011400

08001d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <NMI_Handler+0x4>

08001d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <HardFault_Handler+0x4>

08001d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <MemManage_Handler+0x4>

08001d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <BusFault_Handler+0x4>

08001d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <UsageFault_Handler+0x4>

08001d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d92:	b480      	push	{r7}
 8001d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001da4:	f000 f956 	bl	8002054 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	bd80      	pop	{r7, pc}

08001dac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <USART1_IRQHandler+0x10>)
 8001db2:	f001 fbd1 	bl	8003558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200002cc 	.word	0x200002cc

08001dc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <USART2_IRQHandler+0x10>)
 8001dc6:	f001 fbc7 	bl	8003558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	200016e0 	.word	0x200016e0

08001dd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001dd8:	4802      	ldr	r0, [pc, #8]	; (8001de4 <USART6_IRQHandler+0x10>)
 8001dda:	f001 fbbd 	bl	8003558 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200016a0 	.word	0x200016a0

08001de8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60f8      	str	r0, [r7, #12]
 8001df0:	60b9      	str	r1, [r7, #8]
 8001df2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	e00a      	b.n	8001e10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dfa:	f3af 8000 	nop.w
 8001dfe:	4601      	mov	r1, r0
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	1c5a      	adds	r2, r3, #1
 8001e04:	60ba      	str	r2, [r7, #8]
 8001e06:	b2ca      	uxtb	r2, r1
 8001e08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf0      	blt.n	8001dfa <_read+0x12>
	}

return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e009      	b.n	8001e48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	60ba      	str	r2, [r7, #8]
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fc09 	bl	8001654 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	3301      	adds	r3, #1
 8001e46:	617b      	str	r3, [r7, #20]
 8001e48:	697a      	ldr	r2, [r7, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	dbf1      	blt.n	8001e34 <_write+0x12>
	}
	return len;
 8001e50:	687b      	ldr	r3, [r7, #4]
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <_close>:

int _close(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
	return -1;
 8001e62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e82:	605a      	str	r2, [r3, #4]
	return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <_isatty>:

int _isatty(int file)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b083      	sub	sp, #12
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
	return 1;
 8001e9a:	2301      	movs	r3, #1
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ecc:	4a14      	ldr	r2, [pc, #80]	; (8001f20 <_sbrk+0x5c>)
 8001ece:	4b15      	ldr	r3, [pc, #84]	; (8001f24 <_sbrk+0x60>)
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <_sbrk+0x64>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d102      	bne.n	8001ee6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <_sbrk+0x64>)
 8001ee2:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <_sbrk+0x68>)
 8001ee4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ee6:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <_sbrk+0x64>)
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4413      	add	r3, r2
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d207      	bcs.n	8001f04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef4:	f002 f936 	bl	8004164 <__errno>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	230c      	movs	r3, #12
 8001efc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001efe:	f04f 33ff 	mov.w	r3, #4294967295
 8001f02:	e009      	b.n	8001f18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f04:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <_sbrk+0x64>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0a:	4b07      	ldr	r3, [pc, #28]	; (8001f28 <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	4a05      	ldr	r2, [pc, #20]	; (8001f28 <_sbrk+0x64>)
 8001f14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3718      	adds	r7, #24
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20020000 	.word	0x20020000
 8001f24:	00000400 	.word	0x00000400
 8001f28:	200001f8 	.word	0x200001f8
 8001f2c:	20001728 	.word	0x20001728

08001f30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <SystemInit+0x28>)
 8001f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3a:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <SystemInit+0x28>)
 8001f3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f44:	4b04      	ldr	r3, [pc, #16]	; (8001f58 <SystemInit+0x28>)
 8001f46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f4a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f94 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f60:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f62:	e003      	b.n	8001f6c <LoopCopyDataInit>

08001f64 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f64:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f66:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f68:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f6a:	3104      	adds	r1, #4

08001f6c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f6c:	480b      	ldr	r0, [pc, #44]	; (8001f9c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f6e:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f70:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f72:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f74:	d3f6      	bcc.n	8001f64 <CopyDataInit>
  ldr  r2, =_sbss
 8001f76:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f78:	e002      	b.n	8001f80 <LoopFillZerobss>

08001f7a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f7a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f7c:	f842 3b04 	str.w	r3, [r2], #4

08001f80 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f82:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f84:	d3f9      	bcc.n	8001f7a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f86:	f7ff ffd3 	bl	8001f30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f8a:	f002 f8f1 	bl	8004170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f8e:	f7ff fc35 	bl	80017fc <main>
  bx  lr    
 8001f92:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f94:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001f98:	08006cd8 	.word	0x08006cd8
  ldr  r0, =_sdata
 8001f9c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fa0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001fa4:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001fa8:	20001728 	.word	0x20001728

08001fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fac:	e7fe      	b.n	8001fac <ADC_IRQHandler>
	...

08001fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <HAL_Init+0x40>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <HAL_Init+0x40>)
 8001fba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_Init+0x40>)
 8001fc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fcc:	4b08      	ldr	r3, [pc, #32]	; (8001ff0 <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <HAL_Init+0x40>)
 8001fd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fd8:	2003      	movs	r0, #3
 8001fda:	f000 f94d 	bl	8002278 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f000 f808 	bl	8001ff4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe4:	f7ff fd7e 	bl	8001ae4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023c00 	.word	0x40023c00

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_InitTick+0x54>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_InitTick+0x58>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800200a:	fbb3 f3f1 	udiv	r3, r3, r1
 800200e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f965 	bl	80022e2 <HAL_SYSTICK_Config>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e00e      	b.n	8002040 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b0f      	cmp	r3, #15
 8002026:	d80a      	bhi.n	800203e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002028:	2200      	movs	r2, #0
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	f04f 30ff 	mov.w	r0, #4294967295
 8002030:	f000 f92d 	bl	800228e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002034:	4a06      	ldr	r2, [pc, #24]	; (8002050 <HAL_InitTick+0x5c>)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800203a:	2300      	movs	r3, #0
 800203c:	e000      	b.n	8002040 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
}
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000000 	.word	0x20000000
 800204c:	20000008 	.word	0x20000008
 8002050:	20000004 	.word	0x20000004

08002054 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_IncTick+0x20>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	461a      	mov	r2, r3
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_IncTick+0x24>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4413      	add	r3, r2
 8002064:	4a04      	ldr	r2, [pc, #16]	; (8002078 <HAL_IncTick+0x24>)
 8002066:	6013      	str	r3, [r2, #0]
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008
 8002078:	20001720 	.word	0x20001720

0800207c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  return uwTick;
 8002080:	4b03      	ldr	r3, [pc, #12]	; (8002090 <HAL_GetTick+0x14>)
 8002082:	681b      	ldr	r3, [r3, #0]
}
 8002084:	4618      	mov	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	20001720 	.word	0x20001720

08002094 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800209c:	f7ff ffee 	bl	800207c <HAL_GetTick>
 80020a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ac:	d005      	beq.n	80020ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_Delay+0x40>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ba:	bf00      	nop
 80020bc:	f7ff ffde 	bl	800207c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d8f7      	bhi.n	80020bc <HAL_Delay+0x28>
  {
  }
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000008 	.word	0x20000008

080020d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f4:	4013      	ands	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002100:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002104:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <__NVIC_SetPriorityGrouping+0x44>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <__NVIC_GetPriorityGrouping+0x18>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	0a1b      	lsrs	r3, r3, #8
 800212a:	f003 0307 	and.w	r3, r3, #7
}
 800212e:	4618      	mov	r0, r3
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db0b      	blt.n	8002166 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	f003 021f 	and.w	r2, r3, #31
 8002154:	4907      	ldr	r1, [pc, #28]	; (8002174 <__NVIC_EnableIRQ+0x38>)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2001      	movs	r0, #1
 800215e:	fa00 f202 	lsl.w	r2, r0, r2
 8002162:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3b01      	subs	r3, #1
 8002240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002244:	d301      	bcc.n	800224a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002246:	2301      	movs	r3, #1
 8002248:	e00f      	b.n	800226a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <SysTick_Config+0x40>)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002252:	210f      	movs	r1, #15
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f7ff ff8e 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <SysTick_Config+0x40>)
 800225e:	2200      	movs	r2, #0
 8002260:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <SysTick_Config+0x40>)
 8002264:	2207      	movs	r2, #7
 8002266:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	e000e010 	.word	0xe000e010

08002278 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff ff29 	bl	80020d8 <__NVIC_SetPriorityGrouping>
}
 8002286:	bf00      	nop
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228e:	b580      	push	{r7, lr}
 8002290:	b086      	sub	sp, #24
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff3e 	bl	8002120 <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff8e 	bl	80021cc <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5d 	bl	8002178 <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff31 	bl	800213c <__NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffa2 	bl	8002234 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d004      	beq.n	8002318 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e00c      	b.n	8002332 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2205      	movs	r2, #5
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f022 0201 	bic.w	r2, r2, #1
 800232e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
	...

08002340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	e159      	b.n	8002610 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800235c:	2201      	movs	r2, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	429a      	cmp	r2, r3
 8002376:	f040 8148 	bne.w	800260a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d00b      	beq.n	800239a <HAL_GPIO_Init+0x5a>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d007      	beq.n	800239a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238e:	2b11      	cmp	r3, #17
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b12      	cmp	r3, #18
 8002398:	d130      	bne.n	80023fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	2203      	movs	r2, #3
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b02      	cmp	r3, #2
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0xfc>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b12      	cmp	r3, #18
 800243a:	d123      	bne.n	8002484 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	08da      	lsrs	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3208      	adds	r2, #8
 8002444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	220f      	movs	r2, #15
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	691a      	ldr	r2, [r3, #16]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3208      	adds	r2, #8
 800247e:	69b9      	ldr	r1, [r7, #24]
 8002480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0203 	and.w	r2, r3, #3
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a2 	beq.w	800260a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	4b56      	ldr	r3, [pc, #344]	; (8002624 <HAL_GPIO_Init+0x2e4>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	4a55      	ldr	r2, [pc, #340]	; (8002624 <HAL_GPIO_Init+0x2e4>)
 80024d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024d4:	6453      	str	r3, [r2, #68]	; 0x44
 80024d6:	4b53      	ldr	r3, [pc, #332]	; (8002624 <HAL_GPIO_Init+0x2e4>)
 80024d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024e2:	4a51      	ldr	r2, [pc, #324]	; (8002628 <HAL_GPIO_Init+0x2e8>)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	220f      	movs	r2, #15
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a48      	ldr	r2, [pc, #288]	; (800262c <HAL_GPIO_Init+0x2ec>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d019      	beq.n	8002542 <HAL_GPIO_Init+0x202>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a47      	ldr	r2, [pc, #284]	; (8002630 <HAL_GPIO_Init+0x2f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_GPIO_Init+0x1fe>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a46      	ldr	r2, [pc, #280]	; (8002634 <HAL_GPIO_Init+0x2f4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00d      	beq.n	800253a <HAL_GPIO_Init+0x1fa>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a45      	ldr	r2, [pc, #276]	; (8002638 <HAL_GPIO_Init+0x2f8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d007      	beq.n	8002536 <HAL_GPIO_Init+0x1f6>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a44      	ldr	r2, [pc, #272]	; (800263c <HAL_GPIO_Init+0x2fc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d101      	bne.n	8002532 <HAL_GPIO_Init+0x1f2>
 800252e:	2304      	movs	r3, #4
 8002530:	e008      	b.n	8002544 <HAL_GPIO_Init+0x204>
 8002532:	2307      	movs	r3, #7
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x204>
 8002536:	2303      	movs	r3, #3
 8002538:	e004      	b.n	8002544 <HAL_GPIO_Init+0x204>
 800253a:	2302      	movs	r3, #2
 800253c:	e002      	b.n	8002544 <HAL_GPIO_Init+0x204>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <HAL_GPIO_Init+0x204>
 8002542:	2300      	movs	r3, #0
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	f002 0203 	and.w	r2, r2, #3
 800254a:	0092      	lsls	r2, r2, #2
 800254c:	4093      	lsls	r3, r2
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002554:	4934      	ldr	r1, [pc, #208]	; (8002628 <HAL_GPIO_Init+0x2e8>)
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	089b      	lsrs	r3, r3, #2
 800255a:	3302      	adds	r3, #2
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002562:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_GPIO_Init+0x300>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	43db      	mvns	r3, r3
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	4013      	ands	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002586:	4a2e      	ldr	r2, [pc, #184]	; (8002640 <HAL_GPIO_Init+0x300>)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_GPIO_Init+0x300>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025b0:	4a23      	ldr	r2, [pc, #140]	; (8002640 <HAL_GPIO_Init+0x300>)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025b6:	4b22      	ldr	r3, [pc, #136]	; (8002640 <HAL_GPIO_Init+0x300>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	43db      	mvns	r3, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025da:	4a19      	ldr	r2, [pc, #100]	; (8002640 <HAL_GPIO_Init+0x300>)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e0:	4b17      	ldr	r3, [pc, #92]	; (8002640 <HAL_GPIO_Init+0x300>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002604:	4a0e      	ldr	r2, [pc, #56]	; (8002640 <HAL_GPIO_Init+0x300>)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3301      	adds	r3, #1
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	f67f aea2 	bls.w	800235c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002618:	bf00      	nop
 800261a:	3724      	adds	r7, #36	; 0x24
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	40023800 	.word	0x40023800
 8002628:	40013800 	.word	0x40013800
 800262c:	40020000 	.word	0x40020000
 8002630:	40020400 	.word	0x40020400
 8002634:	40020800 	.word	0x40020800
 8002638:	40020c00 	.word	0x40020c00
 800263c:	40021000 	.word	0x40021000
 8002640:	40013c00 	.word	0x40013c00

08002644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	460b      	mov	r3, r1
 800264e:	807b      	strh	r3, [r7, #2]
 8002650:	4613      	mov	r3, r2
 8002652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002654:	787b      	ldrb	r3, [r7, #1]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d003      	beq.n	8002662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002660:	e003      	b.n	800266a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	401a      	ands	r2, r3
 800268a:	887b      	ldrh	r3, [r7, #2]
 800268c:	429a      	cmp	r2, r3
 800268e:	d104      	bne.n	800269a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	041a      	lsls	r2, r3, #16
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002698:	e002      	b.n	80026a0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e11f      	b.n	80028fe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d106      	bne.n	80026d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fa2e 	bl	8001b34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0201 	bic.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800270e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002710:	f000 fd18 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 8002714:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4a7b      	ldr	r2, [pc, #492]	; (8002908 <HAL_I2C_Init+0x25c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d807      	bhi.n	8002730 <HAL_I2C_Init+0x84>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a7a      	ldr	r2, [pc, #488]	; (800290c <HAL_I2C_Init+0x260>)
 8002724:	4293      	cmp	r3, r2
 8002726:	bf94      	ite	ls
 8002728:	2301      	movls	r3, #1
 800272a:	2300      	movhi	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	e006      	b.n	800273e <HAL_I2C_Init+0x92>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4a77      	ldr	r2, [pc, #476]	; (8002910 <HAL_I2C_Init+0x264>)
 8002734:	4293      	cmp	r3, r2
 8002736:	bf94      	ite	ls
 8002738:	2301      	movls	r3, #1
 800273a:	2300      	movhi	r3, #0
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e0db      	b.n	80028fe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a72      	ldr	r2, [pc, #456]	; (8002914 <HAL_I2C_Init+0x268>)
 800274a:	fba2 2303 	umull	r2, r3, r2, r3
 800274e:	0c9b      	lsrs	r3, r3, #18
 8002750:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a64      	ldr	r2, [pc, #400]	; (8002908 <HAL_I2C_Init+0x25c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d802      	bhi.n	8002780 <HAL_I2C_Init+0xd4>
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	3301      	adds	r3, #1
 800277e:	e009      	b.n	8002794 <HAL_I2C_Init+0xe8>
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002786:	fb02 f303 	mul.w	r3, r2, r3
 800278a:	4a63      	ldr	r2, [pc, #396]	; (8002918 <HAL_I2C_Init+0x26c>)
 800278c:	fba2 2303 	umull	r2, r3, r2, r3
 8002790:	099b      	lsrs	r3, r3, #6
 8002792:	3301      	adds	r3, #1
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	430b      	orrs	r3, r1
 800279a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	4956      	ldr	r1, [pc, #344]	; (8002908 <HAL_I2C_Init+0x25c>)
 80027b0:	428b      	cmp	r3, r1
 80027b2:	d80d      	bhi.n	80027d0 <HAL_I2C_Init+0x124>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e59      	subs	r1, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c2:	3301      	adds	r3, #1
 80027c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	bf38      	it	cc
 80027cc:	2304      	movcc	r3, #4
 80027ce:	e04f      	b.n	8002870 <HAL_I2C_Init+0x1c4>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <HAL_I2C_Init+0x150>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	440b      	add	r3, r1
 80027e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e012      	b.n	8002822 <HAL_I2C_Init+0x176>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	0099      	lsls	r1, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Init+0x17e>
 8002826:	2301      	movs	r3, #1
 8002828:	e022      	b.n	8002870 <HAL_I2C_Init+0x1c4>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10e      	bne.n	8002850 <HAL_I2C_Init+0x1a4>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1e58      	subs	r0, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	440b      	add	r3, r1
 8002840:	fbb0 f3f3 	udiv	r3, r0, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284e:	e00f      	b.n	8002870 <HAL_I2C_Init+0x1c4>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1e58      	subs	r0, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	0099      	lsls	r1, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	fbb0 f3f3 	udiv	r3, r0, r3
 8002866:	3301      	adds	r3, #1
 8002868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	6809      	ldr	r1, [r1, #0]
 8002874:	4313      	orrs	r3, r2
 8002876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800289e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6911      	ldr	r1, [r2, #16]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68d2      	ldr	r2, [r2, #12]
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	000186a0 	.word	0x000186a0
 800290c:	001e847f 	.word	0x001e847f
 8002910:	003d08ff 	.word	0x003d08ff
 8002914:	431bde83 	.word	0x431bde83
 8002918:	10624dd3 	.word	0x10624dd3

0800291c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e25b      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d075      	beq.n	8002a26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800293a:	4ba3      	ldr	r3, [pc, #652]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	2b04      	cmp	r3, #4
 8002944:	d00c      	beq.n	8002960 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002946:	4ba0      	ldr	r3, [pc, #640]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800294e:	2b08      	cmp	r3, #8
 8002950:	d112      	bne.n	8002978 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002952:	4b9d      	ldr	r3, [pc, #628]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800295e:	d10b      	bne.n	8002978 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002960:	4b99      	ldr	r3, [pc, #612]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05b      	beq.n	8002a24 <HAL_RCC_OscConfig+0x108>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d157      	bne.n	8002a24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e236      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002980:	d106      	bne.n	8002990 <HAL_RCC_OscConfig+0x74>
 8002982:	4b91      	ldr	r3, [pc, #580]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a90      	ldr	r2, [pc, #576]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002988:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	e01d      	b.n	80029cc <HAL_RCC_OscConfig+0xb0>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002998:	d10c      	bne.n	80029b4 <HAL_RCC_OscConfig+0x98>
 800299a:	4b8b      	ldr	r3, [pc, #556]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a8a      	ldr	r2, [pc, #552]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 80029a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	4b88      	ldr	r3, [pc, #544]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a87      	ldr	r2, [pc, #540]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	e00b      	b.n	80029cc <HAL_RCC_OscConfig+0xb0>
 80029b4:	4b84      	ldr	r3, [pc, #528]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a83      	ldr	r2, [pc, #524]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 80029ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029be:	6013      	str	r3, [r2, #0]
 80029c0:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a80      	ldr	r2, [pc, #512]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 80029c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d013      	beq.n	80029fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7ff fb52 	bl	800207c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029dc:	f7ff fb4e 	bl	800207c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1fb      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	4b76      	ldr	r3, [pc, #472]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0xc0>
 80029fa:	e014      	b.n	8002a26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7ff fb3e 	bl	800207c <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a04:	f7ff fb3a 	bl	800207c <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1e7      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	4b6c      	ldr	r3, [pc, #432]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1f0      	bne.n	8002a04 <HAL_RCC_OscConfig+0xe8>
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d063      	beq.n	8002afa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a32:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f003 030c 	and.w	r3, r3, #12
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00b      	beq.n	8002a56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a3e:	4b62      	ldr	r3, [pc, #392]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d11c      	bne.n	8002a84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4a:	4b5f      	ldr	r3, [pc, #380]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d116      	bne.n	8002a84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a56:	4b5c      	ldr	r3, [pc, #368]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_RCC_OscConfig+0x152>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d001      	beq.n	8002a6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1bb      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b56      	ldr	r3, [pc, #344]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4952      	ldr	r1, [pc, #328]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a82:	e03a      	b.n	8002afa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a8c:	4b4f      	ldr	r3, [pc, #316]	; (8002bcc <HAL_RCC_OscConfig+0x2b0>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a92:	f7ff faf3 	bl	800207c <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a9a:	f7ff faef 	bl	800207c <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e19c      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	4b46      	ldr	r3, [pc, #280]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab8:	4b43      	ldr	r3, [pc, #268]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4940      	ldr	r1, [pc, #256]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	600b      	str	r3, [r1, #0]
 8002acc:	e015      	b.n	8002afa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ace:	4b3f      	ldr	r3, [pc, #252]	; (8002bcc <HAL_RCC_OscConfig+0x2b0>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7ff fad2 	bl	800207c <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002adc:	f7ff face 	bl	800207c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e17b      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	4b36      	ldr	r3, [pc, #216]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0302 	and.w	r3, r3, #2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d030      	beq.n	8002b68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d016      	beq.n	8002b3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b0e:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_RCC_OscConfig+0x2b4>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b14:	f7ff fab2 	bl	800207c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b1c:	f7ff faae 	bl	800207c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e15b      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2e:	4b26      	ldr	r3, [pc, #152]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f0      	beq.n	8002b1c <HAL_RCC_OscConfig+0x200>
 8002b3a:	e015      	b.n	8002b68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b3c:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCC_OscConfig+0x2b4>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b42:	f7ff fa9b 	bl	800207c <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7ff fa97 	bl	800207c <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e144      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5c:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80a0 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b76:	2300      	movs	r3, #0
 8002b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b7a:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10f      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba6:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_OscConfig+0x2b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d121      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <HAL_RCC_OscConfig+0x2b8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a07      	ldr	r2, [pc, #28]	; (8002bd4 <HAL_RCC_OscConfig+0x2b8>)
 8002bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bbe:	f7ff fa5d 	bl	800207c <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc4:	e011      	b.n	8002bea <HAL_RCC_OscConfig+0x2ce>
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	42470000 	.word	0x42470000
 8002bd0:	42470e80 	.word	0x42470e80
 8002bd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bd8:	f7ff fa50 	bl	800207c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e0fd      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bea:	4b81      	ldr	r3, [pc, #516]	; (8002df0 <HAL_RCC_OscConfig+0x4d4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d106      	bne.n	8002c0c <HAL_RCC_OscConfig+0x2f0>
 8002bfe:	4b7d      	ldr	r3, [pc, #500]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c02:	4a7c      	ldr	r2, [pc, #496]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0a:	e01c      	b.n	8002c46 <HAL_RCC_OscConfig+0x32a>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d10c      	bne.n	8002c2e <HAL_RCC_OscConfig+0x312>
 8002c14:	4b77      	ldr	r3, [pc, #476]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c18:	4a76      	ldr	r2, [pc, #472]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c1a:	f043 0304 	orr.w	r3, r3, #4
 8002c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c20:	4b74      	ldr	r3, [pc, #464]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a73      	ldr	r2, [pc, #460]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2c:	e00b      	b.n	8002c46 <HAL_RCC_OscConfig+0x32a>
 8002c2e:	4b71      	ldr	r3, [pc, #452]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c32:	4a70      	ldr	r2, [pc, #448]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c34:	f023 0301 	bic.w	r3, r3, #1
 8002c38:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3a:	4b6e      	ldr	r3, [pc, #440]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4a6d      	ldr	r2, [pc, #436]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d015      	beq.n	8002c7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7ff fa15 	bl	800207c <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7ff fa11 	bl	800207c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0bc      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c6c:	4b61      	ldr	r3, [pc, #388]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0ee      	beq.n	8002c56 <HAL_RCC_OscConfig+0x33a>
 8002c78:	e014      	b.n	8002ca4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c7a:	f7ff f9ff 	bl	800207c <HAL_GetTick>
 8002c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c80:	e00a      	b.n	8002c98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f7ff f9fb 	bl	800207c <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e0a6      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c98:	4b56      	ldr	r3, [pc, #344]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ee      	bne.n	8002c82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ca4:	7dfb      	ldrb	r3, [r7, #23]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002caa:	4b52      	ldr	r3, [pc, #328]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a51      	ldr	r2, [pc, #324]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002cb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	f000 8092 	beq.w	8002de4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc0:	4b4c      	ldr	r3, [pc, #304]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f003 030c 	and.w	r3, r3, #12
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d05c      	beq.n	8002d86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d141      	bne.n	8002d58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <HAL_RCC_OscConfig+0x4dc>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cda:	f7ff f9cf 	bl	800207c <HAL_GetTick>
 8002cde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce2:	f7ff f9cb 	bl	800207c <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e078      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf4:	4b3f      	ldr	r3, [pc, #252]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1f0      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	69da      	ldr	r2, [r3, #28]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a1b      	ldr	r3, [r3, #32]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	019b      	lsls	r3, r3, #6
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	041b      	lsls	r3, r3, #16
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	061b      	lsls	r3, r3, #24
 8002d24:	4933      	ldr	r1, [pc, #204]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d2a:	4b33      	ldr	r3, [pc, #204]	; (8002df8 <HAL_RCC_OscConfig+0x4dc>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d30:	f7ff f9a4 	bl	800207c <HAL_GetTick>
 8002d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d38:	f7ff f9a0 	bl	800207c <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e04d      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d0f0      	beq.n	8002d38 <HAL_RCC_OscConfig+0x41c>
 8002d56:	e045      	b.n	8002de4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d58:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <HAL_RCC_OscConfig+0x4dc>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5e:	f7ff f98d 	bl	800207c <HAL_GetTick>
 8002d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d64:	e008      	b.n	8002d78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d66:	f7ff f989 	bl	800207c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e036      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d78:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f0      	bne.n	8002d66 <HAL_RCC_OscConfig+0x44a>
 8002d84:	e02e      	b.n	8002de4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e029      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <HAL_RCC_OscConfig+0x4d8>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d11c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d115      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dba:	4013      	ands	r3, r2
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d001      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3718      	adds	r7, #24
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	40007000 	.word	0x40007000
 8002df4:	40023800 	.word	0x40023800
 8002df8:	42470060 	.word	0x42470060

08002dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e0cc      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	683a      	ldr	r2, [r7, #0]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d90c      	bls.n	8002e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1e:	4b65      	ldr	r3, [pc, #404]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e26:	4b63      	ldr	r3, [pc, #396]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 030f 	and.w	r3, r3, #15
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0b8      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 0304 	and.w	r3, r3, #4
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d005      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e50:	4b59      	ldr	r3, [pc, #356]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	4a58      	ldr	r2, [pc, #352]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e68:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	4a52      	ldr	r2, [pc, #328]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e74:	4b50      	ldr	r3, [pc, #320]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	494d      	ldr	r1, [pc, #308]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d044      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d107      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d119      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e07f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb6:	2b03      	cmp	r3, #3
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eba:	4b3f      	ldr	r3, [pc, #252]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d109      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e06f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e067      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eda:	4b37      	ldr	r3, [pc, #220]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f023 0203 	bic.w	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	4934      	ldr	r1, [pc, #208]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002eec:	f7ff f8c6 	bl	800207c <HAL_GetTick>
 8002ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef2:	e00a      	b.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ef4:	f7ff f8c2 	bl	800207c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d901      	bls.n	8002f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e04f      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	4b2b      	ldr	r3, [pc, #172]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 020c 	and.w	r2, r3, #12
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d1eb      	bne.n	8002ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 030f 	and.w	r3, r3, #15
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d20c      	bcs.n	8002f44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b22      	ldr	r3, [pc, #136]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	b2d2      	uxtb	r2, r2
 8002f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	683a      	ldr	r2, [r7, #0]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d001      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e032      	b.n	8002faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f50:	4b19      	ldr	r3, [pc, #100]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4916      	ldr	r1, [pc, #88]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d009      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f6e:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	490e      	ldr	r1, [pc, #56]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f82:	f000 f821 	bl	8002fc8 <HAL_RCC_GetSysClockFreq>
 8002f86:	4601      	mov	r1, r0
 8002f88:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	091b      	lsrs	r3, r3, #4
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <HAL_RCC_ClockConfig+0x1c0>)
 8002f94:	5cd3      	ldrb	r3, [r2, r3]
 8002f96:	fa21 f303 	lsr.w	r3, r1, r3
 8002f9a:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f9e:	4b09      	ldr	r3, [pc, #36]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff f826 	bl	8001ff4 <HAL_InitTick>

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40023c00 	.word	0x40023c00
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	080069f0 	.word	0x080069f0
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	20000004 	.word	0x20000004

08002fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	607b      	str	r3, [r7, #4]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d007      	beq.n	8002ffa <HAL_RCC_GetSysClockFreq+0x32>
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d008      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x38>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 808d 	bne.w	800310e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff4:	4b4b      	ldr	r3, [pc, #300]	; (8003124 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ff6:	60bb      	str	r3, [r7, #8]
       break;
 8002ff8:	e08c      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <HAL_RCC_GetSysClockFreq+0x160>)
 8002ffc:	60bb      	str	r3, [r7, #8]
      break;
 8002ffe:	e089      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003000:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_GetSysClockFreq+0x158>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003008:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800300a:	4b45      	ldr	r3, [pc, #276]	; (8003120 <HAL_RCC_GetSysClockFreq+0x158>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d023      	beq.n	800305e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003016:	4b42      	ldr	r3, [pc, #264]	; (8003120 <HAL_RCC_GetSysClockFreq+0x158>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	099b      	lsrs	r3, r3, #6
 800301c:	f04f 0400 	mov.w	r4, #0
 8003020:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	ea03 0501 	and.w	r5, r3, r1
 800302c:	ea04 0602 	and.w	r6, r4, r2
 8003030:	4a3d      	ldr	r2, [pc, #244]	; (8003128 <HAL_RCC_GetSysClockFreq+0x160>)
 8003032:	fb02 f106 	mul.w	r1, r2, r6
 8003036:	2200      	movs	r2, #0
 8003038:	fb02 f205 	mul.w	r2, r2, r5
 800303c:	440a      	add	r2, r1
 800303e:	493a      	ldr	r1, [pc, #232]	; (8003128 <HAL_RCC_GetSysClockFreq+0x160>)
 8003040:	fba5 0101 	umull	r0, r1, r5, r1
 8003044:	1853      	adds	r3, r2, r1
 8003046:	4619      	mov	r1, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f04f 0400 	mov.w	r4, #0
 800304e:	461a      	mov	r2, r3
 8003050:	4623      	mov	r3, r4
 8003052:	f7fd fdb1 	bl	8000bb8 <__aeabi_uldivmod>
 8003056:	4603      	mov	r3, r0
 8003058:	460c      	mov	r4, r1
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	e049      	b.n	80030f2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_RCC_GetSysClockFreq+0x158>)
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	099b      	lsrs	r3, r3, #6
 8003064:	f04f 0400 	mov.w	r4, #0
 8003068:	f240 11ff 	movw	r1, #511	; 0x1ff
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	ea03 0501 	and.w	r5, r3, r1
 8003074:	ea04 0602 	and.w	r6, r4, r2
 8003078:	4629      	mov	r1, r5
 800307a:	4632      	mov	r2, r6
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	f04f 0400 	mov.w	r4, #0
 8003084:	0154      	lsls	r4, r2, #5
 8003086:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800308a:	014b      	lsls	r3, r1, #5
 800308c:	4619      	mov	r1, r3
 800308e:	4622      	mov	r2, r4
 8003090:	1b49      	subs	r1, r1, r5
 8003092:	eb62 0206 	sbc.w	r2, r2, r6
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	f04f 0400 	mov.w	r4, #0
 800309e:	0194      	lsls	r4, r2, #6
 80030a0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030a4:	018b      	lsls	r3, r1, #6
 80030a6:	1a5b      	subs	r3, r3, r1
 80030a8:	eb64 0402 	sbc.w	r4, r4, r2
 80030ac:	f04f 0100 	mov.w	r1, #0
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	00e2      	lsls	r2, r4, #3
 80030b6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030ba:	00d9      	lsls	r1, r3, #3
 80030bc:	460b      	mov	r3, r1
 80030be:	4614      	mov	r4, r2
 80030c0:	195b      	adds	r3, r3, r5
 80030c2:	eb44 0406 	adc.w	r4, r4, r6
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	02a2      	lsls	r2, r4, #10
 80030d0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030d4:	0299      	lsls	r1, r3, #10
 80030d6:	460b      	mov	r3, r1
 80030d8:	4614      	mov	r4, r2
 80030da:	4618      	mov	r0, r3
 80030dc:	4621      	mov	r1, r4
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f04f 0400 	mov.w	r4, #0
 80030e4:	461a      	mov	r2, r3
 80030e6:	4623      	mov	r3, r4
 80030e8:	f7fd fd66 	bl	8000bb8 <__aeabi_uldivmod>
 80030ec:	4603      	mov	r3, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCC_GetSysClockFreq+0x158>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	0c1b      	lsrs	r3, r3, #16
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	3301      	adds	r3, #1
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	60bb      	str	r3, [r7, #8]
      break;
 800310c:	e002      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003110:	60bb      	str	r3, [r7, #8]
      break;
 8003112:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003114:	68bb      	ldr	r3, [r7, #8]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800311e:	bf00      	nop
 8003120:	40023800 	.word	0x40023800
 8003124:	00f42400 	.word	0x00f42400
 8003128:	017d7840 	.word	0x017d7840

0800312c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <HAL_RCC_GetHCLKFreq+0x14>)
 8003132:	681b      	ldr	r3, [r3, #0]
}
 8003134:	4618      	mov	r0, r3
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000000 	.word	0x20000000

08003144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003148:	f7ff fff0 	bl	800312c <HAL_RCC_GetHCLKFreq>
 800314c:	4601      	mov	r1, r0
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	0a9b      	lsrs	r3, r3, #10
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	4a03      	ldr	r2, [pc, #12]	; (8003168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800315a:	5cd3      	ldrb	r3, [r2, r3]
 800315c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	40023800 	.word	0x40023800
 8003168:	08006a00 	.word	0x08006a00

0800316c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003170:	f7ff ffdc 	bl	800312c <HAL_RCC_GetHCLKFreq>
 8003174:	4601      	mov	r1, r0
 8003176:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	0b5b      	lsrs	r3, r3, #13
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	4a03      	ldr	r2, [pc, #12]	; (8003190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003188:	4618      	mov	r0, r3
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	08006a00 	.word	0x08006a00

08003194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e03f      	b.n	8003226 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe fd02 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	; 0x24
 80031c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fc47 	bl	8003a6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800320c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b088      	sub	sp, #32
 8003232:	af02      	add	r7, sp, #8
 8003234:	60f8      	str	r0, [r7, #12]
 8003236:	60b9      	str	r1, [r7, #8]
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	4613      	mov	r3, r2
 800323c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b20      	cmp	r3, #32
 800324c:	f040 8083 	bne.w	8003356 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d002      	beq.n	800325c <HAL_UART_Transmit+0x2e>
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e07b      	b.n	8003358 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_UART_Transmit+0x40>
 800326a:	2302      	movs	r3, #2
 800326c:	e074      	b.n	8003358 <HAL_UART_Transmit+0x12a>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2221      	movs	r2, #33	; 0x21
 8003280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003284:	f7fe fefa 	bl	800207c <HAL_GetTick>
 8003288:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	88fa      	ldrh	r2, [r7, #6]
 8003294:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800329e:	e042      	b.n	8003326 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032b6:	d122      	bne.n	80032fe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2200      	movs	r2, #0
 80032c0:	2180      	movs	r1, #128	; 0x80
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fa66 	bl	8003794 <UART_WaitOnFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e042      	b.n	8003358 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d103      	bne.n	80032f6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	3302      	adds	r3, #2
 80032f2:	60bb      	str	r3, [r7, #8]
 80032f4:	e017      	b.n	8003326 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	3301      	adds	r3, #1
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	e013      	b.n	8003326 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2200      	movs	r2, #0
 8003306:	2180      	movs	r1, #128	; 0x80
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fa43 	bl	8003794 <UART_WaitOnFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e01f      	b.n	8003358 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	60ba      	str	r2, [r7, #8]
 800331e:	781a      	ldrb	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800332a:	b29b      	uxth	r3, r3
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1b7      	bne.n	80032a0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2200      	movs	r2, #0
 8003338:	2140      	movs	r1, #64	; 0x40
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fa2a 	bl	8003794 <UART_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e006      	b.n	8003358 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2220      	movs	r2, #32
 800334e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	603b      	str	r3, [r7, #0]
 800336c:	4613      	mov	r3, r2
 800336e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b20      	cmp	r3, #32
 800337e:	f040 8090 	bne.w	80034a2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_UART_Receive+0x2e>
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e088      	b.n	80034a4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_UART_Receive+0x40>
 800339c:	2302      	movs	r3, #2
 800339e:	e081      	b.n	80034a4 <HAL_UART_Receive+0x144>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2222      	movs	r2, #34	; 0x22
 80033b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80033b6:	f7fe fe61 	bl	800207c <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	88fa      	ldrh	r2, [r7, #6]
 80033c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80033d0:	e05c      	b.n	800348c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e8:	d12b      	bne.n	8003442 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2120      	movs	r1, #32
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f9cd 	bl	8003794 <UART_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e04f      	b.n	80034a4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10c      	bne.n	800342a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341c:	b29a      	uxth	r2, r3
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	3302      	adds	r3, #2
 8003426:	60bb      	str	r3, [r7, #8]
 8003428:	e030      	b.n	800348c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	b29b      	uxth	r3, r3
 8003432:	b2db      	uxtb	r3, r3
 8003434:	b29a      	uxth	r2, r3
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	3301      	adds	r3, #1
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	e024      	b.n	800348c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	9300      	str	r3, [sp, #0]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2200      	movs	r2, #0
 800344a:	2120      	movs	r1, #32
 800344c:	68f8      	ldr	r0, [r7, #12]
 800344e:	f000 f9a1 	bl	8003794 <UART_WaitOnFlagUntilTimeout>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e023      	b.n	80034a4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d108      	bne.n	8003476 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	60ba      	str	r2, [r7, #8]
 8003470:	b2ca      	uxtb	r2, r1
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e00a      	b.n	800348c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	b2da      	uxtb	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	1c59      	adds	r1, r3, #1
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003490:	b29b      	uxth	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d19d      	bne.n	80033d2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	e000      	b.n	80034a4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80034a2:	2302      	movs	r3, #2
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3718      	adds	r7, #24
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	4613      	mov	r3, r2
 80034b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d140      	bne.n	8003548 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d002      	beq.n	80034d2 <HAL_UART_Receive_IT+0x26>
 80034cc:	88fb      	ldrh	r3, [r7, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d101      	bne.n	80034d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e039      	b.n	800354a <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_UART_Receive_IT+0x38>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e032      	b.n	800354a <HAL_UART_Receive_IT+0x9e>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	88fa      	ldrh	r2, [r7, #6]
 80034f6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	88fa      	ldrh	r2, [r7, #6]
 80034fc:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2222      	movs	r2, #34	; 0x22
 8003508:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003522:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68da      	ldr	r2, [r3, #12]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f042 0220 	orr.w	r2, r2, #32
 8003542:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	e000      	b.n	800354a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003548:	2302      	movs	r3, #2
  }
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b088      	sub	sp, #32
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800357c:	2300      	movs	r3, #0
 800357e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10d      	bne.n	80035aa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d008      	beq.n	80035aa <HAL_UART_IRQHandler+0x52>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f9e0 	bl	8003968 <UART_Receive_IT>
      return;
 80035a8:	e0d1      	b.n	800374e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80b0 	beq.w	8003712 <HAL_UART_IRQHandler+0x1ba>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_UART_IRQHandler+0x70>
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80a5 	beq.w	8003712 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_UART_IRQHandler+0x90>
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	f043 0201 	orr.w	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00a      	beq.n	8003608 <HAL_UART_IRQHandler+0xb0>
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	f043 0202 	orr.w	r2, r3, #2
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_UART_IRQHandler+0xd0>
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003620:	f043 0204 	orr.w	r2, r3, #4
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00f      	beq.n	8003652 <HAL_UART_IRQHandler+0xfa>
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	f003 0320 	and.w	r3, r3, #32
 8003638:	2b00      	cmp	r3, #0
 800363a:	d104      	bne.n	8003646 <HAL_UART_IRQHandler+0xee>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d005      	beq.n	8003652 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	f043 0208 	orr.w	r2, r3, #8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d078      	beq.n	800374c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <HAL_UART_IRQHandler+0x11c>
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f97a 	bl	8003968 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	bf0c      	ite	eq
 8003682:	2301      	moveq	r3, #1
 8003684:	2300      	movne	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d102      	bne.n	800369c <HAL_UART_IRQHandler+0x144>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d031      	beq.n	8003700 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 f8c3 	bl	8003828 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b40      	cmp	r3, #64	; 0x40
 80036ae:	d123      	bne.n	80036f8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	695a      	ldr	r2, [r3, #20]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036be:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d013      	beq.n	80036f0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	4a21      	ldr	r2, [pc, #132]	; (8003754 <HAL_UART_IRQHandler+0x1fc>)
 80036ce:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fe fe10 	bl	80022fa <HAL_DMA_Abort_IT>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d016      	beq.n	800370e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036ea:	4610      	mov	r0, r2
 80036ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ee:	e00e      	b.n	800370e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f845 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f6:	e00a      	b.n	800370e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f841 	bl	8003780 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fe:	e006      	b.n	800370e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f83d 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800370c:	e01e      	b.n	800374c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370e:	bf00      	nop
    return;
 8003710:	e01c      	b.n	800374c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_UART_IRQHandler+0x1d6>
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f8b0 	bl	800388c <UART_Transmit_IT>
    return;
 800372c:	e00f      	b.n	800374e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_UART_IRQHandler+0x1f6>
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8f8 	bl	8003938 <UART_EndTransmit_IT>
    return;
 8003748:	bf00      	nop
 800374a:	e000      	b.n	800374e <HAL_UART_IRQHandler+0x1f6>
    return;
 800374c:	bf00      	nop
  }
}
 800374e:	3720      	adds	r7, #32
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	08003865 	.word	0x08003865

08003758 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a4:	e02c      	b.n	8003800 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	69bb      	ldr	r3, [r7, #24]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d028      	beq.n	8003800 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d007      	beq.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80037b4:	f7fe fc62 	bl	800207c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d21d      	bcs.n	8003800 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037d2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695a      	ldr	r2, [r3, #20]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e00f      	b.n	8003820 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4013      	ands	r3, r2
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	429a      	cmp	r2, r3
 800380e:	bf0c      	ite	eq
 8003810:	2301      	moveq	r3, #1
 8003812:	2300      	movne	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	461a      	mov	r2, r3
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	429a      	cmp	r2, r3
 800381c:	d0c3      	beq.n	80037a6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68da      	ldr	r2, [r3, #12]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800383e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695a      	ldr	r2, [r3, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f7ff ff7e 	bl	8003780 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b21      	cmp	r3, #33	; 0x21
 800389e:	d144      	bne.n	800392a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a8:	d11a      	bne.n	80038e0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	881b      	ldrh	r3, [r3, #0]
 80038b4:	461a      	mov	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038be:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691b      	ldr	r3, [r3, #16]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d105      	bne.n	80038d4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	1c9a      	adds	r2, r3, #2
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	621a      	str	r2, [r3, #32]
 80038d2:	e00e      	b.n	80038f2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	621a      	str	r2, [r3, #32]
 80038de:	e008      	b.n	80038f2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	1c59      	adds	r1, r3, #1
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6211      	str	r1, [r2, #32]
 80038ea:	781a      	ldrb	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4619      	mov	r1, r3
 8003900:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003914:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003924:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	e000      	b.n	800392c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
  }
}
 800392c:	4618      	mov	r0, r3
 800392e:	3714      	adds	r7, #20
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800394e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f7ff fefd 	bl	8003758 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b22      	cmp	r3, #34	; 0x22
 800397a:	d171      	bne.n	8003a60 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003984:	d123      	bne.n	80039ce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10e      	bne.n	80039b2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	1c9a      	adds	r2, r3, #2
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	629a      	str	r2, [r3, #40]	; 0x28
 80039b0:	e029      	b.n	8003a06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c6:	1c5a      	adds	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
 80039cc:	e01b      	b.n	8003a06 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10a      	bne.n	80039ec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6858      	ldr	r0, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	1c59      	adds	r1, r3, #1
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	6291      	str	r1, [r2, #40]	; 0x28
 80039e6:	b2c2      	uxtb	r2, r0
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e00c      	b.n	8003a06 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f8:	1c58      	adds	r0, r3, #1
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	6288      	str	r0, [r1, #40]	; 0x28
 80039fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4619      	mov	r1, r3
 8003a14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d120      	bne.n	8003a5c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0220 	bic.w	r2, r2, #32
 8003a28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f022 0201 	bic.w	r2, r2, #1
 8003a48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fe8a 	bl	800376c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e002      	b.n	8003a62 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a70:	b085      	sub	sp, #20
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68da      	ldr	r2, [r3, #12]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	69db      	ldr	r3, [r3, #28]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003aae:	f023 030c 	bic.w	r3, r3, #12
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	68f9      	ldr	r1, [r7, #12]
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ada:	f040 818b 	bne.w	8003df4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4ac1      	ldr	r2, [pc, #772]	; (8003de8 <UART_SetConfig+0x37c>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d005      	beq.n	8003af4 <UART_SetConfig+0x88>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4abf      	ldr	r2, [pc, #764]	; (8003dec <UART_SetConfig+0x380>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	f040 80bd 	bne.w	8003c6e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003af4:	f7ff fb3a 	bl	800316c <HAL_RCC_GetPCLK2Freq>
 8003af8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	461d      	mov	r5, r3
 8003afe:	f04f 0600 	mov.w	r6, #0
 8003b02:	46a8      	mov	r8, r5
 8003b04:	46b1      	mov	r9, r6
 8003b06:	eb18 0308 	adds.w	r3, r8, r8
 8003b0a:	eb49 0409 	adc.w	r4, r9, r9
 8003b0e:	4698      	mov	r8, r3
 8003b10:	46a1      	mov	r9, r4
 8003b12:	eb18 0805 	adds.w	r8, r8, r5
 8003b16:	eb49 0906 	adc.w	r9, r9, r6
 8003b1a:	f04f 0100 	mov.w	r1, #0
 8003b1e:	f04f 0200 	mov.w	r2, #0
 8003b22:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b26:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b2a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b2e:	4688      	mov	r8, r1
 8003b30:	4691      	mov	r9, r2
 8003b32:	eb18 0005 	adds.w	r0, r8, r5
 8003b36:	eb49 0106 	adc.w	r1, r9, r6
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	461d      	mov	r5, r3
 8003b40:	f04f 0600 	mov.w	r6, #0
 8003b44:	196b      	adds	r3, r5, r5
 8003b46:	eb46 0406 	adc.w	r4, r6, r6
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	4623      	mov	r3, r4
 8003b4e:	f7fd f833 	bl	8000bb8 <__aeabi_uldivmod>
 8003b52:	4603      	mov	r3, r0
 8003b54:	460c      	mov	r4, r1
 8003b56:	461a      	mov	r2, r3
 8003b58:	4ba5      	ldr	r3, [pc, #660]	; (8003df0 <UART_SetConfig+0x384>)
 8003b5a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	461d      	mov	r5, r3
 8003b68:	f04f 0600 	mov.w	r6, #0
 8003b6c:	46a9      	mov	r9, r5
 8003b6e:	46b2      	mov	sl, r6
 8003b70:	eb19 0309 	adds.w	r3, r9, r9
 8003b74:	eb4a 040a 	adc.w	r4, sl, sl
 8003b78:	4699      	mov	r9, r3
 8003b7a:	46a2      	mov	sl, r4
 8003b7c:	eb19 0905 	adds.w	r9, r9, r5
 8003b80:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b84:	f04f 0100 	mov.w	r1, #0
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b98:	4689      	mov	r9, r1
 8003b9a:	4692      	mov	sl, r2
 8003b9c:	eb19 0005 	adds.w	r0, r9, r5
 8003ba0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	461d      	mov	r5, r3
 8003baa:	f04f 0600 	mov.w	r6, #0
 8003bae:	196b      	adds	r3, r5, r5
 8003bb0:	eb46 0406 	adc.w	r4, r6, r6
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	4623      	mov	r3, r4
 8003bb8:	f7fc fffe 	bl	8000bb8 <__aeabi_uldivmod>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	460c      	mov	r4, r1
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b8b      	ldr	r3, [pc, #556]	; (8003df0 <UART_SetConfig+0x384>)
 8003bc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	2164      	movs	r1, #100	; 0x64
 8003bcc:	fb01 f303 	mul.w	r3, r1, r3
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	3332      	adds	r3, #50	; 0x32
 8003bd6:	4a86      	ldr	r2, [pc, #536]	; (8003df0 <UART_SetConfig+0x384>)
 8003bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003bdc:	095b      	lsrs	r3, r3, #5
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003be4:	4498      	add	r8, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	461d      	mov	r5, r3
 8003bea:	f04f 0600 	mov.w	r6, #0
 8003bee:	46a9      	mov	r9, r5
 8003bf0:	46b2      	mov	sl, r6
 8003bf2:	eb19 0309 	adds.w	r3, r9, r9
 8003bf6:	eb4a 040a 	adc.w	r4, sl, sl
 8003bfa:	4699      	mov	r9, r3
 8003bfc:	46a2      	mov	sl, r4
 8003bfe:	eb19 0905 	adds.w	r9, r9, r5
 8003c02:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c12:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c16:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c1a:	4689      	mov	r9, r1
 8003c1c:	4692      	mov	sl, r2
 8003c1e:	eb19 0005 	adds.w	r0, r9, r5
 8003c22:	eb4a 0106 	adc.w	r1, sl, r6
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	f04f 0600 	mov.w	r6, #0
 8003c30:	196b      	adds	r3, r5, r5
 8003c32:	eb46 0406 	adc.w	r4, r6, r6
 8003c36:	461a      	mov	r2, r3
 8003c38:	4623      	mov	r3, r4
 8003c3a:	f7fc ffbd 	bl	8000bb8 <__aeabi_uldivmod>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	460c      	mov	r4, r1
 8003c42:	461a      	mov	r2, r3
 8003c44:	4b6a      	ldr	r3, [pc, #424]	; (8003df0 <UART_SetConfig+0x384>)
 8003c46:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	2164      	movs	r1, #100	; 0x64
 8003c4e:	fb01 f303 	mul.w	r3, r1, r3
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	3332      	adds	r3, #50	; 0x32
 8003c58:	4a65      	ldr	r2, [pc, #404]	; (8003df0 <UART_SetConfig+0x384>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	095b      	lsrs	r3, r3, #5
 8003c60:	f003 0207 	and.w	r2, r3, #7
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4442      	add	r2, r8
 8003c6a:	609a      	str	r2, [r3, #8]
 8003c6c:	e26f      	b.n	800414e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c6e:	f7ff fa69 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 8003c72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	461d      	mov	r5, r3
 8003c78:	f04f 0600 	mov.w	r6, #0
 8003c7c:	46a8      	mov	r8, r5
 8003c7e:	46b1      	mov	r9, r6
 8003c80:	eb18 0308 	adds.w	r3, r8, r8
 8003c84:	eb49 0409 	adc.w	r4, r9, r9
 8003c88:	4698      	mov	r8, r3
 8003c8a:	46a1      	mov	r9, r4
 8003c8c:	eb18 0805 	adds.w	r8, r8, r5
 8003c90:	eb49 0906 	adc.w	r9, r9, r6
 8003c94:	f04f 0100 	mov.w	r1, #0
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ca0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ca4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ca8:	4688      	mov	r8, r1
 8003caa:	4691      	mov	r9, r2
 8003cac:	eb18 0005 	adds.w	r0, r8, r5
 8003cb0:	eb49 0106 	adc.w	r1, r9, r6
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	461d      	mov	r5, r3
 8003cba:	f04f 0600 	mov.w	r6, #0
 8003cbe:	196b      	adds	r3, r5, r5
 8003cc0:	eb46 0406 	adc.w	r4, r6, r6
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	4623      	mov	r3, r4
 8003cc8:	f7fc ff76 	bl	8000bb8 <__aeabi_uldivmod>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	460c      	mov	r4, r1
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <UART_SetConfig+0x384>)
 8003cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003cd8:	095b      	lsrs	r3, r3, #5
 8003cda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	461d      	mov	r5, r3
 8003ce2:	f04f 0600 	mov.w	r6, #0
 8003ce6:	46a9      	mov	r9, r5
 8003ce8:	46b2      	mov	sl, r6
 8003cea:	eb19 0309 	adds.w	r3, r9, r9
 8003cee:	eb4a 040a 	adc.w	r4, sl, sl
 8003cf2:	4699      	mov	r9, r3
 8003cf4:	46a2      	mov	sl, r4
 8003cf6:	eb19 0905 	adds.w	r9, r9, r5
 8003cfa:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cfe:	f04f 0100 	mov.w	r1, #0
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d12:	4689      	mov	r9, r1
 8003d14:	4692      	mov	sl, r2
 8003d16:	eb19 0005 	adds.w	r0, r9, r5
 8003d1a:	eb4a 0106 	adc.w	r1, sl, r6
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	461d      	mov	r5, r3
 8003d24:	f04f 0600 	mov.w	r6, #0
 8003d28:	196b      	adds	r3, r5, r5
 8003d2a:	eb46 0406 	adc.w	r4, r6, r6
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4623      	mov	r3, r4
 8003d32:	f7fc ff41 	bl	8000bb8 <__aeabi_uldivmod>
 8003d36:	4603      	mov	r3, r0
 8003d38:	460c      	mov	r4, r1
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4b2c      	ldr	r3, [pc, #176]	; (8003df0 <UART_SetConfig+0x384>)
 8003d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2164      	movs	r1, #100	; 0x64
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	3332      	adds	r3, #50	; 0x32
 8003d50:	4a27      	ldr	r2, [pc, #156]	; (8003df0 <UART_SetConfig+0x384>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d5e:	4498      	add	r8, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	461d      	mov	r5, r3
 8003d64:	f04f 0600 	mov.w	r6, #0
 8003d68:	46a9      	mov	r9, r5
 8003d6a:	46b2      	mov	sl, r6
 8003d6c:	eb19 0309 	adds.w	r3, r9, r9
 8003d70:	eb4a 040a 	adc.w	r4, sl, sl
 8003d74:	4699      	mov	r9, r3
 8003d76:	46a2      	mov	sl, r4
 8003d78:	eb19 0905 	adds.w	r9, r9, r5
 8003d7c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d80:	f04f 0100 	mov.w	r1, #0
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d94:	4689      	mov	r9, r1
 8003d96:	4692      	mov	sl, r2
 8003d98:	eb19 0005 	adds.w	r0, r9, r5
 8003d9c:	eb4a 0106 	adc.w	r1, sl, r6
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	461d      	mov	r5, r3
 8003da6:	f04f 0600 	mov.w	r6, #0
 8003daa:	196b      	adds	r3, r5, r5
 8003dac:	eb46 0406 	adc.w	r4, r6, r6
 8003db0:	461a      	mov	r2, r3
 8003db2:	4623      	mov	r3, r4
 8003db4:	f7fc ff00 	bl	8000bb8 <__aeabi_uldivmod>
 8003db8:	4603      	mov	r3, r0
 8003dba:	460c      	mov	r4, r1
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <UART_SetConfig+0x384>)
 8003dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	2164      	movs	r1, #100	; 0x64
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	3332      	adds	r3, #50	; 0x32
 8003dd2:	4a07      	ldr	r2, [pc, #28]	; (8003df0 <UART_SetConfig+0x384>)
 8003dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	f003 0207 	and.w	r2, r3, #7
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4442      	add	r2, r8
 8003de4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003de6:	e1b2      	b.n	800414e <UART_SetConfig+0x6e2>
 8003de8:	40011000 	.word	0x40011000
 8003dec:	40011400 	.word	0x40011400
 8003df0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4ad7      	ldr	r2, [pc, #860]	; (8004158 <UART_SetConfig+0x6ec>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d005      	beq.n	8003e0a <UART_SetConfig+0x39e>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4ad6      	ldr	r2, [pc, #856]	; (800415c <UART_SetConfig+0x6f0>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	f040 80d1 	bne.w	8003fac <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e0a:	f7ff f9af 	bl	800316c <HAL_RCC_GetPCLK2Freq>
 8003e0e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	469a      	mov	sl, r3
 8003e14:	f04f 0b00 	mov.w	fp, #0
 8003e18:	46d0      	mov	r8, sl
 8003e1a:	46d9      	mov	r9, fp
 8003e1c:	eb18 0308 	adds.w	r3, r8, r8
 8003e20:	eb49 0409 	adc.w	r4, r9, r9
 8003e24:	4698      	mov	r8, r3
 8003e26:	46a1      	mov	r9, r4
 8003e28:	eb18 080a 	adds.w	r8, r8, sl
 8003e2c:	eb49 090b 	adc.w	r9, r9, fp
 8003e30:	f04f 0100 	mov.w	r1, #0
 8003e34:	f04f 0200 	mov.w	r2, #0
 8003e38:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e3c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e40:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e44:	4688      	mov	r8, r1
 8003e46:	4691      	mov	r9, r2
 8003e48:	eb1a 0508 	adds.w	r5, sl, r8
 8003e4c:	eb4b 0609 	adc.w	r6, fp, r9
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	4619      	mov	r1, r3
 8003e56:	f04f 0200 	mov.w	r2, #0
 8003e5a:	f04f 0300 	mov.w	r3, #0
 8003e5e:	f04f 0400 	mov.w	r4, #0
 8003e62:	0094      	lsls	r4, r2, #2
 8003e64:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e68:	008b      	lsls	r3, r1, #2
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4623      	mov	r3, r4
 8003e6e:	4628      	mov	r0, r5
 8003e70:	4631      	mov	r1, r6
 8003e72:	f7fc fea1 	bl	8000bb8 <__aeabi_uldivmod>
 8003e76:	4603      	mov	r3, r0
 8003e78:	460c      	mov	r4, r1
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4bb8      	ldr	r3, [pc, #736]	; (8004160 <UART_SetConfig+0x6f4>)
 8003e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	469b      	mov	fp, r3
 8003e8c:	f04f 0c00 	mov.w	ip, #0
 8003e90:	46d9      	mov	r9, fp
 8003e92:	46e2      	mov	sl, ip
 8003e94:	eb19 0309 	adds.w	r3, r9, r9
 8003e98:	eb4a 040a 	adc.w	r4, sl, sl
 8003e9c:	4699      	mov	r9, r3
 8003e9e:	46a2      	mov	sl, r4
 8003ea0:	eb19 090b 	adds.w	r9, r9, fp
 8003ea4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003ea8:	f04f 0100 	mov.w	r1, #0
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eb4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003eb8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ebc:	4689      	mov	r9, r1
 8003ebe:	4692      	mov	sl, r2
 8003ec0:	eb1b 0509 	adds.w	r5, fp, r9
 8003ec4:	eb4c 060a 	adc.w	r6, ip, sl
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	f04f 0300 	mov.w	r3, #0
 8003ed6:	f04f 0400 	mov.w	r4, #0
 8003eda:	0094      	lsls	r4, r2, #2
 8003edc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee0:	008b      	lsls	r3, r1, #2
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4623      	mov	r3, r4
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	4631      	mov	r1, r6
 8003eea:	f7fc fe65 	bl	8000bb8 <__aeabi_uldivmod>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b9a      	ldr	r3, [pc, #616]	; (8004160 <UART_SetConfig+0x6f4>)
 8003ef6:	fba3 1302 	umull	r1, r3, r3, r2
 8003efa:	095b      	lsrs	r3, r3, #5
 8003efc:	2164      	movs	r1, #100	; 0x64
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	3332      	adds	r3, #50	; 0x32
 8003f08:	4a95      	ldr	r2, [pc, #596]	; (8004160 <UART_SetConfig+0x6f4>)
 8003f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f14:	4498      	add	r8, r3
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	469b      	mov	fp, r3
 8003f1a:	f04f 0c00 	mov.w	ip, #0
 8003f1e:	46d9      	mov	r9, fp
 8003f20:	46e2      	mov	sl, ip
 8003f22:	eb19 0309 	adds.w	r3, r9, r9
 8003f26:	eb4a 040a 	adc.w	r4, sl, sl
 8003f2a:	4699      	mov	r9, r3
 8003f2c:	46a2      	mov	sl, r4
 8003f2e:	eb19 090b 	adds.w	r9, r9, fp
 8003f32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f4a:	4689      	mov	r9, r1
 8003f4c:	4692      	mov	sl, r2
 8003f4e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f52:	eb4c 060a 	adc.w	r6, ip, sl
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	f04f 0400 	mov.w	r4, #0
 8003f68:	0094      	lsls	r4, r2, #2
 8003f6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f6e:	008b      	lsls	r3, r1, #2
 8003f70:	461a      	mov	r2, r3
 8003f72:	4623      	mov	r3, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	4631      	mov	r1, r6
 8003f78:	f7fc fe1e 	bl	8000bb8 <__aeabi_uldivmod>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b77      	ldr	r3, [pc, #476]	; (8004160 <UART_SetConfig+0x6f4>)
 8003f84:	fba3 1302 	umull	r1, r3, r3, r2
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	2164      	movs	r1, #100	; 0x64
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	3332      	adds	r3, #50	; 0x32
 8003f96:	4a72      	ldr	r2, [pc, #456]	; (8004160 <UART_SetConfig+0x6f4>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	f003 020f 	and.w	r2, r3, #15
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4442      	add	r2, r8
 8003fa8:	609a      	str	r2, [r3, #8]
 8003faa:	e0d0      	b.n	800414e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7ff f8ca 	bl	8003144 <HAL_RCC_GetPCLK1Freq>
 8003fb0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	469a      	mov	sl, r3
 8003fb6:	f04f 0b00 	mov.w	fp, #0
 8003fba:	46d0      	mov	r8, sl
 8003fbc:	46d9      	mov	r9, fp
 8003fbe:	eb18 0308 	adds.w	r3, r8, r8
 8003fc2:	eb49 0409 	adc.w	r4, r9, r9
 8003fc6:	4698      	mov	r8, r3
 8003fc8:	46a1      	mov	r9, r4
 8003fca:	eb18 080a 	adds.w	r8, r8, sl
 8003fce:	eb49 090b 	adc.w	r9, r9, fp
 8003fd2:	f04f 0100 	mov.w	r1, #0
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fde:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fe2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fe6:	4688      	mov	r8, r1
 8003fe8:	4691      	mov	r9, r2
 8003fea:	eb1a 0508 	adds.w	r5, sl, r8
 8003fee:	eb4b 0609 	adc.w	r6, fp, r9
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	4619      	mov	r1, r3
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	f04f 0400 	mov.w	r4, #0
 8004004:	0094      	lsls	r4, r2, #2
 8004006:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800400a:	008b      	lsls	r3, r1, #2
 800400c:	461a      	mov	r2, r3
 800400e:	4623      	mov	r3, r4
 8004010:	4628      	mov	r0, r5
 8004012:	4631      	mov	r1, r6
 8004014:	f7fc fdd0 	bl	8000bb8 <__aeabi_uldivmod>
 8004018:	4603      	mov	r3, r0
 800401a:	460c      	mov	r4, r1
 800401c:	461a      	mov	r2, r3
 800401e:	4b50      	ldr	r3, [pc, #320]	; (8004160 <UART_SetConfig+0x6f4>)
 8004020:	fba3 2302 	umull	r2, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	469b      	mov	fp, r3
 800402e:	f04f 0c00 	mov.w	ip, #0
 8004032:	46d9      	mov	r9, fp
 8004034:	46e2      	mov	sl, ip
 8004036:	eb19 0309 	adds.w	r3, r9, r9
 800403a:	eb4a 040a 	adc.w	r4, sl, sl
 800403e:	4699      	mov	r9, r3
 8004040:	46a2      	mov	sl, r4
 8004042:	eb19 090b 	adds.w	r9, r9, fp
 8004046:	eb4a 0a0c 	adc.w	sl, sl, ip
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800405e:	4689      	mov	r9, r1
 8004060:	4692      	mov	sl, r2
 8004062:	eb1b 0509 	adds.w	r5, fp, r9
 8004066:	eb4c 060a 	adc.w	r6, ip, sl
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	4619      	mov	r1, r3
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	f04f 0400 	mov.w	r4, #0
 800407c:	0094      	lsls	r4, r2, #2
 800407e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004082:	008b      	lsls	r3, r1, #2
 8004084:	461a      	mov	r2, r3
 8004086:	4623      	mov	r3, r4
 8004088:	4628      	mov	r0, r5
 800408a:	4631      	mov	r1, r6
 800408c:	f7fc fd94 	bl	8000bb8 <__aeabi_uldivmod>
 8004090:	4603      	mov	r3, r0
 8004092:	460c      	mov	r4, r1
 8004094:	461a      	mov	r2, r3
 8004096:	4b32      	ldr	r3, [pc, #200]	; (8004160 <UART_SetConfig+0x6f4>)
 8004098:	fba3 1302 	umull	r1, r3, r3, r2
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	2164      	movs	r1, #100	; 0x64
 80040a0:	fb01 f303 	mul.w	r3, r1, r3
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	011b      	lsls	r3, r3, #4
 80040a8:	3332      	adds	r3, #50	; 0x32
 80040aa:	4a2d      	ldr	r2, [pc, #180]	; (8004160 <UART_SetConfig+0x6f4>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	095b      	lsrs	r3, r3, #5
 80040b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040b6:	4498      	add	r8, r3
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	469b      	mov	fp, r3
 80040bc:	f04f 0c00 	mov.w	ip, #0
 80040c0:	46d9      	mov	r9, fp
 80040c2:	46e2      	mov	sl, ip
 80040c4:	eb19 0309 	adds.w	r3, r9, r9
 80040c8:	eb4a 040a 	adc.w	r4, sl, sl
 80040cc:	4699      	mov	r9, r3
 80040ce:	46a2      	mov	sl, r4
 80040d0:	eb19 090b 	adds.w	r9, r9, fp
 80040d4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040d8:	f04f 0100 	mov.w	r1, #0
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040ec:	4689      	mov	r9, r1
 80040ee:	4692      	mov	sl, r2
 80040f0:	eb1b 0509 	adds.w	r5, fp, r9
 80040f4:	eb4c 060a 	adc.w	r6, ip, sl
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	4619      	mov	r1, r3
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	f04f 0400 	mov.w	r4, #0
 800410a:	0094      	lsls	r4, r2, #2
 800410c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004110:	008b      	lsls	r3, r1, #2
 8004112:	461a      	mov	r2, r3
 8004114:	4623      	mov	r3, r4
 8004116:	4628      	mov	r0, r5
 8004118:	4631      	mov	r1, r6
 800411a:	f7fc fd4d 	bl	8000bb8 <__aeabi_uldivmod>
 800411e:	4603      	mov	r3, r0
 8004120:	460c      	mov	r4, r1
 8004122:	461a      	mov	r2, r3
 8004124:	4b0e      	ldr	r3, [pc, #56]	; (8004160 <UART_SetConfig+0x6f4>)
 8004126:	fba3 1302 	umull	r1, r3, r3, r2
 800412a:	095b      	lsrs	r3, r3, #5
 800412c:	2164      	movs	r1, #100	; 0x64
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	011b      	lsls	r3, r3, #4
 8004136:	3332      	adds	r3, #50	; 0x32
 8004138:	4a09      	ldr	r2, [pc, #36]	; (8004160 <UART_SetConfig+0x6f4>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	095b      	lsrs	r3, r3, #5
 8004140:	f003 020f 	and.w	r2, r3, #15
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4442      	add	r2, r8
 800414a:	609a      	str	r2, [r3, #8]
}
 800414c:	e7ff      	b.n	800414e <UART_SetConfig+0x6e2>
 800414e:	bf00      	nop
 8004150:	3714      	adds	r7, #20
 8004152:	46bd      	mov	sp, r7
 8004154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004158:	40011000 	.word	0x40011000
 800415c:	40011400 	.word	0x40011400
 8004160:	51eb851f 	.word	0x51eb851f

08004164 <__errno>:
 8004164:	4b01      	ldr	r3, [pc, #4]	; (800416c <__errno+0x8>)
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	2000000c 	.word	0x2000000c

08004170 <__libc_init_array>:
 8004170:	b570      	push	{r4, r5, r6, lr}
 8004172:	4e0d      	ldr	r6, [pc, #52]	; (80041a8 <__libc_init_array+0x38>)
 8004174:	4c0d      	ldr	r4, [pc, #52]	; (80041ac <__libc_init_array+0x3c>)
 8004176:	1ba4      	subs	r4, r4, r6
 8004178:	10a4      	asrs	r4, r4, #2
 800417a:	2500      	movs	r5, #0
 800417c:	42a5      	cmp	r5, r4
 800417e:	d109      	bne.n	8004194 <__libc_init_array+0x24>
 8004180:	4e0b      	ldr	r6, [pc, #44]	; (80041b0 <__libc_init_array+0x40>)
 8004182:	4c0c      	ldr	r4, [pc, #48]	; (80041b4 <__libc_init_array+0x44>)
 8004184:	f002 fbc6 	bl	8006914 <_init>
 8004188:	1ba4      	subs	r4, r4, r6
 800418a:	10a4      	asrs	r4, r4, #2
 800418c:	2500      	movs	r5, #0
 800418e:	42a5      	cmp	r5, r4
 8004190:	d105      	bne.n	800419e <__libc_init_array+0x2e>
 8004192:	bd70      	pop	{r4, r5, r6, pc}
 8004194:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004198:	4798      	blx	r3
 800419a:	3501      	adds	r5, #1
 800419c:	e7ee      	b.n	800417c <__libc_init_array+0xc>
 800419e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041a2:	4798      	blx	r3
 80041a4:	3501      	adds	r5, #1
 80041a6:	e7f2      	b.n	800418e <__libc_init_array+0x1e>
 80041a8:	08006cd0 	.word	0x08006cd0
 80041ac:	08006cd0 	.word	0x08006cd0
 80041b0:	08006cd0 	.word	0x08006cd0
 80041b4:	08006cd4 	.word	0x08006cd4

080041b8 <memset>:
 80041b8:	4402      	add	r2, r0
 80041ba:	4603      	mov	r3, r0
 80041bc:	4293      	cmp	r3, r2
 80041be:	d100      	bne.n	80041c2 <memset+0xa>
 80041c0:	4770      	bx	lr
 80041c2:	f803 1b01 	strb.w	r1, [r3], #1
 80041c6:	e7f9      	b.n	80041bc <memset+0x4>

080041c8 <__cvt>:
 80041c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	ec55 4b10 	vmov	r4, r5, d0
 80041d0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80041d2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80041d6:	2d00      	cmp	r5, #0
 80041d8:	460e      	mov	r6, r1
 80041da:	4691      	mov	r9, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	bfb8      	it	lt
 80041e0:	4622      	movlt	r2, r4
 80041e2:	462b      	mov	r3, r5
 80041e4:	f027 0720 	bic.w	r7, r7, #32
 80041e8:	bfbb      	ittet	lt
 80041ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80041ee:	461d      	movlt	r5, r3
 80041f0:	2300      	movge	r3, #0
 80041f2:	232d      	movlt	r3, #45	; 0x2d
 80041f4:	bfb8      	it	lt
 80041f6:	4614      	movlt	r4, r2
 80041f8:	2f46      	cmp	r7, #70	; 0x46
 80041fa:	700b      	strb	r3, [r1, #0]
 80041fc:	d004      	beq.n	8004208 <__cvt+0x40>
 80041fe:	2f45      	cmp	r7, #69	; 0x45
 8004200:	d100      	bne.n	8004204 <__cvt+0x3c>
 8004202:	3601      	adds	r6, #1
 8004204:	2102      	movs	r1, #2
 8004206:	e000      	b.n	800420a <__cvt+0x42>
 8004208:	2103      	movs	r1, #3
 800420a:	ab03      	add	r3, sp, #12
 800420c:	9301      	str	r3, [sp, #4]
 800420e:	ab02      	add	r3, sp, #8
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	4632      	mov	r2, r6
 8004214:	4653      	mov	r3, sl
 8004216:	ec45 4b10 	vmov	d0, r4, r5
 800421a:	f000 fe15 	bl	8004e48 <_dtoa_r>
 800421e:	2f47      	cmp	r7, #71	; 0x47
 8004220:	4680      	mov	r8, r0
 8004222:	d102      	bne.n	800422a <__cvt+0x62>
 8004224:	f019 0f01 	tst.w	r9, #1
 8004228:	d026      	beq.n	8004278 <__cvt+0xb0>
 800422a:	2f46      	cmp	r7, #70	; 0x46
 800422c:	eb08 0906 	add.w	r9, r8, r6
 8004230:	d111      	bne.n	8004256 <__cvt+0x8e>
 8004232:	f898 3000 	ldrb.w	r3, [r8]
 8004236:	2b30      	cmp	r3, #48	; 0x30
 8004238:	d10a      	bne.n	8004250 <__cvt+0x88>
 800423a:	2200      	movs	r2, #0
 800423c:	2300      	movs	r3, #0
 800423e:	4620      	mov	r0, r4
 8004240:	4629      	mov	r1, r5
 8004242:	f7fc fc49 	bl	8000ad8 <__aeabi_dcmpeq>
 8004246:	b918      	cbnz	r0, 8004250 <__cvt+0x88>
 8004248:	f1c6 0601 	rsb	r6, r6, #1
 800424c:	f8ca 6000 	str.w	r6, [sl]
 8004250:	f8da 3000 	ldr.w	r3, [sl]
 8004254:	4499      	add	r9, r3
 8004256:	2200      	movs	r2, #0
 8004258:	2300      	movs	r3, #0
 800425a:	4620      	mov	r0, r4
 800425c:	4629      	mov	r1, r5
 800425e:	f7fc fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004262:	b938      	cbnz	r0, 8004274 <__cvt+0xac>
 8004264:	2230      	movs	r2, #48	; 0x30
 8004266:	9b03      	ldr	r3, [sp, #12]
 8004268:	454b      	cmp	r3, r9
 800426a:	d205      	bcs.n	8004278 <__cvt+0xb0>
 800426c:	1c59      	adds	r1, r3, #1
 800426e:	9103      	str	r1, [sp, #12]
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e7f8      	b.n	8004266 <__cvt+0x9e>
 8004274:	f8cd 900c 	str.w	r9, [sp, #12]
 8004278:	9b03      	ldr	r3, [sp, #12]
 800427a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800427c:	eba3 0308 	sub.w	r3, r3, r8
 8004280:	4640      	mov	r0, r8
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	b004      	add	sp, #16
 8004286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800428a <__exponent>:
 800428a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800428c:	2900      	cmp	r1, #0
 800428e:	4604      	mov	r4, r0
 8004290:	bfba      	itte	lt
 8004292:	4249      	neglt	r1, r1
 8004294:	232d      	movlt	r3, #45	; 0x2d
 8004296:	232b      	movge	r3, #43	; 0x2b
 8004298:	2909      	cmp	r1, #9
 800429a:	f804 2b02 	strb.w	r2, [r4], #2
 800429e:	7043      	strb	r3, [r0, #1]
 80042a0:	dd20      	ble.n	80042e4 <__exponent+0x5a>
 80042a2:	f10d 0307 	add.w	r3, sp, #7
 80042a6:	461f      	mov	r7, r3
 80042a8:	260a      	movs	r6, #10
 80042aa:	fb91 f5f6 	sdiv	r5, r1, r6
 80042ae:	fb06 1115 	mls	r1, r6, r5, r1
 80042b2:	3130      	adds	r1, #48	; 0x30
 80042b4:	2d09      	cmp	r5, #9
 80042b6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80042ba:	f103 32ff 	add.w	r2, r3, #4294967295
 80042be:	4629      	mov	r1, r5
 80042c0:	dc09      	bgt.n	80042d6 <__exponent+0x4c>
 80042c2:	3130      	adds	r1, #48	; 0x30
 80042c4:	3b02      	subs	r3, #2
 80042c6:	f802 1c01 	strb.w	r1, [r2, #-1]
 80042ca:	42bb      	cmp	r3, r7
 80042cc:	4622      	mov	r2, r4
 80042ce:	d304      	bcc.n	80042da <__exponent+0x50>
 80042d0:	1a10      	subs	r0, r2, r0
 80042d2:	b003      	add	sp, #12
 80042d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042d6:	4613      	mov	r3, r2
 80042d8:	e7e7      	b.n	80042aa <__exponent+0x20>
 80042da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042de:	f804 2b01 	strb.w	r2, [r4], #1
 80042e2:	e7f2      	b.n	80042ca <__exponent+0x40>
 80042e4:	2330      	movs	r3, #48	; 0x30
 80042e6:	4419      	add	r1, r3
 80042e8:	7083      	strb	r3, [r0, #2]
 80042ea:	1d02      	adds	r2, r0, #4
 80042ec:	70c1      	strb	r1, [r0, #3]
 80042ee:	e7ef      	b.n	80042d0 <__exponent+0x46>

080042f0 <_printf_float>:
 80042f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042f4:	b08d      	sub	sp, #52	; 0x34
 80042f6:	460c      	mov	r4, r1
 80042f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80042fc:	4616      	mov	r6, r2
 80042fe:	461f      	mov	r7, r3
 8004300:	4605      	mov	r5, r0
 8004302:	f001 fcd3 	bl	8005cac <_localeconv_r>
 8004306:	6803      	ldr	r3, [r0, #0]
 8004308:	9304      	str	r3, [sp, #16]
 800430a:	4618      	mov	r0, r3
 800430c:	f7fb ff68 	bl	80001e0 <strlen>
 8004310:	2300      	movs	r3, #0
 8004312:	930a      	str	r3, [sp, #40]	; 0x28
 8004314:	f8d8 3000 	ldr.w	r3, [r8]
 8004318:	9005      	str	r0, [sp, #20]
 800431a:	3307      	adds	r3, #7
 800431c:	f023 0307 	bic.w	r3, r3, #7
 8004320:	f103 0208 	add.w	r2, r3, #8
 8004324:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004328:	f8d4 b000 	ldr.w	fp, [r4]
 800432c:	f8c8 2000 	str.w	r2, [r8]
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004338:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800433c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004340:	9307      	str	r3, [sp, #28]
 8004342:	f8cd 8018 	str.w	r8, [sp, #24]
 8004346:	f04f 32ff 	mov.w	r2, #4294967295
 800434a:	4ba7      	ldr	r3, [pc, #668]	; (80045e8 <_printf_float+0x2f8>)
 800434c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004350:	f7fc fbf4 	bl	8000b3c <__aeabi_dcmpun>
 8004354:	bb70      	cbnz	r0, 80043b4 <_printf_float+0xc4>
 8004356:	f04f 32ff 	mov.w	r2, #4294967295
 800435a:	4ba3      	ldr	r3, [pc, #652]	; (80045e8 <_printf_float+0x2f8>)
 800435c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004360:	f7fc fbce 	bl	8000b00 <__aeabi_dcmple>
 8004364:	bb30      	cbnz	r0, 80043b4 <_printf_float+0xc4>
 8004366:	2200      	movs	r2, #0
 8004368:	2300      	movs	r3, #0
 800436a:	4640      	mov	r0, r8
 800436c:	4649      	mov	r1, r9
 800436e:	f7fc fbbd 	bl	8000aec <__aeabi_dcmplt>
 8004372:	b110      	cbz	r0, 800437a <_printf_float+0x8a>
 8004374:	232d      	movs	r3, #45	; 0x2d
 8004376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800437a:	4a9c      	ldr	r2, [pc, #624]	; (80045ec <_printf_float+0x2fc>)
 800437c:	4b9c      	ldr	r3, [pc, #624]	; (80045f0 <_printf_float+0x300>)
 800437e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8004382:	bf8c      	ite	hi
 8004384:	4690      	movhi	r8, r2
 8004386:	4698      	movls	r8, r3
 8004388:	2303      	movs	r3, #3
 800438a:	f02b 0204 	bic.w	r2, fp, #4
 800438e:	6123      	str	r3, [r4, #16]
 8004390:	6022      	str	r2, [r4, #0]
 8004392:	f04f 0900 	mov.w	r9, #0
 8004396:	9700      	str	r7, [sp, #0]
 8004398:	4633      	mov	r3, r6
 800439a:	aa0b      	add	r2, sp, #44	; 0x2c
 800439c:	4621      	mov	r1, r4
 800439e:	4628      	mov	r0, r5
 80043a0:	f000 f9e6 	bl	8004770 <_printf_common>
 80043a4:	3001      	adds	r0, #1
 80043a6:	f040 808d 	bne.w	80044c4 <_printf_float+0x1d4>
 80043aa:	f04f 30ff 	mov.w	r0, #4294967295
 80043ae:	b00d      	add	sp, #52	; 0x34
 80043b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	4640      	mov	r0, r8
 80043ba:	4649      	mov	r1, r9
 80043bc:	f7fc fbbe 	bl	8000b3c <__aeabi_dcmpun>
 80043c0:	b110      	cbz	r0, 80043c8 <_printf_float+0xd8>
 80043c2:	4a8c      	ldr	r2, [pc, #560]	; (80045f4 <_printf_float+0x304>)
 80043c4:	4b8c      	ldr	r3, [pc, #560]	; (80045f8 <_printf_float+0x308>)
 80043c6:	e7da      	b.n	800437e <_printf_float+0x8e>
 80043c8:	6861      	ldr	r1, [r4, #4]
 80043ca:	1c4b      	adds	r3, r1, #1
 80043cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80043d0:	a80a      	add	r0, sp, #40	; 0x28
 80043d2:	d13e      	bne.n	8004452 <_printf_float+0x162>
 80043d4:	2306      	movs	r3, #6
 80043d6:	6063      	str	r3, [r4, #4]
 80043d8:	2300      	movs	r3, #0
 80043da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80043de:	ab09      	add	r3, sp, #36	; 0x24
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	ec49 8b10 	vmov	d0, r8, r9
 80043e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80043ea:	6022      	str	r2, [r4, #0]
 80043ec:	f8cd a004 	str.w	sl, [sp, #4]
 80043f0:	6861      	ldr	r1, [r4, #4]
 80043f2:	4628      	mov	r0, r5
 80043f4:	f7ff fee8 	bl	80041c8 <__cvt>
 80043f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80043fc:	2b47      	cmp	r3, #71	; 0x47
 80043fe:	4680      	mov	r8, r0
 8004400:	d109      	bne.n	8004416 <_printf_float+0x126>
 8004402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004404:	1cd8      	adds	r0, r3, #3
 8004406:	db02      	blt.n	800440e <_printf_float+0x11e>
 8004408:	6862      	ldr	r2, [r4, #4]
 800440a:	4293      	cmp	r3, r2
 800440c:	dd47      	ble.n	800449e <_printf_float+0x1ae>
 800440e:	f1aa 0a02 	sub.w	sl, sl, #2
 8004412:	fa5f fa8a 	uxtb.w	sl, sl
 8004416:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800441a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800441c:	d824      	bhi.n	8004468 <_printf_float+0x178>
 800441e:	3901      	subs	r1, #1
 8004420:	4652      	mov	r2, sl
 8004422:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004426:	9109      	str	r1, [sp, #36]	; 0x24
 8004428:	f7ff ff2f 	bl	800428a <__exponent>
 800442c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800442e:	1813      	adds	r3, r2, r0
 8004430:	2a01      	cmp	r2, #1
 8004432:	4681      	mov	r9, r0
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	dc02      	bgt.n	800443e <_printf_float+0x14e>
 8004438:	6822      	ldr	r2, [r4, #0]
 800443a:	07d1      	lsls	r1, r2, #31
 800443c:	d501      	bpl.n	8004442 <_printf_float+0x152>
 800443e:	3301      	adds	r3, #1
 8004440:	6123      	str	r3, [r4, #16]
 8004442:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0a5      	beq.n	8004396 <_printf_float+0xa6>
 800444a:	232d      	movs	r3, #45	; 0x2d
 800444c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004450:	e7a1      	b.n	8004396 <_printf_float+0xa6>
 8004452:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8004456:	f000 8177 	beq.w	8004748 <_printf_float+0x458>
 800445a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800445e:	d1bb      	bne.n	80043d8 <_printf_float+0xe8>
 8004460:	2900      	cmp	r1, #0
 8004462:	d1b9      	bne.n	80043d8 <_printf_float+0xe8>
 8004464:	2301      	movs	r3, #1
 8004466:	e7b6      	b.n	80043d6 <_printf_float+0xe6>
 8004468:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800446c:	d119      	bne.n	80044a2 <_printf_float+0x1b2>
 800446e:	2900      	cmp	r1, #0
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	dd0c      	ble.n	800448e <_printf_float+0x19e>
 8004474:	6121      	str	r1, [r4, #16]
 8004476:	b913      	cbnz	r3, 800447e <_printf_float+0x18e>
 8004478:	6822      	ldr	r2, [r4, #0]
 800447a:	07d2      	lsls	r2, r2, #31
 800447c:	d502      	bpl.n	8004484 <_printf_float+0x194>
 800447e:	3301      	adds	r3, #1
 8004480:	440b      	add	r3, r1
 8004482:	6123      	str	r3, [r4, #16]
 8004484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004486:	65a3      	str	r3, [r4, #88]	; 0x58
 8004488:	f04f 0900 	mov.w	r9, #0
 800448c:	e7d9      	b.n	8004442 <_printf_float+0x152>
 800448e:	b913      	cbnz	r3, 8004496 <_printf_float+0x1a6>
 8004490:	6822      	ldr	r2, [r4, #0]
 8004492:	07d0      	lsls	r0, r2, #31
 8004494:	d501      	bpl.n	800449a <_printf_float+0x1aa>
 8004496:	3302      	adds	r3, #2
 8004498:	e7f3      	b.n	8004482 <_printf_float+0x192>
 800449a:	2301      	movs	r3, #1
 800449c:	e7f1      	b.n	8004482 <_printf_float+0x192>
 800449e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80044a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80044a6:	4293      	cmp	r3, r2
 80044a8:	db05      	blt.n	80044b6 <_printf_float+0x1c6>
 80044aa:	6822      	ldr	r2, [r4, #0]
 80044ac:	6123      	str	r3, [r4, #16]
 80044ae:	07d1      	lsls	r1, r2, #31
 80044b0:	d5e8      	bpl.n	8004484 <_printf_float+0x194>
 80044b2:	3301      	adds	r3, #1
 80044b4:	e7e5      	b.n	8004482 <_printf_float+0x192>
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bfd4      	ite	le
 80044ba:	f1c3 0302 	rsble	r3, r3, #2
 80044be:	2301      	movgt	r3, #1
 80044c0:	4413      	add	r3, r2
 80044c2:	e7de      	b.n	8004482 <_printf_float+0x192>
 80044c4:	6823      	ldr	r3, [r4, #0]
 80044c6:	055a      	lsls	r2, r3, #21
 80044c8:	d407      	bmi.n	80044da <_printf_float+0x1ea>
 80044ca:	6923      	ldr	r3, [r4, #16]
 80044cc:	4642      	mov	r2, r8
 80044ce:	4631      	mov	r1, r6
 80044d0:	4628      	mov	r0, r5
 80044d2:	47b8      	blx	r7
 80044d4:	3001      	adds	r0, #1
 80044d6:	d12b      	bne.n	8004530 <_printf_float+0x240>
 80044d8:	e767      	b.n	80043aa <_printf_float+0xba>
 80044da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80044de:	f240 80dc 	bls.w	800469a <_printf_float+0x3aa>
 80044e2:	2200      	movs	r2, #0
 80044e4:	2300      	movs	r3, #0
 80044e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80044ea:	f7fc faf5 	bl	8000ad8 <__aeabi_dcmpeq>
 80044ee:	2800      	cmp	r0, #0
 80044f0:	d033      	beq.n	800455a <_printf_float+0x26a>
 80044f2:	2301      	movs	r3, #1
 80044f4:	4a41      	ldr	r2, [pc, #260]	; (80045fc <_printf_float+0x30c>)
 80044f6:	4631      	mov	r1, r6
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b8      	blx	r7
 80044fc:	3001      	adds	r0, #1
 80044fe:	f43f af54 	beq.w	80043aa <_printf_float+0xba>
 8004502:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004506:	429a      	cmp	r2, r3
 8004508:	db02      	blt.n	8004510 <_printf_float+0x220>
 800450a:	6823      	ldr	r3, [r4, #0]
 800450c:	07d8      	lsls	r0, r3, #31
 800450e:	d50f      	bpl.n	8004530 <_printf_float+0x240>
 8004510:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004514:	4631      	mov	r1, r6
 8004516:	4628      	mov	r0, r5
 8004518:	47b8      	blx	r7
 800451a:	3001      	adds	r0, #1
 800451c:	f43f af45 	beq.w	80043aa <_printf_float+0xba>
 8004520:	f04f 0800 	mov.w	r8, #0
 8004524:	f104 091a 	add.w	r9, r4, #26
 8004528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800452a:	3b01      	subs	r3, #1
 800452c:	4543      	cmp	r3, r8
 800452e:	dc09      	bgt.n	8004544 <_printf_float+0x254>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	079b      	lsls	r3, r3, #30
 8004534:	f100 8103 	bmi.w	800473e <_printf_float+0x44e>
 8004538:	68e0      	ldr	r0, [r4, #12]
 800453a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800453c:	4298      	cmp	r0, r3
 800453e:	bfb8      	it	lt
 8004540:	4618      	movlt	r0, r3
 8004542:	e734      	b.n	80043ae <_printf_float+0xbe>
 8004544:	2301      	movs	r3, #1
 8004546:	464a      	mov	r2, r9
 8004548:	4631      	mov	r1, r6
 800454a:	4628      	mov	r0, r5
 800454c:	47b8      	blx	r7
 800454e:	3001      	adds	r0, #1
 8004550:	f43f af2b 	beq.w	80043aa <_printf_float+0xba>
 8004554:	f108 0801 	add.w	r8, r8, #1
 8004558:	e7e6      	b.n	8004528 <_printf_float+0x238>
 800455a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800455c:	2b00      	cmp	r3, #0
 800455e:	dc2b      	bgt.n	80045b8 <_printf_float+0x2c8>
 8004560:	2301      	movs	r3, #1
 8004562:	4a26      	ldr	r2, [pc, #152]	; (80045fc <_printf_float+0x30c>)
 8004564:	4631      	mov	r1, r6
 8004566:	4628      	mov	r0, r5
 8004568:	47b8      	blx	r7
 800456a:	3001      	adds	r0, #1
 800456c:	f43f af1d 	beq.w	80043aa <_printf_float+0xba>
 8004570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004572:	b923      	cbnz	r3, 800457e <_printf_float+0x28e>
 8004574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004576:	b913      	cbnz	r3, 800457e <_printf_float+0x28e>
 8004578:	6823      	ldr	r3, [r4, #0]
 800457a:	07d9      	lsls	r1, r3, #31
 800457c:	d5d8      	bpl.n	8004530 <_printf_float+0x240>
 800457e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004582:	4631      	mov	r1, r6
 8004584:	4628      	mov	r0, r5
 8004586:	47b8      	blx	r7
 8004588:	3001      	adds	r0, #1
 800458a:	f43f af0e 	beq.w	80043aa <_printf_float+0xba>
 800458e:	f04f 0900 	mov.w	r9, #0
 8004592:	f104 0a1a 	add.w	sl, r4, #26
 8004596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004598:	425b      	negs	r3, r3
 800459a:	454b      	cmp	r3, r9
 800459c:	dc01      	bgt.n	80045a2 <_printf_float+0x2b2>
 800459e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045a0:	e794      	b.n	80044cc <_printf_float+0x1dc>
 80045a2:	2301      	movs	r3, #1
 80045a4:	4652      	mov	r2, sl
 80045a6:	4631      	mov	r1, r6
 80045a8:	4628      	mov	r0, r5
 80045aa:	47b8      	blx	r7
 80045ac:	3001      	adds	r0, #1
 80045ae:	f43f aefc 	beq.w	80043aa <_printf_float+0xba>
 80045b2:	f109 0901 	add.w	r9, r9, #1
 80045b6:	e7ee      	b.n	8004596 <_printf_float+0x2a6>
 80045b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045bc:	429a      	cmp	r2, r3
 80045be:	bfa8      	it	ge
 80045c0:	461a      	movge	r2, r3
 80045c2:	2a00      	cmp	r2, #0
 80045c4:	4691      	mov	r9, r2
 80045c6:	dd07      	ble.n	80045d8 <_printf_float+0x2e8>
 80045c8:	4613      	mov	r3, r2
 80045ca:	4631      	mov	r1, r6
 80045cc:	4642      	mov	r2, r8
 80045ce:	4628      	mov	r0, r5
 80045d0:	47b8      	blx	r7
 80045d2:	3001      	adds	r0, #1
 80045d4:	f43f aee9 	beq.w	80043aa <_printf_float+0xba>
 80045d8:	f104 031a 	add.w	r3, r4, #26
 80045dc:	f04f 0b00 	mov.w	fp, #0
 80045e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045e4:	9306      	str	r3, [sp, #24]
 80045e6:	e015      	b.n	8004614 <_printf_float+0x324>
 80045e8:	7fefffff 	.word	0x7fefffff
 80045ec:	08006a10 	.word	0x08006a10
 80045f0:	08006a0c 	.word	0x08006a0c
 80045f4:	08006a18 	.word	0x08006a18
 80045f8:	08006a14 	.word	0x08006a14
 80045fc:	08006a1c 	.word	0x08006a1c
 8004600:	2301      	movs	r3, #1
 8004602:	9a06      	ldr	r2, [sp, #24]
 8004604:	4631      	mov	r1, r6
 8004606:	4628      	mov	r0, r5
 8004608:	47b8      	blx	r7
 800460a:	3001      	adds	r0, #1
 800460c:	f43f aecd 	beq.w	80043aa <_printf_float+0xba>
 8004610:	f10b 0b01 	add.w	fp, fp, #1
 8004614:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004618:	ebaa 0309 	sub.w	r3, sl, r9
 800461c:	455b      	cmp	r3, fp
 800461e:	dcef      	bgt.n	8004600 <_printf_float+0x310>
 8004620:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004624:	429a      	cmp	r2, r3
 8004626:	44d0      	add	r8, sl
 8004628:	db15      	blt.n	8004656 <_printf_float+0x366>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	07da      	lsls	r2, r3, #31
 800462e:	d412      	bmi.n	8004656 <_printf_float+0x366>
 8004630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004632:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004634:	eba3 020a 	sub.w	r2, r3, sl
 8004638:	eba3 0a01 	sub.w	sl, r3, r1
 800463c:	4592      	cmp	sl, r2
 800463e:	bfa8      	it	ge
 8004640:	4692      	movge	sl, r2
 8004642:	f1ba 0f00 	cmp.w	sl, #0
 8004646:	dc0e      	bgt.n	8004666 <_printf_float+0x376>
 8004648:	f04f 0800 	mov.w	r8, #0
 800464c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004650:	f104 091a 	add.w	r9, r4, #26
 8004654:	e019      	b.n	800468a <_printf_float+0x39a>
 8004656:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800465a:	4631      	mov	r1, r6
 800465c:	4628      	mov	r0, r5
 800465e:	47b8      	blx	r7
 8004660:	3001      	adds	r0, #1
 8004662:	d1e5      	bne.n	8004630 <_printf_float+0x340>
 8004664:	e6a1      	b.n	80043aa <_printf_float+0xba>
 8004666:	4653      	mov	r3, sl
 8004668:	4642      	mov	r2, r8
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	d1e9      	bne.n	8004648 <_printf_float+0x358>
 8004674:	e699      	b.n	80043aa <_printf_float+0xba>
 8004676:	2301      	movs	r3, #1
 8004678:	464a      	mov	r2, r9
 800467a:	4631      	mov	r1, r6
 800467c:	4628      	mov	r0, r5
 800467e:	47b8      	blx	r7
 8004680:	3001      	adds	r0, #1
 8004682:	f43f ae92 	beq.w	80043aa <_printf_float+0xba>
 8004686:	f108 0801 	add.w	r8, r8, #1
 800468a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	eba3 030a 	sub.w	r3, r3, sl
 8004694:	4543      	cmp	r3, r8
 8004696:	dcee      	bgt.n	8004676 <_printf_float+0x386>
 8004698:	e74a      	b.n	8004530 <_printf_float+0x240>
 800469a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800469c:	2a01      	cmp	r2, #1
 800469e:	dc01      	bgt.n	80046a4 <_printf_float+0x3b4>
 80046a0:	07db      	lsls	r3, r3, #31
 80046a2:	d53a      	bpl.n	800471a <_printf_float+0x42a>
 80046a4:	2301      	movs	r3, #1
 80046a6:	4642      	mov	r2, r8
 80046a8:	4631      	mov	r1, r6
 80046aa:	4628      	mov	r0, r5
 80046ac:	47b8      	blx	r7
 80046ae:	3001      	adds	r0, #1
 80046b0:	f43f ae7b 	beq.w	80043aa <_printf_float+0xba>
 80046b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046b8:	4631      	mov	r1, r6
 80046ba:	4628      	mov	r0, r5
 80046bc:	47b8      	blx	r7
 80046be:	3001      	adds	r0, #1
 80046c0:	f108 0801 	add.w	r8, r8, #1
 80046c4:	f43f ae71 	beq.w	80043aa <_printf_float+0xba>
 80046c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046ca:	2200      	movs	r2, #0
 80046cc:	f103 3aff 	add.w	sl, r3, #4294967295
 80046d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80046d4:	2300      	movs	r3, #0
 80046d6:	f7fc f9ff 	bl	8000ad8 <__aeabi_dcmpeq>
 80046da:	b9c8      	cbnz	r0, 8004710 <_printf_float+0x420>
 80046dc:	4653      	mov	r3, sl
 80046de:	4642      	mov	r2, r8
 80046e0:	4631      	mov	r1, r6
 80046e2:	4628      	mov	r0, r5
 80046e4:	47b8      	blx	r7
 80046e6:	3001      	adds	r0, #1
 80046e8:	d10e      	bne.n	8004708 <_printf_float+0x418>
 80046ea:	e65e      	b.n	80043aa <_printf_float+0xba>
 80046ec:	2301      	movs	r3, #1
 80046ee:	4652      	mov	r2, sl
 80046f0:	4631      	mov	r1, r6
 80046f2:	4628      	mov	r0, r5
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	f43f ae57 	beq.w	80043aa <_printf_float+0xba>
 80046fc:	f108 0801 	add.w	r8, r8, #1
 8004700:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	4543      	cmp	r3, r8
 8004706:	dcf1      	bgt.n	80046ec <_printf_float+0x3fc>
 8004708:	464b      	mov	r3, r9
 800470a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800470e:	e6de      	b.n	80044ce <_printf_float+0x1de>
 8004710:	f04f 0800 	mov.w	r8, #0
 8004714:	f104 0a1a 	add.w	sl, r4, #26
 8004718:	e7f2      	b.n	8004700 <_printf_float+0x410>
 800471a:	2301      	movs	r3, #1
 800471c:	e7df      	b.n	80046de <_printf_float+0x3ee>
 800471e:	2301      	movs	r3, #1
 8004720:	464a      	mov	r2, r9
 8004722:	4631      	mov	r1, r6
 8004724:	4628      	mov	r0, r5
 8004726:	47b8      	blx	r7
 8004728:	3001      	adds	r0, #1
 800472a:	f43f ae3e 	beq.w	80043aa <_printf_float+0xba>
 800472e:	f108 0801 	add.w	r8, r8, #1
 8004732:	68e3      	ldr	r3, [r4, #12]
 8004734:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004736:	1a9b      	subs	r3, r3, r2
 8004738:	4543      	cmp	r3, r8
 800473a:	dcf0      	bgt.n	800471e <_printf_float+0x42e>
 800473c:	e6fc      	b.n	8004538 <_printf_float+0x248>
 800473e:	f04f 0800 	mov.w	r8, #0
 8004742:	f104 0919 	add.w	r9, r4, #25
 8004746:	e7f4      	b.n	8004732 <_printf_float+0x442>
 8004748:	2900      	cmp	r1, #0
 800474a:	f43f ae8b 	beq.w	8004464 <_printf_float+0x174>
 800474e:	2300      	movs	r3, #0
 8004750:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004754:	ab09      	add	r3, sp, #36	; 0x24
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	ec49 8b10 	vmov	d0, r8, r9
 800475c:	6022      	str	r2, [r4, #0]
 800475e:	f8cd a004 	str.w	sl, [sp, #4]
 8004762:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004766:	4628      	mov	r0, r5
 8004768:	f7ff fd2e 	bl	80041c8 <__cvt>
 800476c:	4680      	mov	r8, r0
 800476e:	e648      	b.n	8004402 <_printf_float+0x112>

08004770 <_printf_common>:
 8004770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004774:	4691      	mov	r9, r2
 8004776:	461f      	mov	r7, r3
 8004778:	688a      	ldr	r2, [r1, #8]
 800477a:	690b      	ldr	r3, [r1, #16]
 800477c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004780:	4293      	cmp	r3, r2
 8004782:	bfb8      	it	lt
 8004784:	4613      	movlt	r3, r2
 8004786:	f8c9 3000 	str.w	r3, [r9]
 800478a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800478e:	4606      	mov	r6, r0
 8004790:	460c      	mov	r4, r1
 8004792:	b112      	cbz	r2, 800479a <_printf_common+0x2a>
 8004794:	3301      	adds	r3, #1
 8004796:	f8c9 3000 	str.w	r3, [r9]
 800479a:	6823      	ldr	r3, [r4, #0]
 800479c:	0699      	lsls	r1, r3, #26
 800479e:	bf42      	ittt	mi
 80047a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80047a4:	3302      	addmi	r3, #2
 80047a6:	f8c9 3000 	strmi.w	r3, [r9]
 80047aa:	6825      	ldr	r5, [r4, #0]
 80047ac:	f015 0506 	ands.w	r5, r5, #6
 80047b0:	d107      	bne.n	80047c2 <_printf_common+0x52>
 80047b2:	f104 0a19 	add.w	sl, r4, #25
 80047b6:	68e3      	ldr	r3, [r4, #12]
 80047b8:	f8d9 2000 	ldr.w	r2, [r9]
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	42ab      	cmp	r3, r5
 80047c0:	dc28      	bgt.n	8004814 <_printf_common+0xa4>
 80047c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80047c6:	6822      	ldr	r2, [r4, #0]
 80047c8:	3300      	adds	r3, #0
 80047ca:	bf18      	it	ne
 80047cc:	2301      	movne	r3, #1
 80047ce:	0692      	lsls	r2, r2, #26
 80047d0:	d42d      	bmi.n	800482e <_printf_common+0xbe>
 80047d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047d6:	4639      	mov	r1, r7
 80047d8:	4630      	mov	r0, r6
 80047da:	47c0      	blx	r8
 80047dc:	3001      	adds	r0, #1
 80047de:	d020      	beq.n	8004822 <_printf_common+0xb2>
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	68e5      	ldr	r5, [r4, #12]
 80047e4:	f8d9 2000 	ldr.w	r2, [r9]
 80047e8:	f003 0306 	and.w	r3, r3, #6
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	bf08      	it	eq
 80047f0:	1aad      	subeq	r5, r5, r2
 80047f2:	68a3      	ldr	r3, [r4, #8]
 80047f4:	6922      	ldr	r2, [r4, #16]
 80047f6:	bf0c      	ite	eq
 80047f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047fc:	2500      	movne	r5, #0
 80047fe:	4293      	cmp	r3, r2
 8004800:	bfc4      	itt	gt
 8004802:	1a9b      	subgt	r3, r3, r2
 8004804:	18ed      	addgt	r5, r5, r3
 8004806:	f04f 0900 	mov.w	r9, #0
 800480a:	341a      	adds	r4, #26
 800480c:	454d      	cmp	r5, r9
 800480e:	d11a      	bne.n	8004846 <_printf_common+0xd6>
 8004810:	2000      	movs	r0, #0
 8004812:	e008      	b.n	8004826 <_printf_common+0xb6>
 8004814:	2301      	movs	r3, #1
 8004816:	4652      	mov	r2, sl
 8004818:	4639      	mov	r1, r7
 800481a:	4630      	mov	r0, r6
 800481c:	47c0      	blx	r8
 800481e:	3001      	adds	r0, #1
 8004820:	d103      	bne.n	800482a <_printf_common+0xba>
 8004822:	f04f 30ff 	mov.w	r0, #4294967295
 8004826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800482a:	3501      	adds	r5, #1
 800482c:	e7c3      	b.n	80047b6 <_printf_common+0x46>
 800482e:	18e1      	adds	r1, r4, r3
 8004830:	1c5a      	adds	r2, r3, #1
 8004832:	2030      	movs	r0, #48	; 0x30
 8004834:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004838:	4422      	add	r2, r4
 800483a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800483e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004842:	3302      	adds	r3, #2
 8004844:	e7c5      	b.n	80047d2 <_printf_common+0x62>
 8004846:	2301      	movs	r3, #1
 8004848:	4622      	mov	r2, r4
 800484a:	4639      	mov	r1, r7
 800484c:	4630      	mov	r0, r6
 800484e:	47c0      	blx	r8
 8004850:	3001      	adds	r0, #1
 8004852:	d0e6      	beq.n	8004822 <_printf_common+0xb2>
 8004854:	f109 0901 	add.w	r9, r9, #1
 8004858:	e7d8      	b.n	800480c <_printf_common+0x9c>
	...

0800485c <_printf_i>:
 800485c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004860:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004864:	460c      	mov	r4, r1
 8004866:	7e09      	ldrb	r1, [r1, #24]
 8004868:	b085      	sub	sp, #20
 800486a:	296e      	cmp	r1, #110	; 0x6e
 800486c:	4617      	mov	r7, r2
 800486e:	4606      	mov	r6, r0
 8004870:	4698      	mov	r8, r3
 8004872:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004874:	f000 80b3 	beq.w	80049de <_printf_i+0x182>
 8004878:	d822      	bhi.n	80048c0 <_printf_i+0x64>
 800487a:	2963      	cmp	r1, #99	; 0x63
 800487c:	d036      	beq.n	80048ec <_printf_i+0x90>
 800487e:	d80a      	bhi.n	8004896 <_printf_i+0x3a>
 8004880:	2900      	cmp	r1, #0
 8004882:	f000 80b9 	beq.w	80049f8 <_printf_i+0x19c>
 8004886:	2958      	cmp	r1, #88	; 0x58
 8004888:	f000 8083 	beq.w	8004992 <_printf_i+0x136>
 800488c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004890:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004894:	e032      	b.n	80048fc <_printf_i+0xa0>
 8004896:	2964      	cmp	r1, #100	; 0x64
 8004898:	d001      	beq.n	800489e <_printf_i+0x42>
 800489a:	2969      	cmp	r1, #105	; 0x69
 800489c:	d1f6      	bne.n	800488c <_printf_i+0x30>
 800489e:	6820      	ldr	r0, [r4, #0]
 80048a0:	6813      	ldr	r3, [r2, #0]
 80048a2:	0605      	lsls	r5, r0, #24
 80048a4:	f103 0104 	add.w	r1, r3, #4
 80048a8:	d52a      	bpl.n	8004900 <_printf_i+0xa4>
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6011      	str	r1, [r2, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	da03      	bge.n	80048ba <_printf_i+0x5e>
 80048b2:	222d      	movs	r2, #45	; 0x2d
 80048b4:	425b      	negs	r3, r3
 80048b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80048ba:	486f      	ldr	r0, [pc, #444]	; (8004a78 <_printf_i+0x21c>)
 80048bc:	220a      	movs	r2, #10
 80048be:	e039      	b.n	8004934 <_printf_i+0xd8>
 80048c0:	2973      	cmp	r1, #115	; 0x73
 80048c2:	f000 809d 	beq.w	8004a00 <_printf_i+0x1a4>
 80048c6:	d808      	bhi.n	80048da <_printf_i+0x7e>
 80048c8:	296f      	cmp	r1, #111	; 0x6f
 80048ca:	d020      	beq.n	800490e <_printf_i+0xb2>
 80048cc:	2970      	cmp	r1, #112	; 0x70
 80048ce:	d1dd      	bne.n	800488c <_printf_i+0x30>
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	f043 0320 	orr.w	r3, r3, #32
 80048d6:	6023      	str	r3, [r4, #0]
 80048d8:	e003      	b.n	80048e2 <_printf_i+0x86>
 80048da:	2975      	cmp	r1, #117	; 0x75
 80048dc:	d017      	beq.n	800490e <_printf_i+0xb2>
 80048de:	2978      	cmp	r1, #120	; 0x78
 80048e0:	d1d4      	bne.n	800488c <_printf_i+0x30>
 80048e2:	2378      	movs	r3, #120	; 0x78
 80048e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048e8:	4864      	ldr	r0, [pc, #400]	; (8004a7c <_printf_i+0x220>)
 80048ea:	e055      	b.n	8004998 <_printf_i+0x13c>
 80048ec:	6813      	ldr	r3, [r2, #0]
 80048ee:	1d19      	adds	r1, r3, #4
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6011      	str	r1, [r2, #0]
 80048f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048fc:	2301      	movs	r3, #1
 80048fe:	e08c      	b.n	8004a1a <_printf_i+0x1be>
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6011      	str	r1, [r2, #0]
 8004904:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004908:	bf18      	it	ne
 800490a:	b21b      	sxthne	r3, r3
 800490c:	e7cf      	b.n	80048ae <_printf_i+0x52>
 800490e:	6813      	ldr	r3, [r2, #0]
 8004910:	6825      	ldr	r5, [r4, #0]
 8004912:	1d18      	adds	r0, r3, #4
 8004914:	6010      	str	r0, [r2, #0]
 8004916:	0628      	lsls	r0, r5, #24
 8004918:	d501      	bpl.n	800491e <_printf_i+0xc2>
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	e002      	b.n	8004924 <_printf_i+0xc8>
 800491e:	0668      	lsls	r0, r5, #25
 8004920:	d5fb      	bpl.n	800491a <_printf_i+0xbe>
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	4854      	ldr	r0, [pc, #336]	; (8004a78 <_printf_i+0x21c>)
 8004926:	296f      	cmp	r1, #111	; 0x6f
 8004928:	bf14      	ite	ne
 800492a:	220a      	movne	r2, #10
 800492c:	2208      	moveq	r2, #8
 800492e:	2100      	movs	r1, #0
 8004930:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004934:	6865      	ldr	r5, [r4, #4]
 8004936:	60a5      	str	r5, [r4, #8]
 8004938:	2d00      	cmp	r5, #0
 800493a:	f2c0 8095 	blt.w	8004a68 <_printf_i+0x20c>
 800493e:	6821      	ldr	r1, [r4, #0]
 8004940:	f021 0104 	bic.w	r1, r1, #4
 8004944:	6021      	str	r1, [r4, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d13d      	bne.n	80049c6 <_printf_i+0x16a>
 800494a:	2d00      	cmp	r5, #0
 800494c:	f040 808e 	bne.w	8004a6c <_printf_i+0x210>
 8004950:	4665      	mov	r5, ip
 8004952:	2a08      	cmp	r2, #8
 8004954:	d10b      	bne.n	800496e <_printf_i+0x112>
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	07db      	lsls	r3, r3, #31
 800495a:	d508      	bpl.n	800496e <_printf_i+0x112>
 800495c:	6923      	ldr	r3, [r4, #16]
 800495e:	6862      	ldr	r2, [r4, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	bfde      	ittt	le
 8004964:	2330      	movle	r3, #48	; 0x30
 8004966:	f805 3c01 	strble.w	r3, [r5, #-1]
 800496a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800496e:	ebac 0305 	sub.w	r3, ip, r5
 8004972:	6123      	str	r3, [r4, #16]
 8004974:	f8cd 8000 	str.w	r8, [sp]
 8004978:	463b      	mov	r3, r7
 800497a:	aa03      	add	r2, sp, #12
 800497c:	4621      	mov	r1, r4
 800497e:	4630      	mov	r0, r6
 8004980:	f7ff fef6 	bl	8004770 <_printf_common>
 8004984:	3001      	adds	r0, #1
 8004986:	d14d      	bne.n	8004a24 <_printf_i+0x1c8>
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	b005      	add	sp, #20
 800498e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004992:	4839      	ldr	r0, [pc, #228]	; (8004a78 <_printf_i+0x21c>)
 8004994:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004998:	6813      	ldr	r3, [r2, #0]
 800499a:	6821      	ldr	r1, [r4, #0]
 800499c:	1d1d      	adds	r5, r3, #4
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6015      	str	r5, [r2, #0]
 80049a2:	060a      	lsls	r2, r1, #24
 80049a4:	d50b      	bpl.n	80049be <_printf_i+0x162>
 80049a6:	07ca      	lsls	r2, r1, #31
 80049a8:	bf44      	itt	mi
 80049aa:	f041 0120 	orrmi.w	r1, r1, #32
 80049ae:	6021      	strmi	r1, [r4, #0]
 80049b0:	b91b      	cbnz	r3, 80049ba <_printf_i+0x15e>
 80049b2:	6822      	ldr	r2, [r4, #0]
 80049b4:	f022 0220 	bic.w	r2, r2, #32
 80049b8:	6022      	str	r2, [r4, #0]
 80049ba:	2210      	movs	r2, #16
 80049bc:	e7b7      	b.n	800492e <_printf_i+0xd2>
 80049be:	064d      	lsls	r5, r1, #25
 80049c0:	bf48      	it	mi
 80049c2:	b29b      	uxthmi	r3, r3
 80049c4:	e7ef      	b.n	80049a6 <_printf_i+0x14a>
 80049c6:	4665      	mov	r5, ip
 80049c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80049cc:	fb02 3311 	mls	r3, r2, r1, r3
 80049d0:	5cc3      	ldrb	r3, [r0, r3]
 80049d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80049d6:	460b      	mov	r3, r1
 80049d8:	2900      	cmp	r1, #0
 80049da:	d1f5      	bne.n	80049c8 <_printf_i+0x16c>
 80049dc:	e7b9      	b.n	8004952 <_printf_i+0xf6>
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	6825      	ldr	r5, [r4, #0]
 80049e2:	6961      	ldr	r1, [r4, #20]
 80049e4:	1d18      	adds	r0, r3, #4
 80049e6:	6010      	str	r0, [r2, #0]
 80049e8:	0628      	lsls	r0, r5, #24
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	d501      	bpl.n	80049f2 <_printf_i+0x196>
 80049ee:	6019      	str	r1, [r3, #0]
 80049f0:	e002      	b.n	80049f8 <_printf_i+0x19c>
 80049f2:	066a      	lsls	r2, r5, #25
 80049f4:	d5fb      	bpl.n	80049ee <_printf_i+0x192>
 80049f6:	8019      	strh	r1, [r3, #0]
 80049f8:	2300      	movs	r3, #0
 80049fa:	6123      	str	r3, [r4, #16]
 80049fc:	4665      	mov	r5, ip
 80049fe:	e7b9      	b.n	8004974 <_printf_i+0x118>
 8004a00:	6813      	ldr	r3, [r2, #0]
 8004a02:	1d19      	adds	r1, r3, #4
 8004a04:	6011      	str	r1, [r2, #0]
 8004a06:	681d      	ldr	r5, [r3, #0]
 8004a08:	6862      	ldr	r2, [r4, #4]
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4628      	mov	r0, r5
 8004a0e:	f7fb fbef 	bl	80001f0 <memchr>
 8004a12:	b108      	cbz	r0, 8004a18 <_printf_i+0x1bc>
 8004a14:	1b40      	subs	r0, r0, r5
 8004a16:	6060      	str	r0, [r4, #4]
 8004a18:	6863      	ldr	r3, [r4, #4]
 8004a1a:	6123      	str	r3, [r4, #16]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a22:	e7a7      	b.n	8004974 <_printf_i+0x118>
 8004a24:	6923      	ldr	r3, [r4, #16]
 8004a26:	462a      	mov	r2, r5
 8004a28:	4639      	mov	r1, r7
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	47c0      	blx	r8
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d0aa      	beq.n	8004988 <_printf_i+0x12c>
 8004a32:	6823      	ldr	r3, [r4, #0]
 8004a34:	079b      	lsls	r3, r3, #30
 8004a36:	d413      	bmi.n	8004a60 <_printf_i+0x204>
 8004a38:	68e0      	ldr	r0, [r4, #12]
 8004a3a:	9b03      	ldr	r3, [sp, #12]
 8004a3c:	4298      	cmp	r0, r3
 8004a3e:	bfb8      	it	lt
 8004a40:	4618      	movlt	r0, r3
 8004a42:	e7a3      	b.n	800498c <_printf_i+0x130>
 8004a44:	2301      	movs	r3, #1
 8004a46:	464a      	mov	r2, r9
 8004a48:	4639      	mov	r1, r7
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	47c0      	blx	r8
 8004a4e:	3001      	adds	r0, #1
 8004a50:	d09a      	beq.n	8004988 <_printf_i+0x12c>
 8004a52:	3501      	adds	r5, #1
 8004a54:	68e3      	ldr	r3, [r4, #12]
 8004a56:	9a03      	ldr	r2, [sp, #12]
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	42ab      	cmp	r3, r5
 8004a5c:	dcf2      	bgt.n	8004a44 <_printf_i+0x1e8>
 8004a5e:	e7eb      	b.n	8004a38 <_printf_i+0x1dc>
 8004a60:	2500      	movs	r5, #0
 8004a62:	f104 0919 	add.w	r9, r4, #25
 8004a66:	e7f5      	b.n	8004a54 <_printf_i+0x1f8>
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1ac      	bne.n	80049c6 <_printf_i+0x16a>
 8004a6c:	7803      	ldrb	r3, [r0, #0]
 8004a6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a76:	e76c      	b.n	8004952 <_printf_i+0xf6>
 8004a78:	08006a1e 	.word	0x08006a1e
 8004a7c:	08006a2f 	.word	0x08006a2f

08004a80 <iprintf>:
 8004a80:	b40f      	push	{r0, r1, r2, r3}
 8004a82:	4b0a      	ldr	r3, [pc, #40]	; (8004aac <iprintf+0x2c>)
 8004a84:	b513      	push	{r0, r1, r4, lr}
 8004a86:	681c      	ldr	r4, [r3, #0]
 8004a88:	b124      	cbz	r4, 8004a94 <iprintf+0x14>
 8004a8a:	69a3      	ldr	r3, [r4, #24]
 8004a8c:	b913      	cbnz	r3, 8004a94 <iprintf+0x14>
 8004a8e:	4620      	mov	r0, r4
 8004a90:	f001 f882 	bl	8005b98 <__sinit>
 8004a94:	ab05      	add	r3, sp, #20
 8004a96:	9a04      	ldr	r2, [sp, #16]
 8004a98:	68a1      	ldr	r1, [r4, #8]
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f001 fd45 	bl	800652c <_vfiprintf_r>
 8004aa2:	b002      	add	sp, #8
 8004aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa8:	b004      	add	sp, #16
 8004aaa:	4770      	bx	lr
 8004aac:	2000000c 	.word	0x2000000c

08004ab0 <_puts_r>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	460e      	mov	r6, r1
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	b118      	cbz	r0, 8004ac0 <_puts_r+0x10>
 8004ab8:	6983      	ldr	r3, [r0, #24]
 8004aba:	b90b      	cbnz	r3, 8004ac0 <_puts_r+0x10>
 8004abc:	f001 f86c 	bl	8005b98 <__sinit>
 8004ac0:	69ab      	ldr	r3, [r5, #24]
 8004ac2:	68ac      	ldr	r4, [r5, #8]
 8004ac4:	b913      	cbnz	r3, 8004acc <_puts_r+0x1c>
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	f001 f866 	bl	8005b98 <__sinit>
 8004acc:	4b23      	ldr	r3, [pc, #140]	; (8004b5c <_puts_r+0xac>)
 8004ace:	429c      	cmp	r4, r3
 8004ad0:	d117      	bne.n	8004b02 <_puts_r+0x52>
 8004ad2:	686c      	ldr	r4, [r5, #4]
 8004ad4:	89a3      	ldrh	r3, [r4, #12]
 8004ad6:	071b      	lsls	r3, r3, #28
 8004ad8:	d51d      	bpl.n	8004b16 <_puts_r+0x66>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	b1db      	cbz	r3, 8004b16 <_puts_r+0x66>
 8004ade:	3e01      	subs	r6, #1
 8004ae0:	68a3      	ldr	r3, [r4, #8]
 8004ae2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	60a3      	str	r3, [r4, #8]
 8004aea:	b9e9      	cbnz	r1, 8004b28 <_puts_r+0x78>
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	da2e      	bge.n	8004b4e <_puts_r+0x9e>
 8004af0:	4622      	mov	r2, r4
 8004af2:	210a      	movs	r1, #10
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 f859 	bl	8004bac <__swbuf_r>
 8004afa:	3001      	adds	r0, #1
 8004afc:	d011      	beq.n	8004b22 <_puts_r+0x72>
 8004afe:	200a      	movs	r0, #10
 8004b00:	e011      	b.n	8004b26 <_puts_r+0x76>
 8004b02:	4b17      	ldr	r3, [pc, #92]	; (8004b60 <_puts_r+0xb0>)
 8004b04:	429c      	cmp	r4, r3
 8004b06:	d101      	bne.n	8004b0c <_puts_r+0x5c>
 8004b08:	68ac      	ldr	r4, [r5, #8]
 8004b0a:	e7e3      	b.n	8004ad4 <_puts_r+0x24>
 8004b0c:	4b15      	ldr	r3, [pc, #84]	; (8004b64 <_puts_r+0xb4>)
 8004b0e:	429c      	cmp	r4, r3
 8004b10:	bf08      	it	eq
 8004b12:	68ec      	ldreq	r4, [r5, #12]
 8004b14:	e7de      	b.n	8004ad4 <_puts_r+0x24>
 8004b16:	4621      	mov	r1, r4
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 f899 	bl	8004c50 <__swsetup_r>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	d0dd      	beq.n	8004ade <_puts_r+0x2e>
 8004b22:	f04f 30ff 	mov.w	r0, #4294967295
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	da04      	bge.n	8004b36 <_puts_r+0x86>
 8004b2c:	69a2      	ldr	r2, [r4, #24]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	dc06      	bgt.n	8004b40 <_puts_r+0x90>
 8004b32:	290a      	cmp	r1, #10
 8004b34:	d004      	beq.n	8004b40 <_puts_r+0x90>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	6022      	str	r2, [r4, #0]
 8004b3c:	7019      	strb	r1, [r3, #0]
 8004b3e:	e7cf      	b.n	8004ae0 <_puts_r+0x30>
 8004b40:	4622      	mov	r2, r4
 8004b42:	4628      	mov	r0, r5
 8004b44:	f000 f832 	bl	8004bac <__swbuf_r>
 8004b48:	3001      	adds	r0, #1
 8004b4a:	d1c9      	bne.n	8004ae0 <_puts_r+0x30>
 8004b4c:	e7e9      	b.n	8004b22 <_puts_r+0x72>
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	200a      	movs	r0, #10
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	6022      	str	r2, [r4, #0]
 8004b56:	7018      	strb	r0, [r3, #0]
 8004b58:	e7e5      	b.n	8004b26 <_puts_r+0x76>
 8004b5a:	bf00      	nop
 8004b5c:	08006a70 	.word	0x08006a70
 8004b60:	08006a90 	.word	0x08006a90
 8004b64:	08006a50 	.word	0x08006a50

08004b68 <puts>:
 8004b68:	4b02      	ldr	r3, [pc, #8]	; (8004b74 <puts+0xc>)
 8004b6a:	4601      	mov	r1, r0
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	f7ff bf9f 	b.w	8004ab0 <_puts_r>
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c

08004b78 <strstr>:
 8004b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b7a:	7803      	ldrb	r3, [r0, #0]
 8004b7c:	b17b      	cbz	r3, 8004b9e <strstr+0x26>
 8004b7e:	4604      	mov	r4, r0
 8004b80:	7823      	ldrb	r3, [r4, #0]
 8004b82:	4620      	mov	r0, r4
 8004b84:	1c66      	adds	r6, r4, #1
 8004b86:	b17b      	cbz	r3, 8004ba8 <strstr+0x30>
 8004b88:	1e4a      	subs	r2, r1, #1
 8004b8a:	1e63      	subs	r3, r4, #1
 8004b8c:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8004b90:	b14d      	cbz	r5, 8004ba6 <strstr+0x2e>
 8004b92:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004b96:	42af      	cmp	r7, r5
 8004b98:	4634      	mov	r4, r6
 8004b9a:	d0f7      	beq.n	8004b8c <strstr+0x14>
 8004b9c:	e7f0      	b.n	8004b80 <strstr+0x8>
 8004b9e:	780b      	ldrb	r3, [r1, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	bf18      	it	ne
 8004ba4:	2000      	movne	r0, #0
 8004ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	e7fc      	b.n	8004ba6 <strstr+0x2e>

08004bac <__swbuf_r>:
 8004bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bae:	460e      	mov	r6, r1
 8004bb0:	4614      	mov	r4, r2
 8004bb2:	4605      	mov	r5, r0
 8004bb4:	b118      	cbz	r0, 8004bbe <__swbuf_r+0x12>
 8004bb6:	6983      	ldr	r3, [r0, #24]
 8004bb8:	b90b      	cbnz	r3, 8004bbe <__swbuf_r+0x12>
 8004bba:	f000 ffed 	bl	8005b98 <__sinit>
 8004bbe:	4b21      	ldr	r3, [pc, #132]	; (8004c44 <__swbuf_r+0x98>)
 8004bc0:	429c      	cmp	r4, r3
 8004bc2:	d12a      	bne.n	8004c1a <__swbuf_r+0x6e>
 8004bc4:	686c      	ldr	r4, [r5, #4]
 8004bc6:	69a3      	ldr	r3, [r4, #24]
 8004bc8:	60a3      	str	r3, [r4, #8]
 8004bca:	89a3      	ldrh	r3, [r4, #12]
 8004bcc:	071a      	lsls	r2, r3, #28
 8004bce:	d52e      	bpl.n	8004c2e <__swbuf_r+0x82>
 8004bd0:	6923      	ldr	r3, [r4, #16]
 8004bd2:	b363      	cbz	r3, 8004c2e <__swbuf_r+0x82>
 8004bd4:	6923      	ldr	r3, [r4, #16]
 8004bd6:	6820      	ldr	r0, [r4, #0]
 8004bd8:	1ac0      	subs	r0, r0, r3
 8004bda:	6963      	ldr	r3, [r4, #20]
 8004bdc:	b2f6      	uxtb	r6, r6
 8004bde:	4283      	cmp	r3, r0
 8004be0:	4637      	mov	r7, r6
 8004be2:	dc04      	bgt.n	8004bee <__swbuf_r+0x42>
 8004be4:	4621      	mov	r1, r4
 8004be6:	4628      	mov	r0, r5
 8004be8:	f000 ff6c 	bl	8005ac4 <_fflush_r>
 8004bec:	bb28      	cbnz	r0, 8004c3a <__swbuf_r+0x8e>
 8004bee:	68a3      	ldr	r3, [r4, #8]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	60a3      	str	r3, [r4, #8]
 8004bf4:	6823      	ldr	r3, [r4, #0]
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	6022      	str	r2, [r4, #0]
 8004bfa:	701e      	strb	r6, [r3, #0]
 8004bfc:	6963      	ldr	r3, [r4, #20]
 8004bfe:	3001      	adds	r0, #1
 8004c00:	4283      	cmp	r3, r0
 8004c02:	d004      	beq.n	8004c0e <__swbuf_r+0x62>
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	07db      	lsls	r3, r3, #31
 8004c08:	d519      	bpl.n	8004c3e <__swbuf_r+0x92>
 8004c0a:	2e0a      	cmp	r6, #10
 8004c0c:	d117      	bne.n	8004c3e <__swbuf_r+0x92>
 8004c0e:	4621      	mov	r1, r4
 8004c10:	4628      	mov	r0, r5
 8004c12:	f000 ff57 	bl	8005ac4 <_fflush_r>
 8004c16:	b190      	cbz	r0, 8004c3e <__swbuf_r+0x92>
 8004c18:	e00f      	b.n	8004c3a <__swbuf_r+0x8e>
 8004c1a:	4b0b      	ldr	r3, [pc, #44]	; (8004c48 <__swbuf_r+0x9c>)
 8004c1c:	429c      	cmp	r4, r3
 8004c1e:	d101      	bne.n	8004c24 <__swbuf_r+0x78>
 8004c20:	68ac      	ldr	r4, [r5, #8]
 8004c22:	e7d0      	b.n	8004bc6 <__swbuf_r+0x1a>
 8004c24:	4b09      	ldr	r3, [pc, #36]	; (8004c4c <__swbuf_r+0xa0>)
 8004c26:	429c      	cmp	r4, r3
 8004c28:	bf08      	it	eq
 8004c2a:	68ec      	ldreq	r4, [r5, #12]
 8004c2c:	e7cb      	b.n	8004bc6 <__swbuf_r+0x1a>
 8004c2e:	4621      	mov	r1, r4
 8004c30:	4628      	mov	r0, r5
 8004c32:	f000 f80d 	bl	8004c50 <__swsetup_r>
 8004c36:	2800      	cmp	r0, #0
 8004c38:	d0cc      	beq.n	8004bd4 <__swbuf_r+0x28>
 8004c3a:	f04f 37ff 	mov.w	r7, #4294967295
 8004c3e:	4638      	mov	r0, r7
 8004c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c42:	bf00      	nop
 8004c44:	08006a70 	.word	0x08006a70
 8004c48:	08006a90 	.word	0x08006a90
 8004c4c:	08006a50 	.word	0x08006a50

08004c50 <__swsetup_r>:
 8004c50:	4b32      	ldr	r3, [pc, #200]	; (8004d1c <__swsetup_r+0xcc>)
 8004c52:	b570      	push	{r4, r5, r6, lr}
 8004c54:	681d      	ldr	r5, [r3, #0]
 8004c56:	4606      	mov	r6, r0
 8004c58:	460c      	mov	r4, r1
 8004c5a:	b125      	cbz	r5, 8004c66 <__swsetup_r+0x16>
 8004c5c:	69ab      	ldr	r3, [r5, #24]
 8004c5e:	b913      	cbnz	r3, 8004c66 <__swsetup_r+0x16>
 8004c60:	4628      	mov	r0, r5
 8004c62:	f000 ff99 	bl	8005b98 <__sinit>
 8004c66:	4b2e      	ldr	r3, [pc, #184]	; (8004d20 <__swsetup_r+0xd0>)
 8004c68:	429c      	cmp	r4, r3
 8004c6a:	d10f      	bne.n	8004c8c <__swsetup_r+0x3c>
 8004c6c:	686c      	ldr	r4, [r5, #4]
 8004c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	0715      	lsls	r5, r2, #28
 8004c76:	d42c      	bmi.n	8004cd2 <__swsetup_r+0x82>
 8004c78:	06d0      	lsls	r0, r2, #27
 8004c7a:	d411      	bmi.n	8004ca0 <__swsetup_r+0x50>
 8004c7c:	2209      	movs	r2, #9
 8004c7e:	6032      	str	r2, [r6, #0]
 8004c80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c84:	81a3      	strh	r3, [r4, #12]
 8004c86:	f04f 30ff 	mov.w	r0, #4294967295
 8004c8a:	e03e      	b.n	8004d0a <__swsetup_r+0xba>
 8004c8c:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <__swsetup_r+0xd4>)
 8004c8e:	429c      	cmp	r4, r3
 8004c90:	d101      	bne.n	8004c96 <__swsetup_r+0x46>
 8004c92:	68ac      	ldr	r4, [r5, #8]
 8004c94:	e7eb      	b.n	8004c6e <__swsetup_r+0x1e>
 8004c96:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <__swsetup_r+0xd8>)
 8004c98:	429c      	cmp	r4, r3
 8004c9a:	bf08      	it	eq
 8004c9c:	68ec      	ldreq	r4, [r5, #12]
 8004c9e:	e7e6      	b.n	8004c6e <__swsetup_r+0x1e>
 8004ca0:	0751      	lsls	r1, r2, #29
 8004ca2:	d512      	bpl.n	8004cca <__swsetup_r+0x7a>
 8004ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ca6:	b141      	cbz	r1, 8004cba <__swsetup_r+0x6a>
 8004ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cac:	4299      	cmp	r1, r3
 8004cae:	d002      	beq.n	8004cb6 <__swsetup_r+0x66>
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f001 fb69 	bl	8006388 <_free_r>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8004cba:	89a3      	ldrh	r3, [r4, #12]
 8004cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6063      	str	r3, [r4, #4]
 8004cc6:	6923      	ldr	r3, [r4, #16]
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	f043 0308 	orr.w	r3, r3, #8
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	b94b      	cbnz	r3, 8004cea <__swsetup_r+0x9a>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce0:	d003      	beq.n	8004cea <__swsetup_r+0x9a>
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	f001 f813 	bl	8005d10 <__smakebuf_r>
 8004cea:	89a2      	ldrh	r2, [r4, #12]
 8004cec:	f012 0301 	ands.w	r3, r2, #1
 8004cf0:	d00c      	beq.n	8004d0c <__swsetup_r+0xbc>
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60a3      	str	r3, [r4, #8]
 8004cf6:	6963      	ldr	r3, [r4, #20]
 8004cf8:	425b      	negs	r3, r3
 8004cfa:	61a3      	str	r3, [r4, #24]
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	b953      	cbnz	r3, 8004d16 <__swsetup_r+0xc6>
 8004d00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004d08:	d1ba      	bne.n	8004c80 <__swsetup_r+0x30>
 8004d0a:	bd70      	pop	{r4, r5, r6, pc}
 8004d0c:	0792      	lsls	r2, r2, #30
 8004d0e:	bf58      	it	pl
 8004d10:	6963      	ldrpl	r3, [r4, #20]
 8004d12:	60a3      	str	r3, [r4, #8]
 8004d14:	e7f2      	b.n	8004cfc <__swsetup_r+0xac>
 8004d16:	2000      	movs	r0, #0
 8004d18:	e7f7      	b.n	8004d0a <__swsetup_r+0xba>
 8004d1a:	bf00      	nop
 8004d1c:	2000000c 	.word	0x2000000c
 8004d20:	08006a70 	.word	0x08006a70
 8004d24:	08006a90 	.word	0x08006a90
 8004d28:	08006a50 	.word	0x08006a50

08004d2c <quorem>:
 8004d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d30:	6903      	ldr	r3, [r0, #16]
 8004d32:	690c      	ldr	r4, [r1, #16]
 8004d34:	42a3      	cmp	r3, r4
 8004d36:	4680      	mov	r8, r0
 8004d38:	f2c0 8082 	blt.w	8004e40 <quorem+0x114>
 8004d3c:	3c01      	subs	r4, #1
 8004d3e:	f101 0714 	add.w	r7, r1, #20
 8004d42:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004d46:	f100 0614 	add.w	r6, r0, #20
 8004d4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004d4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004d52:	eb06 030c 	add.w	r3, r6, ip
 8004d56:	3501      	adds	r5, #1
 8004d58:	eb07 090c 	add.w	r9, r7, ip
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004d62:	b395      	cbz	r5, 8004dca <quorem+0x9e>
 8004d64:	f04f 0a00 	mov.w	sl, #0
 8004d68:	4638      	mov	r0, r7
 8004d6a:	46b6      	mov	lr, r6
 8004d6c:	46d3      	mov	fp, sl
 8004d6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d72:	b293      	uxth	r3, r2
 8004d74:	fb05 a303 	mla	r3, r5, r3, sl
 8004d78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	ebab 0303 	sub.w	r3, fp, r3
 8004d82:	0c12      	lsrs	r2, r2, #16
 8004d84:	f8de b000 	ldr.w	fp, [lr]
 8004d88:	fb05 a202 	mla	r2, r5, r2, sl
 8004d8c:	fa13 f38b 	uxtah	r3, r3, fp
 8004d90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004d94:	fa1f fb82 	uxth.w	fp, r2
 8004d98:	f8de 2000 	ldr.w	r2, [lr]
 8004d9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004da0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004daa:	4581      	cmp	r9, r0
 8004dac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004db0:	f84e 3b04 	str.w	r3, [lr], #4
 8004db4:	d2db      	bcs.n	8004d6e <quorem+0x42>
 8004db6:	f856 300c 	ldr.w	r3, [r6, ip]
 8004dba:	b933      	cbnz	r3, 8004dca <quorem+0x9e>
 8004dbc:	9b01      	ldr	r3, [sp, #4]
 8004dbe:	3b04      	subs	r3, #4
 8004dc0:	429e      	cmp	r6, r3
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	d330      	bcc.n	8004e28 <quorem+0xfc>
 8004dc6:	f8c8 4010 	str.w	r4, [r8, #16]
 8004dca:	4640      	mov	r0, r8
 8004dcc:	f001 fa08 	bl	80061e0 <__mcmp>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	db25      	blt.n	8004e20 <quorem+0xf4>
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	f04f 0c00 	mov.w	ip, #0
 8004ddc:	f857 2b04 	ldr.w	r2, [r7], #4
 8004de0:	f8d0 e000 	ldr.w	lr, [r0]
 8004de4:	b293      	uxth	r3, r2
 8004de6:	ebac 0303 	sub.w	r3, ip, r3
 8004dea:	0c12      	lsrs	r2, r2, #16
 8004dec:	fa13 f38e 	uxtah	r3, r3, lr
 8004df0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004df4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dfe:	45b9      	cmp	r9, r7
 8004e00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004e04:	f840 3b04 	str.w	r3, [r0], #4
 8004e08:	d2e8      	bcs.n	8004ddc <quorem+0xb0>
 8004e0a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004e0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004e12:	b92a      	cbnz	r2, 8004e20 <quorem+0xf4>
 8004e14:	3b04      	subs	r3, #4
 8004e16:	429e      	cmp	r6, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	d30b      	bcc.n	8004e34 <quorem+0x108>
 8004e1c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004e20:	4628      	mov	r0, r5
 8004e22:	b003      	add	sp, #12
 8004e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	3b04      	subs	r3, #4
 8004e2c:	2a00      	cmp	r2, #0
 8004e2e:	d1ca      	bne.n	8004dc6 <quorem+0x9a>
 8004e30:	3c01      	subs	r4, #1
 8004e32:	e7c5      	b.n	8004dc0 <quorem+0x94>
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	3b04      	subs	r3, #4
 8004e38:	2a00      	cmp	r2, #0
 8004e3a:	d1ef      	bne.n	8004e1c <quorem+0xf0>
 8004e3c:	3c01      	subs	r4, #1
 8004e3e:	e7ea      	b.n	8004e16 <quorem+0xea>
 8004e40:	2000      	movs	r0, #0
 8004e42:	e7ee      	b.n	8004e22 <quorem+0xf6>
 8004e44:	0000      	movs	r0, r0
	...

08004e48 <_dtoa_r>:
 8004e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e4c:	ec57 6b10 	vmov	r6, r7, d0
 8004e50:	b097      	sub	sp, #92	; 0x5c
 8004e52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e54:	9106      	str	r1, [sp, #24]
 8004e56:	4604      	mov	r4, r0
 8004e58:	920b      	str	r2, [sp, #44]	; 0x2c
 8004e5a:	9312      	str	r3, [sp, #72]	; 0x48
 8004e5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e60:	e9cd 6700 	strd	r6, r7, [sp]
 8004e64:	b93d      	cbnz	r5, 8004e76 <_dtoa_r+0x2e>
 8004e66:	2010      	movs	r0, #16
 8004e68:	f000 ff92 	bl	8005d90 <malloc>
 8004e6c:	6260      	str	r0, [r4, #36]	; 0x24
 8004e6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e72:	6005      	str	r5, [r0, #0]
 8004e74:	60c5      	str	r5, [r0, #12]
 8004e76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e78:	6819      	ldr	r1, [r3, #0]
 8004e7a:	b151      	cbz	r1, 8004e92 <_dtoa_r+0x4a>
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	604a      	str	r2, [r1, #4]
 8004e80:	2301      	movs	r3, #1
 8004e82:	4093      	lsls	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
 8004e86:	4620      	mov	r0, r4
 8004e88:	f000 ffc9 	bl	8005e1e <_Bfree>
 8004e8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e8e:	2200      	movs	r2, #0
 8004e90:	601a      	str	r2, [r3, #0]
 8004e92:	1e3b      	subs	r3, r7, #0
 8004e94:	bfbb      	ittet	lt
 8004e96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e9a:	9301      	strlt	r3, [sp, #4]
 8004e9c:	2300      	movge	r3, #0
 8004e9e:	2201      	movlt	r2, #1
 8004ea0:	bfac      	ite	ge
 8004ea2:	f8c8 3000 	strge.w	r3, [r8]
 8004ea6:	f8c8 2000 	strlt.w	r2, [r8]
 8004eaa:	4baf      	ldr	r3, [pc, #700]	; (8005168 <_dtoa_r+0x320>)
 8004eac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004eb0:	ea33 0308 	bics.w	r3, r3, r8
 8004eb4:	d114      	bne.n	8004ee0 <_dtoa_r+0x98>
 8004eb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004eb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ebc:	6013      	str	r3, [r2, #0]
 8004ebe:	9b00      	ldr	r3, [sp, #0]
 8004ec0:	b923      	cbnz	r3, 8004ecc <_dtoa_r+0x84>
 8004ec2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8004ec6:	2800      	cmp	r0, #0
 8004ec8:	f000 8542 	beq.w	8005950 <_dtoa_r+0xb08>
 8004ecc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ece:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800517c <_dtoa_r+0x334>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8544 	beq.w	8005960 <_dtoa_r+0xb18>
 8004ed8:	f10b 0303 	add.w	r3, fp, #3
 8004edc:	f000 bd3e 	b.w	800595c <_dtoa_r+0xb14>
 8004ee0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	4630      	mov	r0, r6
 8004eea:	4639      	mov	r1, r7
 8004eec:	f7fb fdf4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ef0:	4681      	mov	r9, r0
 8004ef2:	b168      	cbz	r0, 8004f10 <_dtoa_r+0xc8>
 8004ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	6013      	str	r3, [r2, #0]
 8004efa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 8524 	beq.w	800594a <_dtoa_r+0xb02>
 8004f02:	4b9a      	ldr	r3, [pc, #616]	; (800516c <_dtoa_r+0x324>)
 8004f04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004f06:	f103 3bff 	add.w	fp, r3, #4294967295
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	f000 bd28 	b.w	8005960 <_dtoa_r+0xb18>
 8004f10:	aa14      	add	r2, sp, #80	; 0x50
 8004f12:	a915      	add	r1, sp, #84	; 0x54
 8004f14:	ec47 6b10 	vmov	d0, r6, r7
 8004f18:	4620      	mov	r0, r4
 8004f1a:	f001 f9d8 	bl	80062ce <__d2b>
 8004f1e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004f22:	9004      	str	r0, [sp, #16]
 8004f24:	2d00      	cmp	r5, #0
 8004f26:	d07c      	beq.n	8005022 <_dtoa_r+0x1da>
 8004f28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004f2c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004f30:	46b2      	mov	sl, r6
 8004f32:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004f36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f3a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004f3e:	2200      	movs	r2, #0
 8004f40:	4b8b      	ldr	r3, [pc, #556]	; (8005170 <_dtoa_r+0x328>)
 8004f42:	4650      	mov	r0, sl
 8004f44:	4659      	mov	r1, fp
 8004f46:	f7fb f9a7 	bl	8000298 <__aeabi_dsub>
 8004f4a:	a381      	add	r3, pc, #516	; (adr r3, 8005150 <_dtoa_r+0x308>)
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f7fb fb5a 	bl	8000608 <__aeabi_dmul>
 8004f54:	a380      	add	r3, pc, #512	; (adr r3, 8005158 <_dtoa_r+0x310>)
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	f7fb f99f 	bl	800029c <__adddf3>
 8004f5e:	4606      	mov	r6, r0
 8004f60:	4628      	mov	r0, r5
 8004f62:	460f      	mov	r7, r1
 8004f64:	f7fb fae6 	bl	8000534 <__aeabi_i2d>
 8004f68:	a37d      	add	r3, pc, #500	; (adr r3, 8005160 <_dtoa_r+0x318>)
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	f7fb fb4b 	bl	8000608 <__aeabi_dmul>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4630      	mov	r0, r6
 8004f78:	4639      	mov	r1, r7
 8004f7a:	f7fb f98f 	bl	800029c <__adddf3>
 8004f7e:	4606      	mov	r6, r0
 8004f80:	460f      	mov	r7, r1
 8004f82:	f7fb fdf1 	bl	8000b68 <__aeabi_d2iz>
 8004f86:	2200      	movs	r2, #0
 8004f88:	4682      	mov	sl, r0
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	4639      	mov	r1, r7
 8004f90:	f7fb fdac 	bl	8000aec <__aeabi_dcmplt>
 8004f94:	b148      	cbz	r0, 8004faa <_dtoa_r+0x162>
 8004f96:	4650      	mov	r0, sl
 8004f98:	f7fb facc 	bl	8000534 <__aeabi_i2d>
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	463b      	mov	r3, r7
 8004fa0:	f7fb fd9a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fa4:	b908      	cbnz	r0, 8004faa <_dtoa_r+0x162>
 8004fa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004faa:	f1ba 0f16 	cmp.w	sl, #22
 8004fae:	d859      	bhi.n	8005064 <_dtoa_r+0x21c>
 8004fb0:	4970      	ldr	r1, [pc, #448]	; (8005174 <_dtoa_r+0x32c>)
 8004fb2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004fb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fbe:	f7fb fdb3 	bl	8000b28 <__aeabi_dcmpgt>
 8004fc2:	2800      	cmp	r0, #0
 8004fc4:	d050      	beq.n	8005068 <_dtoa_r+0x220>
 8004fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fca:	2300      	movs	r3, #0
 8004fcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004fd0:	1b5d      	subs	r5, r3, r5
 8004fd2:	f1b5 0801 	subs.w	r8, r5, #1
 8004fd6:	bf49      	itett	mi
 8004fd8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004fdc:	2300      	movpl	r3, #0
 8004fde:	9305      	strmi	r3, [sp, #20]
 8004fe0:	f04f 0800 	movmi.w	r8, #0
 8004fe4:	bf58      	it	pl
 8004fe6:	9305      	strpl	r3, [sp, #20]
 8004fe8:	f1ba 0f00 	cmp.w	sl, #0
 8004fec:	db3e      	blt.n	800506c <_dtoa_r+0x224>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	44d0      	add	r8, sl
 8004ff2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004ff6:	9307      	str	r3, [sp, #28]
 8004ff8:	9b06      	ldr	r3, [sp, #24]
 8004ffa:	2b09      	cmp	r3, #9
 8004ffc:	f200 8090 	bhi.w	8005120 <_dtoa_r+0x2d8>
 8005000:	2b05      	cmp	r3, #5
 8005002:	bfc4      	itt	gt
 8005004:	3b04      	subgt	r3, #4
 8005006:	9306      	strgt	r3, [sp, #24]
 8005008:	9b06      	ldr	r3, [sp, #24]
 800500a:	f1a3 0302 	sub.w	r3, r3, #2
 800500e:	bfcc      	ite	gt
 8005010:	2500      	movgt	r5, #0
 8005012:	2501      	movle	r5, #1
 8005014:	2b03      	cmp	r3, #3
 8005016:	f200 808f 	bhi.w	8005138 <_dtoa_r+0x2f0>
 800501a:	e8df f003 	tbb	[pc, r3]
 800501e:	7f7d      	.short	0x7f7d
 8005020:	7131      	.short	0x7131
 8005022:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005026:	441d      	add	r5, r3
 8005028:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800502c:	2820      	cmp	r0, #32
 800502e:	dd13      	ble.n	8005058 <_dtoa_r+0x210>
 8005030:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005034:	9b00      	ldr	r3, [sp, #0]
 8005036:	fa08 f800 	lsl.w	r8, r8, r0
 800503a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800503e:	fa23 f000 	lsr.w	r0, r3, r0
 8005042:	ea48 0000 	orr.w	r0, r8, r0
 8005046:	f7fb fa65 	bl	8000514 <__aeabi_ui2d>
 800504a:	2301      	movs	r3, #1
 800504c:	4682      	mov	sl, r0
 800504e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005052:	3d01      	subs	r5, #1
 8005054:	9313      	str	r3, [sp, #76]	; 0x4c
 8005056:	e772      	b.n	8004f3e <_dtoa_r+0xf6>
 8005058:	9b00      	ldr	r3, [sp, #0]
 800505a:	f1c0 0020 	rsb	r0, r0, #32
 800505e:	fa03 f000 	lsl.w	r0, r3, r0
 8005062:	e7f0      	b.n	8005046 <_dtoa_r+0x1fe>
 8005064:	2301      	movs	r3, #1
 8005066:	e7b1      	b.n	8004fcc <_dtoa_r+0x184>
 8005068:	900f      	str	r0, [sp, #60]	; 0x3c
 800506a:	e7b0      	b.n	8004fce <_dtoa_r+0x186>
 800506c:	9b05      	ldr	r3, [sp, #20]
 800506e:	eba3 030a 	sub.w	r3, r3, sl
 8005072:	9305      	str	r3, [sp, #20]
 8005074:	f1ca 0300 	rsb	r3, sl, #0
 8005078:	9307      	str	r3, [sp, #28]
 800507a:	2300      	movs	r3, #0
 800507c:	930e      	str	r3, [sp, #56]	; 0x38
 800507e:	e7bb      	b.n	8004ff8 <_dtoa_r+0x1b0>
 8005080:	2301      	movs	r3, #1
 8005082:	930a      	str	r3, [sp, #40]	; 0x28
 8005084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005086:	2b00      	cmp	r3, #0
 8005088:	dd59      	ble.n	800513e <_dtoa_r+0x2f6>
 800508a:	9302      	str	r3, [sp, #8]
 800508c:	4699      	mov	r9, r3
 800508e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005090:	2200      	movs	r2, #0
 8005092:	6072      	str	r2, [r6, #4]
 8005094:	2204      	movs	r2, #4
 8005096:	f102 0014 	add.w	r0, r2, #20
 800509a:	4298      	cmp	r0, r3
 800509c:	6871      	ldr	r1, [r6, #4]
 800509e:	d953      	bls.n	8005148 <_dtoa_r+0x300>
 80050a0:	4620      	mov	r0, r4
 80050a2:	f000 fe88 	bl	8005db6 <_Balloc>
 80050a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050a8:	6030      	str	r0, [r6, #0]
 80050aa:	f1b9 0f0e 	cmp.w	r9, #14
 80050ae:	f8d3 b000 	ldr.w	fp, [r3]
 80050b2:	f200 80e6 	bhi.w	8005282 <_dtoa_r+0x43a>
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	f000 80e3 	beq.w	8005282 <_dtoa_r+0x43a>
 80050bc:	ed9d 7b00 	vldr	d7, [sp]
 80050c0:	f1ba 0f00 	cmp.w	sl, #0
 80050c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80050c8:	dd74      	ble.n	80051b4 <_dtoa_r+0x36c>
 80050ca:	4a2a      	ldr	r2, [pc, #168]	; (8005174 <_dtoa_r+0x32c>)
 80050cc:	f00a 030f 	and.w	r3, sl, #15
 80050d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050d4:	ed93 7b00 	vldr	d7, [r3]
 80050d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80050dc:	06f0      	lsls	r0, r6, #27
 80050de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80050e2:	d565      	bpl.n	80051b0 <_dtoa_r+0x368>
 80050e4:	4b24      	ldr	r3, [pc, #144]	; (8005178 <_dtoa_r+0x330>)
 80050e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050ee:	f7fb fbb5 	bl	800085c <__aeabi_ddiv>
 80050f2:	e9cd 0100 	strd	r0, r1, [sp]
 80050f6:	f006 060f 	and.w	r6, r6, #15
 80050fa:	2503      	movs	r5, #3
 80050fc:	4f1e      	ldr	r7, [pc, #120]	; (8005178 <_dtoa_r+0x330>)
 80050fe:	e04c      	b.n	800519a <_dtoa_r+0x352>
 8005100:	2301      	movs	r3, #1
 8005102:	930a      	str	r3, [sp, #40]	; 0x28
 8005104:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005106:	4453      	add	r3, sl
 8005108:	f103 0901 	add.w	r9, r3, #1
 800510c:	9302      	str	r3, [sp, #8]
 800510e:	464b      	mov	r3, r9
 8005110:	2b01      	cmp	r3, #1
 8005112:	bfb8      	it	lt
 8005114:	2301      	movlt	r3, #1
 8005116:	e7ba      	b.n	800508e <_dtoa_r+0x246>
 8005118:	2300      	movs	r3, #0
 800511a:	e7b2      	b.n	8005082 <_dtoa_r+0x23a>
 800511c:	2300      	movs	r3, #0
 800511e:	e7f0      	b.n	8005102 <_dtoa_r+0x2ba>
 8005120:	2501      	movs	r5, #1
 8005122:	2300      	movs	r3, #0
 8005124:	9306      	str	r3, [sp, #24]
 8005126:	950a      	str	r5, [sp, #40]	; 0x28
 8005128:	f04f 33ff 	mov.w	r3, #4294967295
 800512c:	9302      	str	r3, [sp, #8]
 800512e:	4699      	mov	r9, r3
 8005130:	2200      	movs	r2, #0
 8005132:	2312      	movs	r3, #18
 8005134:	920b      	str	r2, [sp, #44]	; 0x2c
 8005136:	e7aa      	b.n	800508e <_dtoa_r+0x246>
 8005138:	2301      	movs	r3, #1
 800513a:	930a      	str	r3, [sp, #40]	; 0x28
 800513c:	e7f4      	b.n	8005128 <_dtoa_r+0x2e0>
 800513e:	2301      	movs	r3, #1
 8005140:	9302      	str	r3, [sp, #8]
 8005142:	4699      	mov	r9, r3
 8005144:	461a      	mov	r2, r3
 8005146:	e7f5      	b.n	8005134 <_dtoa_r+0x2ec>
 8005148:	3101      	adds	r1, #1
 800514a:	6071      	str	r1, [r6, #4]
 800514c:	0052      	lsls	r2, r2, #1
 800514e:	e7a2      	b.n	8005096 <_dtoa_r+0x24e>
 8005150:	636f4361 	.word	0x636f4361
 8005154:	3fd287a7 	.word	0x3fd287a7
 8005158:	8b60c8b3 	.word	0x8b60c8b3
 800515c:	3fc68a28 	.word	0x3fc68a28
 8005160:	509f79fb 	.word	0x509f79fb
 8005164:	3fd34413 	.word	0x3fd34413
 8005168:	7ff00000 	.word	0x7ff00000
 800516c:	08006a1d 	.word	0x08006a1d
 8005170:	3ff80000 	.word	0x3ff80000
 8005174:	08006ad8 	.word	0x08006ad8
 8005178:	08006ab0 	.word	0x08006ab0
 800517c:	08006a49 	.word	0x08006a49
 8005180:	07f1      	lsls	r1, r6, #31
 8005182:	d508      	bpl.n	8005196 <_dtoa_r+0x34e>
 8005184:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005188:	e9d7 2300 	ldrd	r2, r3, [r7]
 800518c:	f7fb fa3c 	bl	8000608 <__aeabi_dmul>
 8005190:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005194:	3501      	adds	r5, #1
 8005196:	1076      	asrs	r6, r6, #1
 8005198:	3708      	adds	r7, #8
 800519a:	2e00      	cmp	r6, #0
 800519c:	d1f0      	bne.n	8005180 <_dtoa_r+0x338>
 800519e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80051a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051a6:	f7fb fb59 	bl	800085c <__aeabi_ddiv>
 80051aa:	e9cd 0100 	strd	r0, r1, [sp]
 80051ae:	e01a      	b.n	80051e6 <_dtoa_r+0x39e>
 80051b0:	2502      	movs	r5, #2
 80051b2:	e7a3      	b.n	80050fc <_dtoa_r+0x2b4>
 80051b4:	f000 80a0 	beq.w	80052f8 <_dtoa_r+0x4b0>
 80051b8:	f1ca 0600 	rsb	r6, sl, #0
 80051bc:	4b9f      	ldr	r3, [pc, #636]	; (800543c <_dtoa_r+0x5f4>)
 80051be:	4fa0      	ldr	r7, [pc, #640]	; (8005440 <_dtoa_r+0x5f8>)
 80051c0:	f006 020f 	and.w	r2, r6, #15
 80051c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80051d0:	f7fb fa1a 	bl	8000608 <__aeabi_dmul>
 80051d4:	e9cd 0100 	strd	r0, r1, [sp]
 80051d8:	1136      	asrs	r6, r6, #4
 80051da:	2300      	movs	r3, #0
 80051dc:	2502      	movs	r5, #2
 80051de:	2e00      	cmp	r6, #0
 80051e0:	d17f      	bne.n	80052e2 <_dtoa_r+0x49a>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e1      	bne.n	80051aa <_dtoa_r+0x362>
 80051e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8087 	beq.w	80052fc <_dtoa_r+0x4b4>
 80051ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80051f2:	2200      	movs	r2, #0
 80051f4:	4b93      	ldr	r3, [pc, #588]	; (8005444 <_dtoa_r+0x5fc>)
 80051f6:	4630      	mov	r0, r6
 80051f8:	4639      	mov	r1, r7
 80051fa:	f7fb fc77 	bl	8000aec <__aeabi_dcmplt>
 80051fe:	2800      	cmp	r0, #0
 8005200:	d07c      	beq.n	80052fc <_dtoa_r+0x4b4>
 8005202:	f1b9 0f00 	cmp.w	r9, #0
 8005206:	d079      	beq.n	80052fc <_dtoa_r+0x4b4>
 8005208:	9b02      	ldr	r3, [sp, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	dd35      	ble.n	800527a <_dtoa_r+0x432>
 800520e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005212:	9308      	str	r3, [sp, #32]
 8005214:	4639      	mov	r1, r7
 8005216:	2200      	movs	r2, #0
 8005218:	4b8b      	ldr	r3, [pc, #556]	; (8005448 <_dtoa_r+0x600>)
 800521a:	4630      	mov	r0, r6
 800521c:	f7fb f9f4 	bl	8000608 <__aeabi_dmul>
 8005220:	e9cd 0100 	strd	r0, r1, [sp]
 8005224:	9f02      	ldr	r7, [sp, #8]
 8005226:	3501      	adds	r5, #1
 8005228:	4628      	mov	r0, r5
 800522a:	f7fb f983 	bl	8000534 <__aeabi_i2d>
 800522e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005232:	f7fb f9e9 	bl	8000608 <__aeabi_dmul>
 8005236:	2200      	movs	r2, #0
 8005238:	4b84      	ldr	r3, [pc, #528]	; (800544c <_dtoa_r+0x604>)
 800523a:	f7fb f82f 	bl	800029c <__adddf3>
 800523e:	4605      	mov	r5, r0
 8005240:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005244:	2f00      	cmp	r7, #0
 8005246:	d15d      	bne.n	8005304 <_dtoa_r+0x4bc>
 8005248:	2200      	movs	r2, #0
 800524a:	4b81      	ldr	r3, [pc, #516]	; (8005450 <_dtoa_r+0x608>)
 800524c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005250:	f7fb f822 	bl	8000298 <__aeabi_dsub>
 8005254:	462a      	mov	r2, r5
 8005256:	4633      	mov	r3, r6
 8005258:	e9cd 0100 	strd	r0, r1, [sp]
 800525c:	f7fb fc64 	bl	8000b28 <__aeabi_dcmpgt>
 8005260:	2800      	cmp	r0, #0
 8005262:	f040 8288 	bne.w	8005776 <_dtoa_r+0x92e>
 8005266:	462a      	mov	r2, r5
 8005268:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800526c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005270:	f7fb fc3c 	bl	8000aec <__aeabi_dcmplt>
 8005274:	2800      	cmp	r0, #0
 8005276:	f040 827c 	bne.w	8005772 <_dtoa_r+0x92a>
 800527a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800527e:	e9cd 2300 	strd	r2, r3, [sp]
 8005282:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005284:	2b00      	cmp	r3, #0
 8005286:	f2c0 8150 	blt.w	800552a <_dtoa_r+0x6e2>
 800528a:	f1ba 0f0e 	cmp.w	sl, #14
 800528e:	f300 814c 	bgt.w	800552a <_dtoa_r+0x6e2>
 8005292:	4b6a      	ldr	r3, [pc, #424]	; (800543c <_dtoa_r+0x5f4>)
 8005294:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005298:	ed93 7b00 	vldr	d7, [r3]
 800529c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80052a4:	f280 80d8 	bge.w	8005458 <_dtoa_r+0x610>
 80052a8:	f1b9 0f00 	cmp.w	r9, #0
 80052ac:	f300 80d4 	bgt.w	8005458 <_dtoa_r+0x610>
 80052b0:	f040 825e 	bne.w	8005770 <_dtoa_r+0x928>
 80052b4:	2200      	movs	r2, #0
 80052b6:	4b66      	ldr	r3, [pc, #408]	; (8005450 <_dtoa_r+0x608>)
 80052b8:	ec51 0b17 	vmov	r0, r1, d7
 80052bc:	f7fb f9a4 	bl	8000608 <__aeabi_dmul>
 80052c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80052c4:	f7fb fc26 	bl	8000b14 <__aeabi_dcmpge>
 80052c8:	464f      	mov	r7, r9
 80052ca:	464e      	mov	r6, r9
 80052cc:	2800      	cmp	r0, #0
 80052ce:	f040 8234 	bne.w	800573a <_dtoa_r+0x8f2>
 80052d2:	2331      	movs	r3, #49	; 0x31
 80052d4:	f10b 0501 	add.w	r5, fp, #1
 80052d8:	f88b 3000 	strb.w	r3, [fp]
 80052dc:	f10a 0a01 	add.w	sl, sl, #1
 80052e0:	e22f      	b.n	8005742 <_dtoa_r+0x8fa>
 80052e2:	07f2      	lsls	r2, r6, #31
 80052e4:	d505      	bpl.n	80052f2 <_dtoa_r+0x4aa>
 80052e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052ea:	f7fb f98d 	bl	8000608 <__aeabi_dmul>
 80052ee:	3501      	adds	r5, #1
 80052f0:	2301      	movs	r3, #1
 80052f2:	1076      	asrs	r6, r6, #1
 80052f4:	3708      	adds	r7, #8
 80052f6:	e772      	b.n	80051de <_dtoa_r+0x396>
 80052f8:	2502      	movs	r5, #2
 80052fa:	e774      	b.n	80051e6 <_dtoa_r+0x39e>
 80052fc:	f8cd a020 	str.w	sl, [sp, #32]
 8005300:	464f      	mov	r7, r9
 8005302:	e791      	b.n	8005228 <_dtoa_r+0x3e0>
 8005304:	4b4d      	ldr	r3, [pc, #308]	; (800543c <_dtoa_r+0x5f4>)
 8005306:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800530a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800530e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005310:	2b00      	cmp	r3, #0
 8005312:	d047      	beq.n	80053a4 <_dtoa_r+0x55c>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	2000      	movs	r0, #0
 800531a:	494e      	ldr	r1, [pc, #312]	; (8005454 <_dtoa_r+0x60c>)
 800531c:	f7fb fa9e 	bl	800085c <__aeabi_ddiv>
 8005320:	462a      	mov	r2, r5
 8005322:	4633      	mov	r3, r6
 8005324:	f7fa ffb8 	bl	8000298 <__aeabi_dsub>
 8005328:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800532c:	465d      	mov	r5, fp
 800532e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005332:	f7fb fc19 	bl	8000b68 <__aeabi_d2iz>
 8005336:	4606      	mov	r6, r0
 8005338:	f7fb f8fc 	bl	8000534 <__aeabi_i2d>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005344:	f7fa ffa8 	bl	8000298 <__aeabi_dsub>
 8005348:	3630      	adds	r6, #48	; 0x30
 800534a:	f805 6b01 	strb.w	r6, [r5], #1
 800534e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005352:	e9cd 0100 	strd	r0, r1, [sp]
 8005356:	f7fb fbc9 	bl	8000aec <__aeabi_dcmplt>
 800535a:	2800      	cmp	r0, #0
 800535c:	d163      	bne.n	8005426 <_dtoa_r+0x5de>
 800535e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005362:	2000      	movs	r0, #0
 8005364:	4937      	ldr	r1, [pc, #220]	; (8005444 <_dtoa_r+0x5fc>)
 8005366:	f7fa ff97 	bl	8000298 <__aeabi_dsub>
 800536a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800536e:	f7fb fbbd 	bl	8000aec <__aeabi_dcmplt>
 8005372:	2800      	cmp	r0, #0
 8005374:	f040 80b7 	bne.w	80054e6 <_dtoa_r+0x69e>
 8005378:	eba5 030b 	sub.w	r3, r5, fp
 800537c:	429f      	cmp	r7, r3
 800537e:	f77f af7c 	ble.w	800527a <_dtoa_r+0x432>
 8005382:	2200      	movs	r2, #0
 8005384:	4b30      	ldr	r3, [pc, #192]	; (8005448 <_dtoa_r+0x600>)
 8005386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800538a:	f7fb f93d 	bl	8000608 <__aeabi_dmul>
 800538e:	2200      	movs	r2, #0
 8005390:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005394:	4b2c      	ldr	r3, [pc, #176]	; (8005448 <_dtoa_r+0x600>)
 8005396:	e9dd 0100 	ldrd	r0, r1, [sp]
 800539a:	f7fb f935 	bl	8000608 <__aeabi_dmul>
 800539e:	e9cd 0100 	strd	r0, r1, [sp]
 80053a2:	e7c4      	b.n	800532e <_dtoa_r+0x4e6>
 80053a4:	462a      	mov	r2, r5
 80053a6:	4633      	mov	r3, r6
 80053a8:	f7fb f92e 	bl	8000608 <__aeabi_dmul>
 80053ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80053b0:	eb0b 0507 	add.w	r5, fp, r7
 80053b4:	465e      	mov	r6, fp
 80053b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053ba:	f7fb fbd5 	bl	8000b68 <__aeabi_d2iz>
 80053be:	4607      	mov	r7, r0
 80053c0:	f7fb f8b8 	bl	8000534 <__aeabi_i2d>
 80053c4:	3730      	adds	r7, #48	; 0x30
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053ce:	f7fa ff63 	bl	8000298 <__aeabi_dsub>
 80053d2:	f806 7b01 	strb.w	r7, [r6], #1
 80053d6:	42ae      	cmp	r6, r5
 80053d8:	e9cd 0100 	strd	r0, r1, [sp]
 80053dc:	f04f 0200 	mov.w	r2, #0
 80053e0:	d126      	bne.n	8005430 <_dtoa_r+0x5e8>
 80053e2:	4b1c      	ldr	r3, [pc, #112]	; (8005454 <_dtoa_r+0x60c>)
 80053e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053e8:	f7fa ff58 	bl	800029c <__adddf3>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053f4:	f7fb fb98 	bl	8000b28 <__aeabi_dcmpgt>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d174      	bne.n	80054e6 <_dtoa_r+0x69e>
 80053fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005400:	2000      	movs	r0, #0
 8005402:	4914      	ldr	r1, [pc, #80]	; (8005454 <_dtoa_r+0x60c>)
 8005404:	f7fa ff48 	bl	8000298 <__aeabi_dsub>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005410:	f7fb fb6c 	bl	8000aec <__aeabi_dcmplt>
 8005414:	2800      	cmp	r0, #0
 8005416:	f43f af30 	beq.w	800527a <_dtoa_r+0x432>
 800541a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800541e:	2b30      	cmp	r3, #48	; 0x30
 8005420:	f105 32ff 	add.w	r2, r5, #4294967295
 8005424:	d002      	beq.n	800542c <_dtoa_r+0x5e4>
 8005426:	f8dd a020 	ldr.w	sl, [sp, #32]
 800542a:	e04a      	b.n	80054c2 <_dtoa_r+0x67a>
 800542c:	4615      	mov	r5, r2
 800542e:	e7f4      	b.n	800541a <_dtoa_r+0x5d2>
 8005430:	4b05      	ldr	r3, [pc, #20]	; (8005448 <_dtoa_r+0x600>)
 8005432:	f7fb f8e9 	bl	8000608 <__aeabi_dmul>
 8005436:	e9cd 0100 	strd	r0, r1, [sp]
 800543a:	e7bc      	b.n	80053b6 <_dtoa_r+0x56e>
 800543c:	08006ad8 	.word	0x08006ad8
 8005440:	08006ab0 	.word	0x08006ab0
 8005444:	3ff00000 	.word	0x3ff00000
 8005448:	40240000 	.word	0x40240000
 800544c:	401c0000 	.word	0x401c0000
 8005450:	40140000 	.word	0x40140000
 8005454:	3fe00000 	.word	0x3fe00000
 8005458:	e9dd 6700 	ldrd	r6, r7, [sp]
 800545c:	465d      	mov	r5, fp
 800545e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	f7fb f9f9 	bl	800085c <__aeabi_ddiv>
 800546a:	f7fb fb7d 	bl	8000b68 <__aeabi_d2iz>
 800546e:	4680      	mov	r8, r0
 8005470:	f7fb f860 	bl	8000534 <__aeabi_i2d>
 8005474:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005478:	f7fb f8c6 	bl	8000608 <__aeabi_dmul>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4630      	mov	r0, r6
 8005482:	4639      	mov	r1, r7
 8005484:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005488:	f7fa ff06 	bl	8000298 <__aeabi_dsub>
 800548c:	f805 6b01 	strb.w	r6, [r5], #1
 8005490:	eba5 060b 	sub.w	r6, r5, fp
 8005494:	45b1      	cmp	r9, r6
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	d139      	bne.n	8005510 <_dtoa_r+0x6c8>
 800549c:	f7fa fefe 	bl	800029c <__adddf3>
 80054a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054a4:	4606      	mov	r6, r0
 80054a6:	460f      	mov	r7, r1
 80054a8:	f7fb fb3e 	bl	8000b28 <__aeabi_dcmpgt>
 80054ac:	b9c8      	cbnz	r0, 80054e2 <_dtoa_r+0x69a>
 80054ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054b2:	4630      	mov	r0, r6
 80054b4:	4639      	mov	r1, r7
 80054b6:	f7fb fb0f 	bl	8000ad8 <__aeabi_dcmpeq>
 80054ba:	b110      	cbz	r0, 80054c2 <_dtoa_r+0x67a>
 80054bc:	f018 0f01 	tst.w	r8, #1
 80054c0:	d10f      	bne.n	80054e2 <_dtoa_r+0x69a>
 80054c2:	9904      	ldr	r1, [sp, #16]
 80054c4:	4620      	mov	r0, r4
 80054c6:	f000 fcaa 	bl	8005e1e <_Bfree>
 80054ca:	2300      	movs	r3, #0
 80054cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054ce:	702b      	strb	r3, [r5, #0]
 80054d0:	f10a 0301 	add.w	r3, sl, #1
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 8241 	beq.w	8005960 <_dtoa_r+0xb18>
 80054de:	601d      	str	r5, [r3, #0]
 80054e0:	e23e      	b.n	8005960 <_dtoa_r+0xb18>
 80054e2:	f8cd a020 	str.w	sl, [sp, #32]
 80054e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80054ea:	2a39      	cmp	r2, #57	; 0x39
 80054ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80054f0:	d108      	bne.n	8005504 <_dtoa_r+0x6bc>
 80054f2:	459b      	cmp	fp, r3
 80054f4:	d10a      	bne.n	800550c <_dtoa_r+0x6c4>
 80054f6:	9b08      	ldr	r3, [sp, #32]
 80054f8:	3301      	adds	r3, #1
 80054fa:	9308      	str	r3, [sp, #32]
 80054fc:	2330      	movs	r3, #48	; 0x30
 80054fe:	f88b 3000 	strb.w	r3, [fp]
 8005502:	465b      	mov	r3, fp
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	3201      	adds	r2, #1
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e78c      	b.n	8005426 <_dtoa_r+0x5de>
 800550c:	461d      	mov	r5, r3
 800550e:	e7ea      	b.n	80054e6 <_dtoa_r+0x69e>
 8005510:	2200      	movs	r2, #0
 8005512:	4b9b      	ldr	r3, [pc, #620]	; (8005780 <_dtoa_r+0x938>)
 8005514:	f7fb f878 	bl	8000608 <__aeabi_dmul>
 8005518:	2200      	movs	r2, #0
 800551a:	2300      	movs	r3, #0
 800551c:	4606      	mov	r6, r0
 800551e:	460f      	mov	r7, r1
 8005520:	f7fb fada 	bl	8000ad8 <__aeabi_dcmpeq>
 8005524:	2800      	cmp	r0, #0
 8005526:	d09a      	beq.n	800545e <_dtoa_r+0x616>
 8005528:	e7cb      	b.n	80054c2 <_dtoa_r+0x67a>
 800552a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800552c:	2a00      	cmp	r2, #0
 800552e:	f000 808b 	beq.w	8005648 <_dtoa_r+0x800>
 8005532:	9a06      	ldr	r2, [sp, #24]
 8005534:	2a01      	cmp	r2, #1
 8005536:	dc6e      	bgt.n	8005616 <_dtoa_r+0x7ce>
 8005538:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800553a:	2a00      	cmp	r2, #0
 800553c:	d067      	beq.n	800560e <_dtoa_r+0x7c6>
 800553e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005542:	9f07      	ldr	r7, [sp, #28]
 8005544:	9d05      	ldr	r5, [sp, #20]
 8005546:	9a05      	ldr	r2, [sp, #20]
 8005548:	2101      	movs	r1, #1
 800554a:	441a      	add	r2, r3
 800554c:	4620      	mov	r0, r4
 800554e:	9205      	str	r2, [sp, #20]
 8005550:	4498      	add	r8, r3
 8005552:	f000 fd04 	bl	8005f5e <__i2b>
 8005556:	4606      	mov	r6, r0
 8005558:	2d00      	cmp	r5, #0
 800555a:	dd0c      	ble.n	8005576 <_dtoa_r+0x72e>
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	dd09      	ble.n	8005576 <_dtoa_r+0x72e>
 8005562:	4545      	cmp	r5, r8
 8005564:	9a05      	ldr	r2, [sp, #20]
 8005566:	462b      	mov	r3, r5
 8005568:	bfa8      	it	ge
 800556a:	4643      	movge	r3, r8
 800556c:	1ad2      	subs	r2, r2, r3
 800556e:	9205      	str	r2, [sp, #20]
 8005570:	1aed      	subs	r5, r5, r3
 8005572:	eba8 0803 	sub.w	r8, r8, r3
 8005576:	9b07      	ldr	r3, [sp, #28]
 8005578:	b1eb      	cbz	r3, 80055b6 <_dtoa_r+0x76e>
 800557a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800557c:	2b00      	cmp	r3, #0
 800557e:	d067      	beq.n	8005650 <_dtoa_r+0x808>
 8005580:	b18f      	cbz	r7, 80055a6 <_dtoa_r+0x75e>
 8005582:	4631      	mov	r1, r6
 8005584:	463a      	mov	r2, r7
 8005586:	4620      	mov	r0, r4
 8005588:	f000 fd88 	bl	800609c <__pow5mult>
 800558c:	9a04      	ldr	r2, [sp, #16]
 800558e:	4601      	mov	r1, r0
 8005590:	4606      	mov	r6, r0
 8005592:	4620      	mov	r0, r4
 8005594:	f000 fcec 	bl	8005f70 <__multiply>
 8005598:	9904      	ldr	r1, [sp, #16]
 800559a:	9008      	str	r0, [sp, #32]
 800559c:	4620      	mov	r0, r4
 800559e:	f000 fc3e 	bl	8005e1e <_Bfree>
 80055a2:	9b08      	ldr	r3, [sp, #32]
 80055a4:	9304      	str	r3, [sp, #16]
 80055a6:	9b07      	ldr	r3, [sp, #28]
 80055a8:	1bda      	subs	r2, r3, r7
 80055aa:	d004      	beq.n	80055b6 <_dtoa_r+0x76e>
 80055ac:	9904      	ldr	r1, [sp, #16]
 80055ae:	4620      	mov	r0, r4
 80055b0:	f000 fd74 	bl	800609c <__pow5mult>
 80055b4:	9004      	str	r0, [sp, #16]
 80055b6:	2101      	movs	r1, #1
 80055b8:	4620      	mov	r0, r4
 80055ba:	f000 fcd0 	bl	8005f5e <__i2b>
 80055be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055c0:	4607      	mov	r7, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	f000 81d0 	beq.w	8005968 <_dtoa_r+0xb20>
 80055c8:	461a      	mov	r2, r3
 80055ca:	4601      	mov	r1, r0
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 fd65 	bl	800609c <__pow5mult>
 80055d2:	9b06      	ldr	r3, [sp, #24]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	4607      	mov	r7, r0
 80055d8:	dc40      	bgt.n	800565c <_dtoa_r+0x814>
 80055da:	9b00      	ldr	r3, [sp, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d139      	bne.n	8005654 <_dtoa_r+0x80c>
 80055e0:	9b01      	ldr	r3, [sp, #4]
 80055e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d136      	bne.n	8005658 <_dtoa_r+0x810>
 80055ea:	9b01      	ldr	r3, [sp, #4]
 80055ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80055f0:	0d1b      	lsrs	r3, r3, #20
 80055f2:	051b      	lsls	r3, r3, #20
 80055f4:	b12b      	cbz	r3, 8005602 <_dtoa_r+0x7ba>
 80055f6:	9b05      	ldr	r3, [sp, #20]
 80055f8:	3301      	adds	r3, #1
 80055fa:	9305      	str	r3, [sp, #20]
 80055fc:	f108 0801 	add.w	r8, r8, #1
 8005600:	2301      	movs	r3, #1
 8005602:	9307      	str	r3, [sp, #28]
 8005604:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005606:	2b00      	cmp	r3, #0
 8005608:	d12a      	bne.n	8005660 <_dtoa_r+0x818>
 800560a:	2001      	movs	r0, #1
 800560c:	e030      	b.n	8005670 <_dtoa_r+0x828>
 800560e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005610:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005614:	e795      	b.n	8005542 <_dtoa_r+0x6fa>
 8005616:	9b07      	ldr	r3, [sp, #28]
 8005618:	f109 37ff 	add.w	r7, r9, #4294967295
 800561c:	42bb      	cmp	r3, r7
 800561e:	bfbf      	itttt	lt
 8005620:	9b07      	ldrlt	r3, [sp, #28]
 8005622:	9707      	strlt	r7, [sp, #28]
 8005624:	1afa      	sublt	r2, r7, r3
 8005626:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005628:	bfbb      	ittet	lt
 800562a:	189b      	addlt	r3, r3, r2
 800562c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800562e:	1bdf      	subge	r7, r3, r7
 8005630:	2700      	movlt	r7, #0
 8005632:	f1b9 0f00 	cmp.w	r9, #0
 8005636:	bfb5      	itete	lt
 8005638:	9b05      	ldrlt	r3, [sp, #20]
 800563a:	9d05      	ldrge	r5, [sp, #20]
 800563c:	eba3 0509 	sublt.w	r5, r3, r9
 8005640:	464b      	movge	r3, r9
 8005642:	bfb8      	it	lt
 8005644:	2300      	movlt	r3, #0
 8005646:	e77e      	b.n	8005546 <_dtoa_r+0x6fe>
 8005648:	9f07      	ldr	r7, [sp, #28]
 800564a:	9d05      	ldr	r5, [sp, #20]
 800564c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800564e:	e783      	b.n	8005558 <_dtoa_r+0x710>
 8005650:	9a07      	ldr	r2, [sp, #28]
 8005652:	e7ab      	b.n	80055ac <_dtoa_r+0x764>
 8005654:	2300      	movs	r3, #0
 8005656:	e7d4      	b.n	8005602 <_dtoa_r+0x7ba>
 8005658:	9b00      	ldr	r3, [sp, #0]
 800565a:	e7d2      	b.n	8005602 <_dtoa_r+0x7ba>
 800565c:	2300      	movs	r3, #0
 800565e:	9307      	str	r3, [sp, #28]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005666:	6918      	ldr	r0, [r3, #16]
 8005668:	f000 fc2b 	bl	8005ec2 <__hi0bits>
 800566c:	f1c0 0020 	rsb	r0, r0, #32
 8005670:	4440      	add	r0, r8
 8005672:	f010 001f 	ands.w	r0, r0, #31
 8005676:	d047      	beq.n	8005708 <_dtoa_r+0x8c0>
 8005678:	f1c0 0320 	rsb	r3, r0, #32
 800567c:	2b04      	cmp	r3, #4
 800567e:	dd3b      	ble.n	80056f8 <_dtoa_r+0x8b0>
 8005680:	9b05      	ldr	r3, [sp, #20]
 8005682:	f1c0 001c 	rsb	r0, r0, #28
 8005686:	4403      	add	r3, r0
 8005688:	9305      	str	r3, [sp, #20]
 800568a:	4405      	add	r5, r0
 800568c:	4480      	add	r8, r0
 800568e:	9b05      	ldr	r3, [sp, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	dd05      	ble.n	80056a0 <_dtoa_r+0x858>
 8005694:	461a      	mov	r2, r3
 8005696:	9904      	ldr	r1, [sp, #16]
 8005698:	4620      	mov	r0, r4
 800569a:	f000 fd4d 	bl	8006138 <__lshift>
 800569e:	9004      	str	r0, [sp, #16]
 80056a0:	f1b8 0f00 	cmp.w	r8, #0
 80056a4:	dd05      	ble.n	80056b2 <_dtoa_r+0x86a>
 80056a6:	4639      	mov	r1, r7
 80056a8:	4642      	mov	r2, r8
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 fd44 	bl	8006138 <__lshift>
 80056b0:	4607      	mov	r7, r0
 80056b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80056b4:	b353      	cbz	r3, 800570c <_dtoa_r+0x8c4>
 80056b6:	4639      	mov	r1, r7
 80056b8:	9804      	ldr	r0, [sp, #16]
 80056ba:	f000 fd91 	bl	80061e0 <__mcmp>
 80056be:	2800      	cmp	r0, #0
 80056c0:	da24      	bge.n	800570c <_dtoa_r+0x8c4>
 80056c2:	2300      	movs	r3, #0
 80056c4:	220a      	movs	r2, #10
 80056c6:	9904      	ldr	r1, [sp, #16]
 80056c8:	4620      	mov	r0, r4
 80056ca:	f000 fbbf 	bl	8005e4c <__multadd>
 80056ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d0:	9004      	str	r0, [sp, #16]
 80056d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 814d 	beq.w	8005976 <_dtoa_r+0xb2e>
 80056dc:	2300      	movs	r3, #0
 80056de:	4631      	mov	r1, r6
 80056e0:	220a      	movs	r2, #10
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 fbb2 	bl	8005e4c <__multadd>
 80056e8:	9b02      	ldr	r3, [sp, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	4606      	mov	r6, r0
 80056ee:	dc4f      	bgt.n	8005790 <_dtoa_r+0x948>
 80056f0:	9b06      	ldr	r3, [sp, #24]
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	dd4c      	ble.n	8005790 <_dtoa_r+0x948>
 80056f6:	e011      	b.n	800571c <_dtoa_r+0x8d4>
 80056f8:	d0c9      	beq.n	800568e <_dtoa_r+0x846>
 80056fa:	9a05      	ldr	r2, [sp, #20]
 80056fc:	331c      	adds	r3, #28
 80056fe:	441a      	add	r2, r3
 8005700:	9205      	str	r2, [sp, #20]
 8005702:	441d      	add	r5, r3
 8005704:	4498      	add	r8, r3
 8005706:	e7c2      	b.n	800568e <_dtoa_r+0x846>
 8005708:	4603      	mov	r3, r0
 800570a:	e7f6      	b.n	80056fa <_dtoa_r+0x8b2>
 800570c:	f1b9 0f00 	cmp.w	r9, #0
 8005710:	dc38      	bgt.n	8005784 <_dtoa_r+0x93c>
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	2b02      	cmp	r3, #2
 8005716:	dd35      	ble.n	8005784 <_dtoa_r+0x93c>
 8005718:	f8cd 9008 	str.w	r9, [sp, #8]
 800571c:	9b02      	ldr	r3, [sp, #8]
 800571e:	b963      	cbnz	r3, 800573a <_dtoa_r+0x8f2>
 8005720:	4639      	mov	r1, r7
 8005722:	2205      	movs	r2, #5
 8005724:	4620      	mov	r0, r4
 8005726:	f000 fb91 	bl	8005e4c <__multadd>
 800572a:	4601      	mov	r1, r0
 800572c:	4607      	mov	r7, r0
 800572e:	9804      	ldr	r0, [sp, #16]
 8005730:	f000 fd56 	bl	80061e0 <__mcmp>
 8005734:	2800      	cmp	r0, #0
 8005736:	f73f adcc 	bgt.w	80052d2 <_dtoa_r+0x48a>
 800573a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800573c:	465d      	mov	r5, fp
 800573e:	ea6f 0a03 	mvn.w	sl, r3
 8005742:	f04f 0900 	mov.w	r9, #0
 8005746:	4639      	mov	r1, r7
 8005748:	4620      	mov	r0, r4
 800574a:	f000 fb68 	bl	8005e1e <_Bfree>
 800574e:	2e00      	cmp	r6, #0
 8005750:	f43f aeb7 	beq.w	80054c2 <_dtoa_r+0x67a>
 8005754:	f1b9 0f00 	cmp.w	r9, #0
 8005758:	d005      	beq.n	8005766 <_dtoa_r+0x91e>
 800575a:	45b1      	cmp	r9, r6
 800575c:	d003      	beq.n	8005766 <_dtoa_r+0x91e>
 800575e:	4649      	mov	r1, r9
 8005760:	4620      	mov	r0, r4
 8005762:	f000 fb5c 	bl	8005e1e <_Bfree>
 8005766:	4631      	mov	r1, r6
 8005768:	4620      	mov	r0, r4
 800576a:	f000 fb58 	bl	8005e1e <_Bfree>
 800576e:	e6a8      	b.n	80054c2 <_dtoa_r+0x67a>
 8005770:	2700      	movs	r7, #0
 8005772:	463e      	mov	r6, r7
 8005774:	e7e1      	b.n	800573a <_dtoa_r+0x8f2>
 8005776:	f8dd a020 	ldr.w	sl, [sp, #32]
 800577a:	463e      	mov	r6, r7
 800577c:	e5a9      	b.n	80052d2 <_dtoa_r+0x48a>
 800577e:	bf00      	nop
 8005780:	40240000 	.word	0x40240000
 8005784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005786:	f8cd 9008 	str.w	r9, [sp, #8]
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80fa 	beq.w	8005984 <_dtoa_r+0xb3c>
 8005790:	2d00      	cmp	r5, #0
 8005792:	dd05      	ble.n	80057a0 <_dtoa_r+0x958>
 8005794:	4631      	mov	r1, r6
 8005796:	462a      	mov	r2, r5
 8005798:	4620      	mov	r0, r4
 800579a:	f000 fccd 	bl	8006138 <__lshift>
 800579e:	4606      	mov	r6, r0
 80057a0:	9b07      	ldr	r3, [sp, #28]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d04c      	beq.n	8005840 <_dtoa_r+0x9f8>
 80057a6:	6871      	ldr	r1, [r6, #4]
 80057a8:	4620      	mov	r0, r4
 80057aa:	f000 fb04 	bl	8005db6 <_Balloc>
 80057ae:	6932      	ldr	r2, [r6, #16]
 80057b0:	3202      	adds	r2, #2
 80057b2:	4605      	mov	r5, r0
 80057b4:	0092      	lsls	r2, r2, #2
 80057b6:	f106 010c 	add.w	r1, r6, #12
 80057ba:	300c      	adds	r0, #12
 80057bc:	f000 faf0 	bl	8005da0 <memcpy>
 80057c0:	2201      	movs	r2, #1
 80057c2:	4629      	mov	r1, r5
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 fcb7 	bl	8006138 <__lshift>
 80057ca:	9b00      	ldr	r3, [sp, #0]
 80057cc:	f8cd b014 	str.w	fp, [sp, #20]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	46b1      	mov	r9, r6
 80057d6:	9307      	str	r3, [sp, #28]
 80057d8:	4606      	mov	r6, r0
 80057da:	4639      	mov	r1, r7
 80057dc:	9804      	ldr	r0, [sp, #16]
 80057de:	f7ff faa5 	bl	8004d2c <quorem>
 80057e2:	4649      	mov	r1, r9
 80057e4:	4605      	mov	r5, r0
 80057e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80057ea:	9804      	ldr	r0, [sp, #16]
 80057ec:	f000 fcf8 	bl	80061e0 <__mcmp>
 80057f0:	4632      	mov	r2, r6
 80057f2:	9000      	str	r0, [sp, #0]
 80057f4:	4639      	mov	r1, r7
 80057f6:	4620      	mov	r0, r4
 80057f8:	f000 fd0c 	bl	8006214 <__mdiff>
 80057fc:	68c3      	ldr	r3, [r0, #12]
 80057fe:	4602      	mov	r2, r0
 8005800:	bb03      	cbnz	r3, 8005844 <_dtoa_r+0x9fc>
 8005802:	4601      	mov	r1, r0
 8005804:	9008      	str	r0, [sp, #32]
 8005806:	9804      	ldr	r0, [sp, #16]
 8005808:	f000 fcea 	bl	80061e0 <__mcmp>
 800580c:	9a08      	ldr	r2, [sp, #32]
 800580e:	4603      	mov	r3, r0
 8005810:	4611      	mov	r1, r2
 8005812:	4620      	mov	r0, r4
 8005814:	9308      	str	r3, [sp, #32]
 8005816:	f000 fb02 	bl	8005e1e <_Bfree>
 800581a:	9b08      	ldr	r3, [sp, #32]
 800581c:	b9a3      	cbnz	r3, 8005848 <_dtoa_r+0xa00>
 800581e:	9a06      	ldr	r2, [sp, #24]
 8005820:	b992      	cbnz	r2, 8005848 <_dtoa_r+0xa00>
 8005822:	9a07      	ldr	r2, [sp, #28]
 8005824:	b982      	cbnz	r2, 8005848 <_dtoa_r+0xa00>
 8005826:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800582a:	d029      	beq.n	8005880 <_dtoa_r+0xa38>
 800582c:	9b00      	ldr	r3, [sp, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	dd01      	ble.n	8005836 <_dtoa_r+0x9ee>
 8005832:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005836:	9b05      	ldr	r3, [sp, #20]
 8005838:	1c5d      	adds	r5, r3, #1
 800583a:	f883 8000 	strb.w	r8, [r3]
 800583e:	e782      	b.n	8005746 <_dtoa_r+0x8fe>
 8005840:	4630      	mov	r0, r6
 8005842:	e7c2      	b.n	80057ca <_dtoa_r+0x982>
 8005844:	2301      	movs	r3, #1
 8005846:	e7e3      	b.n	8005810 <_dtoa_r+0x9c8>
 8005848:	9a00      	ldr	r2, [sp, #0]
 800584a:	2a00      	cmp	r2, #0
 800584c:	db04      	blt.n	8005858 <_dtoa_r+0xa10>
 800584e:	d125      	bne.n	800589c <_dtoa_r+0xa54>
 8005850:	9a06      	ldr	r2, [sp, #24]
 8005852:	bb1a      	cbnz	r2, 800589c <_dtoa_r+0xa54>
 8005854:	9a07      	ldr	r2, [sp, #28]
 8005856:	bb0a      	cbnz	r2, 800589c <_dtoa_r+0xa54>
 8005858:	2b00      	cmp	r3, #0
 800585a:	ddec      	ble.n	8005836 <_dtoa_r+0x9ee>
 800585c:	2201      	movs	r2, #1
 800585e:	9904      	ldr	r1, [sp, #16]
 8005860:	4620      	mov	r0, r4
 8005862:	f000 fc69 	bl	8006138 <__lshift>
 8005866:	4639      	mov	r1, r7
 8005868:	9004      	str	r0, [sp, #16]
 800586a:	f000 fcb9 	bl	80061e0 <__mcmp>
 800586e:	2800      	cmp	r0, #0
 8005870:	dc03      	bgt.n	800587a <_dtoa_r+0xa32>
 8005872:	d1e0      	bne.n	8005836 <_dtoa_r+0x9ee>
 8005874:	f018 0f01 	tst.w	r8, #1
 8005878:	d0dd      	beq.n	8005836 <_dtoa_r+0x9ee>
 800587a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800587e:	d1d8      	bne.n	8005832 <_dtoa_r+0x9ea>
 8005880:	9b05      	ldr	r3, [sp, #20]
 8005882:	9a05      	ldr	r2, [sp, #20]
 8005884:	1c5d      	adds	r5, r3, #1
 8005886:	2339      	movs	r3, #57	; 0x39
 8005888:	7013      	strb	r3, [r2, #0]
 800588a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800588e:	2b39      	cmp	r3, #57	; 0x39
 8005890:	f105 32ff 	add.w	r2, r5, #4294967295
 8005894:	d04f      	beq.n	8005936 <_dtoa_r+0xaee>
 8005896:	3301      	adds	r3, #1
 8005898:	7013      	strb	r3, [r2, #0]
 800589a:	e754      	b.n	8005746 <_dtoa_r+0x8fe>
 800589c:	9a05      	ldr	r2, [sp, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f102 0501 	add.w	r5, r2, #1
 80058a4:	dd06      	ble.n	80058b4 <_dtoa_r+0xa6c>
 80058a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80058aa:	d0e9      	beq.n	8005880 <_dtoa_r+0xa38>
 80058ac:	f108 0801 	add.w	r8, r8, #1
 80058b0:	9b05      	ldr	r3, [sp, #20]
 80058b2:	e7c2      	b.n	800583a <_dtoa_r+0x9f2>
 80058b4:	9a02      	ldr	r2, [sp, #8]
 80058b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80058ba:	eba5 030b 	sub.w	r3, r5, fp
 80058be:	4293      	cmp	r3, r2
 80058c0:	d021      	beq.n	8005906 <_dtoa_r+0xabe>
 80058c2:	2300      	movs	r3, #0
 80058c4:	220a      	movs	r2, #10
 80058c6:	9904      	ldr	r1, [sp, #16]
 80058c8:	4620      	mov	r0, r4
 80058ca:	f000 fabf 	bl	8005e4c <__multadd>
 80058ce:	45b1      	cmp	r9, r6
 80058d0:	9004      	str	r0, [sp, #16]
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	f04f 020a 	mov.w	r2, #10
 80058da:	4649      	mov	r1, r9
 80058dc:	4620      	mov	r0, r4
 80058de:	d105      	bne.n	80058ec <_dtoa_r+0xaa4>
 80058e0:	f000 fab4 	bl	8005e4c <__multadd>
 80058e4:	4681      	mov	r9, r0
 80058e6:	4606      	mov	r6, r0
 80058e8:	9505      	str	r5, [sp, #20]
 80058ea:	e776      	b.n	80057da <_dtoa_r+0x992>
 80058ec:	f000 faae 	bl	8005e4c <__multadd>
 80058f0:	4631      	mov	r1, r6
 80058f2:	4681      	mov	r9, r0
 80058f4:	2300      	movs	r3, #0
 80058f6:	220a      	movs	r2, #10
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 faa7 	bl	8005e4c <__multadd>
 80058fe:	4606      	mov	r6, r0
 8005900:	e7f2      	b.n	80058e8 <_dtoa_r+0xaa0>
 8005902:	f04f 0900 	mov.w	r9, #0
 8005906:	2201      	movs	r2, #1
 8005908:	9904      	ldr	r1, [sp, #16]
 800590a:	4620      	mov	r0, r4
 800590c:	f000 fc14 	bl	8006138 <__lshift>
 8005910:	4639      	mov	r1, r7
 8005912:	9004      	str	r0, [sp, #16]
 8005914:	f000 fc64 	bl	80061e0 <__mcmp>
 8005918:	2800      	cmp	r0, #0
 800591a:	dcb6      	bgt.n	800588a <_dtoa_r+0xa42>
 800591c:	d102      	bne.n	8005924 <_dtoa_r+0xadc>
 800591e:	f018 0f01 	tst.w	r8, #1
 8005922:	d1b2      	bne.n	800588a <_dtoa_r+0xa42>
 8005924:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005928:	2b30      	cmp	r3, #48	; 0x30
 800592a:	f105 32ff 	add.w	r2, r5, #4294967295
 800592e:	f47f af0a 	bne.w	8005746 <_dtoa_r+0x8fe>
 8005932:	4615      	mov	r5, r2
 8005934:	e7f6      	b.n	8005924 <_dtoa_r+0xadc>
 8005936:	4593      	cmp	fp, r2
 8005938:	d105      	bne.n	8005946 <_dtoa_r+0xafe>
 800593a:	2331      	movs	r3, #49	; 0x31
 800593c:	f10a 0a01 	add.w	sl, sl, #1
 8005940:	f88b 3000 	strb.w	r3, [fp]
 8005944:	e6ff      	b.n	8005746 <_dtoa_r+0x8fe>
 8005946:	4615      	mov	r5, r2
 8005948:	e79f      	b.n	800588a <_dtoa_r+0xa42>
 800594a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80059b0 <_dtoa_r+0xb68>
 800594e:	e007      	b.n	8005960 <_dtoa_r+0xb18>
 8005950:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005952:	f8df b060 	ldr.w	fp, [pc, #96]	; 80059b4 <_dtoa_r+0xb6c>
 8005956:	b11b      	cbz	r3, 8005960 <_dtoa_r+0xb18>
 8005958:	f10b 0308 	add.w	r3, fp, #8
 800595c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	4658      	mov	r0, fp
 8005962:	b017      	add	sp, #92	; 0x5c
 8005964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005968:	9b06      	ldr	r3, [sp, #24]
 800596a:	2b01      	cmp	r3, #1
 800596c:	f77f ae35 	ble.w	80055da <_dtoa_r+0x792>
 8005970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005972:	9307      	str	r3, [sp, #28]
 8005974:	e649      	b.n	800560a <_dtoa_r+0x7c2>
 8005976:	9b02      	ldr	r3, [sp, #8]
 8005978:	2b00      	cmp	r3, #0
 800597a:	dc03      	bgt.n	8005984 <_dtoa_r+0xb3c>
 800597c:	9b06      	ldr	r3, [sp, #24]
 800597e:	2b02      	cmp	r3, #2
 8005980:	f73f aecc 	bgt.w	800571c <_dtoa_r+0x8d4>
 8005984:	465d      	mov	r5, fp
 8005986:	4639      	mov	r1, r7
 8005988:	9804      	ldr	r0, [sp, #16]
 800598a:	f7ff f9cf 	bl	8004d2c <quorem>
 800598e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005992:	f805 8b01 	strb.w	r8, [r5], #1
 8005996:	9a02      	ldr	r2, [sp, #8]
 8005998:	eba5 030b 	sub.w	r3, r5, fp
 800599c:	429a      	cmp	r2, r3
 800599e:	ddb0      	ble.n	8005902 <_dtoa_r+0xaba>
 80059a0:	2300      	movs	r3, #0
 80059a2:	220a      	movs	r2, #10
 80059a4:	9904      	ldr	r1, [sp, #16]
 80059a6:	4620      	mov	r0, r4
 80059a8:	f000 fa50 	bl	8005e4c <__multadd>
 80059ac:	9004      	str	r0, [sp, #16]
 80059ae:	e7ea      	b.n	8005986 <_dtoa_r+0xb3e>
 80059b0:	08006a1c 	.word	0x08006a1c
 80059b4:	08006a40 	.word	0x08006a40

080059b8 <__sflush_r>:
 80059b8:	898a      	ldrh	r2, [r1, #12]
 80059ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059be:	4605      	mov	r5, r0
 80059c0:	0710      	lsls	r0, r2, #28
 80059c2:	460c      	mov	r4, r1
 80059c4:	d458      	bmi.n	8005a78 <__sflush_r+0xc0>
 80059c6:	684b      	ldr	r3, [r1, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	dc05      	bgt.n	80059d8 <__sflush_r+0x20>
 80059cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	dc02      	bgt.n	80059d8 <__sflush_r+0x20>
 80059d2:	2000      	movs	r0, #0
 80059d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059da:	2e00      	cmp	r6, #0
 80059dc:	d0f9      	beq.n	80059d2 <__sflush_r+0x1a>
 80059de:	2300      	movs	r3, #0
 80059e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059e4:	682f      	ldr	r7, [r5, #0]
 80059e6:	6a21      	ldr	r1, [r4, #32]
 80059e8:	602b      	str	r3, [r5, #0]
 80059ea:	d032      	beq.n	8005a52 <__sflush_r+0x9a>
 80059ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059ee:	89a3      	ldrh	r3, [r4, #12]
 80059f0:	075a      	lsls	r2, r3, #29
 80059f2:	d505      	bpl.n	8005a00 <__sflush_r+0x48>
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	1ac0      	subs	r0, r0, r3
 80059f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059fa:	b10b      	cbz	r3, 8005a00 <__sflush_r+0x48>
 80059fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059fe:	1ac0      	subs	r0, r0, r3
 8005a00:	2300      	movs	r3, #0
 8005a02:	4602      	mov	r2, r0
 8005a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a06:	6a21      	ldr	r1, [r4, #32]
 8005a08:	4628      	mov	r0, r5
 8005a0a:	47b0      	blx	r6
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	d106      	bne.n	8005a20 <__sflush_r+0x68>
 8005a12:	6829      	ldr	r1, [r5, #0]
 8005a14:	291d      	cmp	r1, #29
 8005a16:	d848      	bhi.n	8005aaa <__sflush_r+0xf2>
 8005a18:	4a29      	ldr	r2, [pc, #164]	; (8005ac0 <__sflush_r+0x108>)
 8005a1a:	40ca      	lsrs	r2, r1
 8005a1c:	07d6      	lsls	r6, r2, #31
 8005a1e:	d544      	bpl.n	8005aaa <__sflush_r+0xf2>
 8005a20:	2200      	movs	r2, #0
 8005a22:	6062      	str	r2, [r4, #4]
 8005a24:	04d9      	lsls	r1, r3, #19
 8005a26:	6922      	ldr	r2, [r4, #16]
 8005a28:	6022      	str	r2, [r4, #0]
 8005a2a:	d504      	bpl.n	8005a36 <__sflush_r+0x7e>
 8005a2c:	1c42      	adds	r2, r0, #1
 8005a2e:	d101      	bne.n	8005a34 <__sflush_r+0x7c>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b903      	cbnz	r3, 8005a36 <__sflush_r+0x7e>
 8005a34:	6560      	str	r0, [r4, #84]	; 0x54
 8005a36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a38:	602f      	str	r7, [r5, #0]
 8005a3a:	2900      	cmp	r1, #0
 8005a3c:	d0c9      	beq.n	80059d2 <__sflush_r+0x1a>
 8005a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a42:	4299      	cmp	r1, r3
 8005a44:	d002      	beq.n	8005a4c <__sflush_r+0x94>
 8005a46:	4628      	mov	r0, r5
 8005a48:	f000 fc9e 	bl	8006388 <_free_r>
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	6360      	str	r0, [r4, #52]	; 0x34
 8005a50:	e7c0      	b.n	80059d4 <__sflush_r+0x1c>
 8005a52:	2301      	movs	r3, #1
 8005a54:	4628      	mov	r0, r5
 8005a56:	47b0      	blx	r6
 8005a58:	1c41      	adds	r1, r0, #1
 8005a5a:	d1c8      	bne.n	80059ee <__sflush_r+0x36>
 8005a5c:	682b      	ldr	r3, [r5, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0c5      	beq.n	80059ee <__sflush_r+0x36>
 8005a62:	2b1d      	cmp	r3, #29
 8005a64:	d001      	beq.n	8005a6a <__sflush_r+0xb2>
 8005a66:	2b16      	cmp	r3, #22
 8005a68:	d101      	bne.n	8005a6e <__sflush_r+0xb6>
 8005a6a:	602f      	str	r7, [r5, #0]
 8005a6c:	e7b1      	b.n	80059d2 <__sflush_r+0x1a>
 8005a6e:	89a3      	ldrh	r3, [r4, #12]
 8005a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a74:	81a3      	strh	r3, [r4, #12]
 8005a76:	e7ad      	b.n	80059d4 <__sflush_r+0x1c>
 8005a78:	690f      	ldr	r7, [r1, #16]
 8005a7a:	2f00      	cmp	r7, #0
 8005a7c:	d0a9      	beq.n	80059d2 <__sflush_r+0x1a>
 8005a7e:	0793      	lsls	r3, r2, #30
 8005a80:	680e      	ldr	r6, [r1, #0]
 8005a82:	bf08      	it	eq
 8005a84:	694b      	ldreq	r3, [r1, #20]
 8005a86:	600f      	str	r7, [r1, #0]
 8005a88:	bf18      	it	ne
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	eba6 0807 	sub.w	r8, r6, r7
 8005a90:	608b      	str	r3, [r1, #8]
 8005a92:	f1b8 0f00 	cmp.w	r8, #0
 8005a96:	dd9c      	ble.n	80059d2 <__sflush_r+0x1a>
 8005a98:	4643      	mov	r3, r8
 8005a9a:	463a      	mov	r2, r7
 8005a9c:	6a21      	ldr	r1, [r4, #32]
 8005a9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005aa0:	4628      	mov	r0, r5
 8005aa2:	47b0      	blx	r6
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	dc06      	bgt.n	8005ab6 <__sflush_r+0xfe>
 8005aa8:	89a3      	ldrh	r3, [r4, #12]
 8005aaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aae:	81a3      	strh	r3, [r4, #12]
 8005ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab4:	e78e      	b.n	80059d4 <__sflush_r+0x1c>
 8005ab6:	4407      	add	r7, r0
 8005ab8:	eba8 0800 	sub.w	r8, r8, r0
 8005abc:	e7e9      	b.n	8005a92 <__sflush_r+0xda>
 8005abe:	bf00      	nop
 8005ac0:	20400001 	.word	0x20400001

08005ac4 <_fflush_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	690b      	ldr	r3, [r1, #16]
 8005ac8:	4605      	mov	r5, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	b1db      	cbz	r3, 8005b06 <_fflush_r+0x42>
 8005ace:	b118      	cbz	r0, 8005ad8 <_fflush_r+0x14>
 8005ad0:	6983      	ldr	r3, [r0, #24]
 8005ad2:	b90b      	cbnz	r3, 8005ad8 <_fflush_r+0x14>
 8005ad4:	f000 f860 	bl	8005b98 <__sinit>
 8005ad8:	4b0c      	ldr	r3, [pc, #48]	; (8005b0c <_fflush_r+0x48>)
 8005ada:	429c      	cmp	r4, r3
 8005adc:	d109      	bne.n	8005af2 <_fflush_r+0x2e>
 8005ade:	686c      	ldr	r4, [r5, #4]
 8005ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ae4:	b17b      	cbz	r3, 8005b06 <_fflush_r+0x42>
 8005ae6:	4621      	mov	r1, r4
 8005ae8:	4628      	mov	r0, r5
 8005aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005aee:	f7ff bf63 	b.w	80059b8 <__sflush_r>
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <_fflush_r+0x4c>)
 8005af4:	429c      	cmp	r4, r3
 8005af6:	d101      	bne.n	8005afc <_fflush_r+0x38>
 8005af8:	68ac      	ldr	r4, [r5, #8]
 8005afa:	e7f1      	b.n	8005ae0 <_fflush_r+0x1c>
 8005afc:	4b05      	ldr	r3, [pc, #20]	; (8005b14 <_fflush_r+0x50>)
 8005afe:	429c      	cmp	r4, r3
 8005b00:	bf08      	it	eq
 8005b02:	68ec      	ldreq	r4, [r5, #12]
 8005b04:	e7ec      	b.n	8005ae0 <_fflush_r+0x1c>
 8005b06:	2000      	movs	r0, #0
 8005b08:	bd38      	pop	{r3, r4, r5, pc}
 8005b0a:	bf00      	nop
 8005b0c:	08006a70 	.word	0x08006a70
 8005b10:	08006a90 	.word	0x08006a90
 8005b14:	08006a50 	.word	0x08006a50

08005b18 <std>:
 8005b18:	2300      	movs	r3, #0
 8005b1a:	b510      	push	{r4, lr}
 8005b1c:	4604      	mov	r4, r0
 8005b1e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b22:	6083      	str	r3, [r0, #8]
 8005b24:	8181      	strh	r1, [r0, #12]
 8005b26:	6643      	str	r3, [r0, #100]	; 0x64
 8005b28:	81c2      	strh	r2, [r0, #14]
 8005b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b2e:	6183      	str	r3, [r0, #24]
 8005b30:	4619      	mov	r1, r3
 8005b32:	2208      	movs	r2, #8
 8005b34:	305c      	adds	r0, #92	; 0x5c
 8005b36:	f7fe fb3f 	bl	80041b8 <memset>
 8005b3a:	4b05      	ldr	r3, [pc, #20]	; (8005b50 <std+0x38>)
 8005b3c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b3e:	4b05      	ldr	r3, [pc, #20]	; (8005b54 <std+0x3c>)
 8005b40:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <std+0x40>)
 8005b44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b46:	4b05      	ldr	r3, [pc, #20]	; (8005b5c <std+0x44>)
 8005b48:	6224      	str	r4, [r4, #32]
 8005b4a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	bf00      	nop
 8005b50:	08006779 	.word	0x08006779
 8005b54:	0800679b 	.word	0x0800679b
 8005b58:	080067d3 	.word	0x080067d3
 8005b5c:	080067f7 	.word	0x080067f7

08005b60 <_cleanup_r>:
 8005b60:	4901      	ldr	r1, [pc, #4]	; (8005b68 <_cleanup_r+0x8>)
 8005b62:	f000 b885 	b.w	8005c70 <_fwalk_reent>
 8005b66:	bf00      	nop
 8005b68:	08005ac5 	.word	0x08005ac5

08005b6c <__sfmoreglue>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	1e4a      	subs	r2, r1, #1
 8005b70:	2568      	movs	r5, #104	; 0x68
 8005b72:	4355      	muls	r5, r2
 8005b74:	460e      	mov	r6, r1
 8005b76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b7a:	f000 fc53 	bl	8006424 <_malloc_r>
 8005b7e:	4604      	mov	r4, r0
 8005b80:	b140      	cbz	r0, 8005b94 <__sfmoreglue+0x28>
 8005b82:	2100      	movs	r1, #0
 8005b84:	e9c0 1600 	strd	r1, r6, [r0]
 8005b88:	300c      	adds	r0, #12
 8005b8a:	60a0      	str	r0, [r4, #8]
 8005b8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b90:	f7fe fb12 	bl	80041b8 <memset>
 8005b94:	4620      	mov	r0, r4
 8005b96:	bd70      	pop	{r4, r5, r6, pc}

08005b98 <__sinit>:
 8005b98:	6983      	ldr	r3, [r0, #24]
 8005b9a:	b510      	push	{r4, lr}
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	bb33      	cbnz	r3, 8005bee <__sinit+0x56>
 8005ba0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005ba4:	6503      	str	r3, [r0, #80]	; 0x50
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <__sinit+0x58>)
 8005ba8:	4a12      	ldr	r2, [pc, #72]	; (8005bf4 <__sinit+0x5c>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6282      	str	r2, [r0, #40]	; 0x28
 8005bae:	4298      	cmp	r0, r3
 8005bb0:	bf04      	itt	eq
 8005bb2:	2301      	moveq	r3, #1
 8005bb4:	6183      	streq	r3, [r0, #24]
 8005bb6:	f000 f81f 	bl	8005bf8 <__sfp>
 8005bba:	6060      	str	r0, [r4, #4]
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 f81b 	bl	8005bf8 <__sfp>
 8005bc2:	60a0      	str	r0, [r4, #8]
 8005bc4:	4620      	mov	r0, r4
 8005bc6:	f000 f817 	bl	8005bf8 <__sfp>
 8005bca:	2200      	movs	r2, #0
 8005bcc:	60e0      	str	r0, [r4, #12]
 8005bce:	2104      	movs	r1, #4
 8005bd0:	6860      	ldr	r0, [r4, #4]
 8005bd2:	f7ff ffa1 	bl	8005b18 <std>
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	2109      	movs	r1, #9
 8005bda:	68a0      	ldr	r0, [r4, #8]
 8005bdc:	f7ff ff9c 	bl	8005b18 <std>
 8005be0:	2202      	movs	r2, #2
 8005be2:	2112      	movs	r1, #18
 8005be4:	68e0      	ldr	r0, [r4, #12]
 8005be6:	f7ff ff97 	bl	8005b18 <std>
 8005bea:	2301      	movs	r3, #1
 8005bec:	61a3      	str	r3, [r4, #24]
 8005bee:	bd10      	pop	{r4, pc}
 8005bf0:	08006a08 	.word	0x08006a08
 8005bf4:	08005b61 	.word	0x08005b61

08005bf8 <__sfp>:
 8005bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <__sfp+0x70>)
 8005bfc:	681e      	ldr	r6, [r3, #0]
 8005bfe:	69b3      	ldr	r3, [r6, #24]
 8005c00:	4607      	mov	r7, r0
 8005c02:	b913      	cbnz	r3, 8005c0a <__sfp+0x12>
 8005c04:	4630      	mov	r0, r6
 8005c06:	f7ff ffc7 	bl	8005b98 <__sinit>
 8005c0a:	3648      	adds	r6, #72	; 0x48
 8005c0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	d503      	bpl.n	8005c1c <__sfp+0x24>
 8005c14:	6833      	ldr	r3, [r6, #0]
 8005c16:	b133      	cbz	r3, 8005c26 <__sfp+0x2e>
 8005c18:	6836      	ldr	r6, [r6, #0]
 8005c1a:	e7f7      	b.n	8005c0c <__sfp+0x14>
 8005c1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005c20:	b16d      	cbz	r5, 8005c3e <__sfp+0x46>
 8005c22:	3468      	adds	r4, #104	; 0x68
 8005c24:	e7f4      	b.n	8005c10 <__sfp+0x18>
 8005c26:	2104      	movs	r1, #4
 8005c28:	4638      	mov	r0, r7
 8005c2a:	f7ff ff9f 	bl	8005b6c <__sfmoreglue>
 8005c2e:	6030      	str	r0, [r6, #0]
 8005c30:	2800      	cmp	r0, #0
 8005c32:	d1f1      	bne.n	8005c18 <__sfp+0x20>
 8005c34:	230c      	movs	r3, #12
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4604      	mov	r4, r0
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	; (8005c6c <__sfp+0x74>)
 8005c40:	6665      	str	r5, [r4, #100]	; 0x64
 8005c42:	e9c4 5500 	strd	r5, r5, [r4]
 8005c46:	60a5      	str	r5, [r4, #8]
 8005c48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005c4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005c50:	2208      	movs	r2, #8
 8005c52:	4629      	mov	r1, r5
 8005c54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c58:	f7fe faae 	bl	80041b8 <memset>
 8005c5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c64:	e7e9      	b.n	8005c3a <__sfp+0x42>
 8005c66:	bf00      	nop
 8005c68:	08006a08 	.word	0x08006a08
 8005c6c:	ffff0001 	.word	0xffff0001

08005c70 <_fwalk_reent>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	4680      	mov	r8, r0
 8005c76:	4689      	mov	r9, r1
 8005c78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c7c:	2600      	movs	r6, #0
 8005c7e:	b914      	cbnz	r4, 8005c86 <_fwalk_reent+0x16>
 8005c80:	4630      	mov	r0, r6
 8005c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005c8a:	3f01      	subs	r7, #1
 8005c8c:	d501      	bpl.n	8005c92 <_fwalk_reent+0x22>
 8005c8e:	6824      	ldr	r4, [r4, #0]
 8005c90:	e7f5      	b.n	8005c7e <_fwalk_reent+0xe>
 8005c92:	89ab      	ldrh	r3, [r5, #12]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d907      	bls.n	8005ca8 <_fwalk_reent+0x38>
 8005c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	d003      	beq.n	8005ca8 <_fwalk_reent+0x38>
 8005ca0:	4629      	mov	r1, r5
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	47c8      	blx	r9
 8005ca6:	4306      	orrs	r6, r0
 8005ca8:	3568      	adds	r5, #104	; 0x68
 8005caa:	e7ee      	b.n	8005c8a <_fwalk_reent+0x1a>

08005cac <_localeconv_r>:
 8005cac:	4b04      	ldr	r3, [pc, #16]	; (8005cc0 <_localeconv_r+0x14>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6a18      	ldr	r0, [r3, #32]
 8005cb2:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <_localeconv_r+0x18>)
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	bf08      	it	eq
 8005cb8:	4618      	moveq	r0, r3
 8005cba:	30f0      	adds	r0, #240	; 0xf0
 8005cbc:	4770      	bx	lr
 8005cbe:	bf00      	nop
 8005cc0:	2000000c 	.word	0x2000000c
 8005cc4:	20000070 	.word	0x20000070

08005cc8 <__swhatbuf_r>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	460e      	mov	r6, r1
 8005ccc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd0:	2900      	cmp	r1, #0
 8005cd2:	b096      	sub	sp, #88	; 0x58
 8005cd4:	4614      	mov	r4, r2
 8005cd6:	461d      	mov	r5, r3
 8005cd8:	da07      	bge.n	8005cea <__swhatbuf_r+0x22>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	602b      	str	r3, [r5, #0]
 8005cde:	89b3      	ldrh	r3, [r6, #12]
 8005ce0:	061a      	lsls	r2, r3, #24
 8005ce2:	d410      	bmi.n	8005d06 <__swhatbuf_r+0x3e>
 8005ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ce8:	e00e      	b.n	8005d08 <__swhatbuf_r+0x40>
 8005cea:	466a      	mov	r2, sp
 8005cec:	f000 fdaa 	bl	8006844 <_fstat_r>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	dbf2      	blt.n	8005cda <__swhatbuf_r+0x12>
 8005cf4:	9a01      	ldr	r2, [sp, #4]
 8005cf6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cfa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cfe:	425a      	negs	r2, r3
 8005d00:	415a      	adcs	r2, r3
 8005d02:	602a      	str	r2, [r5, #0]
 8005d04:	e7ee      	b.n	8005ce4 <__swhatbuf_r+0x1c>
 8005d06:	2340      	movs	r3, #64	; 0x40
 8005d08:	2000      	movs	r0, #0
 8005d0a:	6023      	str	r3, [r4, #0]
 8005d0c:	b016      	add	sp, #88	; 0x58
 8005d0e:	bd70      	pop	{r4, r5, r6, pc}

08005d10 <__smakebuf_r>:
 8005d10:	898b      	ldrh	r3, [r1, #12]
 8005d12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005d14:	079d      	lsls	r5, r3, #30
 8005d16:	4606      	mov	r6, r0
 8005d18:	460c      	mov	r4, r1
 8005d1a:	d507      	bpl.n	8005d2c <__smakebuf_r+0x1c>
 8005d1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	6123      	str	r3, [r4, #16]
 8005d24:	2301      	movs	r3, #1
 8005d26:	6163      	str	r3, [r4, #20]
 8005d28:	b002      	add	sp, #8
 8005d2a:	bd70      	pop	{r4, r5, r6, pc}
 8005d2c:	ab01      	add	r3, sp, #4
 8005d2e:	466a      	mov	r2, sp
 8005d30:	f7ff ffca 	bl	8005cc8 <__swhatbuf_r>
 8005d34:	9900      	ldr	r1, [sp, #0]
 8005d36:	4605      	mov	r5, r0
 8005d38:	4630      	mov	r0, r6
 8005d3a:	f000 fb73 	bl	8006424 <_malloc_r>
 8005d3e:	b948      	cbnz	r0, 8005d54 <__smakebuf_r+0x44>
 8005d40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d44:	059a      	lsls	r2, r3, #22
 8005d46:	d4ef      	bmi.n	8005d28 <__smakebuf_r+0x18>
 8005d48:	f023 0303 	bic.w	r3, r3, #3
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	e7e3      	b.n	8005d1c <__smakebuf_r+0xc>
 8005d54:	4b0d      	ldr	r3, [pc, #52]	; (8005d8c <__smakebuf_r+0x7c>)
 8005d56:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d58:	89a3      	ldrh	r3, [r4, #12]
 8005d5a:	6020      	str	r0, [r4, #0]
 8005d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d60:	81a3      	strh	r3, [r4, #12]
 8005d62:	9b00      	ldr	r3, [sp, #0]
 8005d64:	6163      	str	r3, [r4, #20]
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	6120      	str	r0, [r4, #16]
 8005d6a:	b15b      	cbz	r3, 8005d84 <__smakebuf_r+0x74>
 8005d6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d70:	4630      	mov	r0, r6
 8005d72:	f000 fd79 	bl	8006868 <_isatty_r>
 8005d76:	b128      	cbz	r0, 8005d84 <__smakebuf_r+0x74>
 8005d78:	89a3      	ldrh	r3, [r4, #12]
 8005d7a:	f023 0303 	bic.w	r3, r3, #3
 8005d7e:	f043 0301 	orr.w	r3, r3, #1
 8005d82:	81a3      	strh	r3, [r4, #12]
 8005d84:	89a3      	ldrh	r3, [r4, #12]
 8005d86:	431d      	orrs	r5, r3
 8005d88:	81a5      	strh	r5, [r4, #12]
 8005d8a:	e7cd      	b.n	8005d28 <__smakebuf_r+0x18>
 8005d8c:	08005b61 	.word	0x08005b61

08005d90 <malloc>:
 8005d90:	4b02      	ldr	r3, [pc, #8]	; (8005d9c <malloc+0xc>)
 8005d92:	4601      	mov	r1, r0
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	f000 bb45 	b.w	8006424 <_malloc_r>
 8005d9a:	bf00      	nop
 8005d9c:	2000000c 	.word	0x2000000c

08005da0 <memcpy>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	1e43      	subs	r3, r0, #1
 8005da4:	440a      	add	r2, r1
 8005da6:	4291      	cmp	r1, r2
 8005da8:	d100      	bne.n	8005dac <memcpy+0xc>
 8005daa:	bd10      	pop	{r4, pc}
 8005dac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005db4:	e7f7      	b.n	8005da6 <memcpy+0x6>

08005db6 <_Balloc>:
 8005db6:	b570      	push	{r4, r5, r6, lr}
 8005db8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005dba:	4604      	mov	r4, r0
 8005dbc:	460e      	mov	r6, r1
 8005dbe:	b93d      	cbnz	r5, 8005dd0 <_Balloc+0x1a>
 8005dc0:	2010      	movs	r0, #16
 8005dc2:	f7ff ffe5 	bl	8005d90 <malloc>
 8005dc6:	6260      	str	r0, [r4, #36]	; 0x24
 8005dc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005dcc:	6005      	str	r5, [r0, #0]
 8005dce:	60c5      	str	r5, [r0, #12]
 8005dd0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005dd2:	68eb      	ldr	r3, [r5, #12]
 8005dd4:	b183      	cbz	r3, 8005df8 <_Balloc+0x42>
 8005dd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005dde:	b9b8      	cbnz	r0, 8005e10 <_Balloc+0x5a>
 8005de0:	2101      	movs	r1, #1
 8005de2:	fa01 f506 	lsl.w	r5, r1, r6
 8005de6:	1d6a      	adds	r2, r5, #5
 8005de8:	0092      	lsls	r2, r2, #2
 8005dea:	4620      	mov	r0, r4
 8005dec:	f000 fabe 	bl	800636c <_calloc_r>
 8005df0:	b160      	cbz	r0, 8005e0c <_Balloc+0x56>
 8005df2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005df6:	e00e      	b.n	8005e16 <_Balloc+0x60>
 8005df8:	2221      	movs	r2, #33	; 0x21
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f000 fab5 	bl	800636c <_calloc_r>
 8005e02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e04:	60e8      	str	r0, [r5, #12]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e4      	bne.n	8005dd6 <_Balloc+0x20>
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	6802      	ldr	r2, [r0, #0]
 8005e12:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005e16:	2300      	movs	r3, #0
 8005e18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e1c:	e7f7      	b.n	8005e0e <_Balloc+0x58>

08005e1e <_Bfree>:
 8005e1e:	b570      	push	{r4, r5, r6, lr}
 8005e20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005e22:	4606      	mov	r6, r0
 8005e24:	460d      	mov	r5, r1
 8005e26:	b93c      	cbnz	r4, 8005e38 <_Bfree+0x1a>
 8005e28:	2010      	movs	r0, #16
 8005e2a:	f7ff ffb1 	bl	8005d90 <malloc>
 8005e2e:	6270      	str	r0, [r6, #36]	; 0x24
 8005e30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e34:	6004      	str	r4, [r0, #0]
 8005e36:	60c4      	str	r4, [r0, #12]
 8005e38:	b13d      	cbz	r5, 8005e4a <_Bfree+0x2c>
 8005e3a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005e3c:	686a      	ldr	r2, [r5, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e44:	6029      	str	r1, [r5, #0]
 8005e46:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005e4a:	bd70      	pop	{r4, r5, r6, pc}

08005e4c <__multadd>:
 8005e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e50:	690d      	ldr	r5, [r1, #16]
 8005e52:	461f      	mov	r7, r3
 8005e54:	4606      	mov	r6, r0
 8005e56:	460c      	mov	r4, r1
 8005e58:	f101 0c14 	add.w	ip, r1, #20
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8dc 0000 	ldr.w	r0, [ip]
 8005e62:	b281      	uxth	r1, r0
 8005e64:	fb02 7101 	mla	r1, r2, r1, r7
 8005e68:	0c0f      	lsrs	r7, r1, #16
 8005e6a:	0c00      	lsrs	r0, r0, #16
 8005e6c:	fb02 7000 	mla	r0, r2, r0, r7
 8005e70:	b289      	uxth	r1, r1
 8005e72:	3301      	adds	r3, #1
 8005e74:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005e78:	429d      	cmp	r5, r3
 8005e7a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005e7e:	f84c 1b04 	str.w	r1, [ip], #4
 8005e82:	dcec      	bgt.n	8005e5e <__multadd+0x12>
 8005e84:	b1d7      	cbz	r7, 8005ebc <__multadd+0x70>
 8005e86:	68a3      	ldr	r3, [r4, #8]
 8005e88:	42ab      	cmp	r3, r5
 8005e8a:	dc12      	bgt.n	8005eb2 <__multadd+0x66>
 8005e8c:	6861      	ldr	r1, [r4, #4]
 8005e8e:	4630      	mov	r0, r6
 8005e90:	3101      	adds	r1, #1
 8005e92:	f7ff ff90 	bl	8005db6 <_Balloc>
 8005e96:	6922      	ldr	r2, [r4, #16]
 8005e98:	3202      	adds	r2, #2
 8005e9a:	f104 010c 	add.w	r1, r4, #12
 8005e9e:	4680      	mov	r8, r0
 8005ea0:	0092      	lsls	r2, r2, #2
 8005ea2:	300c      	adds	r0, #12
 8005ea4:	f7ff ff7c 	bl	8005da0 <memcpy>
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	4630      	mov	r0, r6
 8005eac:	f7ff ffb7 	bl	8005e1e <_Bfree>
 8005eb0:	4644      	mov	r4, r8
 8005eb2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005eb6:	3501      	adds	r5, #1
 8005eb8:	615f      	str	r7, [r3, #20]
 8005eba:	6125      	str	r5, [r4, #16]
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ec2 <__hi0bits>:
 8005ec2:	0c02      	lsrs	r2, r0, #16
 8005ec4:	0412      	lsls	r2, r2, #16
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	b9b2      	cbnz	r2, 8005ef8 <__hi0bits+0x36>
 8005eca:	0403      	lsls	r3, r0, #16
 8005ecc:	2010      	movs	r0, #16
 8005ece:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005ed2:	bf04      	itt	eq
 8005ed4:	021b      	lsleq	r3, r3, #8
 8005ed6:	3008      	addeq	r0, #8
 8005ed8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005edc:	bf04      	itt	eq
 8005ede:	011b      	lsleq	r3, r3, #4
 8005ee0:	3004      	addeq	r0, #4
 8005ee2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005ee6:	bf04      	itt	eq
 8005ee8:	009b      	lsleq	r3, r3, #2
 8005eea:	3002      	addeq	r0, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	db06      	blt.n	8005efe <__hi0bits+0x3c>
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	d503      	bpl.n	8005efc <__hi0bits+0x3a>
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	4770      	bx	lr
 8005ef8:	2000      	movs	r0, #0
 8005efa:	e7e8      	b.n	8005ece <__hi0bits+0xc>
 8005efc:	2020      	movs	r0, #32
 8005efe:	4770      	bx	lr

08005f00 <__lo0bits>:
 8005f00:	6803      	ldr	r3, [r0, #0]
 8005f02:	f013 0207 	ands.w	r2, r3, #7
 8005f06:	4601      	mov	r1, r0
 8005f08:	d00b      	beq.n	8005f22 <__lo0bits+0x22>
 8005f0a:	07da      	lsls	r2, r3, #31
 8005f0c:	d423      	bmi.n	8005f56 <__lo0bits+0x56>
 8005f0e:	0798      	lsls	r0, r3, #30
 8005f10:	bf49      	itett	mi
 8005f12:	085b      	lsrmi	r3, r3, #1
 8005f14:	089b      	lsrpl	r3, r3, #2
 8005f16:	2001      	movmi	r0, #1
 8005f18:	600b      	strmi	r3, [r1, #0]
 8005f1a:	bf5c      	itt	pl
 8005f1c:	600b      	strpl	r3, [r1, #0]
 8005f1e:	2002      	movpl	r0, #2
 8005f20:	4770      	bx	lr
 8005f22:	b298      	uxth	r0, r3
 8005f24:	b9a8      	cbnz	r0, 8005f52 <__lo0bits+0x52>
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	2010      	movs	r0, #16
 8005f2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005f2e:	bf04      	itt	eq
 8005f30:	0a1b      	lsreq	r3, r3, #8
 8005f32:	3008      	addeq	r0, #8
 8005f34:	071a      	lsls	r2, r3, #28
 8005f36:	bf04      	itt	eq
 8005f38:	091b      	lsreq	r3, r3, #4
 8005f3a:	3004      	addeq	r0, #4
 8005f3c:	079a      	lsls	r2, r3, #30
 8005f3e:	bf04      	itt	eq
 8005f40:	089b      	lsreq	r3, r3, #2
 8005f42:	3002      	addeq	r0, #2
 8005f44:	07da      	lsls	r2, r3, #31
 8005f46:	d402      	bmi.n	8005f4e <__lo0bits+0x4e>
 8005f48:	085b      	lsrs	r3, r3, #1
 8005f4a:	d006      	beq.n	8005f5a <__lo0bits+0x5a>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	600b      	str	r3, [r1, #0]
 8005f50:	4770      	bx	lr
 8005f52:	4610      	mov	r0, r2
 8005f54:	e7e9      	b.n	8005f2a <__lo0bits+0x2a>
 8005f56:	2000      	movs	r0, #0
 8005f58:	4770      	bx	lr
 8005f5a:	2020      	movs	r0, #32
 8005f5c:	4770      	bx	lr

08005f5e <__i2b>:
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	460c      	mov	r4, r1
 8005f62:	2101      	movs	r1, #1
 8005f64:	f7ff ff27 	bl	8005db6 <_Balloc>
 8005f68:	2201      	movs	r2, #1
 8005f6a:	6144      	str	r4, [r0, #20]
 8005f6c:	6102      	str	r2, [r0, #16]
 8005f6e:	bd10      	pop	{r4, pc}

08005f70 <__multiply>:
 8005f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	4614      	mov	r4, r2
 8005f76:	690a      	ldr	r2, [r1, #16]
 8005f78:	6923      	ldr	r3, [r4, #16]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	bfb8      	it	lt
 8005f7e:	460b      	movlt	r3, r1
 8005f80:	4688      	mov	r8, r1
 8005f82:	bfbc      	itt	lt
 8005f84:	46a0      	movlt	r8, r4
 8005f86:	461c      	movlt	r4, r3
 8005f88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005f8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005f90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005f94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005f98:	eb07 0609 	add.w	r6, r7, r9
 8005f9c:	42b3      	cmp	r3, r6
 8005f9e:	bfb8      	it	lt
 8005fa0:	3101      	addlt	r1, #1
 8005fa2:	f7ff ff08 	bl	8005db6 <_Balloc>
 8005fa6:	f100 0514 	add.w	r5, r0, #20
 8005faa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005fae:	462b      	mov	r3, r5
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4573      	cmp	r3, lr
 8005fb4:	d316      	bcc.n	8005fe4 <__multiply+0x74>
 8005fb6:	f104 0214 	add.w	r2, r4, #20
 8005fba:	f108 0114 	add.w	r1, r8, #20
 8005fbe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005fc2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	9b00      	ldr	r3, [sp, #0]
 8005fca:	9201      	str	r2, [sp, #4]
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d80c      	bhi.n	8005fea <__multiply+0x7a>
 8005fd0:	2e00      	cmp	r6, #0
 8005fd2:	dd03      	ble.n	8005fdc <__multiply+0x6c>
 8005fd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d05d      	beq.n	8006098 <__multiply+0x128>
 8005fdc:	6106      	str	r6, [r0, #16]
 8005fde:	b003      	add	sp, #12
 8005fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe4:	f843 2b04 	str.w	r2, [r3], #4
 8005fe8:	e7e3      	b.n	8005fb2 <__multiply+0x42>
 8005fea:	f8b2 b000 	ldrh.w	fp, [r2]
 8005fee:	f1bb 0f00 	cmp.w	fp, #0
 8005ff2:	d023      	beq.n	800603c <__multiply+0xcc>
 8005ff4:	4689      	mov	r9, r1
 8005ff6:	46ac      	mov	ip, r5
 8005ff8:	f04f 0800 	mov.w	r8, #0
 8005ffc:	f859 4b04 	ldr.w	r4, [r9], #4
 8006000:	f8dc a000 	ldr.w	sl, [ip]
 8006004:	b2a3      	uxth	r3, r4
 8006006:	fa1f fa8a 	uxth.w	sl, sl
 800600a:	fb0b a303 	mla	r3, fp, r3, sl
 800600e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006012:	f8dc 4000 	ldr.w	r4, [ip]
 8006016:	4443      	add	r3, r8
 8006018:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800601c:	fb0b 840a 	mla	r4, fp, sl, r8
 8006020:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006024:	46e2      	mov	sl, ip
 8006026:	b29b      	uxth	r3, r3
 8006028:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800602c:	454f      	cmp	r7, r9
 800602e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006032:	f84a 3b04 	str.w	r3, [sl], #4
 8006036:	d82b      	bhi.n	8006090 <__multiply+0x120>
 8006038:	f8cc 8004 	str.w	r8, [ip, #4]
 800603c:	9b01      	ldr	r3, [sp, #4]
 800603e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006042:	3204      	adds	r2, #4
 8006044:	f1ba 0f00 	cmp.w	sl, #0
 8006048:	d020      	beq.n	800608c <__multiply+0x11c>
 800604a:	682b      	ldr	r3, [r5, #0]
 800604c:	4689      	mov	r9, r1
 800604e:	46a8      	mov	r8, r5
 8006050:	f04f 0b00 	mov.w	fp, #0
 8006054:	f8b9 c000 	ldrh.w	ip, [r9]
 8006058:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800605c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006060:	445c      	add	r4, fp
 8006062:	46c4      	mov	ip, r8
 8006064:	b29b      	uxth	r3, r3
 8006066:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800606a:	f84c 3b04 	str.w	r3, [ip], #4
 800606e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006072:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006076:	0c1b      	lsrs	r3, r3, #16
 8006078:	fb0a b303 	mla	r3, sl, r3, fp
 800607c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006080:	454f      	cmp	r7, r9
 8006082:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006086:	d805      	bhi.n	8006094 <__multiply+0x124>
 8006088:	f8c8 3004 	str.w	r3, [r8, #4]
 800608c:	3504      	adds	r5, #4
 800608e:	e79b      	b.n	8005fc8 <__multiply+0x58>
 8006090:	46d4      	mov	ip, sl
 8006092:	e7b3      	b.n	8005ffc <__multiply+0x8c>
 8006094:	46e0      	mov	r8, ip
 8006096:	e7dd      	b.n	8006054 <__multiply+0xe4>
 8006098:	3e01      	subs	r6, #1
 800609a:	e799      	b.n	8005fd0 <__multiply+0x60>

0800609c <__pow5mult>:
 800609c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060a0:	4615      	mov	r5, r2
 80060a2:	f012 0203 	ands.w	r2, r2, #3
 80060a6:	4606      	mov	r6, r0
 80060a8:	460f      	mov	r7, r1
 80060aa:	d007      	beq.n	80060bc <__pow5mult+0x20>
 80060ac:	3a01      	subs	r2, #1
 80060ae:	4c21      	ldr	r4, [pc, #132]	; (8006134 <__pow5mult+0x98>)
 80060b0:	2300      	movs	r3, #0
 80060b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060b6:	f7ff fec9 	bl	8005e4c <__multadd>
 80060ba:	4607      	mov	r7, r0
 80060bc:	10ad      	asrs	r5, r5, #2
 80060be:	d035      	beq.n	800612c <__pow5mult+0x90>
 80060c0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80060c2:	b93c      	cbnz	r4, 80060d4 <__pow5mult+0x38>
 80060c4:	2010      	movs	r0, #16
 80060c6:	f7ff fe63 	bl	8005d90 <malloc>
 80060ca:	6270      	str	r0, [r6, #36]	; 0x24
 80060cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80060d0:	6004      	str	r4, [r0, #0]
 80060d2:	60c4      	str	r4, [r0, #12]
 80060d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80060d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80060dc:	b94c      	cbnz	r4, 80060f2 <__pow5mult+0x56>
 80060de:	f240 2171 	movw	r1, #625	; 0x271
 80060e2:	4630      	mov	r0, r6
 80060e4:	f7ff ff3b 	bl	8005f5e <__i2b>
 80060e8:	2300      	movs	r3, #0
 80060ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80060ee:	4604      	mov	r4, r0
 80060f0:	6003      	str	r3, [r0, #0]
 80060f2:	f04f 0800 	mov.w	r8, #0
 80060f6:	07eb      	lsls	r3, r5, #31
 80060f8:	d50a      	bpl.n	8006110 <__pow5mult+0x74>
 80060fa:	4639      	mov	r1, r7
 80060fc:	4622      	mov	r2, r4
 80060fe:	4630      	mov	r0, r6
 8006100:	f7ff ff36 	bl	8005f70 <__multiply>
 8006104:	4639      	mov	r1, r7
 8006106:	4681      	mov	r9, r0
 8006108:	4630      	mov	r0, r6
 800610a:	f7ff fe88 	bl	8005e1e <_Bfree>
 800610e:	464f      	mov	r7, r9
 8006110:	106d      	asrs	r5, r5, #1
 8006112:	d00b      	beq.n	800612c <__pow5mult+0x90>
 8006114:	6820      	ldr	r0, [r4, #0]
 8006116:	b938      	cbnz	r0, 8006128 <__pow5mult+0x8c>
 8006118:	4622      	mov	r2, r4
 800611a:	4621      	mov	r1, r4
 800611c:	4630      	mov	r0, r6
 800611e:	f7ff ff27 	bl	8005f70 <__multiply>
 8006122:	6020      	str	r0, [r4, #0]
 8006124:	f8c0 8000 	str.w	r8, [r0]
 8006128:	4604      	mov	r4, r0
 800612a:	e7e4      	b.n	80060f6 <__pow5mult+0x5a>
 800612c:	4638      	mov	r0, r7
 800612e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006132:	bf00      	nop
 8006134:	08006ba0 	.word	0x08006ba0

08006138 <__lshift>:
 8006138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800613c:	460c      	mov	r4, r1
 800613e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006142:	6923      	ldr	r3, [r4, #16]
 8006144:	6849      	ldr	r1, [r1, #4]
 8006146:	eb0a 0903 	add.w	r9, sl, r3
 800614a:	68a3      	ldr	r3, [r4, #8]
 800614c:	4607      	mov	r7, r0
 800614e:	4616      	mov	r6, r2
 8006150:	f109 0501 	add.w	r5, r9, #1
 8006154:	42ab      	cmp	r3, r5
 8006156:	db32      	blt.n	80061be <__lshift+0x86>
 8006158:	4638      	mov	r0, r7
 800615a:	f7ff fe2c 	bl	8005db6 <_Balloc>
 800615e:	2300      	movs	r3, #0
 8006160:	4680      	mov	r8, r0
 8006162:	f100 0114 	add.w	r1, r0, #20
 8006166:	461a      	mov	r2, r3
 8006168:	4553      	cmp	r3, sl
 800616a:	db2b      	blt.n	80061c4 <__lshift+0x8c>
 800616c:	6920      	ldr	r0, [r4, #16]
 800616e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006172:	f104 0314 	add.w	r3, r4, #20
 8006176:	f016 021f 	ands.w	r2, r6, #31
 800617a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800617e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006182:	d025      	beq.n	80061d0 <__lshift+0x98>
 8006184:	f1c2 0e20 	rsb	lr, r2, #32
 8006188:	2000      	movs	r0, #0
 800618a:	681e      	ldr	r6, [r3, #0]
 800618c:	468a      	mov	sl, r1
 800618e:	4096      	lsls	r6, r2
 8006190:	4330      	orrs	r0, r6
 8006192:	f84a 0b04 	str.w	r0, [sl], #4
 8006196:	f853 0b04 	ldr.w	r0, [r3], #4
 800619a:	459c      	cmp	ip, r3
 800619c:	fa20 f00e 	lsr.w	r0, r0, lr
 80061a0:	d814      	bhi.n	80061cc <__lshift+0x94>
 80061a2:	6048      	str	r0, [r1, #4]
 80061a4:	b108      	cbz	r0, 80061aa <__lshift+0x72>
 80061a6:	f109 0502 	add.w	r5, r9, #2
 80061aa:	3d01      	subs	r5, #1
 80061ac:	4638      	mov	r0, r7
 80061ae:	f8c8 5010 	str.w	r5, [r8, #16]
 80061b2:	4621      	mov	r1, r4
 80061b4:	f7ff fe33 	bl	8005e1e <_Bfree>
 80061b8:	4640      	mov	r0, r8
 80061ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061be:	3101      	adds	r1, #1
 80061c0:	005b      	lsls	r3, r3, #1
 80061c2:	e7c7      	b.n	8006154 <__lshift+0x1c>
 80061c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80061c8:	3301      	adds	r3, #1
 80061ca:	e7cd      	b.n	8006168 <__lshift+0x30>
 80061cc:	4651      	mov	r1, sl
 80061ce:	e7dc      	b.n	800618a <__lshift+0x52>
 80061d0:	3904      	subs	r1, #4
 80061d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061d6:	f841 2f04 	str.w	r2, [r1, #4]!
 80061da:	459c      	cmp	ip, r3
 80061dc:	d8f9      	bhi.n	80061d2 <__lshift+0x9a>
 80061de:	e7e4      	b.n	80061aa <__lshift+0x72>

080061e0 <__mcmp>:
 80061e0:	6903      	ldr	r3, [r0, #16]
 80061e2:	690a      	ldr	r2, [r1, #16]
 80061e4:	1a9b      	subs	r3, r3, r2
 80061e6:	b530      	push	{r4, r5, lr}
 80061e8:	d10c      	bne.n	8006204 <__mcmp+0x24>
 80061ea:	0092      	lsls	r2, r2, #2
 80061ec:	3014      	adds	r0, #20
 80061ee:	3114      	adds	r1, #20
 80061f0:	1884      	adds	r4, r0, r2
 80061f2:	4411      	add	r1, r2
 80061f4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80061f8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80061fc:	4295      	cmp	r5, r2
 80061fe:	d003      	beq.n	8006208 <__mcmp+0x28>
 8006200:	d305      	bcc.n	800620e <__mcmp+0x2e>
 8006202:	2301      	movs	r3, #1
 8006204:	4618      	mov	r0, r3
 8006206:	bd30      	pop	{r4, r5, pc}
 8006208:	42a0      	cmp	r0, r4
 800620a:	d3f3      	bcc.n	80061f4 <__mcmp+0x14>
 800620c:	e7fa      	b.n	8006204 <__mcmp+0x24>
 800620e:	f04f 33ff 	mov.w	r3, #4294967295
 8006212:	e7f7      	b.n	8006204 <__mcmp+0x24>

08006214 <__mdiff>:
 8006214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006218:	460d      	mov	r5, r1
 800621a:	4607      	mov	r7, r0
 800621c:	4611      	mov	r1, r2
 800621e:	4628      	mov	r0, r5
 8006220:	4614      	mov	r4, r2
 8006222:	f7ff ffdd 	bl	80061e0 <__mcmp>
 8006226:	1e06      	subs	r6, r0, #0
 8006228:	d108      	bne.n	800623c <__mdiff+0x28>
 800622a:	4631      	mov	r1, r6
 800622c:	4638      	mov	r0, r7
 800622e:	f7ff fdc2 	bl	8005db6 <_Balloc>
 8006232:	2301      	movs	r3, #1
 8006234:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623c:	bfa4      	itt	ge
 800623e:	4623      	movge	r3, r4
 8006240:	462c      	movge	r4, r5
 8006242:	4638      	mov	r0, r7
 8006244:	6861      	ldr	r1, [r4, #4]
 8006246:	bfa6      	itte	ge
 8006248:	461d      	movge	r5, r3
 800624a:	2600      	movge	r6, #0
 800624c:	2601      	movlt	r6, #1
 800624e:	f7ff fdb2 	bl	8005db6 <_Balloc>
 8006252:	692b      	ldr	r3, [r5, #16]
 8006254:	60c6      	str	r6, [r0, #12]
 8006256:	6926      	ldr	r6, [r4, #16]
 8006258:	f105 0914 	add.w	r9, r5, #20
 800625c:	f104 0214 	add.w	r2, r4, #20
 8006260:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006264:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006268:	f100 0514 	add.w	r5, r0, #20
 800626c:	f04f 0e00 	mov.w	lr, #0
 8006270:	f852 ab04 	ldr.w	sl, [r2], #4
 8006274:	f859 4b04 	ldr.w	r4, [r9], #4
 8006278:	fa1e f18a 	uxtah	r1, lr, sl
 800627c:	b2a3      	uxth	r3, r4
 800627e:	1ac9      	subs	r1, r1, r3
 8006280:	0c23      	lsrs	r3, r4, #16
 8006282:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006286:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800628a:	b289      	uxth	r1, r1
 800628c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006290:	45c8      	cmp	r8, r9
 8006292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006296:	4694      	mov	ip, r2
 8006298:	f845 3b04 	str.w	r3, [r5], #4
 800629c:	d8e8      	bhi.n	8006270 <__mdiff+0x5c>
 800629e:	45bc      	cmp	ip, r7
 80062a0:	d304      	bcc.n	80062ac <__mdiff+0x98>
 80062a2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80062a6:	b183      	cbz	r3, 80062ca <__mdiff+0xb6>
 80062a8:	6106      	str	r6, [r0, #16]
 80062aa:	e7c5      	b.n	8006238 <__mdiff+0x24>
 80062ac:	f85c 1b04 	ldr.w	r1, [ip], #4
 80062b0:	fa1e f381 	uxtah	r3, lr, r1
 80062b4:	141a      	asrs	r2, r3, #16
 80062b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80062c4:	f845 3b04 	str.w	r3, [r5], #4
 80062c8:	e7e9      	b.n	800629e <__mdiff+0x8a>
 80062ca:	3e01      	subs	r6, #1
 80062cc:	e7e9      	b.n	80062a2 <__mdiff+0x8e>

080062ce <__d2b>:
 80062ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062d2:	460e      	mov	r6, r1
 80062d4:	2101      	movs	r1, #1
 80062d6:	ec59 8b10 	vmov	r8, r9, d0
 80062da:	4615      	mov	r5, r2
 80062dc:	f7ff fd6b 	bl	8005db6 <_Balloc>
 80062e0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80062e4:	4607      	mov	r7, r0
 80062e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062ea:	bb34      	cbnz	r4, 800633a <__d2b+0x6c>
 80062ec:	9301      	str	r3, [sp, #4]
 80062ee:	f1b8 0300 	subs.w	r3, r8, #0
 80062f2:	d027      	beq.n	8006344 <__d2b+0x76>
 80062f4:	a802      	add	r0, sp, #8
 80062f6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80062fa:	f7ff fe01 	bl	8005f00 <__lo0bits>
 80062fe:	9900      	ldr	r1, [sp, #0]
 8006300:	b1f0      	cbz	r0, 8006340 <__d2b+0x72>
 8006302:	9a01      	ldr	r2, [sp, #4]
 8006304:	f1c0 0320 	rsb	r3, r0, #32
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	430b      	orrs	r3, r1
 800630e:	40c2      	lsrs	r2, r0
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	9201      	str	r2, [sp, #4]
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	61bb      	str	r3, [r7, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	bf14      	ite	ne
 800631c:	2102      	movne	r1, #2
 800631e:	2101      	moveq	r1, #1
 8006320:	6139      	str	r1, [r7, #16]
 8006322:	b1c4      	cbz	r4, 8006356 <__d2b+0x88>
 8006324:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006328:	4404      	add	r4, r0
 800632a:	6034      	str	r4, [r6, #0]
 800632c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006330:	6028      	str	r0, [r5, #0]
 8006332:	4638      	mov	r0, r7
 8006334:	b003      	add	sp, #12
 8006336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800633a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800633e:	e7d5      	b.n	80062ec <__d2b+0x1e>
 8006340:	6179      	str	r1, [r7, #20]
 8006342:	e7e7      	b.n	8006314 <__d2b+0x46>
 8006344:	a801      	add	r0, sp, #4
 8006346:	f7ff fddb 	bl	8005f00 <__lo0bits>
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	2101      	movs	r1, #1
 8006350:	6139      	str	r1, [r7, #16]
 8006352:	3020      	adds	r0, #32
 8006354:	e7e5      	b.n	8006322 <__d2b+0x54>
 8006356:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800635a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800635e:	6030      	str	r0, [r6, #0]
 8006360:	6918      	ldr	r0, [r3, #16]
 8006362:	f7ff fdae 	bl	8005ec2 <__hi0bits>
 8006366:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800636a:	e7e1      	b.n	8006330 <__d2b+0x62>

0800636c <_calloc_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	fb02 f401 	mul.w	r4, r2, r1
 8006372:	4621      	mov	r1, r4
 8006374:	f000 f856 	bl	8006424 <_malloc_r>
 8006378:	4605      	mov	r5, r0
 800637a:	b118      	cbz	r0, 8006384 <_calloc_r+0x18>
 800637c:	4622      	mov	r2, r4
 800637e:	2100      	movs	r1, #0
 8006380:	f7fd ff1a 	bl	80041b8 <memset>
 8006384:	4628      	mov	r0, r5
 8006386:	bd38      	pop	{r3, r4, r5, pc}

08006388 <_free_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4605      	mov	r5, r0
 800638c:	2900      	cmp	r1, #0
 800638e:	d045      	beq.n	800641c <_free_r+0x94>
 8006390:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006394:	1f0c      	subs	r4, r1, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	bfb8      	it	lt
 800639a:	18e4      	addlt	r4, r4, r3
 800639c:	f000 fa98 	bl	80068d0 <__malloc_lock>
 80063a0:	4a1f      	ldr	r2, [pc, #124]	; (8006420 <_free_r+0x98>)
 80063a2:	6813      	ldr	r3, [r2, #0]
 80063a4:	4610      	mov	r0, r2
 80063a6:	b933      	cbnz	r3, 80063b6 <_free_r+0x2e>
 80063a8:	6063      	str	r3, [r4, #4]
 80063aa:	6014      	str	r4, [r2, #0]
 80063ac:	4628      	mov	r0, r5
 80063ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063b2:	f000 ba8e 	b.w	80068d2 <__malloc_unlock>
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	d90c      	bls.n	80063d4 <_free_r+0x4c>
 80063ba:	6821      	ldr	r1, [r4, #0]
 80063bc:	1862      	adds	r2, r4, r1
 80063be:	4293      	cmp	r3, r2
 80063c0:	bf04      	itt	eq
 80063c2:	681a      	ldreq	r2, [r3, #0]
 80063c4:	685b      	ldreq	r3, [r3, #4]
 80063c6:	6063      	str	r3, [r4, #4]
 80063c8:	bf04      	itt	eq
 80063ca:	1852      	addeq	r2, r2, r1
 80063cc:	6022      	streq	r2, [r4, #0]
 80063ce:	6004      	str	r4, [r0, #0]
 80063d0:	e7ec      	b.n	80063ac <_free_r+0x24>
 80063d2:	4613      	mov	r3, r2
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	b10a      	cbz	r2, 80063dc <_free_r+0x54>
 80063d8:	42a2      	cmp	r2, r4
 80063da:	d9fa      	bls.n	80063d2 <_free_r+0x4a>
 80063dc:	6819      	ldr	r1, [r3, #0]
 80063de:	1858      	adds	r0, r3, r1
 80063e0:	42a0      	cmp	r0, r4
 80063e2:	d10b      	bne.n	80063fc <_free_r+0x74>
 80063e4:	6820      	ldr	r0, [r4, #0]
 80063e6:	4401      	add	r1, r0
 80063e8:	1858      	adds	r0, r3, r1
 80063ea:	4282      	cmp	r2, r0
 80063ec:	6019      	str	r1, [r3, #0]
 80063ee:	d1dd      	bne.n	80063ac <_free_r+0x24>
 80063f0:	6810      	ldr	r0, [r2, #0]
 80063f2:	6852      	ldr	r2, [r2, #4]
 80063f4:	605a      	str	r2, [r3, #4]
 80063f6:	4401      	add	r1, r0
 80063f8:	6019      	str	r1, [r3, #0]
 80063fa:	e7d7      	b.n	80063ac <_free_r+0x24>
 80063fc:	d902      	bls.n	8006404 <_free_r+0x7c>
 80063fe:	230c      	movs	r3, #12
 8006400:	602b      	str	r3, [r5, #0]
 8006402:	e7d3      	b.n	80063ac <_free_r+0x24>
 8006404:	6820      	ldr	r0, [r4, #0]
 8006406:	1821      	adds	r1, r4, r0
 8006408:	428a      	cmp	r2, r1
 800640a:	bf04      	itt	eq
 800640c:	6811      	ldreq	r1, [r2, #0]
 800640e:	6852      	ldreq	r2, [r2, #4]
 8006410:	6062      	str	r2, [r4, #4]
 8006412:	bf04      	itt	eq
 8006414:	1809      	addeq	r1, r1, r0
 8006416:	6021      	streq	r1, [r4, #0]
 8006418:	605c      	str	r4, [r3, #4]
 800641a:	e7c7      	b.n	80063ac <_free_r+0x24>
 800641c:	bd38      	pop	{r3, r4, r5, pc}
 800641e:	bf00      	nop
 8006420:	200001fc 	.word	0x200001fc

08006424 <_malloc_r>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	1ccd      	adds	r5, r1, #3
 8006428:	f025 0503 	bic.w	r5, r5, #3
 800642c:	3508      	adds	r5, #8
 800642e:	2d0c      	cmp	r5, #12
 8006430:	bf38      	it	cc
 8006432:	250c      	movcc	r5, #12
 8006434:	2d00      	cmp	r5, #0
 8006436:	4606      	mov	r6, r0
 8006438:	db01      	blt.n	800643e <_malloc_r+0x1a>
 800643a:	42a9      	cmp	r1, r5
 800643c:	d903      	bls.n	8006446 <_malloc_r+0x22>
 800643e:	230c      	movs	r3, #12
 8006440:	6033      	str	r3, [r6, #0]
 8006442:	2000      	movs	r0, #0
 8006444:	bd70      	pop	{r4, r5, r6, pc}
 8006446:	f000 fa43 	bl	80068d0 <__malloc_lock>
 800644a:	4a21      	ldr	r2, [pc, #132]	; (80064d0 <_malloc_r+0xac>)
 800644c:	6814      	ldr	r4, [r2, #0]
 800644e:	4621      	mov	r1, r4
 8006450:	b991      	cbnz	r1, 8006478 <_malloc_r+0x54>
 8006452:	4c20      	ldr	r4, [pc, #128]	; (80064d4 <_malloc_r+0xb0>)
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	b91b      	cbnz	r3, 8006460 <_malloc_r+0x3c>
 8006458:	4630      	mov	r0, r6
 800645a:	f000 f97d 	bl	8006758 <_sbrk_r>
 800645e:	6020      	str	r0, [r4, #0]
 8006460:	4629      	mov	r1, r5
 8006462:	4630      	mov	r0, r6
 8006464:	f000 f978 	bl	8006758 <_sbrk_r>
 8006468:	1c43      	adds	r3, r0, #1
 800646a:	d124      	bne.n	80064b6 <_malloc_r+0x92>
 800646c:	230c      	movs	r3, #12
 800646e:	6033      	str	r3, [r6, #0]
 8006470:	4630      	mov	r0, r6
 8006472:	f000 fa2e 	bl	80068d2 <__malloc_unlock>
 8006476:	e7e4      	b.n	8006442 <_malloc_r+0x1e>
 8006478:	680b      	ldr	r3, [r1, #0]
 800647a:	1b5b      	subs	r3, r3, r5
 800647c:	d418      	bmi.n	80064b0 <_malloc_r+0x8c>
 800647e:	2b0b      	cmp	r3, #11
 8006480:	d90f      	bls.n	80064a2 <_malloc_r+0x7e>
 8006482:	600b      	str	r3, [r1, #0]
 8006484:	50cd      	str	r5, [r1, r3]
 8006486:	18cc      	adds	r4, r1, r3
 8006488:	4630      	mov	r0, r6
 800648a:	f000 fa22 	bl	80068d2 <__malloc_unlock>
 800648e:	f104 000b 	add.w	r0, r4, #11
 8006492:	1d23      	adds	r3, r4, #4
 8006494:	f020 0007 	bic.w	r0, r0, #7
 8006498:	1ac3      	subs	r3, r0, r3
 800649a:	d0d3      	beq.n	8006444 <_malloc_r+0x20>
 800649c:	425a      	negs	r2, r3
 800649e:	50e2      	str	r2, [r4, r3]
 80064a0:	e7d0      	b.n	8006444 <_malloc_r+0x20>
 80064a2:	428c      	cmp	r4, r1
 80064a4:	684b      	ldr	r3, [r1, #4]
 80064a6:	bf16      	itet	ne
 80064a8:	6063      	strne	r3, [r4, #4]
 80064aa:	6013      	streq	r3, [r2, #0]
 80064ac:	460c      	movne	r4, r1
 80064ae:	e7eb      	b.n	8006488 <_malloc_r+0x64>
 80064b0:	460c      	mov	r4, r1
 80064b2:	6849      	ldr	r1, [r1, #4]
 80064b4:	e7cc      	b.n	8006450 <_malloc_r+0x2c>
 80064b6:	1cc4      	adds	r4, r0, #3
 80064b8:	f024 0403 	bic.w	r4, r4, #3
 80064bc:	42a0      	cmp	r0, r4
 80064be:	d005      	beq.n	80064cc <_malloc_r+0xa8>
 80064c0:	1a21      	subs	r1, r4, r0
 80064c2:	4630      	mov	r0, r6
 80064c4:	f000 f948 	bl	8006758 <_sbrk_r>
 80064c8:	3001      	adds	r0, #1
 80064ca:	d0cf      	beq.n	800646c <_malloc_r+0x48>
 80064cc:	6025      	str	r5, [r4, #0]
 80064ce:	e7db      	b.n	8006488 <_malloc_r+0x64>
 80064d0:	200001fc 	.word	0x200001fc
 80064d4:	20000200 	.word	0x20000200

080064d8 <__sfputc_r>:
 80064d8:	6893      	ldr	r3, [r2, #8]
 80064da:	3b01      	subs	r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	b410      	push	{r4}
 80064e0:	6093      	str	r3, [r2, #8]
 80064e2:	da08      	bge.n	80064f6 <__sfputc_r+0x1e>
 80064e4:	6994      	ldr	r4, [r2, #24]
 80064e6:	42a3      	cmp	r3, r4
 80064e8:	db01      	blt.n	80064ee <__sfputc_r+0x16>
 80064ea:	290a      	cmp	r1, #10
 80064ec:	d103      	bne.n	80064f6 <__sfputc_r+0x1e>
 80064ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80064f2:	f7fe bb5b 	b.w	8004bac <__swbuf_r>
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	1c58      	adds	r0, r3, #1
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	7019      	strb	r1, [r3, #0]
 80064fe:	4608      	mov	r0, r1
 8006500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006504:	4770      	bx	lr

08006506 <__sfputs_r>:
 8006506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006508:	4606      	mov	r6, r0
 800650a:	460f      	mov	r7, r1
 800650c:	4614      	mov	r4, r2
 800650e:	18d5      	adds	r5, r2, r3
 8006510:	42ac      	cmp	r4, r5
 8006512:	d101      	bne.n	8006518 <__sfputs_r+0x12>
 8006514:	2000      	movs	r0, #0
 8006516:	e007      	b.n	8006528 <__sfputs_r+0x22>
 8006518:	463a      	mov	r2, r7
 800651a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800651e:	4630      	mov	r0, r6
 8006520:	f7ff ffda 	bl	80064d8 <__sfputc_r>
 8006524:	1c43      	adds	r3, r0, #1
 8006526:	d1f3      	bne.n	8006510 <__sfputs_r+0xa>
 8006528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800652c <_vfiprintf_r>:
 800652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	460c      	mov	r4, r1
 8006532:	b09d      	sub	sp, #116	; 0x74
 8006534:	4617      	mov	r7, r2
 8006536:	461d      	mov	r5, r3
 8006538:	4606      	mov	r6, r0
 800653a:	b118      	cbz	r0, 8006544 <_vfiprintf_r+0x18>
 800653c:	6983      	ldr	r3, [r0, #24]
 800653e:	b90b      	cbnz	r3, 8006544 <_vfiprintf_r+0x18>
 8006540:	f7ff fb2a 	bl	8005b98 <__sinit>
 8006544:	4b7c      	ldr	r3, [pc, #496]	; (8006738 <_vfiprintf_r+0x20c>)
 8006546:	429c      	cmp	r4, r3
 8006548:	d158      	bne.n	80065fc <_vfiprintf_r+0xd0>
 800654a:	6874      	ldr	r4, [r6, #4]
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	0718      	lsls	r0, r3, #28
 8006550:	d55e      	bpl.n	8006610 <_vfiprintf_r+0xe4>
 8006552:	6923      	ldr	r3, [r4, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d05b      	beq.n	8006610 <_vfiprintf_r+0xe4>
 8006558:	2300      	movs	r3, #0
 800655a:	9309      	str	r3, [sp, #36]	; 0x24
 800655c:	2320      	movs	r3, #32
 800655e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006562:	2330      	movs	r3, #48	; 0x30
 8006564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006568:	9503      	str	r5, [sp, #12]
 800656a:	f04f 0b01 	mov.w	fp, #1
 800656e:	46b8      	mov	r8, r7
 8006570:	4645      	mov	r5, r8
 8006572:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006576:	b10b      	cbz	r3, 800657c <_vfiprintf_r+0x50>
 8006578:	2b25      	cmp	r3, #37	; 0x25
 800657a:	d154      	bne.n	8006626 <_vfiprintf_r+0xfa>
 800657c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006580:	d00b      	beq.n	800659a <_vfiprintf_r+0x6e>
 8006582:	4653      	mov	r3, sl
 8006584:	463a      	mov	r2, r7
 8006586:	4621      	mov	r1, r4
 8006588:	4630      	mov	r0, r6
 800658a:	f7ff ffbc 	bl	8006506 <__sfputs_r>
 800658e:	3001      	adds	r0, #1
 8006590:	f000 80c2 	beq.w	8006718 <_vfiprintf_r+0x1ec>
 8006594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006596:	4453      	add	r3, sl
 8006598:	9309      	str	r3, [sp, #36]	; 0x24
 800659a:	f898 3000 	ldrb.w	r3, [r8]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f000 80ba 	beq.w	8006718 <_vfiprintf_r+0x1ec>
 80065a4:	2300      	movs	r3, #0
 80065a6:	f04f 32ff 	mov.w	r2, #4294967295
 80065aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	9307      	str	r3, [sp, #28]
 80065b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065b6:	931a      	str	r3, [sp, #104]	; 0x68
 80065b8:	46a8      	mov	r8, r5
 80065ba:	2205      	movs	r2, #5
 80065bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80065c0:	485e      	ldr	r0, [pc, #376]	; (800673c <_vfiprintf_r+0x210>)
 80065c2:	f7f9 fe15 	bl	80001f0 <memchr>
 80065c6:	9b04      	ldr	r3, [sp, #16]
 80065c8:	bb78      	cbnz	r0, 800662a <_vfiprintf_r+0xfe>
 80065ca:	06d9      	lsls	r1, r3, #27
 80065cc:	bf44      	itt	mi
 80065ce:	2220      	movmi	r2, #32
 80065d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065d4:	071a      	lsls	r2, r3, #28
 80065d6:	bf44      	itt	mi
 80065d8:	222b      	movmi	r2, #43	; 0x2b
 80065da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80065de:	782a      	ldrb	r2, [r5, #0]
 80065e0:	2a2a      	cmp	r2, #42	; 0x2a
 80065e2:	d02a      	beq.n	800663a <_vfiprintf_r+0x10e>
 80065e4:	9a07      	ldr	r2, [sp, #28]
 80065e6:	46a8      	mov	r8, r5
 80065e8:	2000      	movs	r0, #0
 80065ea:	250a      	movs	r5, #10
 80065ec:	4641      	mov	r1, r8
 80065ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065f2:	3b30      	subs	r3, #48	; 0x30
 80065f4:	2b09      	cmp	r3, #9
 80065f6:	d969      	bls.n	80066cc <_vfiprintf_r+0x1a0>
 80065f8:	b360      	cbz	r0, 8006654 <_vfiprintf_r+0x128>
 80065fa:	e024      	b.n	8006646 <_vfiprintf_r+0x11a>
 80065fc:	4b50      	ldr	r3, [pc, #320]	; (8006740 <_vfiprintf_r+0x214>)
 80065fe:	429c      	cmp	r4, r3
 8006600:	d101      	bne.n	8006606 <_vfiprintf_r+0xda>
 8006602:	68b4      	ldr	r4, [r6, #8]
 8006604:	e7a2      	b.n	800654c <_vfiprintf_r+0x20>
 8006606:	4b4f      	ldr	r3, [pc, #316]	; (8006744 <_vfiprintf_r+0x218>)
 8006608:	429c      	cmp	r4, r3
 800660a:	bf08      	it	eq
 800660c:	68f4      	ldreq	r4, [r6, #12]
 800660e:	e79d      	b.n	800654c <_vfiprintf_r+0x20>
 8006610:	4621      	mov	r1, r4
 8006612:	4630      	mov	r0, r6
 8006614:	f7fe fb1c 	bl	8004c50 <__swsetup_r>
 8006618:	2800      	cmp	r0, #0
 800661a:	d09d      	beq.n	8006558 <_vfiprintf_r+0x2c>
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	b01d      	add	sp, #116	; 0x74
 8006622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006626:	46a8      	mov	r8, r5
 8006628:	e7a2      	b.n	8006570 <_vfiprintf_r+0x44>
 800662a:	4a44      	ldr	r2, [pc, #272]	; (800673c <_vfiprintf_r+0x210>)
 800662c:	1a80      	subs	r0, r0, r2
 800662e:	fa0b f000 	lsl.w	r0, fp, r0
 8006632:	4318      	orrs	r0, r3
 8006634:	9004      	str	r0, [sp, #16]
 8006636:	4645      	mov	r5, r8
 8006638:	e7be      	b.n	80065b8 <_vfiprintf_r+0x8c>
 800663a:	9a03      	ldr	r2, [sp, #12]
 800663c:	1d11      	adds	r1, r2, #4
 800663e:	6812      	ldr	r2, [r2, #0]
 8006640:	9103      	str	r1, [sp, #12]
 8006642:	2a00      	cmp	r2, #0
 8006644:	db01      	blt.n	800664a <_vfiprintf_r+0x11e>
 8006646:	9207      	str	r2, [sp, #28]
 8006648:	e004      	b.n	8006654 <_vfiprintf_r+0x128>
 800664a:	4252      	negs	r2, r2
 800664c:	f043 0302 	orr.w	r3, r3, #2
 8006650:	9207      	str	r2, [sp, #28]
 8006652:	9304      	str	r3, [sp, #16]
 8006654:	f898 3000 	ldrb.w	r3, [r8]
 8006658:	2b2e      	cmp	r3, #46	; 0x2e
 800665a:	d10e      	bne.n	800667a <_vfiprintf_r+0x14e>
 800665c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006660:	2b2a      	cmp	r3, #42	; 0x2a
 8006662:	d138      	bne.n	80066d6 <_vfiprintf_r+0x1aa>
 8006664:	9b03      	ldr	r3, [sp, #12]
 8006666:	1d1a      	adds	r2, r3, #4
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	9203      	str	r2, [sp, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	bfb8      	it	lt
 8006670:	f04f 33ff 	movlt.w	r3, #4294967295
 8006674:	f108 0802 	add.w	r8, r8, #2
 8006678:	9305      	str	r3, [sp, #20]
 800667a:	4d33      	ldr	r5, [pc, #204]	; (8006748 <_vfiprintf_r+0x21c>)
 800667c:	f898 1000 	ldrb.w	r1, [r8]
 8006680:	2203      	movs	r2, #3
 8006682:	4628      	mov	r0, r5
 8006684:	f7f9 fdb4 	bl	80001f0 <memchr>
 8006688:	b140      	cbz	r0, 800669c <_vfiprintf_r+0x170>
 800668a:	2340      	movs	r3, #64	; 0x40
 800668c:	1b40      	subs	r0, r0, r5
 800668e:	fa03 f000 	lsl.w	r0, r3, r0
 8006692:	9b04      	ldr	r3, [sp, #16]
 8006694:	4303      	orrs	r3, r0
 8006696:	f108 0801 	add.w	r8, r8, #1
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	f898 1000 	ldrb.w	r1, [r8]
 80066a0:	482a      	ldr	r0, [pc, #168]	; (800674c <_vfiprintf_r+0x220>)
 80066a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066a6:	2206      	movs	r2, #6
 80066a8:	f108 0701 	add.w	r7, r8, #1
 80066ac:	f7f9 fda0 	bl	80001f0 <memchr>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d037      	beq.n	8006724 <_vfiprintf_r+0x1f8>
 80066b4:	4b26      	ldr	r3, [pc, #152]	; (8006750 <_vfiprintf_r+0x224>)
 80066b6:	bb1b      	cbnz	r3, 8006700 <_vfiprintf_r+0x1d4>
 80066b8:	9b03      	ldr	r3, [sp, #12]
 80066ba:	3307      	adds	r3, #7
 80066bc:	f023 0307 	bic.w	r3, r3, #7
 80066c0:	3308      	adds	r3, #8
 80066c2:	9303      	str	r3, [sp, #12]
 80066c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c6:	444b      	add	r3, r9
 80066c8:	9309      	str	r3, [sp, #36]	; 0x24
 80066ca:	e750      	b.n	800656e <_vfiprintf_r+0x42>
 80066cc:	fb05 3202 	mla	r2, r5, r2, r3
 80066d0:	2001      	movs	r0, #1
 80066d2:	4688      	mov	r8, r1
 80066d4:	e78a      	b.n	80065ec <_vfiprintf_r+0xc0>
 80066d6:	2300      	movs	r3, #0
 80066d8:	f108 0801 	add.w	r8, r8, #1
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	4619      	mov	r1, r3
 80066e0:	250a      	movs	r5, #10
 80066e2:	4640      	mov	r0, r8
 80066e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e8:	3a30      	subs	r2, #48	; 0x30
 80066ea:	2a09      	cmp	r2, #9
 80066ec:	d903      	bls.n	80066f6 <_vfiprintf_r+0x1ca>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0c3      	beq.n	800667a <_vfiprintf_r+0x14e>
 80066f2:	9105      	str	r1, [sp, #20]
 80066f4:	e7c1      	b.n	800667a <_vfiprintf_r+0x14e>
 80066f6:	fb05 2101 	mla	r1, r5, r1, r2
 80066fa:	2301      	movs	r3, #1
 80066fc:	4680      	mov	r8, r0
 80066fe:	e7f0      	b.n	80066e2 <_vfiprintf_r+0x1b6>
 8006700:	ab03      	add	r3, sp, #12
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	4622      	mov	r2, r4
 8006706:	4b13      	ldr	r3, [pc, #76]	; (8006754 <_vfiprintf_r+0x228>)
 8006708:	a904      	add	r1, sp, #16
 800670a:	4630      	mov	r0, r6
 800670c:	f7fd fdf0 	bl	80042f0 <_printf_float>
 8006710:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006714:	4681      	mov	r9, r0
 8006716:	d1d5      	bne.n	80066c4 <_vfiprintf_r+0x198>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	065b      	lsls	r3, r3, #25
 800671c:	f53f af7e 	bmi.w	800661c <_vfiprintf_r+0xf0>
 8006720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006722:	e77d      	b.n	8006620 <_vfiprintf_r+0xf4>
 8006724:	ab03      	add	r3, sp, #12
 8006726:	9300      	str	r3, [sp, #0]
 8006728:	4622      	mov	r2, r4
 800672a:	4b0a      	ldr	r3, [pc, #40]	; (8006754 <_vfiprintf_r+0x228>)
 800672c:	a904      	add	r1, sp, #16
 800672e:	4630      	mov	r0, r6
 8006730:	f7fe f894 	bl	800485c <_printf_i>
 8006734:	e7ec      	b.n	8006710 <_vfiprintf_r+0x1e4>
 8006736:	bf00      	nop
 8006738:	08006a70 	.word	0x08006a70
 800673c:	08006bac 	.word	0x08006bac
 8006740:	08006a90 	.word	0x08006a90
 8006744:	08006a50 	.word	0x08006a50
 8006748:	08006bb2 	.word	0x08006bb2
 800674c:	08006bb6 	.word	0x08006bb6
 8006750:	080042f1 	.word	0x080042f1
 8006754:	08006507 	.word	0x08006507

08006758 <_sbrk_r>:
 8006758:	b538      	push	{r3, r4, r5, lr}
 800675a:	4c06      	ldr	r4, [pc, #24]	; (8006774 <_sbrk_r+0x1c>)
 800675c:	2300      	movs	r3, #0
 800675e:	4605      	mov	r5, r0
 8006760:	4608      	mov	r0, r1
 8006762:	6023      	str	r3, [r4, #0]
 8006764:	f7fb fbae 	bl	8001ec4 <_sbrk>
 8006768:	1c43      	adds	r3, r0, #1
 800676a:	d102      	bne.n	8006772 <_sbrk_r+0x1a>
 800676c:	6823      	ldr	r3, [r4, #0]
 800676e:	b103      	cbz	r3, 8006772 <_sbrk_r+0x1a>
 8006770:	602b      	str	r3, [r5, #0]
 8006772:	bd38      	pop	{r3, r4, r5, pc}
 8006774:	20001724 	.word	0x20001724

08006778 <__sread>:
 8006778:	b510      	push	{r4, lr}
 800677a:	460c      	mov	r4, r1
 800677c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006780:	f000 f8a8 	bl	80068d4 <_read_r>
 8006784:	2800      	cmp	r0, #0
 8006786:	bfab      	itete	ge
 8006788:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800678a:	89a3      	ldrhlt	r3, [r4, #12]
 800678c:	181b      	addge	r3, r3, r0
 800678e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006792:	bfac      	ite	ge
 8006794:	6563      	strge	r3, [r4, #84]	; 0x54
 8006796:	81a3      	strhlt	r3, [r4, #12]
 8006798:	bd10      	pop	{r4, pc}

0800679a <__swrite>:
 800679a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800679e:	461f      	mov	r7, r3
 80067a0:	898b      	ldrh	r3, [r1, #12]
 80067a2:	05db      	lsls	r3, r3, #23
 80067a4:	4605      	mov	r5, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	4616      	mov	r6, r2
 80067aa:	d505      	bpl.n	80067b8 <__swrite+0x1e>
 80067ac:	2302      	movs	r3, #2
 80067ae:	2200      	movs	r2, #0
 80067b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b4:	f000 f868 	bl	8006888 <_lseek_r>
 80067b8:	89a3      	ldrh	r3, [r4, #12]
 80067ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067c2:	81a3      	strh	r3, [r4, #12]
 80067c4:	4632      	mov	r2, r6
 80067c6:	463b      	mov	r3, r7
 80067c8:	4628      	mov	r0, r5
 80067ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067ce:	f000 b817 	b.w	8006800 <_write_r>

080067d2 <__sseek>:
 80067d2:	b510      	push	{r4, lr}
 80067d4:	460c      	mov	r4, r1
 80067d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067da:	f000 f855 	bl	8006888 <_lseek_r>
 80067de:	1c43      	adds	r3, r0, #1
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	bf15      	itete	ne
 80067e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80067e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80067ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80067ee:	81a3      	strheq	r3, [r4, #12]
 80067f0:	bf18      	it	ne
 80067f2:	81a3      	strhne	r3, [r4, #12]
 80067f4:	bd10      	pop	{r4, pc}

080067f6 <__sclose>:
 80067f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067fa:	f000 b813 	b.w	8006824 <_close_r>
	...

08006800 <_write_r>:
 8006800:	b538      	push	{r3, r4, r5, lr}
 8006802:	4c07      	ldr	r4, [pc, #28]	; (8006820 <_write_r+0x20>)
 8006804:	4605      	mov	r5, r0
 8006806:	4608      	mov	r0, r1
 8006808:	4611      	mov	r1, r2
 800680a:	2200      	movs	r2, #0
 800680c:	6022      	str	r2, [r4, #0]
 800680e:	461a      	mov	r2, r3
 8006810:	f7fb fb07 	bl	8001e22 <_write>
 8006814:	1c43      	adds	r3, r0, #1
 8006816:	d102      	bne.n	800681e <_write_r+0x1e>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	b103      	cbz	r3, 800681e <_write_r+0x1e>
 800681c:	602b      	str	r3, [r5, #0]
 800681e:	bd38      	pop	{r3, r4, r5, pc}
 8006820:	20001724 	.word	0x20001724

08006824 <_close_r>:
 8006824:	b538      	push	{r3, r4, r5, lr}
 8006826:	4c06      	ldr	r4, [pc, #24]	; (8006840 <_close_r+0x1c>)
 8006828:	2300      	movs	r3, #0
 800682a:	4605      	mov	r5, r0
 800682c:	4608      	mov	r0, r1
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	f7fb fb13 	bl	8001e5a <_close>
 8006834:	1c43      	adds	r3, r0, #1
 8006836:	d102      	bne.n	800683e <_close_r+0x1a>
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	b103      	cbz	r3, 800683e <_close_r+0x1a>
 800683c:	602b      	str	r3, [r5, #0]
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	20001724 	.word	0x20001724

08006844 <_fstat_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4c07      	ldr	r4, [pc, #28]	; (8006864 <_fstat_r+0x20>)
 8006848:	2300      	movs	r3, #0
 800684a:	4605      	mov	r5, r0
 800684c:	4608      	mov	r0, r1
 800684e:	4611      	mov	r1, r2
 8006850:	6023      	str	r3, [r4, #0]
 8006852:	f7fb fb0e 	bl	8001e72 <_fstat>
 8006856:	1c43      	adds	r3, r0, #1
 8006858:	d102      	bne.n	8006860 <_fstat_r+0x1c>
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	b103      	cbz	r3, 8006860 <_fstat_r+0x1c>
 800685e:	602b      	str	r3, [r5, #0]
 8006860:	bd38      	pop	{r3, r4, r5, pc}
 8006862:	bf00      	nop
 8006864:	20001724 	.word	0x20001724

08006868 <_isatty_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4c06      	ldr	r4, [pc, #24]	; (8006884 <_isatty_r+0x1c>)
 800686c:	2300      	movs	r3, #0
 800686e:	4605      	mov	r5, r0
 8006870:	4608      	mov	r0, r1
 8006872:	6023      	str	r3, [r4, #0]
 8006874:	f7fb fb0d 	bl	8001e92 <_isatty>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_isatty_r+0x1a>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	b103      	cbz	r3, 8006882 <_isatty_r+0x1a>
 8006880:	602b      	str	r3, [r5, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	20001724 	.word	0x20001724

08006888 <_lseek_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4c07      	ldr	r4, [pc, #28]	; (80068a8 <_lseek_r+0x20>)
 800688c:	4605      	mov	r5, r0
 800688e:	4608      	mov	r0, r1
 8006890:	4611      	mov	r1, r2
 8006892:	2200      	movs	r2, #0
 8006894:	6022      	str	r2, [r4, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	f7fb fb06 	bl	8001ea8 <_lseek>
 800689c:	1c43      	adds	r3, r0, #1
 800689e:	d102      	bne.n	80068a6 <_lseek_r+0x1e>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	b103      	cbz	r3, 80068a6 <_lseek_r+0x1e>
 80068a4:	602b      	str	r3, [r5, #0]
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	20001724 	.word	0x20001724

080068ac <__ascii_mbtowc>:
 80068ac:	b082      	sub	sp, #8
 80068ae:	b901      	cbnz	r1, 80068b2 <__ascii_mbtowc+0x6>
 80068b0:	a901      	add	r1, sp, #4
 80068b2:	b142      	cbz	r2, 80068c6 <__ascii_mbtowc+0x1a>
 80068b4:	b14b      	cbz	r3, 80068ca <__ascii_mbtowc+0x1e>
 80068b6:	7813      	ldrb	r3, [r2, #0]
 80068b8:	600b      	str	r3, [r1, #0]
 80068ba:	7812      	ldrb	r2, [r2, #0]
 80068bc:	1c10      	adds	r0, r2, #0
 80068be:	bf18      	it	ne
 80068c0:	2001      	movne	r0, #1
 80068c2:	b002      	add	sp, #8
 80068c4:	4770      	bx	lr
 80068c6:	4610      	mov	r0, r2
 80068c8:	e7fb      	b.n	80068c2 <__ascii_mbtowc+0x16>
 80068ca:	f06f 0001 	mvn.w	r0, #1
 80068ce:	e7f8      	b.n	80068c2 <__ascii_mbtowc+0x16>

080068d0 <__malloc_lock>:
 80068d0:	4770      	bx	lr

080068d2 <__malloc_unlock>:
 80068d2:	4770      	bx	lr

080068d4 <_read_r>:
 80068d4:	b538      	push	{r3, r4, r5, lr}
 80068d6:	4c07      	ldr	r4, [pc, #28]	; (80068f4 <_read_r+0x20>)
 80068d8:	4605      	mov	r5, r0
 80068da:	4608      	mov	r0, r1
 80068dc:	4611      	mov	r1, r2
 80068de:	2200      	movs	r2, #0
 80068e0:	6022      	str	r2, [r4, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	f7fb fa80 	bl	8001de8 <_read>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_read_r+0x1e>
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_read_r+0x1e>
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	20001724 	.word	0x20001724

080068f8 <__ascii_wctomb>:
 80068f8:	b149      	cbz	r1, 800690e <__ascii_wctomb+0x16>
 80068fa:	2aff      	cmp	r2, #255	; 0xff
 80068fc:	bf85      	ittet	hi
 80068fe:	238a      	movhi	r3, #138	; 0x8a
 8006900:	6003      	strhi	r3, [r0, #0]
 8006902:	700a      	strbls	r2, [r1, #0]
 8006904:	f04f 30ff 	movhi.w	r0, #4294967295
 8006908:	bf98      	it	ls
 800690a:	2001      	movls	r0, #1
 800690c:	4770      	bx	lr
 800690e:	4608      	mov	r0, r1
 8006910:	4770      	bx	lr
	...

08006914 <_init>:
 8006914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006916:	bf00      	nop
 8006918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691a:	bc08      	pop	{r3}
 800691c:	469e      	mov	lr, r3
 800691e:	4770      	bx	lr

08006920 <_fini>:
 8006920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006922:	bf00      	nop
 8006924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006926:	bc08      	pop	{r3}
 8006928:	469e      	mov	lr, r3
 800692a:	4770      	bx	lr
