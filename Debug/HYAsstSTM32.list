
HYAsstSTM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d9c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  08007f40  08007f40  00017f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008420  08008420  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008420  08008420  00018420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008428  08008428  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008428  08008428  00018428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800842c  0800842c  0001842c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08008430  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d58  200001f0  08008620  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f48  08008620  00024f48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011f94  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027bb  00000000  00000000  000321b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb8  00000000  00000000  00034970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa8  00000000  00000000  00035528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ab37  00000000  00000000  00035fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000be19  00000000  00000000  00050b07  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c535  00000000  00000000  0005c920  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8e55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ec0  00000000  00000000  000e8ed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f24 	.word	0x08007f24

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08007f24 	.word	0x08007f24

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <NMEA_Comma_Pos>:

typedef uint8_t   u8;
typedef uint16_t  u16;
typedef uint32_t  u32;

u8  NMEA_Comma_Pos (u8 *buf, u8 cx) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	70fb      	strb	r3, [r7, #3]
	u8 *p = buf;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	60fb      	str	r3, [r7, #12]
	while (cx) {
 8000ec8:	e017      	b.n	8000efa <NMEA_Comma_Pos+0x42>
		if (*buf=='*' || *buf<' ' || *buf>'z') return 0xFF;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b2a      	cmp	r3, #42	; 0x2a
 8000ed0:	d007      	beq.n	8000ee2 <NMEA_Comma_Pos+0x2a>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	2b1f      	cmp	r3, #31
 8000ed8:	d903      	bls.n	8000ee2 <NMEA_Comma_Pos+0x2a>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b7a      	cmp	r3, #122	; 0x7a
 8000ee0:	d901      	bls.n	8000ee6 <NMEA_Comma_Pos+0x2e>
 8000ee2:	23ff      	movs	r3, #255	; 0xff
 8000ee4:	e010      	b.n	8000f08 <NMEA_Comma_Pos+0x50>
		if (*buf==',') {-- cx;} buf ++;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b2c      	cmp	r3, #44	; 0x2c
 8000eec:	d102      	bne.n	8000ef4 <NMEA_Comma_Pos+0x3c>
 8000eee:	78fb      	ldrb	r3, [r7, #3]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	70fb      	strb	r3, [r7, #3]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
	while (cx) {
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d1e4      	bne.n	8000eca <NMEA_Comma_Pos+0x12>
	} return buf - p;
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	b2db      	uxtb	r3, r3
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <NMEA_Pow>:

u32 NMEA_Pow (u32 a, u8 n) {
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
	u32 ret = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
	while (n) {
 8000f24:	e011      	b.n	8000f4a <NMEA_Pow+0x36>
		if(n&1) ret *= a;
 8000f26:	78fb      	ldrb	r3, [r7, #3]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d004      	beq.n	8000f3a <NMEA_Pow+0x26>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	fb02 f303 	mul.w	r3, r2, r3
 8000f38:	60fb      	str	r3, [r7, #12]
		a *= a, n >>= 1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	fb02 f303 	mul.w	r3, r2, r3
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	78fb      	ldrb	r3, [r7, #3]
 8000f46:	085b      	lsrs	r3, r3, #1
 8000f48:	70fb      	strb	r3, [r7, #3]
	while (n) {
 8000f4a:	78fb      	ldrb	r3, [r7, #3]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1ea      	bne.n	8000f26 <NMEA_Pow+0x12>
	} return ret;
 8000f50:	68fb      	ldr	r3, [r7, #12]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3714      	adds	r7, #20
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <NMEA_StrToNum>:

int NMEA_StrToNum (u8 *buf, u8*dx) {
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b088      	sub	sp, #32
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
 8000f66:	6039      	str	r1, [r7, #0]
	u8  *p = buf;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	61fb      	str	r3, [r7, #28]
	u32 ires = 0, fres = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61bb      	str	r3, [r7, #24]
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
	u8  ilen = 0, flen = 0, flag = 0, i;
 8000f74:	2300      	movs	r3, #0
 8000f76:	74fb      	strb	r3, [r7, #19]
 8000f78:	2300      	movs	r3, #0
 8000f7a:	74bb      	strb	r3, [r7, #18]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	747b      	strb	r3, [r7, #17]
	int ret;

	while (1) {
		if (*p=='-') {flag |= 0x02; p ++;}
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b2d      	cmp	r3, #45	; 0x2d
 8000f86:	d106      	bne.n	8000f96 <NMEA_StrToNum+0x38>
 8000f88:	7c7b      	ldrb	r3, [r7, #17]
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	747b      	strb	r3, [r7, #17]
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	3301      	adds	r3, #1
 8000f94:	61fb      	str	r3, [r7, #28]
		if (*p==',' || *p=='*') {break;}
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b2c      	cmp	r3, #44	; 0x2c
 8000f9c:	d02c      	beq.n	8000ff8 <NMEA_StrToNum+0x9a>
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b2a      	cmp	r3, #42	; 0x2a
 8000fa4:	d028      	beq.n	8000ff8 <NMEA_StrToNum+0x9a>
		if (*p=='.') {flag |= 0x01; p ++;}
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b2e      	cmp	r3, #46	; 0x2e
 8000fac:	d107      	bne.n	8000fbe <NMEA_StrToNum+0x60>
 8000fae:	7c7b      	ldrb	r3, [r7, #17]
 8000fb0:	f043 0301 	orr.w	r3, r3, #1
 8000fb4:	747b      	strb	r3, [r7, #17]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	61fb      	str	r3, [r7, #28]
 8000fbc:	e00c      	b.n	8000fd8 <NMEA_StrToNum+0x7a>
		else if (*p<'0' || *p>'9') {
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b2f      	cmp	r3, #47	; 0x2f
 8000fc4:	d903      	bls.n	8000fce <NMEA_StrToNum+0x70>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b39      	cmp	r3, #57	; 0x39
 8000fcc:	d904      	bls.n	8000fd8 <NMEA_StrToNum+0x7a>
			ilen = 0; flen = 0; break;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	74fb      	strb	r3, [r7, #19]
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	74bb      	strb	r3, [r7, #18]
 8000fd6:	e00f      	b.n	8000ff8 <NMEA_StrToNum+0x9a>
		} if (flag&0x01) {++ flen;}
 8000fd8:	7c7b      	ldrb	r3, [r7, #17]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <NMEA_StrToNum+0x8c>
 8000fe2:	7cbb      	ldrb	r3, [r7, #18]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	74bb      	strb	r3, [r7, #18]
 8000fe8:	e002      	b.n	8000ff0 <NMEA_StrToNum+0x92>
		else {++ ilen;} p ++;
 8000fea:	7cfb      	ldrb	r3, [r7, #19]
 8000fec:	3301      	adds	r3, #1
 8000fee:	74fb      	strb	r3, [r7, #19]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	61fb      	str	r3, [r7, #28]
		if (*p=='-') {flag |= 0x02; p ++;}
 8000ff6:	e7c3      	b.n	8000f80 <NMEA_StrToNum+0x22>
	} if (flag&0x02) {buf ++;}
 8000ff8:	7c7b      	ldrb	r3, [r7, #17]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d002      	beq.n	8001008 <NMEA_StrToNum+0xaa>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	607b      	str	r3, [r7, #4]

	for (i=0; i<ilen; ++ i) {
 8001008:	2300      	movs	r3, #0
 800100a:	743b      	strb	r3, [r7, #16]
 800100c:	e019      	b.n	8001042 <NMEA_StrToNum+0xe4>
		ires += NMEA_Pow(10, ilen-i-1)*(buf[i]^'0');
 800100e:	7cfa      	ldrb	r2, [r7, #19]
 8001010:	7c3b      	ldrb	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	b2db      	uxtb	r3, r3
 8001016:	3b01      	subs	r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	4619      	mov	r1, r3
 800101c:	200a      	movs	r0, #10
 800101e:	f7ff ff79 	bl	8000f14 <NMEA_Pow>
 8001022:	4601      	mov	r1, r0
 8001024:	7c3b      	ldrb	r3, [r7, #16]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	4413      	add	r3, r2
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001030:	b2db      	uxtb	r3, r3
 8001032:	fb03 f301 	mul.w	r3, r3, r1
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4413      	add	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
	for (i=0; i<ilen; ++ i) {
 800103c:	7c3b      	ldrb	r3, [r7, #16]
 800103e:	3301      	adds	r3, #1
 8001040:	743b      	strb	r3, [r7, #16]
 8001042:	7c3a      	ldrb	r2, [r7, #16]
 8001044:	7cfb      	ldrb	r3, [r7, #19]
 8001046:	429a      	cmp	r2, r3
 8001048:	d3e1      	bcc.n	800100e <NMEA_StrToNum+0xb0>
	} if (flen>5) {flen = 5;} *dx = flen;
 800104a:	7cbb      	ldrb	r3, [r7, #18]
 800104c:	2b05      	cmp	r3, #5
 800104e:	d901      	bls.n	8001054 <NMEA_StrToNum+0xf6>
 8001050:	2305      	movs	r3, #5
 8001052:	74bb      	strb	r3, [r7, #18]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	7cba      	ldrb	r2, [r7, #18]
 8001058:	701a      	strb	r2, [r3, #0]

	for (i=0; i<flen; ++ i) {
 800105a:	2300      	movs	r3, #0
 800105c:	743b      	strb	r3, [r7, #16]
 800105e:	e01c      	b.n	800109a <NMEA_StrToNum+0x13c>
		fres += NMEA_Pow(10, flen-i-1)*(buf[ilen+i+1]^'0');
 8001060:	7cba      	ldrb	r2, [r7, #18]
 8001062:	7c3b      	ldrb	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	3b01      	subs	r3, #1
 800106a:	b2db      	uxtb	r3, r3
 800106c:	4619      	mov	r1, r3
 800106e:	200a      	movs	r0, #10
 8001070:	f7ff ff50 	bl	8000f14 <NMEA_Pow>
 8001074:	4601      	mov	r1, r0
 8001076:	7cfa      	ldrb	r2, [r7, #19]
 8001078:	7c3b      	ldrb	r3, [r7, #16]
 800107a:	4413      	add	r3, r2
 800107c:	3301      	adds	r3, #1
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001088:	b2db      	uxtb	r3, r3
 800108a:	fb03 f301 	mul.w	r3, r3, r1
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4413      	add	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
	for (i=0; i<flen; ++ i) {
 8001094:	7c3b      	ldrb	r3, [r7, #16]
 8001096:	3301      	adds	r3, #1
 8001098:	743b      	strb	r3, [r7, #16]
 800109a:	7c3a      	ldrb	r2, [r7, #16]
 800109c:	7cbb      	ldrb	r3, [r7, #18]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d3de      	bcc.n	8001060 <NMEA_StrToNum+0x102>
	} ret = ires * NMEA_Pow(10, flen) + fres;
 80010a2:	7cbb      	ldrb	r3, [r7, #18]
 80010a4:	4619      	mov	r1, r3
 80010a6:	200a      	movs	r0, #10
 80010a8:	f7ff ff34 	bl	8000f14 <NMEA_Pow>
 80010ac:	4602      	mov	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	fb03 f202 	mul.w	r2, r3, r2
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	4413      	add	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
	return (flag&0x02)? -ret:ret;
 80010ba:	7c7b      	ldrb	r3, [r7, #17]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <NMEA_StrToNum+0x16c>
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	425b      	negs	r3, r3
 80010c8:	e000      	b.n	80010cc <NMEA_StrToNum+0x16e>
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3720      	adds	r7, #32
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <NMEA_GPVTG_Analysis>:
			++ slx;
		} p = p1+1;
	}
}

void NMEA_GPVTG_Analysis(nmea_msg *gpsx,u8 *buf) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
	u8 *p1, dx; u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPVTG");
 80010de:	491b      	ldr	r1, [pc, #108]	; (800114c <NMEA_GPVTG_Analysis+0x78>)
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f004 fec0 	bl	8005e66 <strstr>
 80010e6:	60f8      	str	r0, [r7, #12]
	posx = NMEA_Comma_Pos(p1, 7);
 80010e8:	2107      	movs	r1, #7
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f7ff fee4 	bl	8000eb8 <NMEA_Comma_Pos>
 80010f0:	4603      	mov	r3, r0
 80010f2:	72fb      	strb	r3, [r7, #11]
	if(posx^0XFF) {
 80010f4:	7afb      	ldrb	r3, [r7, #11]
 80010f6:	2bff      	cmp	r3, #255	; 0xff
 80010f8:	d024      	beq.n	8001144 <NMEA_GPVTG_Analysis+0x70>
		gpsx->speed = NMEA_StrToNum(p1+posx, &dx);
 80010fa:	7afb      	ldrb	r3, [r7, #11]
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4413      	add	r3, r2
 8001100:	f107 020a 	add.w	r2, r7, #10
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff29 	bl	8000f5e <NMEA_StrToNum>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f8a3 2067 	strh.w	r2, [r3, #103]	; 0x67
		if (dx < 3) gpsx->speed *= NMEA_Pow(10, 3-dx);
 8001116:	7abb      	ldrb	r3, [r7, #10]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d813      	bhi.n	8001144 <NMEA_GPVTG_Analysis+0x70>
 800111c:	7abb      	ldrb	r3, [r7, #10]
 800111e:	f1c3 0303 	rsb	r3, r3, #3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	4619      	mov	r1, r3
 8001126:	200a      	movs	r0, #10
 8001128:	f7ff fef4 	bl	8000f14 <NMEA_Pow>
 800112c:	4601      	mov	r1, r0
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f8b3 3067 	ldrh.w	r3, [r3, #103]	; 0x67
 8001134:	b29a      	uxth	r2, r3
 8001136:	b28b      	uxth	r3, r1
 8001138:	fb12 f303 	smulbb	r3, r2, r3
 800113c:	b29a      	uxth	r2, r3
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f8a3 2067 	strh.w	r2, [r3, #103]	; 0x67
	}
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	08007f48 	.word	0x08007f48

08001150 <NMEA_GPGGA_Analysis>:

void NMEA_GPGGA_Analysis (nmea_msg *gpsx,u8 *buf) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPGGA");
 800115a:	4910      	ldr	r1, [pc, #64]	; (800119c <NMEA_GPGGA_Analysis+0x4c>)
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f004 fe82 	bl	8005e66 <strstr>
 8001162:	60f8      	str	r0, [r7, #12]
	posx = NMEA_Comma_Pos(p1, 6);
 8001164:	2106      	movs	r1, #6
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff fea6 	bl	8000eb8 <NMEA_Comma_Pos>
 800116c:	4603      	mov	r3, r0
 800116e:	72fb      	strb	r3, [r7, #11]
	if (posx^0XFF) gpsx->gpssta = NMEA_StrToNum(p1+posx, &dx);
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	2bff      	cmp	r3, #255	; 0xff
 8001174:	d00d      	beq.n	8001192 <NMEA_GPGGA_Analysis+0x42>
 8001176:	7afb      	ldrb	r3, [r7, #11]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4413      	add	r3, r2
 800117c:	f107 020a 	add.w	r2, r7, #10
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff feeb 	bl	8000f5e <NMEA_StrToNum>
 8001188:	4603      	mov	r3, r0
 800118a:	b2da      	uxtb	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
//	posx = NMEA_Comma_Pos(p1, 7);
//	if (posx^0XFF) gpsx->posslnum = NMEA_StrToNum(p1+posx, &dx);
//	posx = NMEA_Comma_Pos(p1, 9);
//	if (posx^0XFF) gpsx->altitude = NMEA_StrToNum(p1+posx, &dx);
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	08007f50 	.word	0x08007f50

080011a0 <NMEA_GPGSA_Analysis>:

void NMEA_GPGSA_Analysis (nmea_msg *gpsx, u8 *buf) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	p1 = (u8*)strstr((const char *)buf, "$GPGSA");
 80011aa:	4910      	ldr	r1, [pc, #64]	; (80011ec <NMEA_GPGSA_Analysis+0x4c>)
 80011ac:	6838      	ldr	r0, [r7, #0]
 80011ae:	f004 fe5a 	bl	8005e66 <strstr>
 80011b2:	60f8      	str	r0, [r7, #12]
//	for (i=0; i<12; ++ i) {
//		posx = NMEA_Comma_Pos(p1, 3+i);
//		if (posx^0XFF) gpsx->possl[i] = NMEA_StrToNum(p1+posx, &dx);
//		else break;
//	}
	posx = NMEA_Comma_Pos(p1, 15);
 80011b4:	210f      	movs	r1, #15
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f7ff fe7e 	bl	8000eb8 <NMEA_Comma_Pos>
 80011bc:	4603      	mov	r3, r0
 80011be:	72fb      	strb	r3, [r7, #11]
	if (posx^0XFF) gpsx->pdop = NMEA_StrToNum(p1+posx, &dx);
 80011c0:	7afb      	ldrb	r3, [r7, #11]
 80011c2:	2bff      	cmp	r3, #255	; 0xff
 80011c4:	d00d      	beq.n	80011e2 <NMEA_GPGSA_Analysis+0x42>
 80011c6:	7afb      	ldrb	r3, [r7, #11]
 80011c8:	68fa      	ldr	r2, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	f107 020a 	add.w	r2, r7, #10
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fec3 	bl	8000f5e <NMEA_StrToNum>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f8a3 205d 	strh.w	r2, [r3, #93]	; 0x5d
//	posx = NMEA_Comma_Pos(p1, 16);
//	if (posx^0XFF) gpsx->hdop = NMEA_StrToNum(p1+posx, &dx);
//	posx = NMEA_Comma_Pos(p1, 17);
//	if (posx^0XFF) gpsx->vdop = NMEA_StrToNum(p1+posx, &dx);
}
 80011e2:	bf00      	nop
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	08007f58 	.word	0x08007f58

080011f0 <NMEA_GPRMC_Analysis>:

void NMEA_GPRMC_Analysis (nmea_msg *gpsx, u8 *buf) {
 80011f0:	b590      	push	{r4, r7, lr}
 80011f2:	ed2d 8b02 	vpush	{d8}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
	u8 *p1, dx;
	u8 posx;
	u32 temp;
	float rs;
	p1 = (u8*)strstr((const char *)buf, "$GPRMC");
 80011fe:	499e      	ldr	r1, [pc, #632]	; (8001478 <NMEA_GPRMC_Analysis+0x288>)
 8001200:	6838      	ldr	r0, [r7, #0]
 8001202:	f004 fe30 	bl	8005e66 <strstr>
 8001206:	61f8      	str	r0, [r7, #28]
	posx = NMEA_Comma_Pos(p1, 1);
 8001208:	2101      	movs	r1, #1
 800120a:	69f8      	ldr	r0, [r7, #28]
 800120c:	f7ff fe54 	bl	8000eb8 <NMEA_Comma_Pos>
 8001210:	4603      	mov	r3, r0
 8001212:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 8001214:	7efb      	ldrb	r3, [r7, #27]
 8001216:	2bff      	cmp	r3, #255	; 0xff
 8001218:	d03a      	beq.n	8001290 <NMEA_GPRMC_Analysis+0xa0>
		temp = NMEA_StrToNum(p1+posx, &dx) / NMEA_Pow(10, dx);
 800121a:	7efb      	ldrb	r3, [r7, #27]
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	4413      	add	r3, r2
 8001220:	f107 020f 	add.w	r2, r7, #15
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fe99 	bl	8000f5e <NMEA_StrToNum>
 800122c:	4603      	mov	r3, r0
 800122e:	461c      	mov	r4, r3
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	4619      	mov	r1, r3
 8001234:	200a      	movs	r0, #10
 8001236:	f7ff fe6d 	bl	8000f14 <NMEA_Pow>
 800123a:	4603      	mov	r3, r0
 800123c:	fbb4 f3f3 	udiv	r3, r4, r3
 8001240:	617b      	str	r3, [r7, #20]
		gpsx->utc.hour = temp/10000;
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	4a8d      	ldr	r2, [pc, #564]	; (800147c <NMEA_GPRMC_Analysis+0x28c>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	0b5b      	lsrs	r3, r3, #13
 800124c:	b2da      	uxtb	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		gpsx->utc.min  = (temp/100)%100;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	4a8a      	ldr	r2, [pc, #552]	; (8001480 <NMEA_GPRMC_Analysis+0x290>)
 8001258:	fba2 2303 	umull	r2, r3, r2, r3
 800125c:	095a      	lsrs	r2, r3, #5
 800125e:	4b88      	ldr	r3, [pc, #544]	; (8001480 <NMEA_GPRMC_Analysis+0x290>)
 8001260:	fba3 1302 	umull	r1, r3, r3, r2
 8001264:	095b      	lsrs	r3, r3, #5
 8001266:	2164      	movs	r1, #100	; 0x64
 8001268:	fb01 f303 	mul.w	r3, r1, r3
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	b2da      	uxtb	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		gpsx->utc.sec  = temp%100;
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	4b81      	ldr	r3, [pc, #516]	; (8001480 <NMEA_GPRMC_Analysis+0x290>)
 800127a:	fba3 1302 	umull	r1, r3, r3, r2
 800127e:	095b      	lsrs	r3, r3, #5
 8001280:	2164      	movs	r1, #100	; 0x64
 8001282:	fb01 f303 	mul.w	r3, r1, r3
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	}
	posx = NMEA_Comma_Pos(p1, 3);
 8001290:	2103      	movs	r1, #3
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f7ff fe10 	bl	8000eb8 <NMEA_Comma_Pos>
 8001298:	4603      	mov	r3, r0
 800129a:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 800129c:	7efb      	ldrb	r3, [r7, #27]
 800129e:	2bff      	cmp	r3, #255	; 0xff
 80012a0:	d050      	beq.n	8001344 <NMEA_GPRMC_Analysis+0x154>
		temp = NMEA_StrToNum(p1+posx, &dx);
 80012a2:	7efb      	ldrb	r3, [r7, #27]
 80012a4:	69fa      	ldr	r2, [r7, #28]
 80012a6:	4413      	add	r3, r2
 80012a8:	f107 020f 	add.w	r2, r7, #15
 80012ac:	4611      	mov	r1, r2
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fe55 	bl	8000f5e <NMEA_StrToNum>
 80012b4:	4603      	mov	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]
		gpsx->latitude = temp/NMEA_Pow(10, dx+2);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	3302      	adds	r3, #2
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	4619      	mov	r1, r3
 80012c0:	200a      	movs	r0, #10
 80012c2:	f7ff fe27 	bl	8000f14 <NMEA_Pow>
 80012c6:	4602      	mov	r2, r0
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	645a      	str	r2, [r3, #68]	; 0x44
		rs = temp%NMEA_Pow(10, dx+2);
 80012d2:	7bfb      	ldrb	r3, [r7, #15]
 80012d4:	3302      	adds	r3, #2
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	4619      	mov	r1, r3
 80012da:	200a      	movs	r0, #10
 80012dc:	f7ff fe1a 	bl	8000f14 <NMEA_Pow>
 80012e0:	4602      	mov	r2, r0
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80012e8:	fb02 f201 	mul.w	r2, r2, r1
 80012ec:	1a9b      	subs	r3, r3, r2
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012f6:	edc7 7a04 	vstr	s15, [r7, #16]
		gpsx->latitude = gpsx->latitude*100000+(rs*NMEA_Pow(10, 5-dx))/60;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a61      	ldr	r2, [pc, #388]	; (8001484 <NMEA_GPRMC_Analysis+0x294>)
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	ee07 3a90 	vmov	s15, r3
 8001308:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	f1c3 0305 	rsb	r3, r3, #5
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4619      	mov	r1, r3
 8001316:	200a      	movs	r0, #10
 8001318:	f7ff fdfc 	bl	8000f14 <NMEA_Pow>
 800131c:	ee07 0a90 	vmov	s15, r0
 8001320:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001324:	edd7 7a04 	vldr	s15, [r7, #16]
 8001328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800132c:	eddf 6a56 	vldr	s13, [pc, #344]	; 8001488 <NMEA_GPRMC_Analysis+0x298>
 8001330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001334:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800133c:	ee17 2a90 	vmov	r2, s15
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	645a      	str	r2, [r3, #68]	; 0x44
	}
	posx = NMEA_Comma_Pos(p1, 4);
 8001344:	2104      	movs	r1, #4
 8001346:	69f8      	ldr	r0, [r7, #28]
 8001348:	f7ff fdb6 	bl	8000eb8 <NMEA_Comma_Pos>
 800134c:	4603      	mov	r3, r0
 800134e:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) gpsx->nshemi = *(p1+posx);
 8001350:	7efb      	ldrb	r3, [r7, #27]
 8001352:	2bff      	cmp	r3, #255	; 0xff
 8001354:	d006      	beq.n	8001364 <NMEA_GPRMC_Analysis+0x174>
 8001356:	7efb      	ldrb	r3, [r7, #27]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	4413      	add	r3, r2
 800135c:	781a      	ldrb	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	if (gpsx->nshemi ^ 'N') gpsx->latitude *= -1;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800136a:	2b4e      	cmp	r3, #78	; 0x4e
 800136c:	d004      	beq.n	8001378 <NMEA_GPRMC_Analysis+0x188>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	425a      	negs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	645a      	str	r2, [r3, #68]	; 0x44
	posx = NMEA_Comma_Pos(p1,5);
 8001378:	2105      	movs	r1, #5
 800137a:	69f8      	ldr	r0, [r7, #28]
 800137c:	f7ff fd9c 	bl	8000eb8 <NMEA_Comma_Pos>
 8001380:	4603      	mov	r3, r0
 8001382:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) {
 8001384:	7efb      	ldrb	r3, [r7, #27]
 8001386:	2bff      	cmp	r3, #255	; 0xff
 8001388:	d053      	beq.n	8001432 <NMEA_GPRMC_Analysis+0x242>
		temp = NMEA_StrToNum(p1+posx, &dx);
 800138a:	7efb      	ldrb	r3, [r7, #27]
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	4413      	add	r3, r2
 8001390:	f107 020f 	add.w	r2, r7, #15
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fde1 	bl	8000f5e <NMEA_StrToNum>
 800139c:	4603      	mov	r3, r0
 800139e:	617b      	str	r3, [r7, #20]
		gpsx->longitude = temp/NMEA_Pow(10, dx+2);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	3302      	adds	r3, #2
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4619      	mov	r1, r3
 80013a8:	200a      	movs	r0, #10
 80013aa:	f7ff fdb3 	bl	8000f14 <NMEA_Pow>
 80013ae:	4602      	mov	r2, r0
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
		rs = temp%NMEA_Pow(10, dx+2);
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	3302      	adds	r3, #2
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	200a      	movs	r0, #10
 80013c6:	f7ff fda5 	bl	8000f14 <NMEA_Pow>
 80013ca:	4602      	mov	r2, r0
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80013d2:	fb02 f201 	mul.w	r2, r2, r1
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e0:	edc7 7a04 	vstr	s15, [r7, #16]
		gpsx->longitude = gpsx->longitude*100000+(rs*NMEA_Pow(10, 5-dx))/60;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 80013ea:	4a26      	ldr	r2, [pc, #152]	; (8001484 <NMEA_GPRMC_Analysis+0x294>)
 80013ec:	fb02 f303 	mul.w	r3, r2, r3
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	f1c3 0305 	rsb	r3, r3, #5
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	4619      	mov	r1, r3
 8001402:	200a      	movs	r0, #10
 8001404:	f7ff fd86 	bl	8000f14 <NMEA_Pow>
 8001408:	ee07 0a90 	vmov	s15, r0
 800140c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001410:	edd7 7a04 	vldr	s15, [r7, #16]
 8001414:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001418:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001488 <NMEA_GPRMC_Analysis+0x298>
 800141c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001420:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001424:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001428:	ee17 2a90 	vmov	r2, s15
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
	}
	posx = NMEA_Comma_Pos(p1, 6);
 8001432:	2106      	movs	r1, #6
 8001434:	69f8      	ldr	r0, [r7, #28]
 8001436:	f7ff fd3f 	bl	8000eb8 <NMEA_Comma_Pos>
 800143a:	4603      	mov	r3, r0
 800143c:	76fb      	strb	r3, [r7, #27]
	if (posx^0XFF) gpsx->ewhemi = *(p1+posx);
 800143e:	7efb      	ldrb	r3, [r7, #27]
 8001440:	2bff      	cmp	r3, #255	; 0xff
 8001442:	d006      	beq.n	8001452 <NMEA_GPRMC_Analysis+0x262>
 8001444:	7efb      	ldrb	r3, [r7, #27]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	781a      	ldrb	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	if (gpsx->ewhemi ^ 'E') gpsx->longitude *= -1;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001458:	2b45      	cmp	r3, #69	; 0x45
 800145a:	d006      	beq.n	800146a <NMEA_GPRMC_Analysis+0x27a>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 8001462:	425a      	negs	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f8c3 2049 	str.w	r2, [r3, #73]	; 0x49
//		temp = NMEA_StrToNum(p1+posx, &dx);
//		gpsx->utc.date  = temp/10000;
//		gpsx->utc.month = (temp/100)%100;
//		gpsx->utc.year  = 2000+temp%100;
//	}
}
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	; 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	ecbd 8b02 	vpop	{d8}
 8001474:	bd90      	pop	{r4, r7, pc}
 8001476:	bf00      	nop
 8001478:	08007f60 	.word	0x08007f60
 800147c:	d1b71759 	.word	0xd1b71759
 8001480:	51eb851f 	.word	0x51eb851f
 8001484:	000186a0 	.word	0x000186a0
 8001488:	42700000 	.word	0x42700000

0800148c <NMEA_GPS_DATA_PHRASE>:

void NMEA_GPS_DATA_PHRASE (nmea_msg *gpsx, gps_data *gpst) {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
	gpst->latitude  = (float)gpsx->latitude /100000;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	ee07 3a90 	vmov	s15, r3
 800149e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a2:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800151c <NMEA_GPS_DATA_PHRASE+0x90>
 80014a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	ee16 2a90 	vmov	r2, s13
 80014b0:	601a      	str	r2, [r3, #0]
	gpst->longitude = (float)gpsx->longitude/100000;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f8d3 3049 	ldr.w	r3, [r3, #73]	; 0x49
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800151c <NMEA_GPS_DATA_PHRASE+0x90>
 80014c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	ee16 2a90 	vmov	r2, s13
 80014ce:	605a      	str	r2, [r3, #4]
	gpst->speed     = (float)gpsx->speed/1000;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8b3 3067 	ldrh.w	r3, [r3, #103]	; 0x67
 80014d6:	b29b      	uxth	r3, r3
 80014d8:	ee07 3a90 	vmov	s15, r3
 80014dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001520 <NMEA_GPS_DATA_PHRASE+0x94>
 80014e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	ee16 2a90 	vmov	r2, s13
 80014ee:	609a      	str	r2, [r3, #8]
	gpst->pdop      = (float)gpsx->pdop/10;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8b3 305d 	ldrh.w	r3, [r3, #93]	; 0x5d
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	ee07 3a90 	vmov	s15, r3
 80014fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001500:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001504:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	ee16 2a90 	vmov	r2, s13
 800150e:	60da      	str	r2, [r3, #12]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	47c35000 	.word	0x47c35000
 8001520:	447a0000 	.word	0x447a0000

08001524 <LED_PC13_INIT>:
  */

#include "LED_Functions/LED_OUTPUT.h"
#include "main.h"

inline void LED_PC13_INIT () {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001538:	2300      	movs	r3, #0
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <LED_PC13_INIT+0x60>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001540:	4a10      	ldr	r2, [pc, #64]	; (8001584 <LED_PC13_INIT+0x60>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6313      	str	r3, [r2, #48]	; 0x30
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <LED_PC13_INIT+0x60>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001554:	2201      	movs	r2, #1
 8001556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800155a:	480b      	ldr	r0, [pc, #44]	; (8001588 <LED_PC13_INIT+0x64>)
 800155c:	f001 faee 	bl	8002b3c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001560:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001564:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156e:	2302      	movs	r3, #2
 8001570:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	4619      	mov	r1, r3
 8001576:	4804      	ldr	r0, [pc, #16]	; (8001588 <LED_PC13_INIT+0x64>)
 8001578:	f001 f95e 	bl	8002838 <HAL_GPIO_Init>
}
 800157c:	bf00      	nop
 800157e:	3718      	adds	r7, #24
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40023800 	.word	0x40023800
 8001588:	40020800 	.word	0x40020800

0800158c <LED_PC13_BLINK>:

inline void LED_PC13_BLINK (register int delayTime) {
 800158c:	b598      	push	{r3, r4, r7, lr}
 800158e:	af00      	add	r7, sp, #0
 8001590:	4604      	mov	r4, r0
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001596:	4809      	ldr	r0, [pc, #36]	; (80015bc <LED_PC13_BLINK+0x30>)
 8001598:	f001 fae9 	bl	8002b6e <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 800159c:	4623      	mov	r3, r4
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fff4 	bl	800258c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80015a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <LED_PC13_BLINK+0x30>)
 80015aa:	f001 fae0 	bl	8002b6e <HAL_GPIO_TogglePin>
    HAL_Delay(delayTime);
 80015ae:	4623      	mov	r3, r4
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 ffeb 	bl	800258c <HAL_Delay>
}
 80015b6:	bf00      	nop
 80015b8:	bd98      	pop	{r3, r4, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40020800 	.word	0x40020800

080015c0 <LED_OUTPUT_INIT>:
			LED_TEST_OFF(); HAL_Delay(4);
		}
	}
}

inline void LED_OUTPUT_INIT () {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	4b2a      	ldr	r3, [pc, #168]	; (8001684 <LED_OUTPUT_INIT+0xc4>)
 80015da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015dc:	4a29      	ldr	r2, [pc, #164]	; (8001684 <LED_OUTPUT_INIT+0xc4>)
 80015de:	f043 0301 	orr.w	r3, r3, #1
 80015e2:	6313      	str	r3, [r2, #48]	; 0x30
 80015e4:	4b27      	ldr	r3, [pc, #156]	; (8001684 <LED_OUTPUT_INIT+0xc4>)
 80015e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80015f0:	2201      	movs	r2, #1
 80015f2:	2180      	movs	r1, #128	; 0x80
 80015f4:	4824      	ldr	r0, [pc, #144]	; (8001688 <LED_OUTPUT_INIT+0xc8>)
 80015f6:	f001 faa1 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80015fa:	2201      	movs	r2, #1
 80015fc:	2140      	movs	r1, #64	; 0x40
 80015fe:	4822      	ldr	r0, [pc, #136]	; (8001688 <LED_OUTPUT_INIT+0xc8>)
 8001600:	f001 fa9c 	bl	8002b3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001604:	2201      	movs	r2, #1
 8001606:	2120      	movs	r1, #32
 8001608:	481f      	ldr	r0, [pc, #124]	; (8001688 <LED_OUTPUT_INIT+0xc8>)
 800160a:	f001 fa97 	bl	8002b3c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	2301      	movs	r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800161a:	2302      	movs	r3, #2
 800161c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	4619      	mov	r1, r3
 8001622:	4819      	ldr	r0, [pc, #100]	; (8001688 <LED_OUTPUT_INIT+0xc8>)
 8001624:	f001 f908 	bl	8002838 <HAL_GPIO_Init>
	LED_GPSRFS_OFF();
 8001628:	2200      	movs	r2, #0
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	4816      	ldr	r0, [pc, #88]	; (8001688 <LED_OUTPUT_INIT+0xc8>)
 800162e:	f001 fa85 	bl	8002b3c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001632:	2340      	movs	r3, #64	; 0x40
 8001634:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800163e:	2302      	movs	r3, #2
 8001640:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4810      	ldr	r0, [pc, #64]	; (8001688 <LED_OUTPUT_INIT+0xc8>)
 8001648:	f001 f8f6 	bl	8002838 <HAL_GPIO_Init>
	LED_DATUPD_OFF();
 800164c:	2200      	movs	r2, #0
 800164e:	2140      	movs	r1, #64	; 0x40
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <LED_OUTPUT_INIT+0xc8>)
 8001652:	f001 fa73 	bl	8002b3c <HAL_GPIO_WritePin>

	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001656:	2320      	movs	r3, #32
 8001658:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2302      	movs	r3, #2
 8001664:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	4619      	mov	r1, r3
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <LED_OUTPUT_INIT+0xc8>)
 800166c:	f001 f8e4 	bl	8002838 <HAL_GPIO_Init>
	LED_ALERT_OFF();
 8001670:	2200      	movs	r2, #0
 8001672:	2120      	movs	r1, #32
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <LED_OUTPUT_INIT+0xc8>)
 8001676:	f001 fa61 	bl	8002b3c <HAL_GPIO_WritePin>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40020000 	.word	0x40020000

0800168c <LED_OUTPUT_TEST>:

inline void LED_OUTPUT_TEST () {
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8001690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001694:	f000 ff7a 	bl	800258c <HAL_Delay>

	LED_GPSRFS_ON ();
 8001698:	2201      	movs	r2, #1
 800169a:	2180      	movs	r1, #128	; 0x80
 800169c:	4812      	ldr	r0, [pc, #72]	; (80016e8 <LED_OUTPUT_TEST+0x5c>)
 800169e:	f001 fa4d 	bl	8002b3c <HAL_GPIO_WritePin>
	LED_DATUPD_ON ();
 80016a2:	2201      	movs	r2, #1
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	4810      	ldr	r0, [pc, #64]	; (80016e8 <LED_OUTPUT_TEST+0x5c>)
 80016a8:	f001 fa48 	bl	8002b3c <HAL_GPIO_WritePin>
	LED_ALERT_ON  ();
 80016ac:	2201      	movs	r2, #1
 80016ae:	2120      	movs	r1, #32
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <LED_OUTPUT_TEST+0x5c>)
 80016b2:	f001 fa43 	bl	8002b3c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 80016b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ba:	f000 ff67 	bl	800258c <HAL_Delay>

	LED_GPSRFS_OFF();
 80016be:	2200      	movs	r2, #0
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	4809      	ldr	r0, [pc, #36]	; (80016e8 <LED_OUTPUT_TEST+0x5c>)
 80016c4:	f001 fa3a 	bl	8002b3c <HAL_GPIO_WritePin>
	LED_DATUPD_OFF();
 80016c8:	2200      	movs	r2, #0
 80016ca:	2140      	movs	r1, #64	; 0x40
 80016cc:	4806      	ldr	r0, [pc, #24]	; (80016e8 <LED_OUTPUT_TEST+0x5c>)
 80016ce:	f001 fa35 	bl	8002b3c <HAL_GPIO_WritePin>
	LED_ALERT_OFF ();
 80016d2:	2200      	movs	r2, #0
 80016d4:	2120      	movs	r1, #32
 80016d6:	4804      	ldr	r0, [pc, #16]	; (80016e8 <LED_OUTPUT_TEST+0x5c>)
 80016d8:	f001 fa30 	bl	8002b3c <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 80016dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016e0:	f000 ff54 	bl	800258c <HAL_Delay>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40020000 	.word	0x40020000

080016ec <accidentMonitorSetup>:

#define ACCIDENT_ACCE            2          //Minimal acceleration to trigger accident report
#define ACCIDENT_ANGLE          90       	//Minimal dip angle to trigger accident report
#define ACCIDENT_ALERT_SPEED	25

void accidentMonitorSetup (void) {MPU_Init();}
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	f000 f802 	bl	80016f8 <MPU_Init>
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <MPU_Init>:

#include "MPU6050/MPU6050.h"

u8 MPU_Init(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
	u8 res;
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Init(&hi2c1);
 80016fe:	481f      	ldr	r0, [pc, #124]	; (800177c <MPU_Init+0x84>)
 8001700:	f001 fa50 	bl	8002ba4 <HAL_I2C_Init>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X80);
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	206b      	movs	r0, #107	; 0x6b
 8001708:	f000 f8b8 	bl	800187c <MPU_Write_Byte>
	MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X00);
 800170c:	2100      	movs	r1, #0
 800170e:	206b      	movs	r0, #107	; 0x6b
 8001710:	f000 f8b4 	bl	800187c <MPU_Write_Byte>
	MPU_Set_Gyro_Fsr(3);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 f833 	bl	8001780 <MPU_Set_Gyro_Fsr>
	MPU_Set_Accel_Fsr(0);
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f841 	bl	80017a2 <MPU_Set_Accel_Fsr>
	MPU_Set_Rate(50);
 8001720:	2032      	movs	r0, #50	; 0x32
 8001722:	f000 f880 	bl	8001826 <MPU_Set_Rate>
	MPU_Write_Byte(MPU_INT_EN_REG, 0X00);
 8001726:	2100      	movs	r1, #0
 8001728:	2038      	movs	r0, #56	; 0x38
 800172a:	f000 f8a7 	bl	800187c <MPU_Write_Byte>
	MPU_Write_Byte(MPU_USER_CTRL_REG, 0X00);
 800172e:	2100      	movs	r1, #0
 8001730:	206a      	movs	r0, #106	; 0x6a
 8001732:	f000 f8a3 	bl	800187c <MPU_Write_Byte>
	MPU_Write_Byte(MPU_FIFO_EN_REG, 0X00);
 8001736:	2100      	movs	r1, #0
 8001738:	2023      	movs	r0, #35	; 0x23
 800173a:	f000 f89f 	bl	800187c <MPU_Write_Byte>
	MPU_Write_Byte(MPU_INTBP_CFG_REG, 0X80);
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	2037      	movs	r0, #55	; 0x37
 8001742:	f000 f89b 	bl	800187c <MPU_Write_Byte>
	res = MPU_Read_Byte(MPU_DEVICE_ID_REG);
 8001746:	2075      	movs	r0, #117	; 0x75
 8001748:	f000 f8bc 	bl	80018c4 <MPU_Read_Byte>
 800174c:	4603      	mov	r3, r0
 800174e:	71fb      	strb	r3, [r7, #7]
	if (res == MPU_ADDR) {
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	2b68      	cmp	r3, #104	; 0x68
 8001754:	d10c      	bne.n	8001770 <MPU_Init+0x78>
		MPU_Write_Byte(MPU_PWR_MGMT1_REG, 0X01);
 8001756:	2101      	movs	r1, #1
 8001758:	206b      	movs	r0, #107	; 0x6b
 800175a:	f000 f88f 	bl	800187c <MPU_Write_Byte>
		MPU_Write_Byte(MPU_PWR_MGMT2_REG, 0X00);
 800175e:	2100      	movs	r1, #0
 8001760:	206c      	movs	r0, #108	; 0x6c
 8001762:	f000 f88b 	bl	800187c <MPU_Write_Byte>
		MPU_Set_Rate(50);
 8001766:	2032      	movs	r0, #50	; 0x32
 8001768:	f000 f85d 	bl	8001826 <MPU_Set_Rate>
	} else return 1;
	return 0;
 800176c:	2300      	movs	r3, #0
 800176e:	e000      	b.n	8001772 <MPU_Init+0x7a>
	} else return 1;
 8001770:	2301      	movs	r3, #1
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	2000020c 	.word	0x2000020c

08001780 <MPU_Set_Gyro_Fsr>:

u8 MPU_Set_Gyro_Fsr(u8 fsr) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_GYRO_CFG_REG, fsr<<3);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4619      	mov	r1, r3
 8001792:	201b      	movs	r0, #27
 8001794:	f000 f872 	bl	800187c <MPU_Write_Byte>
 8001798:	4603      	mov	r3, r0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <MPU_Set_Accel_Fsr>:

u8 MPU_Set_Accel_Fsr(u8 fsr) {
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	4603      	mov	r3, r0
 80017aa:	71fb      	strb	r3, [r7, #7]
	return MPU_Write_Byte(MPU_ACCEL_CFG_REG, fsr<<3);
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	4619      	mov	r1, r3
 80017b4:	201c      	movs	r0, #28
 80017b6:	f000 f861 	bl	800187c <MPU_Write_Byte>
 80017ba:	4603      	mov	r3, r0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <MPU_Set_LPF>:

u8 MPU_Set_LPF(u16 lpf) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	80fb      	strh	r3, [r7, #6]
	u8 data = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
	if (lpf >= 188)  data = 1;
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	2bbb      	cmp	r3, #187	; 0xbb
 80017d6:	d902      	bls.n	80017de <MPU_Set_LPF+0x1a>
 80017d8:	2301      	movs	r3, #1
 80017da:	73fb      	strb	r3, [r7, #15]
 80017dc:	e019      	b.n	8001812 <MPU_Set_LPF+0x4e>
	else if(lpf>=98) data = 2;
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	2b61      	cmp	r3, #97	; 0x61
 80017e2:	d902      	bls.n	80017ea <MPU_Set_LPF+0x26>
 80017e4:	2302      	movs	r3, #2
 80017e6:	73fb      	strb	r3, [r7, #15]
 80017e8:	e013      	b.n	8001812 <MPU_Set_LPF+0x4e>
	else if(lpf>=42) data = 3;
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2b29      	cmp	r3, #41	; 0x29
 80017ee:	d902      	bls.n	80017f6 <MPU_Set_LPF+0x32>
 80017f0:	2303      	movs	r3, #3
 80017f2:	73fb      	strb	r3, [r7, #15]
 80017f4:	e00d      	b.n	8001812 <MPU_Set_LPF+0x4e>
	else if(lpf>=20) data = 4;
 80017f6:	88fb      	ldrh	r3, [r7, #6]
 80017f8:	2b13      	cmp	r3, #19
 80017fa:	d902      	bls.n	8001802 <MPU_Set_LPF+0x3e>
 80017fc:	2304      	movs	r3, #4
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e007      	b.n	8001812 <MPU_Set_LPF+0x4e>
	else if(lpf>=10) data = 5;
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b09      	cmp	r3, #9
 8001806:	d902      	bls.n	800180e <MPU_Set_LPF+0x4a>
 8001808:	2305      	movs	r3, #5
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e001      	b.n	8001812 <MPU_Set_LPF+0x4e>
	else data = 6;
 800180e:	2306      	movs	r3, #6
 8001810:	73fb      	strb	r3, [r7, #15]
	return MPU_Write_Byte(MPU_CFG_REG, data);
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	4619      	mov	r1, r3
 8001816:	201a      	movs	r0, #26
 8001818:	f000 f830 	bl	800187c <MPU_Write_Byte>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <MPU_Set_Rate>:

u8 MPU_Set_Rate(u16 rate) {
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	4603      	mov	r3, r0
 800182e:	80fb      	strh	r3, [r7, #6]
	u8 data;
	if (rate > 1000) rate = 1000;
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001836:	d902      	bls.n	800183e <MPU_Set_Rate+0x18>
 8001838:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800183c:	80fb      	strh	r3, [r7, #6]
	if (rate < 4)    rate = 4;
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	2b03      	cmp	r3, #3
 8001842:	d801      	bhi.n	8001848 <MPU_Set_Rate+0x22>
 8001844:	2304      	movs	r3, #4
 8001846:	80fb      	strh	r3, [r7, #6]
	data = 1000/rate - 1;
 8001848:	88fb      	ldrh	r3, [r7, #6]
 800184a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800184e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001852:	b2db      	uxtb	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
	data = MPU_Write_Byte(MPU_SAMPLE_RATE_REG, data);
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	4619      	mov	r1, r3
 800185c:	2019      	movs	r0, #25
 800185e:	f000 f80d 	bl	800187c <MPU_Write_Byte>
 8001862:	4603      	mov	r3, r0
 8001864:	73fb      	strb	r3, [r7, #15]
 	return MPU_Set_LPF(rate/2);
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	085b      	lsrs	r3, r3, #1
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ffa9 	bl	80017c4 <MPU_Set_LPF>
 8001872:	4603      	mov	r3, r0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <MPU_Write_Byte>:
	extern I2C_HandleTypeDef hi2c1;
	HAL_I2C_Mem_Read  (&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, buf, len, 0xfff);
	HAL_Delay(100); return 0;
}

u8 MPU_Write_Byte(u8 reg, u8 data) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af04      	add	r7, sp, #16
 8001882:	4603      	mov	r3, r0
 8001884:	460a      	mov	r2, r1
 8001886:	71fb      	strb	r3, [r7, #7]
 8001888:	4613      	mov	r3, r2
 800188a:	71bb      	strb	r3, [r7, #6]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char W_Data = data;
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Write(&hi2c1, MPU_WRITE, reg, I2C_MEMADD_SIZE_8BIT, &W_Data, 1, 0xfff);
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	b29a      	uxth	r2, r3
 8001894:	f640 73ff 	movw	r3, #4095	; 0xfff
 8001898:	9302      	str	r3, [sp, #8]
 800189a:	2301      	movs	r3, #1
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	f107 030f 	add.w	r3, r7, #15
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2301      	movs	r3, #1
 80018a6:	21d0      	movs	r1, #208	; 0xd0
 80018a8:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MPU_Write_Byte+0x44>)
 80018aa:	f001 fab3 	bl	8002e14 <HAL_I2C_Mem_Write>
	HAL_Delay(100); return 0;
 80018ae:	2064      	movs	r0, #100	; 0x64
 80018b0:	f000 fe6c 	bl	800258c <HAL_Delay>
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000020c 	.word	0x2000020c

080018c4 <MPU_Read_Byte>:

u8 MPU_Read_Byte(u8 reg) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af04      	add	r7, sp, #16
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
	extern I2C_HandleTypeDef hi2c1;
	unsigned char R_Data = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Mem_Read(&hi2c1, MPU_READ, reg, I2C_MEMADD_SIZE_8BIT, &R_Data, 1, 0xfff);
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	b29a      	uxth	r2, r3
 80018d6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	2301      	movs	r3, #1
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	f107 030f 	add.w	r3, r7, #15
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	21d1      	movs	r1, #209	; 0xd1
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MPU_Read_Byte+0x3c>)
 80018ec:	f001 fb8c 	bl	8003008 <HAL_I2C_Mem_Read>
	HAL_Delay(100); return R_Data;
 80018f0:	2064      	movs	r0, #100	; 0x64
 80018f2:	f000 fe4b 	bl	800258c <HAL_Delay>
 80018f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000020c 	.word	0x2000020c

08001904 <intToString>:
		(uint8_t *) "AT+CSOCL=0\r\n"
};

char buf[2048], snd[2048], tmp[2048];

void intToString(int n, char *str) {
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
	uint8_t  i = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
	int temp = n;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60bb      	str	r3, [r7, #8]
	while((temp/=10)>0) {++ i;}
 8001916:	e002      	b.n	800191e <intToString+0x1a>
 8001918:	7bfb      	ldrb	r3, [r7, #15]
 800191a:	3301      	adds	r3, #1
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	4a1a      	ldr	r2, [pc, #104]	; (800198c <intToString+0x88>)
 8001922:	fb82 1203 	smull	r1, r2, r2, r3
 8001926:	1092      	asrs	r2, r2, #2
 8001928:	17db      	asrs	r3, r3, #31
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	60bb      	str	r3, [r7, #8]
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	dcf1      	bgt.n	8001918 <intToString+0x14>
	str[i] = '\0';
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	do {str[-- i] = n%10 + '0';}
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <intToString+0x88>)
 8001942:	fb83 1302 	smull	r1, r3, r3, r2
 8001946:	1099      	asrs	r1, r3, #2
 8001948:	17d3      	asrs	r3, r2, #31
 800194a:	1ac9      	subs	r1, r1, r3
 800194c:	460b      	mov	r3, r1
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	1ad1      	subs	r1, r2, r3
 8001956:	b2ca      	uxtb	r2, r1
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	3b01      	subs	r3, #1
 800195c:	73fb      	strb	r3, [r7, #15]
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	6839      	ldr	r1, [r7, #0]
 8001962:	440b      	add	r3, r1
 8001964:	3230      	adds	r2, #48	; 0x30
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]
	while ((n/=10) > 0); return;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <intToString+0x88>)
 800196e:	fb82 1203 	smull	r1, r2, r2, r3
 8001972:	1092      	asrs	r2, r2, #2
 8001974:	17db      	asrs	r3, r3, #31
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	dcde      	bgt.n	800193e <intToString+0x3a>
 8001980:	bf00      	nop
}
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	66666667 	.word	0x66666667

08001990 <strToHex>:

int num[2048];
const char hex[16]={'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};

void strToHex (char *src, char *dst) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b088      	sub	sp, #32
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
	int len = strlen(src), i, pos = 0, top = 0;
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7fe fc20 	bl	80001e0 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
	char tmp;
	for (i=0; i<len; ++ i) {
 80019ac:	2300      	movs	r3, #0
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	e031      	b.n	8001a16 <strToHex+0x86>
		tmp = src[i], top = 0;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	4413      	add	r3, r2
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	74fb      	strb	r3, [r7, #19]
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
		while (tmp) {
 80019c0:	e00b      	b.n	80019da <strToHex+0x4a>
			num[top ++] =tmp % 16;
 80019c2:	7cfa      	ldrb	r2, [r7, #19]
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	1c59      	adds	r1, r3, #1
 80019c8:	6179      	str	r1, [r7, #20]
 80019ca:	f002 020f 	and.w	r2, r2, #15
 80019ce:	4918      	ldr	r1, [pc, #96]	; (8001a30 <strToHex+0xa0>)
 80019d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			tmp /= 16;
 80019d4:	7cfb      	ldrb	r3, [r7, #19]
 80019d6:	091b      	lsrs	r3, r3, #4
 80019d8:	74fb      	strb	r3, [r7, #19]
		while (tmp) {
 80019da:	7cfb      	ldrb	r3, [r7, #19]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1f0      	bne.n	80019c2 <strToHex+0x32>
		} for (top=top-1; ~top; -- top) dst[++ pos] = hex[num[top]];
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e00f      	b.n	8001a08 <strToHex+0x78>
 80019e8:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <strToHex+0xa0>)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	3301      	adds	r3, #1
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	6839      	ldr	r1, [r7, #0]
 80019fa:	440b      	add	r3, r1
 80019fc:	490d      	ldr	r1, [pc, #52]	; (8001a34 <strToHex+0xa4>)
 80019fe:	5c8a      	ldrb	r2, [r1, r2]
 8001a00:	701a      	strb	r2, [r3, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0e:	d1eb      	bne.n	80019e8 <strToHex+0x58>
	for (i=0; i<len; ++ i) {
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	3301      	adds	r3, #1
 8001a14:	61fb      	str	r3, [r7, #28]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dbc9      	blt.n	80019b2 <strToHex+0x22>
	} dst[pos] = '\0';
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	2000132c 	.word	0x2000132c
 8001a34:	08008134 	.word	0x08008134

08001a38 <HTTP_Send_Data>:

void HTTP_Send_Data (float lat, float log, float spd, int isAccident) {
 8001a38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a3c:	b08a      	sub	sp, #40	; 0x28
 8001a3e:	af06      	add	r7, sp, #24
 8001a40:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a44:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a48:	ed87 1a01 	vstr	s2, [r7, #4]
 8001a4c:	6038      	str	r0, [r7, #0]
	HAL_UART_Transmit_IT(&huart6, (uint8_t *) ATmap[0], sizeof(ATmap[0])); HAL_Delay(100);
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	; (8001b78 <HTTP_Send_Data+0x140>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2204      	movs	r2, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4849      	ldr	r0, [pc, #292]	; (8001b7c <HTTP_Send_Data+0x144>)
 8001a58:	f002 fe20 	bl	800469c <HAL_UART_Transmit_IT>
 8001a5c:	2064      	movs	r0, #100	; 0x64
 8001a5e:	f000 fd95 	bl	800258c <HAL_Delay>
	HAL_UART_Transmit_IT(&huart6, (uint8_t *) ATmap[1], sizeof(ATmap[1])); HAL_Delay(100);
 8001a62:	4b45      	ldr	r3, [pc, #276]	; (8001b78 <HTTP_Send_Data+0x140>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2204      	movs	r2, #4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4844      	ldr	r0, [pc, #272]	; (8001b7c <HTTP_Send_Data+0x144>)
 8001a6c:	f002 fe16 	bl	800469c <HAL_UART_Transmit_IT>
 8001a70:	2064      	movs	r0, #100	; 0x64
 8001a72:	f000 fd8b 	bl	800258c <HAL_Delay>
	HAL_UART_Transmit_IT(&huart6, (uint8_t *) ATmap[2], sizeof(ATmap[2])); HAL_Delay(100);
 8001a76:	4b40      	ldr	r3, [pc, #256]	; (8001b78 <HTTP_Send_Data+0x140>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2204      	movs	r2, #4
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	483f      	ldr	r0, [pc, #252]	; (8001b7c <HTTP_Send_Data+0x144>)
 8001a80:	f002 fe0c 	bl	800469c <HAL_UART_Transmit_IT>
 8001a84:	2064      	movs	r0, #100	; 0x64
 8001a86:	f000 fd81 	bl	800258c <HAL_Delay>

	sprintf(buf, "{\"La\":\"%.6f\",\"Lo\":\"%.6f\",\"S\":\"%.2f\",\"F\":\"%d\"}\r\n", lat, log, spd, isAccident);
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7fe fd64 	bl	8000558 <__aeabi_f2d>
 8001a90:	4680      	mov	r8, r0
 8001a92:	4689      	mov	r9, r1
 8001a94:	68b8      	ldr	r0, [r7, #8]
 8001a96:	f7fe fd5f 	bl	8000558 <__aeabi_f2d>
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	460d      	mov	r5, r1
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f7fe fd5a 	bl	8000558 <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	6839      	ldr	r1, [r7, #0]
 8001aaa:	9104      	str	r1, [sp, #16]
 8001aac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ab0:	e9cd 4500 	strd	r4, r5, [sp]
 8001ab4:	4642      	mov	r2, r8
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	4931      	ldr	r1, [pc, #196]	; (8001b80 <HTTP_Send_Data+0x148>)
 8001aba:	4832      	ldr	r0, [pc, #200]	; (8001b84 <HTTP_Send_Data+0x14c>)
 8001abc:	f004 f9a4 	bl	8005e08 <siprintf>
	printf ("%s\r\n", buf);
 8001ac0:	4930      	ldr	r1, [pc, #192]	; (8001b84 <HTTP_Send_Data+0x14c>)
 8001ac2:	4831      	ldr	r0, [pc, #196]	; (8001b88 <HTTP_Send_Data+0x150>)
 8001ac4:	f004 f924 	bl	8005d10 <iprintf>

	strcpy(snd, "POST /devices/644250210/datapoints?type=3 HTTP/1.1\r\napi-key:fhAS54e5X8HL5wcaB6ZW74oA3vo=\r\nHost:api.heclouds.com\r\nConnection:close\r\nContent-Length:");
 8001ac8:	4a30      	ldr	r2, [pc, #192]	; (8001b8c <HTTP_Send_Data+0x154>)
 8001aca:	4b31      	ldr	r3, [pc, #196]	; (8001b90 <HTTP_Send_Data+0x158>)
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	2393      	movs	r3, #147	; 0x93
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f003 fcac 	bl	8005430 <memcpy>

	intToString(strlen(buf)-2, tmp);
 8001ad8:	482a      	ldr	r0, [pc, #168]	; (8001b84 <HTTP_Send_Data+0x14c>)
 8001ada:	f7fe fb81 	bl	80001e0 <strlen>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	3b02      	subs	r3, #2
 8001ae2:	492c      	ldr	r1, [pc, #176]	; (8001b94 <HTTP_Send_Data+0x15c>)
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff ff0d 	bl	8001904 <intToString>
	strcat(snd, tmp);
 8001aea:	492a      	ldr	r1, [pc, #168]	; (8001b94 <HTTP_Send_Data+0x15c>)
 8001aec:	4827      	ldr	r0, [pc, #156]	; (8001b8c <HTTP_Send_Data+0x154>)
 8001aee:	f004 f9ab 	bl	8005e48 <strcat>
	strcat(snd, "\r\n\r\n");
 8001af2:	4826      	ldr	r0, [pc, #152]	; (8001b8c <HTTP_Send_Data+0x154>)
 8001af4:	f7fe fb74 	bl	80001e0 <strlen>
 8001af8:	4603      	mov	r3, r0
 8001afa:	461a      	mov	r2, r3
 8001afc:	4b23      	ldr	r3, [pc, #140]	; (8001b8c <HTTP_Send_Data+0x154>)
 8001afe:	4413      	add	r3, r2
 8001b00:	4a25      	ldr	r2, [pc, #148]	; (8001b98 <HTTP_Send_Data+0x160>)
 8001b02:	6810      	ldr	r0, [r2, #0]
 8001b04:	6018      	str	r0, [r3, #0]
 8001b06:	7912      	ldrb	r2, [r2, #4]
 8001b08:	711a      	strb	r2, [r3, #4]
	strcat(snd, buf);
 8001b0a:	491e      	ldr	r1, [pc, #120]	; (8001b84 <HTTP_Send_Data+0x14c>)
 8001b0c:	481f      	ldr	r0, [pc, #124]	; (8001b8c <HTTP_Send_Data+0x154>)
 8001b0e:	f004 f99b 	bl	8005e48 <strcat>

	strcpy(buf, "AT+CSOSEND=0,0,");
 8001b12:	4a1c      	ldr	r2, [pc, #112]	; (8001b84 <HTTP_Send_Data+0x14c>)
 8001b14:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <HTTP_Send_Data+0x164>)
 8001b16:	4614      	mov	r4, r2
 8001b18:	461d      	mov	r5, r3
 8001b1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b1c:	6020      	str	r0, [r4, #0]
 8001b1e:	6061      	str	r1, [r4, #4]
 8001b20:	60a2      	str	r2, [r4, #8]
 8001b22:	60e3      	str	r3, [r4, #12]
	strToHex(snd, tmp);
 8001b24:	491b      	ldr	r1, [pc, #108]	; (8001b94 <HTTP_Send_Data+0x15c>)
 8001b26:	4819      	ldr	r0, [pc, #100]	; (8001b8c <HTTP_Send_Data+0x154>)
 8001b28:	f7ff ff32 	bl	8001990 <strToHex>
	strcat(buf, tmp);
 8001b2c:	4919      	ldr	r1, [pc, #100]	; (8001b94 <HTTP_Send_Data+0x15c>)
 8001b2e:	4815      	ldr	r0, [pc, #84]	; (8001b84 <HTTP_Send_Data+0x14c>)
 8001b30:	f004 f98a 	bl	8005e48 <strcat>
	strcat(buf, "\r\n");
 8001b34:	4813      	ldr	r0, [pc, #76]	; (8001b84 <HTTP_Send_Data+0x14c>)
 8001b36:	f7fe fb53 	bl	80001e0 <strlen>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HTTP_Send_Data+0x14c>)
 8001b40:	4413      	add	r3, r2
 8001b42:	4a17      	ldr	r2, [pc, #92]	; (8001ba0 <HTTP_Send_Data+0x168>)
 8001b44:	8811      	ldrh	r1, [r2, #0]
 8001b46:	7892      	ldrb	r2, [r2, #2]
 8001b48:	8019      	strh	r1, [r3, #0]
 8001b4a:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart6, (uint8_t *) buf, sizeof(buf)); HAL_Delay(1000);
 8001b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b50:	490c      	ldr	r1, [pc, #48]	; (8001b84 <HTTP_Send_Data+0x14c>)
 8001b52:	480a      	ldr	r0, [pc, #40]	; (8001b7c <HTTP_Send_Data+0x144>)
 8001b54:	f002 fda2 	bl	800469c <HAL_UART_Transmit_IT>
 8001b58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b5c:	f000 fd16 	bl	800258c <HAL_Delay>

	HAL_UART_Transmit_IT(&huart6, (uint8_t *) ATmap[4], sizeof(ATmap[4]));
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <HTTP_Send_Data+0x140>)
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	2204      	movs	r2, #4
 8001b66:	4619      	mov	r1, r3
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <HTTP_Send_Data+0x144>)
 8001b6a:	f002 fd97 	bl	800469c <HAL_UART_Transmit_IT>
}
 8001b6e:	bf00      	nop
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b78:	20000000 	.word	0x20000000
 8001b7c:	200002e0 	.word	0x200002e0
 8001b80:	08007fc4 	.word	0x08007fc4
 8001b84:	2000332c 	.word	0x2000332c
 8001b88:	08007ff4 	.word	0x08007ff4
 8001b8c:	20000b2c 	.word	0x20000b2c
 8001b90:	08007ffc 	.word	0x08007ffc
 8001b94:	2000032c 	.word	0x2000032c
 8001b98:	08008090 	.word	0x08008090
 8001b9c:	08007fa4 	.word	0x08007fa4
 8001ba0:	08008098 	.word	0x08008098

08001ba4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit((UART_HandleTypeDef *)&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 8001bac:	1d39      	adds	r1, r7, #4
 8001bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <__io_putchar+0x20>)
 8001bb6:	f002 fc32 	bl	800441e <HAL_UART_Transmit>
	return ch;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	20000260 	.word	0x20000260

08001bc8 <GPS_decode>:
nmea_slmsg    NMEAslmsg;
nmea_utc_time NMEAutctime;
nmea_msg      NMEAmsg;
gps_data      NMEAdata;

void GPS_decode (void) {
 8001bc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af04      	add	r7, sp, #16

	HAL_UART_Receive(&huart2, gps_uart, sizeof(gps_uart), GPS_Delay_Time);
 8001bd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd8:	493c      	ldr	r1, [pc, #240]	; (8001ccc <GPS_decode+0x104>)
 8001bda:	483d      	ldr	r0, [pc, #244]	; (8001cd0 <GPS_decode+0x108>)
 8001bdc:	f002 fcb8 	bl	8004550 <HAL_UART_Receive>

	#ifdef SerialGPSdebug
		//printf("USART data:\r\n%s\r\n", gps_uart);
	#endif

	NMEA_GPGGA_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8001be0:	493a      	ldr	r1, [pc, #232]	; (8001ccc <GPS_decode+0x104>)
 8001be2:	483c      	ldr	r0, [pc, #240]	; (8001cd4 <GPS_decode+0x10c>)
 8001be4:	f7ff fab4 	bl	8001150 <NMEA_GPGGA_Analysis>

	if (!NMEAmsg.gpssta) {
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <GPS_decode+0x10c>)
 8001bea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d108      	bne.n	8001c04 <GPS_decode+0x3c>
		LED_GPSRFS_ON();
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2180      	movs	r1, #128	; 0x80
 8001bf6:	4838      	ldr	r0, [pc, #224]	; (8001cd8 <GPS_decode+0x110>)
 8001bf8:	f000 ffa0 	bl	8002b3c <HAL_GPIO_WritePin>
		#ifdef SerialDebug
			printf("** GPS NO SIGNAL **\r\n");
 8001bfc:	4837      	ldr	r0, [pc, #220]	; (8001cdc <GPS_decode+0x114>)
 8001bfe:	f004 f8fb 	bl	8005df8 <puts>
			printf("Lat: %.6f, Log: %.6f, Spd: %.6f\r\n", NMEAdata.latitude, NMEAdata.longitude, NMEAdata.speed);
		#endif

		LED_GPSRFS_OFF();
	}
}
 8001c02:	e05f      	b.n	8001cc4 <GPS_decode+0xfc>
		LED_GPSRFS_ON();
 8001c04:	2201      	movs	r2, #1
 8001c06:	2180      	movs	r1, #128	; 0x80
 8001c08:	4833      	ldr	r0, [pc, #204]	; (8001cd8 <GPS_decode+0x110>)
 8001c0a:	f000 ff97 	bl	8002b3c <HAL_GPIO_WritePin>
		NMEA_GPRMC_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8001c0e:	492f      	ldr	r1, [pc, #188]	; (8001ccc <GPS_decode+0x104>)
 8001c10:	4830      	ldr	r0, [pc, #192]	; (8001cd4 <GPS_decode+0x10c>)
 8001c12:	f7ff faed 	bl	80011f0 <NMEA_GPRMC_Analysis>
		NMEA_GPGSA_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8001c16:	492d      	ldr	r1, [pc, #180]	; (8001ccc <GPS_decode+0x104>)
 8001c18:	482e      	ldr	r0, [pc, #184]	; (8001cd4 <GPS_decode+0x10c>)
 8001c1a:	f7ff fac1 	bl	80011a0 <NMEA_GPGSA_Analysis>
		NMEA_GPVTG_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8001c1e:	492b      	ldr	r1, [pc, #172]	; (8001ccc <GPS_decode+0x104>)
 8001c20:	482c      	ldr	r0, [pc, #176]	; (8001cd4 <GPS_decode+0x10c>)
 8001c22:	f7ff fa57 	bl	80010d4 <NMEA_GPVTG_Analysis>
		NMEA_GPRMC_Analysis (&NMEAmsg, (uint8_t*) gps_uart);
 8001c26:	4929      	ldr	r1, [pc, #164]	; (8001ccc <GPS_decode+0x104>)
 8001c28:	482a      	ldr	r0, [pc, #168]	; (8001cd4 <GPS_decode+0x10c>)
 8001c2a:	f7ff fae1 	bl	80011f0 <NMEA_GPRMC_Analysis>
		NMEA_GPS_DATA_PHRASE(&NMEAmsg, &NMEAdata);
 8001c2e:	492c      	ldr	r1, [pc, #176]	; (8001ce0 <GPS_decode+0x118>)
 8001c30:	4828      	ldr	r0, [pc, #160]	; (8001cd4 <GPS_decode+0x10c>)
 8001c32:	f7ff fc2b 	bl	800148c <NMEA_GPS_DATA_PHRASE>
			printf("\r\n** GPS Serial Debug **\r\n");
 8001c36:	482b      	ldr	r0, [pc, #172]	; (8001ce4 <GPS_decode+0x11c>)
 8001c38:	f004 f8de 	bl	8005df8 <puts>
			printf("GPS status: %s, PDOT: %f\r\n", NMEAmsg.gpssta^2? "3D":"2D", NMEAdata.pdop);
 8001c3c:	4b25      	ldr	r3, [pc, #148]	; (8001cd4 <GPS_decode+0x10c>)
 8001c3e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d001      	beq.n	8001c4a <GPS_decode+0x82>
 8001c46:	4c28      	ldr	r4, [pc, #160]	; (8001ce8 <GPS_decode+0x120>)
 8001c48:	e000      	b.n	8001c4c <GPS_decode+0x84>
 8001c4a:	4c28      	ldr	r4, [pc, #160]	; (8001cec <GPS_decode+0x124>)
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <GPS_decode+0x118>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc81 	bl	8000558 <__aeabi_f2d>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	4824      	ldr	r0, [pc, #144]	; (8001cf0 <GPS_decode+0x128>)
 8001c5e:	f004 f857 	bl	8005d10 <iprintf>
			printf("UTC time: %02d:%02d:%02d\r\n", NMEAmsg.utc.hour, NMEAmsg.utc.min, NMEAmsg.utc.sec);
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <GPS_decode+0x10c>)
 8001c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	; (8001cd4 <GPS_decode+0x10c>)
 8001c6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <GPS_decode+0x10c>)
 8001c74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001c78:	481e      	ldr	r0, [pc, #120]	; (8001cf4 <GPS_decode+0x12c>)
 8001c7a:	f004 f849 	bl	8005d10 <iprintf>
			printf("Lat: %.6f, Log: %.6f, Spd: %.6f\r\n", NMEAdata.latitude, NMEAdata.longitude, NMEAdata.speed);
 8001c7e:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <GPS_decode+0x118>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7fe fc68 	bl	8000558 <__aeabi_f2d>
 8001c88:	4680      	mov	r8, r0
 8001c8a:	4689      	mov	r9, r1
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <GPS_decode+0x118>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc61 	bl	8000558 <__aeabi_f2d>
 8001c96:	4604      	mov	r4, r0
 8001c98:	460d      	mov	r5, r1
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <GPS_decode+0x118>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fc5a 	bl	8000558 <__aeabi_f2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001cac:	e9cd 4500 	strd	r4, r5, [sp]
 8001cb0:	4642      	mov	r2, r8
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	4810      	ldr	r0, [pc, #64]	; (8001cf8 <GPS_decode+0x130>)
 8001cb6:	f004 f82b 	bl	8005d10 <iprintf>
		LED_GPSRFS_OFF();
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2180      	movs	r1, #128	; 0x80
 8001cbe:	4806      	ldr	r0, [pc, #24]	; (8001cd8 <GPS_decode+0x110>)
 8001cc0:	f000 ff3c 	bl	8002b3c <HAL_GPIO_WritePin>
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ccc:	20003bb0 	.word	0x20003bb0
 8001cd0:	200002a0 	.word	0x200002a0
 8001cd4:	20003b2c 	.word	0x20003b2c
 8001cd8:	40020000 	.word	0x40020000
 8001cdc:	0800809c 	.word	0x0800809c
 8001ce0:	20003b98 	.word	0x20003b98
 8001ce4:	080080b4 	.word	0x080080b4
 8001ce8:	080080d0 	.word	0x080080d0
 8001cec:	080080d4 	.word	0x080080d4
 8001cf0:	080080d8 	.word	0x080080d8
 8001cf4:	080080f4 	.word	0x080080f4
 8001cf8:	08008110 	.word	0x08008110

08001cfc <main>:

#undef GPS_Delay_Time

// main

signed main(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0

	HAL_Init();
 8001d00:	f000 fbd2 	bl	80024a8 <HAL_Init>

	SystemClock_Config();
 8001d04:	f000 f830 	bl	8001d68 <SystemClock_Config>

	MX_GPIO_Init();
 8001d08:	f000 f938 	bl	8001f7c <MX_GPIO_Init>
	MX_I2C1_Init();
 8001d0c:	f000 f88a 	bl	8001e24 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8001d10:	f000 f8e0 	bl	8001ed4 <MX_USART2_UART_Init>
	MX_USART6_UART_Init();
 8001d14:	f000 f908 	bl	8001f28 <MX_USART6_UART_Init>
	MX_USART1_UART_Init();
 8001d18:	f000 f8b2 	bl	8001e80 <MX_USART1_UART_Init>

	accidentMonitorSetup();
 8001d1c:	f7ff fce6 	bl	80016ec <accidentMonitorSetup>

	LED_OUTPUT_INIT();
 8001d20:	f7ff fc4e 	bl	80015c0 <LED_OUTPUT_INIT>
	LED_PC13_INIT();
 8001d24:	f7ff fbfe 	bl	8001524 <LED_PC13_INIT>

	LED_OUTPUT_TEST();
 8001d28:	f7ff fcb0 	bl	800168c <LED_OUTPUT_TEST>

	HAL_UART_Receive_IT(&huart2, &gps_init, 1);
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	490b      	ldr	r1, [pc, #44]	; (8001d5c <main+0x60>)
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <main+0x64>)
 8001d32:	f002 fcf8 	bl	8004726 <HAL_UART_Receive_IT>
		nnnnn = 1919.810;
		printf("%f\r\n\r\n", nnnnn);
	#endif

	while (1) {
		GPS_decode ();
 8001d36:	f7ff ff47 	bl	8001bc8 <GPS_decode>
		HTTP_Send_Data(NMEAdata.latitude, NMEAdata.longitude, NMEAdata.speed, 0);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <main+0x68>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a09      	ldr	r2, [pc, #36]	; (8001d64 <main+0x68>)
 8001d40:	6852      	ldr	r2, [r2, #4]
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <main+0x68>)
 8001d44:	6889      	ldr	r1, [r1, #8]
 8001d46:	2000      	movs	r0, #0
 8001d48:	ee01 1a10 	vmov	s2, r1
 8001d4c:	ee00 2a90 	vmov	s1, r2
 8001d50:	ee00 3a10 	vmov	s0, r3
 8001d54:	f7ff fe70 	bl	8001a38 <HTTP_Send_Data>
		GPS_decode ();
 8001d58:	e7ed      	b.n	8001d36 <main+0x3a>
 8001d5a:	bf00      	nop
 8001d5c:	20003bad 	.word	0x20003bad
 8001d60:	200002a0 	.word	0x200002a0
 8001d64:	20003b98 	.word	0x20003b98

08001d68 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b094      	sub	sp, #80	; 0x50
 8001d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2230      	movs	r2, #48	; 0x30
 8001d74:	2100      	movs	r1, #0
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fb65 	bl	8005446 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	*/
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	4b22      	ldr	r3, [pc, #136]	; (8001e1c <SystemClock_Config+0xb4>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	4a21      	ldr	r2, [pc, #132]	; (8001e1c <SystemClock_Config+0xb4>)
 8001d96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <SystemClock_Config+0xb4>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da4:	60bb      	str	r3, [r7, #8]
 8001da6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da8:	2300      	movs	r3, #0
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	4b1c      	ldr	r3, [pc, #112]	; (8001e20 <SystemClock_Config+0xb8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <SystemClock_Config+0xb8>)
 8001db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <SystemClock_Config+0xb8>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dcc:	2310      	movs	r3, #16
 8001dce:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001dd4:	f107 0320 	add.w	r3, r7, #32
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fe97 	bl	8003b0c <HAL_RCC_OscConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0x80>
		Error_Handler();
 8001de4:	f000 f8f2 	bl	8001fcc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de8:	230f      	movs	r3, #15
 8001dea:	60fb      	str	r3, [r7, #12]
															|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001dec:	2300      	movs	r3, #0
 8001dee:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f002 f8f2 	bl	8003fec <HAL_RCC_ClockConfig>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <SystemClock_Config+0xaa>
		Error_Handler();
 8001e0e:	f000 f8dd 	bl	8001fcc <Error_Handler>
	}
}
 8001e12:	bf00      	nop
 8001e14:	3750      	adds	r7, #80	; 0x50
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000

08001e24 <MX_I2C1_Init>:
/**
	* @brief I2C1 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_I2C1_Init(void) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001e28:	4b12      	ldr	r3, [pc, #72]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e2a:	4a13      	ldr	r2, [pc, #76]	; (8001e78 <MX_I2C1_Init+0x54>)
 8001e2c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8001e2e:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e30:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <MX_I2C1_Init+0x58>)
 8001e32:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e34:	4b0f      	ldr	r3, [pc, #60]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e40:	4b0c      	ldr	r3, [pc, #48]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e46:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e5a:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001e60:	4804      	ldr	r0, [pc, #16]	; (8001e74 <MX_I2C1_Init+0x50>)
 8001e62:	f000 fe9f 	bl	8002ba4 <HAL_I2C_Init>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001e6c:	f000 f8ae 	bl	8001fcc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000020c 	.word	0x2000020c
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	00061a80 	.word	0x00061a80

08001e80 <MX_USART1_UART_Init>:
/**
	* @brief USART1 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART1_UART_Init(void) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001e84:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e86:	4a12      	ldr	r2, [pc, #72]	; (8001ed0 <MX_USART1_UART_Init+0x50>)
 8001e88:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e90:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b0e      	ldr	r3, [pc, #56]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eb6:	4805      	ldr	r0, [pc, #20]	; (8001ecc <MX_USART1_UART_Init+0x4c>)
 8001eb8:	f002 fa64 	bl	8004384 <HAL_UART_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8001ec2:	f000 f883 	bl	8001fcc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000260 	.word	0x20000260
 8001ed0:	40011000 	.word	0x40011000

08001ed4 <MX_USART2_UART_Init>:
/**
	* @brief USART2 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART2_UART_Init(void) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001ed8:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001eda:	4a12      	ldr	r2, [pc, #72]	; (8001f24 <MX_USART2_UART_Init+0x50>)
 8001edc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 9600;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ee0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001ee4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	4b09      	ldr	r3, [pc, #36]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001efa:	220c      	movs	r2, #12
 8001efc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <MX_USART2_UART_Init+0x4c>)
 8001f0c:	f002 fa3a 	bl	8004384 <HAL_UART_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d001      	beq.n	8001f1a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001f16:	f000 f859 	bl	8001fcc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200002a0 	.word	0x200002a0
 8001f24:	40004400 	.word	0x40004400

08001f28 <MX_USART6_UART_Init>:
/**
	* @brief USART6 Initialization Function
	* @param None
	* @retval None
	*/
static void MX_USART6_UART_Init(void) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <MX_USART6_UART_Init+0x50>)
 8001f30:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f38:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f4e:	220c      	movs	r2, #12
 8001f50:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <MX_USART6_UART_Init+0x4c>)
 8001f60:	f002 fa10 	bl	8004384 <HAL_UART_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_USART6_UART_Init+0x46>
		Error_Handler();
 8001f6a:	f000 f82f 	bl	8001fcc <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200002e0 	.word	0x200002e0
 8001f78:	40011400 	.word	0x40011400

08001f7c <MX_GPIO_Init>:
/**
	* @brief GPIO Initialization Function
	* @param None
	* @retval None
	*/
static void MX_GPIO_Init(void) {
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	4b10      	ldr	r3, [pc, #64]	; (8001fc8 <MX_GPIO_Init+0x4c>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8a:	4a0f      	ldr	r2, [pc, #60]	; (8001fc8 <MX_GPIO_Init+0x4c>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6313      	str	r3, [r2, #48]	; 0x30
 8001f92:	4b0d      	ldr	r3, [pc, #52]	; (8001fc8 <MX_GPIO_Init+0x4c>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	607b      	str	r3, [r7, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <MX_GPIO_Init+0x4c>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a08      	ldr	r2, [pc, #32]	; (8001fc8 <MX_GPIO_Init+0x4c>)
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <MX_GPIO_Init+0x4c>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	683b      	ldr	r3, [r7, #0]

}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	40023800 	.word	0x40023800

08001fcc <Error_Handler>:

/**
	* @brief	This function is executed in case of error occurrence.
	* @retval None
	*/
void Error_Handler(void) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		LED_PC13_BLINK(1000);
 8001fd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd6:	f7ff fad9 	bl	800158c <LED_PC13_BLINK>
 8001fda:	e7fa      	b.n	8001fd2 <Error_Handler+0x6>

08001fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	607b      	str	r3, [r7, #4]
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_MspInit+0x4c>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a0f      	ldr	r2, [pc, #60]	; (8002028 <HAL_MspInit+0x4c>)
 8001fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	; (8002028 <HAL_MspInit+0x4c>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	603b      	str	r3, [r7, #0]
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <HAL_MspInit+0x4c>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	4a08      	ldr	r2, [pc, #32]	; (8002028 <HAL_MspInit+0x4c>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6413      	str	r3, [r2, #64]	; 0x40
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_MspInit+0x4c>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	603b      	str	r3, [r7, #0]
 8002018:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800

0800202c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08a      	sub	sp, #40	; 0x28
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a19      	ldr	r2, [pc, #100]	; (80020b0 <HAL_I2C_MspInit+0x84>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d12b      	bne.n	80020a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
 8002052:	4b18      	ldr	r3, [pc, #96]	; (80020b4 <HAL_I2C_MspInit+0x88>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002056:	4a17      	ldr	r2, [pc, #92]	; (80020b4 <HAL_I2C_MspInit+0x88>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	6313      	str	r3, [r2, #48]	; 0x30
 800205e:	4b15      	ldr	r3, [pc, #84]	; (80020b4 <HAL_I2C_MspInit+0x88>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800206a:	23c0      	movs	r3, #192	; 0xc0
 800206c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800206e:	2312      	movs	r3, #18
 8002070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002072:	2301      	movs	r3, #1
 8002074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002076:	2303      	movs	r3, #3
 8002078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800207a:	2304      	movs	r3, #4
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	480c      	ldr	r0, [pc, #48]	; (80020b8 <HAL_I2C_MspInit+0x8c>)
 8002086:	f000 fbd7 	bl	8002838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_I2C_MspInit+0x88>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_I2C_MspInit+0x88>)
 8002094:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002098:	6413      	str	r3, [r2, #64]	; 0x40
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_I2C_MspInit+0x88>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80020a6:	bf00      	nop
 80020a8:	3728      	adds	r7, #40	; 0x28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40005400 	.word	0x40005400
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020400 	.word	0x40020400

080020bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08e      	sub	sp, #56	; 0x38
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
 80020d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a58      	ldr	r2, [pc, #352]	; (800223c <HAL_UART_MspInit+0x180>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d135      	bne.n	800214a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
 80020e2:	4b57      	ldr	r3, [pc, #348]	; (8002240 <HAL_UART_MspInit+0x184>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	4a56      	ldr	r2, [pc, #344]	; (8002240 <HAL_UART_MspInit+0x184>)
 80020e8:	f043 0310 	orr.w	r3, r3, #16
 80020ec:	6453      	str	r3, [r2, #68]	; 0x44
 80020ee:	4b54      	ldr	r3, [pc, #336]	; (8002240 <HAL_UART_MspInit+0x184>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	623b      	str	r3, [r7, #32]
 80020f8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
 80020fe:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_UART_MspInit+0x184>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a4f      	ldr	r2, [pc, #316]	; (8002240 <HAL_UART_MspInit+0x184>)
 8002104:	f043 0301 	orr.w	r3, r3, #1
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <HAL_UART_MspInit+0x184>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	61fb      	str	r3, [r7, #28]
 8002114:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002116:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002124:	2303      	movs	r3, #3
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002128:	2307      	movs	r3, #7
 800212a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800212c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002130:	4619      	mov	r1, r3
 8002132:	4844      	ldr	r0, [pc, #272]	; (8002244 <HAL_UART_MspInit+0x188>)
 8002134:	f000 fb80 	bl	8002838 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002138:	2200      	movs	r2, #0
 800213a:	2100      	movs	r1, #0
 800213c:	2025      	movs	r0, #37	; 0x25
 800213e:	f000 fb22 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002142:	2025      	movs	r0, #37	; 0x25
 8002144:	f000 fb3b 	bl	80027be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002148:	e073      	b.n	8002232 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART2)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a3e      	ldr	r2, [pc, #248]	; (8002248 <HAL_UART_MspInit+0x18c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d134      	bne.n	80021be <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_UART_MspInit+0x184>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	4a38      	ldr	r2, [pc, #224]	; (8002240 <HAL_UART_MspInit+0x184>)
 800215e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002162:	6413      	str	r3, [r2, #64]	; 0x40
 8002164:	4b36      	ldr	r3, [pc, #216]	; (8002240 <HAL_UART_MspInit+0x184>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	4b32      	ldr	r3, [pc, #200]	; (8002240 <HAL_UART_MspInit+0x184>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4a31      	ldr	r2, [pc, #196]	; (8002240 <HAL_UART_MspInit+0x184>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6313      	str	r3, [r2, #48]	; 0x30
 8002180:	4b2f      	ldr	r3, [pc, #188]	; (8002240 <HAL_UART_MspInit+0x184>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800218c:	230c      	movs	r3, #12
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800219c:	2307      	movs	r3, #7
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021a4:	4619      	mov	r1, r3
 80021a6:	4827      	ldr	r0, [pc, #156]	; (8002244 <HAL_UART_MspInit+0x188>)
 80021a8:	f000 fb46 	bl	8002838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2026      	movs	r0, #38	; 0x26
 80021b2:	f000 fae8 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021b6:	2026      	movs	r0, #38	; 0x26
 80021b8:	f000 fb01 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 80021bc:	e039      	b.n	8002232 <HAL_UART_MspInit+0x176>
  else if(huart->Instance==USART6)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a22      	ldr	r2, [pc, #136]	; (800224c <HAL_UART_MspInit+0x190>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d134      	bne.n	8002232 <HAL_UART_MspInit+0x176>
    __HAL_RCC_USART6_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	4b1c      	ldr	r3, [pc, #112]	; (8002240 <HAL_UART_MspInit+0x184>)
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	4a1b      	ldr	r2, [pc, #108]	; (8002240 <HAL_UART_MspInit+0x184>)
 80021d2:	f043 0320 	orr.w	r3, r3, #32
 80021d6:	6453      	str	r3, [r2, #68]	; 0x44
 80021d8:	4b19      	ldr	r3, [pc, #100]	; (8002240 <HAL_UART_MspInit+0x184>)
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f003 0320 	and.w	r3, r3, #32
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	4b15      	ldr	r3, [pc, #84]	; (8002240 <HAL_UART_MspInit+0x184>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <HAL_UART_MspInit+0x184>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30
 80021f4:	4b12      	ldr	r3, [pc, #72]	; (8002240 <HAL_UART_MspInit+0x184>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002200:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800220e:	2303      	movs	r3, #3
 8002210:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002212:	2308      	movs	r3, #8
 8002214:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221a:	4619      	mov	r1, r3
 800221c:	4809      	ldr	r0, [pc, #36]	; (8002244 <HAL_UART_MspInit+0x188>)
 800221e:	f000 fb0b 	bl	8002838 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	2047      	movs	r0, #71	; 0x47
 8002228:	f000 faad 	bl	8002786 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800222c:	2047      	movs	r0, #71	; 0x47
 800222e:	f000 fac6 	bl	80027be <HAL_NVIC_EnableIRQ>
}
 8002232:	bf00      	nop
 8002234:	3738      	adds	r7, #56	; 0x38
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40011000 	.word	0x40011000
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000
 8002248:	40004400 	.word	0x40004400
 800224c:	40011400 	.word	0x40011400

08002250 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002254:	e7fe      	b.n	8002254 <NMI_Handler+0x4>

08002256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002256:	b480      	push	{r7}
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800225a:	e7fe      	b.n	800225a <HardFault_Handler+0x4>

0800225c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002260:	e7fe      	b.n	8002260 <MemManage_Handler+0x4>

08002262 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002266:	e7fe      	b.n	8002266 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	e7fe      	b.n	800226c <UsageFault_Handler+0x4>

0800226e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800226e:	b480      	push	{r7}
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002272:	bf00      	nop
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002280:	bf00      	nop
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229c:	f000 f956 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022a8:	4802      	ldr	r0, [pc, #8]	; (80022b4 <USART1_IRQHandler+0x10>)
 80022aa:	f002 fa91 	bl	80047d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	20000260 	.word	0x20000260

080022b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022bc:	4802      	ldr	r0, [pc, #8]	; (80022c8 <USART2_IRQHandler+0x10>)
 80022be:	f002 fa87 	bl	80047d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200002a0 	.word	0x200002a0

080022cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80022d0:	4802      	ldr	r0, [pc, #8]	; (80022dc <USART6_IRQHandler+0x10>)
 80022d2:	f002 fa7d 	bl	80047d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200002e0 	.word	0x200002e0

080022e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
 80022f0:	e00a      	b.n	8002308 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022f2:	f3af 8000 	nop.w
 80022f6:	4601      	mov	r1, r0
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	60ba      	str	r2, [r7, #8]
 80022fe:	b2ca      	uxtb	r2, r1
 8002300:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	3301      	adds	r3, #1
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	429a      	cmp	r2, r3
 800230e:	dbf0      	blt.n	80022f2 <_read+0x12>
	}

return len;
 8002310:	687b      	ldr	r3, [r7, #4]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3718      	adds	r7, #24
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af00      	add	r7, sp, #0
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e009      	b.n	8002340 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	60ba      	str	r2, [r7, #8]
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fc35 	bl	8001ba4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	429a      	cmp	r2, r3
 8002346:	dbf1      	blt.n	800232c <_write+0x12>
	}
	return len;
 8002348:	687b      	ldr	r3, [r7, #4]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3718      	adds	r7, #24
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_close>:

int _close(int file)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
	return -1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800237a:	605a      	str	r2, [r3, #4]
	return 0;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_isatty>:

int _isatty(int file)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
	return 1;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
	return 0;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <_sbrk+0x5c>)
 80023c6:	4b15      	ldr	r3, [pc, #84]	; (800241c <_sbrk+0x60>)
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <_sbrk+0x64>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023d8:	4b11      	ldr	r3, [pc, #68]	; (8002420 <_sbrk+0x64>)
 80023da:	4a12      	ldr	r2, [pc, #72]	; (8002424 <_sbrk+0x68>)
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <_sbrk+0x64>)
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d207      	bcs.n	80023fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ec:	f002 fff6 	bl	80053dc <__errno>
 80023f0:	4602      	mov	r2, r0
 80023f2:	230c      	movs	r3, #12
 80023f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	e009      	b.n	8002410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <_sbrk+0x64>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <_sbrk+0x64>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <_sbrk+0x64>)
 800240c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20020000 	.word	0x20020000
 800241c:	00000400 	.word	0x00000400
 8002420:	20000320 	.word	0x20000320
 8002424:	20004f48 	.word	0x20004f48

08002428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <SystemInit+0x28>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	4a07      	ldr	r2, [pc, #28]	; (8002450 <SystemInit+0x28>)
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <SystemInit+0x28>)
 800243e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002442:	609a      	str	r2, [r3, #8]
#endif
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800248c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002458:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800245a:	e003      	b.n	8002464 <LoopCopyDataInit>

0800245c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800245e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002460:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002462:	3104      	adds	r1, #4

08002464 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002464:	480b      	ldr	r0, [pc, #44]	; (8002494 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002468:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800246a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800246c:	d3f6      	bcc.n	800245c <CopyDataInit>
  ldr  r2, =_sbss
 800246e:	4a0b      	ldr	r2, [pc, #44]	; (800249c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002470:	e002      	b.n	8002478 <LoopFillZerobss>

08002472 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002472:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002474:	f842 3b04 	str.w	r3, [r2], #4

08002478 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800247a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800247c:	d3f9      	bcc.n	8002472 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800247e:	f7ff ffd3 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002482:	f002 ffb1 	bl	80053e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002486:	f7ff fc39 	bl	8001cfc <main>
  bx  lr    
 800248a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800248c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002490:	08008430 	.word	0x08008430
  ldr  r0, =_sdata
 8002494:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002498:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 800249c:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 80024a0:	20004f48 	.word	0x20004f48

080024a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC_IRQHandler>
	...

080024a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <HAL_Init+0x40>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a0d      	ldr	r2, [pc, #52]	; (80024e8 <HAL_Init+0x40>)
 80024b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b8:	4b0b      	ldr	r3, [pc, #44]	; (80024e8 <HAL_Init+0x40>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0a      	ldr	r2, [pc, #40]	; (80024e8 <HAL_Init+0x40>)
 80024be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_Init+0x40>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_Init+0x40>)
 80024ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f000 f94d 	bl	8002770 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d6:	2000      	movs	r0, #0
 80024d8:	f000 f808 	bl	80024ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024dc:	f7ff fd7e 	bl	8001fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40023c00 	.word	0x40023c00

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x54>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x58>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002502:	fbb3 f3f1 	udiv	r3, r3, r1
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f965 	bl	80027da <HAL_SYSTICK_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e00e      	b.n	8002538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d80a      	bhi.n	8002536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295
 8002528:	f000 f92d 	bl	8002786 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_InitTick+0x5c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000014 	.word	0x20000014
 8002544:	2000001c 	.word	0x2000001c
 8002548:	20000018 	.word	0x20000018

0800254c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_IncTick+0x20>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b06      	ldr	r3, [pc, #24]	; (8002570 <HAL_IncTick+0x24>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a04      	ldr	r2, [pc, #16]	; (8002570 <HAL_IncTick+0x24>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	2000001c 	.word	0x2000001c
 8002570:	20004f40 	.word	0x20004f40

08002574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return uwTick;
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_GetTick+0x14>)
 800257a:	681b      	ldr	r3, [r3, #0]
}
 800257c:	4618      	mov	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	20004f40 	.word	0x20004f40

0800258c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002594:	f7ff ffee 	bl	8002574 <HAL_GetTick>
 8002598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d005      	beq.n	80025b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_Delay+0x40>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4413      	add	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025b2:	bf00      	nop
 80025b4:	f7ff ffde 	bl	8002574 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d8f7      	bhi.n	80025b4 <HAL_Delay+0x28>
  {
  }
}
 80025c4:	bf00      	nop
 80025c6:	3710      	adds	r7, #16
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	2000001c 	.word	0x2000001c

080025d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025e0:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ec:	4013      	ands	r3, r2
 80025ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002600:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002602:	4a04      	ldr	r2, [pc, #16]	; (8002614 <__NVIC_SetPriorityGrouping+0x44>)
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	60d3      	str	r3, [r2, #12]
}
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800261c:	4b04      	ldr	r3, [pc, #16]	; (8002630 <__NVIC_GetPriorityGrouping+0x18>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 0307 	and.w	r3, r3, #7
}
 8002626:	4618      	mov	r0, r3
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800263e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002642:	2b00      	cmp	r3, #0
 8002644:	db0b      	blt.n	800265e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 021f 	and.w	r2, r3, #31
 800264c:	4907      	ldr	r1, [pc, #28]	; (800266c <__NVIC_EnableIRQ+0x38>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	2001      	movs	r0, #1
 8002656:	fa00 f202 	lsl.w	r2, r0, r2
 800265a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	e000e100 	.word	0xe000e100

08002670 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	6039      	str	r1, [r7, #0]
 800267a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	2b00      	cmp	r3, #0
 8002682:	db0a      	blt.n	800269a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	b2da      	uxtb	r2, r3
 8002688:	490c      	ldr	r1, [pc, #48]	; (80026bc <__NVIC_SetPriority+0x4c>)
 800268a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	440b      	add	r3, r1
 8002694:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002698:	e00a      	b.n	80026b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	b2da      	uxtb	r2, r3
 800269e:	4908      	ldr	r1, [pc, #32]	; (80026c0 <__NVIC_SetPriority+0x50>)
 80026a0:	79fb      	ldrb	r3, [r7, #7]
 80026a2:	f003 030f 	and.w	r3, r3, #15
 80026a6:	3b04      	subs	r3, #4
 80026a8:	0112      	lsls	r2, r2, #4
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	440b      	add	r3, r1
 80026ae:	761a      	strb	r2, [r3, #24]
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	; 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f003 0307 	and.w	r3, r3, #7
 80026d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	f1c3 0307 	rsb	r3, r3, #7
 80026de:	2b04      	cmp	r3, #4
 80026e0:	bf28      	it	cs
 80026e2:	2304      	movcs	r3, #4
 80026e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	3304      	adds	r3, #4
 80026ea:	2b06      	cmp	r3, #6
 80026ec:	d902      	bls.n	80026f4 <NVIC_EncodePriority+0x30>
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	3b03      	subs	r3, #3
 80026f2:	e000      	b.n	80026f6 <NVIC_EncodePriority+0x32>
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	f04f 32ff 	mov.w	r2, #4294967295
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43da      	mvns	r2, r3
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	401a      	ands	r2, r3
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800270c:	f04f 31ff 	mov.w	r1, #4294967295
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	fa01 f303 	lsl.w	r3, r1, r3
 8002716:	43d9      	mvns	r1, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800271c:	4313      	orrs	r3, r2
         );
}
 800271e:	4618      	mov	r0, r3
 8002720:	3724      	adds	r7, #36	; 0x24
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
	...

0800272c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3b01      	subs	r3, #1
 8002738:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273c:	d301      	bcc.n	8002742 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800273e:	2301      	movs	r3, #1
 8002740:	e00f      	b.n	8002762 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002742:	4a0a      	ldr	r2, [pc, #40]	; (800276c <SysTick_Config+0x40>)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3b01      	subs	r3, #1
 8002748:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800274a:	210f      	movs	r1, #15
 800274c:	f04f 30ff 	mov.w	r0, #4294967295
 8002750:	f7ff ff8e 	bl	8002670 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <SysTick_Config+0x40>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275a:	4b04      	ldr	r3, [pc, #16]	; (800276c <SysTick_Config+0x40>)
 800275c:	2207      	movs	r2, #7
 800275e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	e000e010 	.word	0xe000e010

08002770 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7ff ff29 	bl	80025d0 <__NVIC_SetPriorityGrouping>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	4603      	mov	r3, r0
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	607a      	str	r2, [r7, #4]
 8002792:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002794:	2300      	movs	r3, #0
 8002796:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002798:	f7ff ff3e 	bl	8002618 <__NVIC_GetPriorityGrouping>
 800279c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	68b9      	ldr	r1, [r7, #8]
 80027a2:	6978      	ldr	r0, [r7, #20]
 80027a4:	f7ff ff8e 	bl	80026c4 <NVIC_EncodePriority>
 80027a8:	4602      	mov	r2, r0
 80027aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ae:	4611      	mov	r1, r2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff ff5d 	bl	8002670 <__NVIC_SetPriority>
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b082      	sub	sp, #8
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff31 	bl	8002634 <__NVIC_EnableIRQ>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ffa2 	bl	800272c <SysTick_Config>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d004      	beq.n	8002810 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e00c      	b.n	800282a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2205      	movs	r2, #5
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002846:	2300      	movs	r3, #0
 8002848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
 8002852:	e159      	b.n	8002b08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002854:	2201      	movs	r2, #1
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	429a      	cmp	r2, r3
 800286e:	f040 8148 	bne.w	8002b02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d00b      	beq.n	8002892 <HAL_GPIO_Init+0x5a>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d007      	beq.n	8002892 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002886:	2b11      	cmp	r3, #17
 8002888:	d003      	beq.n	8002892 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b12      	cmp	r3, #18
 8002890:	d130      	bne.n	80028f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	2203      	movs	r2, #3
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	fa02 f303 	lsl.w	r3, r2, r3
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 0201 	and.w	r2, r3, #1
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	2203      	movs	r2, #3
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0xfc>
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b12      	cmp	r3, #18
 8002932:	d123      	bne.n	800297c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	08da      	lsrs	r2, r3, #3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3208      	adds	r2, #8
 800293c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	220f      	movs	r2, #15
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	69ba      	ldr	r2, [r7, #24]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	08da      	lsrs	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	3208      	adds	r2, #8
 8002976:	69b9      	ldr	r1, [r7, #24]
 8002978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 0203 	and.w	r2, r3, #3
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a2 	beq.w	8002b02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b56      	ldr	r3, [pc, #344]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c6:	4a55      	ldr	r2, [pc, #340]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029cc:	6453      	str	r3, [r2, #68]	; 0x44
 80029ce:	4b53      	ldr	r3, [pc, #332]	; (8002b1c <HAL_GPIO_Init+0x2e4>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029da:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4013      	ands	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a48      	ldr	r2, [pc, #288]	; (8002b24 <HAL_GPIO_Init+0x2ec>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d019      	beq.n	8002a3a <HAL_GPIO_Init+0x202>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a47      	ldr	r2, [pc, #284]	; (8002b28 <HAL_GPIO_Init+0x2f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_GPIO_Init+0x1fe>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a46      	ldr	r2, [pc, #280]	; (8002b2c <HAL_GPIO_Init+0x2f4>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00d      	beq.n	8002a32 <HAL_GPIO_Init+0x1fa>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a45      	ldr	r2, [pc, #276]	; (8002b30 <HAL_GPIO_Init+0x2f8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <HAL_GPIO_Init+0x1f6>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a44      	ldr	r2, [pc, #272]	; (8002b34 <HAL_GPIO_Init+0x2fc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d101      	bne.n	8002a2a <HAL_GPIO_Init+0x1f2>
 8002a26:	2304      	movs	r3, #4
 8002a28:	e008      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2a:	2307      	movs	r3, #7
 8002a2c:	e006      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e004      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e002      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_GPIO_Init+0x204>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	69fa      	ldr	r2, [r7, #28]
 8002a3e:	f002 0203 	and.w	r2, r2, #3
 8002a42:	0092      	lsls	r2, r2, #2
 8002a44:	4093      	lsls	r3, r2
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a4c:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_GPIO_Init+0x2e8>)
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	089b      	lsrs	r3, r3, #2
 8002a52:	3302      	adds	r3, #2
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d003      	beq.n	8002a7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7e:	4a2e      	ldr	r2, [pc, #184]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4013      	ands	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002aa8:	4a23      	ldr	r2, [pc, #140]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad2:	4a19      	ldr	r2, [pc, #100]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <HAL_GPIO_Init+0x300>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	3301      	adds	r3, #1
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b0f      	cmp	r3, #15
 8002b0c:	f67f aea2 	bls.w	8002854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b10:	bf00      	nop
 8002b12:	3724      	adds	r7, #36	; 0x24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40013800 	.word	0x40013800
 8002b24:	40020000 	.word	0x40020000
 8002b28:	40020400 	.word	0x40020400
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020c00 	.word	0x40020c00
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40013c00 	.word	0x40013c00

08002b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b4c:	787b      	ldrb	r3, [r7, #1]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b58:	e003      	b.n	8002b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b5a:	887b      	ldrh	r3, [r7, #2]
 8002b5c:	041a      	lsls	r2, r3, #16
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	619a      	str	r2, [r3, #24]
}
 8002b62:	bf00      	nop
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	460b      	mov	r3, r1
 8002b78:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	887b      	ldrh	r3, [r7, #2]
 8002b80:	401a      	ands	r2, r3
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d104      	bne.n	8002b92 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b88:	887b      	ldrh	r3, [r7, #2]
 8002b8a:	041a      	lsls	r2, r3, #16
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b92:	887a      	ldrh	r2, [r7, #2]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	619a      	str	r2, [r3, #24]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e11f      	b.n	8002df6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fa2e 	bl	800202c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2224      	movs	r2, #36	; 0x24
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c08:	f001 fb94 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8002c0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	4a7b      	ldr	r2, [pc, #492]	; (8002e00 <HAL_I2C_Init+0x25c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d807      	bhi.n	8002c28 <HAL_I2C_Init+0x84>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	4a7a      	ldr	r2, [pc, #488]	; (8002e04 <HAL_I2C_Init+0x260>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	bf94      	ite	ls
 8002c20:	2301      	movls	r3, #1
 8002c22:	2300      	movhi	r3, #0
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	e006      	b.n	8002c36 <HAL_I2C_Init+0x92>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4a77      	ldr	r2, [pc, #476]	; (8002e08 <HAL_I2C_Init+0x264>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	bf94      	ite	ls
 8002c30:	2301      	movls	r3, #1
 8002c32:	2300      	movhi	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e0db      	b.n	8002df6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a72      	ldr	r2, [pc, #456]	; (8002e0c <HAL_I2C_Init+0x268>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	0c9b      	lsrs	r3, r3, #18
 8002c48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a1b      	ldr	r3, [r3, #32]
 8002c64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4a64      	ldr	r2, [pc, #400]	; (8002e00 <HAL_I2C_Init+0x25c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d802      	bhi.n	8002c78 <HAL_I2C_Init+0xd4>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	3301      	adds	r3, #1
 8002c76:	e009      	b.n	8002c8c <HAL_I2C_Init+0xe8>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	4a63      	ldr	r2, [pc, #396]	; (8002e10 <HAL_I2C_Init+0x26c>)
 8002c84:	fba2 2303 	umull	r2, r3, r2, r3
 8002c88:	099b      	lsrs	r3, r3, #6
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6812      	ldr	r2, [r2, #0]
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	4956      	ldr	r1, [pc, #344]	; (8002e00 <HAL_I2C_Init+0x25c>)
 8002ca8:	428b      	cmp	r3, r1
 8002caa:	d80d      	bhi.n	8002cc8 <HAL_I2C_Init+0x124>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1e59      	subs	r1, r3, #1
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cba:	3301      	adds	r3, #1
 8002cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	bf38      	it	cc
 8002cc4:	2304      	movcc	r3, #4
 8002cc6:	e04f      	b.n	8002d68 <HAL_I2C_Init+0x1c4>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d111      	bne.n	8002cf4 <HAL_I2C_Init+0x150>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1e58      	subs	r0, r3, #1
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6859      	ldr	r1, [r3, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	440b      	add	r3, r1
 8002cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	bf0c      	ite	eq
 8002cec:	2301      	moveq	r3, #1
 8002cee:	2300      	movne	r3, #0
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	e012      	b.n	8002d1a <HAL_I2C_Init+0x176>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1e58      	subs	r0, r3, #1
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	0099      	lsls	r1, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bf0c      	ite	eq
 8002d14:	2301      	moveq	r3, #1
 8002d16:	2300      	movne	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_Init+0x17e>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e022      	b.n	8002d68 <HAL_I2C_Init+0x1c4>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10e      	bne.n	8002d48 <HAL_I2C_Init+0x1a4>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	1e58      	subs	r0, r3, #1
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	440b      	add	r3, r1
 8002d38:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d46:	e00f      	b.n	8002d68 <HAL_I2C_Init+0x1c4>
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	1e58      	subs	r0, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6859      	ldr	r1, [r3, #4]
 8002d50:	460b      	mov	r3, r1
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	0099      	lsls	r1, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5e:	3301      	adds	r3, #1
 8002d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	6809      	ldr	r1, [r1, #0]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69da      	ldr	r2, [r3, #28]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6911      	ldr	r1, [r2, #16]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	4311      	orrs	r1, r2
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	6812      	ldr	r2, [r2, #0]
 8002da8:	430b      	orrs	r3, r1
 8002daa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	695a      	ldr	r2, [r3, #20]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f042 0201 	orr.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	000186a0 	.word	0x000186a0
 8002e04:	001e847f 	.word	0x001e847f
 8002e08:	003d08ff 	.word	0x003d08ff
 8002e0c:	431bde83 	.word	0x431bde83
 8002e10:	10624dd3 	.word	0x10624dd3

08002e14 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	4608      	mov	r0, r1
 8002e1e:	4611      	mov	r1, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	817b      	strh	r3, [r7, #10]
 8002e26:	460b      	mov	r3, r1
 8002e28:	813b      	strh	r3, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e2e:	f7ff fba1 	bl	8002574 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	f040 80d9 	bne.w	8002ff4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2319      	movs	r3, #25
 8002e48:	2201      	movs	r2, #1
 8002e4a:	496d      	ldr	r1, [pc, #436]	; (8003000 <HAL_I2C_Mem_Write+0x1ec>)
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fc7f 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0cc      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Mem_Write+0x56>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e0c5      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d007      	beq.n	8002e90 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2221      	movs	r2, #33	; 0x21
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2240      	movs	r2, #64	; 0x40
 8002eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a3a      	ldr	r2, [r7, #32]
 8002eba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ec0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a4d      	ldr	r2, [pc, #308]	; (8003004 <HAL_I2C_Mem_Write+0x1f0>)
 8002ed0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ed2:	88f8      	ldrh	r0, [r7, #6]
 8002ed4:	893a      	ldrh	r2, [r7, #8]
 8002ed6:	8979      	ldrh	r1, [r7, #10]
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	9301      	str	r3, [sp, #4]
 8002edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 fab6 	bl	8003454 <I2C_RequestMemoryWrite>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d052      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e081      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f000 fd00 	bl	80038fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00d      	beq.n	8002f1e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	2b04      	cmp	r3, #4
 8002f08:	d107      	bne.n	8002f1a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e06b      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	781a      	ldrb	r2, [r3, #0]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	1c5a      	adds	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d11b      	bne.n	8002f94 <HAL_I2C_Mem_Write+0x180>
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d017      	beq.n	8002f94 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	781a      	ldrb	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1aa      	bne.n	8002ef2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fa0:	68f8      	ldr	r0, [r7, #12]
 8002fa2:	f000 fcec 	bl	800397e <I2C_WaitOnBTFFlagUntilTimeout>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00d      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d107      	bne.n	8002fc4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e016      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2220      	movs	r2, #32
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e000      	b.n	8002ff6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002ff4:	2302      	movs	r3, #2
  }
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3718      	adds	r7, #24
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	00100002 	.word	0x00100002
 8003004:	ffff0000 	.word	0xffff0000

08003008 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08c      	sub	sp, #48	; 0x30
 800300c:	af02      	add	r7, sp, #8
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	4608      	mov	r0, r1
 8003012:	4611      	mov	r1, r2
 8003014:	461a      	mov	r2, r3
 8003016:	4603      	mov	r3, r0
 8003018:	817b      	strh	r3, [r7, #10]
 800301a:	460b      	mov	r3, r1
 800301c:	813b      	strh	r3, [r7, #8]
 800301e:	4613      	mov	r3, r2
 8003020:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003022:	f7ff faa7 	bl	8002574 <HAL_GetTick>
 8003026:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b20      	cmp	r3, #32
 8003032:	f040 8208 	bne.w	8003446 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2319      	movs	r3, #25
 800303c:	2201      	movs	r2, #1
 800303e:	497b      	ldr	r1, [pc, #492]	; (800322c <HAL_I2C_Mem_Read+0x224>)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fb85 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
 800304e:	e1fb      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003056:	2b01      	cmp	r3, #1
 8003058:	d101      	bne.n	800305e <HAL_I2C_Mem_Read+0x56>
 800305a:	2302      	movs	r3, #2
 800305c:	e1f4      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2201      	movs	r2, #1
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	2b01      	cmp	r3, #1
 8003072:	d007      	beq.n	8003084 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0201 	orr.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003092:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2222      	movs	r2, #34	; 0x22
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2240      	movs	r2, #64	; 0x40
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80030b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a5b      	ldr	r2, [pc, #364]	; (8003230 <HAL_I2C_Mem_Read+0x228>)
 80030c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030c6:	88f8      	ldrh	r0, [r7, #6]
 80030c8:	893a      	ldrh	r2, [r7, #8]
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4603      	mov	r3, r0
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 fa52 	bl	8003580 <I2C_RequestMemoryRead>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e1b0      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d113      	bne.n	8003116 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	623b      	str	r3, [r7, #32]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	623b      	str	r3, [r7, #32]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	623b      	str	r3, [r7, #32]
 8003102:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	e184      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311a:	2b01      	cmp	r3, #1
 800311c:	d11b      	bne.n	8003156 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800312c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e164      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315a:	2b02      	cmp	r3, #2
 800315c:	d11b      	bne.n	8003196 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800317c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800317e:	2300      	movs	r3, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	e144      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80031ac:	e138      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b2:	2b03      	cmp	r3, #3
 80031b4:	f200 80f1 	bhi.w	800339a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d123      	bne.n	8003208 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f000 fc1b 	bl	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e139      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	691a      	ldr	r2, [r3, #16]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	b2d2      	uxtb	r2, r2
 80031e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003206:	e10b      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320c:	2b02      	cmp	r3, #2
 800320e:	d14e      	bne.n	80032ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003216:	2200      	movs	r2, #0
 8003218:	4906      	ldr	r1, [pc, #24]	; (8003234 <HAL_I2C_Mem_Read+0x22c>)
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fa98 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d008      	beq.n	8003238 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e10e      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
 800322a:	bf00      	nop
 800322c:	00100002 	.word	0x00100002
 8003230:	ffff0000 	.word	0xffff0000
 8003234:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	b2d2      	uxtb	r2, r2
 8003254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003264:	3b01      	subs	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032ac:	e0b8      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b4:	2200      	movs	r2, #0
 80032b6:	4966      	ldr	r1, [pc, #408]	; (8003450 <HAL_I2C_Mem_Read+0x448>)
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fa49 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e0bf      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003310:	2200      	movs	r2, #0
 8003312:	494f      	ldr	r1, [pc, #316]	; (8003450 <HAL_I2C_Mem_Read+0x448>)
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 fa1b 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e091      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003332:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	1c5a      	adds	r2, r3, #1
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003350:	3b01      	subs	r3, #1
 8003352:	b29a      	uxth	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	3b01      	subs	r3, #1
 8003392:	b29a      	uxth	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003398:	e042      	b.n	8003420 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 fb2e 	bl	8003a00 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e04c      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691a      	ldr	r2, [r3, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	1c5a      	adds	r2, r3, #1
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d118      	bne.n	8003420 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	b2d2      	uxtb	r2, r2
 80033fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	1c5a      	adds	r2, r3, #1
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	3b01      	subs	r3, #1
 800340c:	b29a      	uxth	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	f47f aec2 	bne.w	80031ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	e000      	b.n	8003448 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003446:	2302      	movs	r3, #2
  }
}
 8003448:	4618      	mov	r0, r3
 800344a:	3728      	adds	r7, #40	; 0x28
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	00010004 	.word	0x00010004

08003454 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	461a      	mov	r2, r3
 8003462:	4603      	mov	r3, r0
 8003464:	817b      	strh	r3, [r7, #10]
 8003466:	460b      	mov	r3, r1
 8003468:	813b      	strh	r3, [r7, #8]
 800346a:	4613      	mov	r3, r2
 800346c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800347c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2200      	movs	r2, #0
 8003486:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f960 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034a4:	d103      	bne.n	80034ae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e05f      	b.n	8003572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	492d      	ldr	r1, [pc, #180]	; (800357c <I2C_RequestMemoryWrite+0x128>)
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f998 	bl	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e04c      	b.n	8003572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	6a39      	ldr	r1, [r7, #32]
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 fa02 	bl	80038fc <I2C_WaitOnTXEFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003502:	2b04      	cmp	r3, #4
 8003504:	d107      	bne.n	8003516 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003514:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e02b      	b.n	8003572 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d105      	bne.n	800352c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003520:	893b      	ldrh	r3, [r7, #8]
 8003522:	b2da      	uxtb	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	611a      	str	r2, [r3, #16]
 800352a:	e021      	b.n	8003570 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800352c:	893b      	ldrh	r3, [r7, #8]
 800352e:	0a1b      	lsrs	r3, r3, #8
 8003530:	b29b      	uxth	r3, r3
 8003532:	b2da      	uxtb	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800353a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353c:	6a39      	ldr	r1, [r7, #32]
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f9dc 	bl	80038fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00d      	beq.n	8003566 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	2b04      	cmp	r3, #4
 8003550:	d107      	bne.n	8003562 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003560:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e005      	b.n	8003572 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003566:	893b      	ldrh	r3, [r7, #8]
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	00010002 	.word	0x00010002

08003580 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af02      	add	r7, sp, #8
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	461a      	mov	r2, r3
 800358e:	4603      	mov	r3, r0
 8003590:	817b      	strh	r3, [r7, #10]
 8003592:	460b      	mov	r3, r1
 8003594:	813b      	strh	r3, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6a3b      	ldr	r3, [r7, #32]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f8c2 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035e0:	d103      	bne.n	80035ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e0aa      	b.n	8003744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003600:	6a3a      	ldr	r2, [r7, #32]
 8003602:	4952      	ldr	r1, [pc, #328]	; (800374c <I2C_RequestMemoryRead+0x1cc>)
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f8fa 	bl	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e097      	b.n	8003744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	6a39      	ldr	r1, [r7, #32]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f964 	bl	80038fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	2b04      	cmp	r3, #4
 8003640:	d107      	bne.n	8003652 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003650:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e076      	b.n	8003744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800365c:	893b      	ldrh	r3, [r7, #8]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]
 8003666:	e021      	b.n	80036ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b29b      	uxth	r3, r3
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003678:	6a39      	ldr	r1, [r7, #32]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f93e 	bl	80038fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00d      	beq.n	80036a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b04      	cmp	r3, #4
 800368c:	d107      	bne.n	800369e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800369c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e050      	b.n	8003744 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036a2:	893b      	ldrh	r3, [r7, #8]
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ae:	6a39      	ldr	r1, [r7, #32]
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f923 	bl	80038fc <I2C_WaitOnTXEFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00d      	beq.n	80036d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d107      	bne.n	80036d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e035      	b.n	8003744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	6a3b      	ldr	r3, [r7, #32]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f82b 	bl	8003750 <I2C_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00d      	beq.n	800371c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370e:	d103      	bne.n	8003718 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e013      	b.n	8003744 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800371c:	897b      	ldrh	r3, [r7, #10]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800372c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372e:	6a3a      	ldr	r2, [r7, #32]
 8003730:	4906      	ldr	r1, [pc, #24]	; (800374c <I2C_RequestMemoryRead+0x1cc>)
 8003732:	68f8      	ldr	r0, [r7, #12]
 8003734:	f000 f863 	bl	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3718      	adds	r7, #24
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	00010002 	.word	0x00010002

08003750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003760:	e025      	b.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d021      	beq.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	f7fe ff03 	bl	8002574 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d302      	bcc.n	8003780 <I2C_WaitOnFlagUntilTimeout+0x30>
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d116      	bne.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379a:	f043 0220 	orr.w	r2, r3, #32
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e023      	b.n	80037f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	0c1b      	lsrs	r3, r3, #16
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d10d      	bne.n	80037d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	e00c      	b.n	80037ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf0c      	ite	eq
 80037e6:	2301      	moveq	r3, #1
 80037e8:	2300      	movne	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	461a      	mov	r2, r3
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d0b6      	beq.n	8003762 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3710      	adds	r7, #16
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b084      	sub	sp, #16
 8003802:	af00      	add	r7, sp, #0
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800380c:	e051      	b.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003818:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800381c:	d123      	bne.n	8003866 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003836:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003852:	f043 0204 	orr.w	r2, r3, #4
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e046      	b.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d021      	beq.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fe fe81 	bl	8002574 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d116      	bne.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f043 0220 	orr.w	r2, r3, #32
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e020      	b.n	80038f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d10c      	bne.n	80038d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	bf14      	ite	ne
 80038ce:	2301      	movne	r3, #1
 80038d0:	2300      	moveq	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e00b      	b.n	80038ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	43da      	mvns	r2, r3
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	4013      	ands	r3, r2
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bf14      	ite	ne
 80038e8:	2301      	movne	r3, #1
 80038ea:	2300      	moveq	r3, #0
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d18d      	bne.n	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003908:	e02d      	b.n	8003966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 f8ce 	bl	8003aac <I2C_IsAcknowledgeFailed>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e02d      	b.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	d021      	beq.n	8003966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003922:	f7fe fe27 	bl	8002574 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d116      	bne.n	8003966 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	f043 0220 	orr.w	r2, r3, #32
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e007      	b.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003970:	2b80      	cmp	r3, #128	; 0x80
 8003972:	d1ca      	bne.n	800390a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	60f8      	str	r0, [r7, #12]
 8003986:	60b9      	str	r1, [r7, #8]
 8003988:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800398a:	e02d      	b.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800398c:	68f8      	ldr	r0, [r7, #12]
 800398e:	f000 f88d 	bl	8003aac <I2C_IsAcknowledgeFailed>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e02d      	b.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a2:	d021      	beq.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a4:	f7fe fde6 	bl	8002574 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	68ba      	ldr	r2, [r7, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d302      	bcc.n	80039ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d116      	bne.n	80039e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e007      	b.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d1ca      	bne.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a0c:	e042      	b.n	8003a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	695b      	ldr	r3, [r3, #20]
 8003a14:	f003 0310 	and.w	r3, r3, #16
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d119      	bne.n	8003a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0210 	mvn.w	r2, #16
 8003a24:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e029      	b.n	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a50:	f7fe fd90 	bl	8002574 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d302      	bcc.n	8003a66 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d116      	bne.n	8003a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e007      	b.n	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d1b5      	bne.n	8003a0e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac2:	d11b      	bne.n	8003afc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003acc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f043 0204 	orr.w	r2, r3, #4
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e000      	b.n	8003afe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	370c      	adds	r7, #12
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e25b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d075      	beq.n	8003c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b2a:	4ba3      	ldr	r3, [pc, #652]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	2b04      	cmp	r3, #4
 8003b34:	d00c      	beq.n	8003b50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b36:	4ba0      	ldr	r3, [pc, #640]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d112      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b42:	4b9d      	ldr	r3, [pc, #628]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b4e:	d10b      	bne.n	8003b68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	4b99      	ldr	r3, [pc, #612]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d05b      	beq.n	8003c14 <HAL_RCC_OscConfig+0x108>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d157      	bne.n	8003c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e236      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b70:	d106      	bne.n	8003b80 <HAL_RCC_OscConfig+0x74>
 8003b72:	4b91      	ldr	r3, [pc, #580]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a90      	ldr	r2, [pc, #576]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e01d      	b.n	8003bbc <HAL_RCC_OscConfig+0xb0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b88:	d10c      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x98>
 8003b8a:	4b8b      	ldr	r3, [pc, #556]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a8a      	ldr	r2, [pc, #552]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4b88      	ldr	r3, [pc, #544]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a87      	ldr	r2, [pc, #540]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba0:	6013      	str	r3, [r2, #0]
 8003ba2:	e00b      	b.n	8003bbc <HAL_RCC_OscConfig+0xb0>
 8003ba4:	4b84      	ldr	r3, [pc, #528]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a83      	ldr	r2, [pc, #524]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003baa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bae:	6013      	str	r3, [r2, #0]
 8003bb0:	4b81      	ldr	r3, [pc, #516]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a80      	ldr	r2, [pc, #512]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d013      	beq.n	8003bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc4:	f7fe fcd6 	bl	8002574 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bcc:	f7fe fcd2 	bl	8002574 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b64      	cmp	r3, #100	; 0x64
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e1fb      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0xc0>
 8003bea:	e014      	b.n	8003c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe fcc2 	bl	8002574 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf4:	f7fe fcbe 	bl	8002574 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b64      	cmp	r3, #100	; 0x64
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e1e7      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	4b6c      	ldr	r3, [pc, #432]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xe8>
 8003c12:	e000      	b.n	8003c16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d063      	beq.n	8003cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c22:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00b      	beq.n	8003c46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c2e:	4b62      	ldr	r3, [pc, #392]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d11c      	bne.n	8003c74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3a:	4b5f      	ldr	r3, [pc, #380]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d116      	bne.n	8003c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c46:	4b5c      	ldr	r3, [pc, #368]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d005      	beq.n	8003c5e <HAL_RCC_OscConfig+0x152>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d001      	beq.n	8003c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e1bb      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c5e:	4b56      	ldr	r3, [pc, #344]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	4952      	ldr	r1, [pc, #328]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	e03a      	b.n	8003cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d020      	beq.n	8003cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c7c:	4b4f      	ldr	r3, [pc, #316]	; (8003dbc <HAL_RCC_OscConfig+0x2b0>)
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c82:	f7fe fc77 	bl	8002574 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c8a:	f7fe fc73 	bl	8002574 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e19c      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	4b46      	ldr	r3, [pc, #280]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca8:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	4940      	ldr	r1, [pc, #256]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	600b      	str	r3, [r1, #0]
 8003cbc:	e015      	b.n	8003cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cbe:	4b3f      	ldr	r3, [pc, #252]	; (8003dbc <HAL_RCC_OscConfig+0x2b0>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fe fc56 	bl	8002574 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ccc:	f7fe fc52 	bl	8002574 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e17b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	4b36      	ldr	r3, [pc, #216]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0308 	and.w	r3, r3, #8
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d030      	beq.n	8003d58 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d016      	beq.n	8003d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cfe:	4b30      	ldr	r3, [pc, #192]	; (8003dc0 <HAL_RCC_OscConfig+0x2b4>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fe fc36 	bl	8002574 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d0c:	f7fe fc32 	bl	8002574 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e15b      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1e:	4b26      	ldr	r3, [pc, #152]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0f0      	beq.n	8003d0c <HAL_RCC_OscConfig+0x200>
 8003d2a:	e015      	b.n	8003d58 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d2c:	4b24      	ldr	r3, [pc, #144]	; (8003dc0 <HAL_RCC_OscConfig+0x2b4>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d32:	f7fe fc1f 	bl	8002574 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3a:	f7fe fc1b 	bl	8002574 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e144      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f0      	bne.n	8003d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0304 	and.w	r3, r3, #4
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a0 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d66:	2300      	movs	r3, #0
 8003d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6a:	4b13      	ldr	r3, [pc, #76]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10f      	bne.n	8003d96 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b0b      	ldr	r3, [pc, #44]	; (8003dc4 <HAL_RCC_OscConfig+0x2b8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d121      	bne.n	8003de6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da2:	4b08      	ldr	r3, [pc, #32]	; (8003dc4 <HAL_RCC_OscConfig+0x2b8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <HAL_RCC_OscConfig+0x2b8>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dae:	f7fe fbe1 	bl	8002574 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e011      	b.n	8003dda <HAL_RCC_OscConfig+0x2ce>
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	42470000 	.word	0x42470000
 8003dc0:	42470e80 	.word	0x42470e80
 8003dc4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7fe fbd4 	bl	8002574 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e0fd      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b81      	ldr	r3, [pc, #516]	; (8003fe0 <HAL_RCC_OscConfig+0x4d4>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d106      	bne.n	8003dfc <HAL_RCC_OscConfig+0x2f0>
 8003dee:	4b7d      	ldr	r3, [pc, #500]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a7c      	ldr	r2, [pc, #496]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dfa:	e01c      	b.n	8003e36 <HAL_RCC_OscConfig+0x32a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689b      	ldr	r3, [r3, #8]
 8003e00:	2b05      	cmp	r3, #5
 8003e02:	d10c      	bne.n	8003e1e <HAL_RCC_OscConfig+0x312>
 8003e04:	4b77      	ldr	r3, [pc, #476]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e08:	4a76      	ldr	r2, [pc, #472]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e0a:	f043 0304 	orr.w	r3, r3, #4
 8003e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e10:	4b74      	ldr	r3, [pc, #464]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a73      	ldr	r2, [pc, #460]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	e00b      	b.n	8003e36 <HAL_RCC_OscConfig+0x32a>
 8003e1e:	4b71      	ldr	r3, [pc, #452]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a70      	ldr	r2, [pc, #448]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	4b6e      	ldr	r3, [pc, #440]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a6d      	ldr	r2, [pc, #436]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e30:	f023 0304 	bic.w	r3, r3, #4
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d015      	beq.n	8003e6a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3e:	f7fe fb99 	bl	8002574 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e46:	f7fe fb95 	bl	8002574 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e0bc      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5c:	4b61      	ldr	r3, [pc, #388]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d0ee      	beq.n	8003e46 <HAL_RCC_OscConfig+0x33a>
 8003e68:	e014      	b.n	8003e94 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e6a:	f7fe fb83 	bl	8002574 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e70:	e00a      	b.n	8003e88 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fe fb7f 	bl	8002574 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e0a6      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e88:	4b56      	ldr	r3, [pc, #344]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ee      	bne.n	8003e72 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d105      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e9a:	4b52      	ldr	r3, [pc, #328]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	4a51      	ldr	r2, [pc, #324]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003ea0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 8092 	beq.w	8003fd4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eb0:	4b4c      	ldr	r3, [pc, #304]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f003 030c 	and.w	r3, r3, #12
 8003eb8:	2b08      	cmp	r3, #8
 8003eba:	d05c      	beq.n	8003f76 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d141      	bne.n	8003f48 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec4:	4b48      	ldr	r3, [pc, #288]	; (8003fe8 <HAL_RCC_OscConfig+0x4dc>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eca:	f7fe fb53 	bl	8002574 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ed2:	f7fe fb4f 	bl	8002574 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e078      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee4:	4b3f      	ldr	r3, [pc, #252]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1f0      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69da      	ldr	r2, [r3, #28]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	019b      	lsls	r3, r3, #6
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f06:	085b      	lsrs	r3, r3, #1
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	041b      	lsls	r3, r3, #16
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f12:	061b      	lsls	r3, r3, #24
 8003f14:	4933      	ldr	r1, [pc, #204]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f1a:	4b33      	ldr	r3, [pc, #204]	; (8003fe8 <HAL_RCC_OscConfig+0x4dc>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f20:	f7fe fb28 	bl	8002574 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f28:	f7fe fb24 	bl	8002574 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e04d      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f3a:	4b2a      	ldr	r3, [pc, #168]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x41c>
 8003f46:	e045      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f48:	4b27      	ldr	r3, [pc, #156]	; (8003fe8 <HAL_RCC_OscConfig+0x4dc>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fe fb11 	bl	8002574 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fe fb0d 	bl	8002574 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e036      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f68:	4b1e      	ldr	r3, [pc, #120]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x44a>
 8003f74:	e02e      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e029      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f82:	4b18      	ldr	r3, [pc, #96]	; (8003fe4 <HAL_RCC_OscConfig+0x4d8>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d11c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d115      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003faa:	4013      	ands	r3, r2
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d10d      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d106      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	42470060 	.word	0x42470060

08003fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e0cc      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	4b68      	ldr	r3, [pc, #416]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 030f 	and.w	r3, r3, #15
 8004008:	683a      	ldr	r2, [r7, #0]
 800400a:	429a      	cmp	r2, r3
 800400c:	d90c      	bls.n	8004028 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800400e:	4b65      	ldr	r3, [pc, #404]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004016:	4b63      	ldr	r3, [pc, #396]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d001      	beq.n	8004028 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e0b8      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d020      	beq.n	8004076 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0304 	and.w	r3, r3, #4
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	4a58      	ldr	r2, [pc, #352]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800404a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0308 	and.w	r3, r3, #8
 8004054:	2b00      	cmp	r3, #0
 8004056:	d005      	beq.n	8004064 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4a52      	ldr	r2, [pc, #328]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004062:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004064:	4b50      	ldr	r3, [pc, #320]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	494d      	ldr	r1, [pc, #308]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004072:	4313      	orrs	r3, r2
 8004074:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d044      	beq.n	800410c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d107      	bne.n	800409a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d119      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e07f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d003      	beq.n	80040aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040aa:	4b3f      	ldr	r3, [pc, #252]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d109      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	4b3b      	ldr	r3, [pc, #236]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e067      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f023 0203 	bic.w	r2, r3, #3
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	4934      	ldr	r1, [pc, #208]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040dc:	f7fe fa4a 	bl	8002574 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040e2:	e00a      	b.n	80040fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040e4:	f7fe fa46 	bl	8002574 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e04f      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040fa:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 020c 	and.w	r2, r3, #12
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	429a      	cmp	r2, r3
 800410a:	d1eb      	bne.n	80040e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800410c:	4b25      	ldr	r3, [pc, #148]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d20c      	bcs.n	8004134 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411a:	4b22      	ldr	r3, [pc, #136]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 800411c:	683a      	ldr	r2, [r7, #0]
 800411e:	b2d2      	uxtb	r2, r2
 8004120:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004122:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	683a      	ldr	r2, [r7, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d001      	beq.n	8004134 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e032      	b.n	800419a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004140:	4b19      	ldr	r3, [pc, #100]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	4916      	ldr	r1, [pc, #88]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d009      	beq.n	8004172 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	490e      	ldr	r1, [pc, #56]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004172:	f000 f821 	bl	80041b8 <HAL_RCC_GetSysClockFreq>
 8004176:	4601      	mov	r1, r0
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_ClockConfig+0x1bc>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	091b      	lsrs	r3, r3, #4
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	4a0a      	ldr	r2, [pc, #40]	; (80041ac <HAL_RCC_ClockConfig+0x1c0>)
 8004184:	5cd3      	ldrb	r3, [r2, r3]
 8004186:	fa21 f303 	lsr.w	r3, r1, r3
 800418a:	4a09      	ldr	r2, [pc, #36]	; (80041b0 <HAL_RCC_ClockConfig+0x1c4>)
 800418c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800418e:	4b09      	ldr	r3, [pc, #36]	; (80041b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe f9aa 	bl	80024ec <HAL_InitTick>

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	40023c00 	.word	0x40023c00
 80041a8:	40023800 	.word	0x40023800
 80041ac:	08008144 	.word	0x08008144
 80041b0:	20000014 	.word	0x20000014
 80041b4:	20000018 	.word	0x20000018

080041b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041be:	2300      	movs	r3, #0
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	2300      	movs	r3, #0
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	2300      	movs	r3, #0
 80041c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041ce:	4b50      	ldr	r3, [pc, #320]	; (8004310 <HAL_RCC_GetSysClockFreq+0x158>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d007      	beq.n	80041ea <HAL_RCC_GetSysClockFreq+0x32>
 80041da:	2b08      	cmp	r3, #8
 80041dc:	d008      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x38>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f040 808d 	bne.w	80042fe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b4b      	ldr	r3, [pc, #300]	; (8004314 <HAL_RCC_GetSysClockFreq+0x15c>)
 80041e6:	60bb      	str	r3, [r7, #8]
       break;
 80041e8:	e08c      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041ea:	4b4b      	ldr	r3, [pc, #300]	; (8004318 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ec:	60bb      	str	r3, [r7, #8]
      break;
 80041ee:	e089      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041f0:	4b47      	ldr	r3, [pc, #284]	; (8004310 <HAL_RCC_GetSysClockFreq+0x158>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041fa:	4b45      	ldr	r3, [pc, #276]	; (8004310 <HAL_RCC_GetSysClockFreq+0x158>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d023      	beq.n	800424e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004206:	4b42      	ldr	r3, [pc, #264]	; (8004310 <HAL_RCC_GetSysClockFreq+0x158>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	099b      	lsrs	r3, r3, #6
 800420c:	f04f 0400 	mov.w	r4, #0
 8004210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	ea03 0501 	and.w	r5, r3, r1
 800421c:	ea04 0602 	and.w	r6, r4, r2
 8004220:	4a3d      	ldr	r2, [pc, #244]	; (8004318 <HAL_RCC_GetSysClockFreq+0x160>)
 8004222:	fb02 f106 	mul.w	r1, r2, r6
 8004226:	2200      	movs	r2, #0
 8004228:	fb02 f205 	mul.w	r2, r2, r5
 800422c:	440a      	add	r2, r1
 800422e:	493a      	ldr	r1, [pc, #232]	; (8004318 <HAL_RCC_GetSysClockFreq+0x160>)
 8004230:	fba5 0101 	umull	r0, r1, r5, r1
 8004234:	1853      	adds	r3, r2, r1
 8004236:	4619      	mov	r1, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f04f 0400 	mov.w	r4, #0
 800423e:	461a      	mov	r2, r3
 8004240:	4623      	mov	r3, r4
 8004242:	f7fc fcb9 	bl	8000bb8 <__aeabi_uldivmod>
 8004246:	4603      	mov	r3, r0
 8004248:	460c      	mov	r4, r1
 800424a:	60fb      	str	r3, [r7, #12]
 800424c:	e049      	b.n	80042e2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424e:	4b30      	ldr	r3, [pc, #192]	; (8004310 <HAL_RCC_GetSysClockFreq+0x158>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	f04f 0400 	mov.w	r4, #0
 8004258:	f240 11ff 	movw	r1, #511	; 0x1ff
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	ea03 0501 	and.w	r5, r3, r1
 8004264:	ea04 0602 	and.w	r6, r4, r2
 8004268:	4629      	mov	r1, r5
 800426a:	4632      	mov	r2, r6
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	f04f 0400 	mov.w	r4, #0
 8004274:	0154      	lsls	r4, r2, #5
 8004276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800427a:	014b      	lsls	r3, r1, #5
 800427c:	4619      	mov	r1, r3
 800427e:	4622      	mov	r2, r4
 8004280:	1b49      	subs	r1, r1, r5
 8004282:	eb62 0206 	sbc.w	r2, r2, r6
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	f04f 0400 	mov.w	r4, #0
 800428e:	0194      	lsls	r4, r2, #6
 8004290:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004294:	018b      	lsls	r3, r1, #6
 8004296:	1a5b      	subs	r3, r3, r1
 8004298:	eb64 0402 	sbc.w	r4, r4, r2
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	00e2      	lsls	r2, r4, #3
 80042a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80042aa:	00d9      	lsls	r1, r3, #3
 80042ac:	460b      	mov	r3, r1
 80042ae:	4614      	mov	r4, r2
 80042b0:	195b      	adds	r3, r3, r5
 80042b2:	eb44 0406 	adc.w	r4, r4, r6
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	02a2      	lsls	r2, r4, #10
 80042c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80042c4:	0299      	lsls	r1, r3, #10
 80042c6:	460b      	mov	r3, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	4621      	mov	r1, r4
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f04f 0400 	mov.w	r4, #0
 80042d4:	461a      	mov	r2, r3
 80042d6:	4623      	mov	r3, r4
 80042d8:	f7fc fc6e 	bl	8000bb8 <__aeabi_uldivmod>
 80042dc:	4603      	mov	r3, r0
 80042de:	460c      	mov	r4, r1
 80042e0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042e2:	4b0b      	ldr	r3, [pc, #44]	; (8004310 <HAL_RCC_GetSysClockFreq+0x158>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	0c1b      	lsrs	r3, r3, #16
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	3301      	adds	r3, #1
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	60bb      	str	r3, [r7, #8]
      break;
 80042fc:	e002      	b.n	8004304 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042fe:	4b05      	ldr	r3, [pc, #20]	; (8004314 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004300:	60bb      	str	r3, [r7, #8]
      break;
 8004302:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004304:	68bb      	ldr	r3, [r7, #8]
}
 8004306:	4618      	mov	r0, r3
 8004308:	3714      	adds	r7, #20
 800430a:	46bd      	mov	sp, r7
 800430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800430e:	bf00      	nop
 8004310:	40023800 	.word	0x40023800
 8004314:	00f42400 	.word	0x00f42400
 8004318:	017d7840 	.word	0x017d7840

0800431c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004320:	4b03      	ldr	r3, [pc, #12]	; (8004330 <HAL_RCC_GetHCLKFreq+0x14>)
 8004322:	681b      	ldr	r3, [r3, #0]
}
 8004324:	4618      	mov	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
 800432e:	bf00      	nop
 8004330:	20000014 	.word	0x20000014

08004334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004338:	f7ff fff0 	bl	800431c <HAL_RCC_GetHCLKFreq>
 800433c:	4601      	mov	r1, r0
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	0a9b      	lsrs	r3, r3, #10
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	4a03      	ldr	r2, [pc, #12]	; (8004358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800434a:	5cd3      	ldrb	r3, [r2, r3]
 800434c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004350:	4618      	mov	r0, r3
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40023800 	.word	0x40023800
 8004358:	08008154 	.word	0x08008154

0800435c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004360:	f7ff ffdc 	bl	800431c <HAL_RCC_GetHCLKFreq>
 8004364:	4601      	mov	r1, r0
 8004366:	4b05      	ldr	r3, [pc, #20]	; (800437c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	0b5b      	lsrs	r3, r3, #13
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	4a03      	ldr	r2, [pc, #12]	; (8004380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004372:	5cd3      	ldrb	r3, [r2, r3]
 8004374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004378:	4618      	mov	r0, r3
 800437a:	bd80      	pop	{r7, pc}
 800437c:	40023800 	.word	0x40023800
 8004380:	08008154 	.word	0x08008154

08004384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e03f      	b.n	8004416 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d106      	bne.n	80043b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7fd fe86 	bl	80020bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2224      	movs	r2, #36	; 0x24
 80043b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68da      	ldr	r2, [r3, #12]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f000 fc8b 	bl	8004ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68da      	ldr	r2, [r3, #12]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b088      	sub	sp, #32
 8004422:	af02      	add	r7, sp, #8
 8004424:	60f8      	str	r0, [r7, #12]
 8004426:	60b9      	str	r1, [r7, #8]
 8004428:	603b      	str	r3, [r7, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 8083 	bne.w	8004546 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_UART_Transmit+0x2e>
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e07b      	b.n	8004548 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004456:	2b01      	cmp	r3, #1
 8004458:	d101      	bne.n	800445e <HAL_UART_Transmit+0x40>
 800445a:	2302      	movs	r3, #2
 800445c:	e074      	b.n	8004548 <HAL_UART_Transmit+0x12a>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2201      	movs	r2, #1
 8004462:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2221      	movs	r2, #33	; 0x21
 8004470:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004474:	f7fe f87e 	bl	8002574 <HAL_GetTick>
 8004478:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	88fa      	ldrh	r2, [r7, #6]
 800447e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	88fa      	ldrh	r2, [r7, #6]
 8004484:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800448e:	e042      	b.n	8004516 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a6:	d122      	bne.n	80044ee <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2200      	movs	r2, #0
 80044b0:	2180      	movs	r1, #128	; 0x80
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 faaa 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e042      	b.n	8004548 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	461a      	mov	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044d4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d103      	bne.n	80044e6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	3302      	adds	r3, #2
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	e017      	b.n	8004516 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	e013      	b.n	8004516 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2200      	movs	r2, #0
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fa87 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e01f      	b.n	8004548 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	60ba      	str	r2, [r7, #8]
 800450e:	781a      	ldrb	r2, [r3, #0]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800451a:	b29b      	uxth	r3, r3
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1b7      	bne.n	8004490 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2200      	movs	r2, #0
 8004528:	2140      	movs	r1, #64	; 0x40
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fa6e 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e006      	b.n	8004548 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2220      	movs	r2, #32
 800453e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004546:	2302      	movs	r3, #2
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af02      	add	r7, sp, #8
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b20      	cmp	r3, #32
 800456e:	f040 8090 	bne.w	8004692 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <HAL_UART_Receive+0x2e>
 8004578:	88fb      	ldrh	r3, [r7, #6]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e088      	b.n	8004694 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004588:	2b01      	cmp	r3, #1
 800458a:	d101      	bne.n	8004590 <HAL_UART_Receive+0x40>
 800458c:	2302      	movs	r3, #2
 800458e:	e081      	b.n	8004694 <HAL_UART_Receive+0x144>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2222      	movs	r2, #34	; 0x22
 80045a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80045a6:	f7fd ffe5 	bl	8002574 <HAL_GetTick>
 80045aa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	88fa      	ldrh	r2, [r7, #6]
 80045b0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	88fa      	ldrh	r2, [r7, #6]
 80045b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80045c0:	e05c      	b.n	800467c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	3b01      	subs	r3, #1
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d8:	d12b      	bne.n	8004632 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2200      	movs	r2, #0
 80045e2:	2120      	movs	r1, #32
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fa11 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e04f      	b.n	8004694 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10c      	bne.n	800461a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	b29b      	uxth	r3, r3
 8004608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800460c:	b29a      	uxth	r2, r3
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	3302      	adds	r3, #2
 8004616:	60bb      	str	r3, [r7, #8]
 8004618:	e030      	b.n	800467c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	b29b      	uxth	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	b29a      	uxth	r2, r3
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	3301      	adds	r3, #1
 800462e:	60bb      	str	r3, [r7, #8]
 8004630:	e024      	b.n	800467c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	9300      	str	r3, [sp, #0]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	2200      	movs	r2, #0
 800463a:	2120      	movs	r1, #32
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f9e5 	bl	8004a0c <UART_WaitOnFlagUntilTimeout>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	d001      	beq.n	800464c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e023      	b.n	8004694 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d108      	bne.n	8004666 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	60ba      	str	r2, [r7, #8]
 8004660:	b2ca      	uxtb	r2, r1
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e00a      	b.n	800467c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	1c59      	adds	r1, r3, #1
 8004672:	60b9      	str	r1, [r7, #8]
 8004674:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d19d      	bne.n	80045c2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800468e:	2300      	movs	r3, #0
 8004690:	e000      	b.n	8004694 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004692:	2302      	movs	r3, #2
  }
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d130      	bne.n	8004718 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_UART_Transmit_IT+0x26>
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e029      	b.n	800471a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Transmit_IT+0x38>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e022      	b.n	800471a <HAL_UART_Transmit_IT+0x7e>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	88fa      	ldrh	r2, [r7, #6]
 80046e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2221      	movs	r2, #33	; 0x21
 80046f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68da      	ldr	r2, [r3, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004712:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	4613      	mov	r3, r2
 8004732:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b20      	cmp	r3, #32
 800473e:	d140      	bne.n	80047c2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <HAL_UART_Receive_IT+0x26>
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d101      	bne.n	8004750 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e039      	b.n	80047c4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <HAL_UART_Receive_IT+0x38>
 800475a:	2302      	movs	r3, #2
 800475c:	e032      	b.n	80047c4 <HAL_UART_Receive_IT+0x9e>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	88fa      	ldrh	r2, [r7, #6]
 8004770:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	88fa      	ldrh	r2, [r7, #6]
 8004776:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2222      	movs	r2, #34	; 0x22
 8004782:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800479c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695a      	ldr	r2, [r3, #20]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f042 0201 	orr.w	r2, r2, #1
 80047ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68da      	ldr	r2, [r3, #12]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f042 0220 	orr.w	r2, r2, #32
 80047bc:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	e000      	b.n	80047c4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80047c2:	2302      	movs	r3, #2
  }
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80047f0:	2300      	movs	r3, #0
 80047f2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	f003 030f 	and.w	r3, r3, #15
 80047fe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10d      	bne.n	8004822 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d008      	beq.n	8004822 <HAL_UART_IRQHandler+0x52>
 8004810:	69bb      	ldr	r3, [r7, #24]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f9e0 	bl	8004be0 <UART_Receive_IT>
      return;
 8004820:	e0d1      	b.n	80049c6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80b0 	beq.w	800498a <HAL_UART_IRQHandler+0x1ba>
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	f003 0301 	and.w	r3, r3, #1
 8004830:	2b00      	cmp	r3, #0
 8004832:	d105      	bne.n	8004840 <HAL_UART_IRQHandler+0x70>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 80a5 	beq.w	800498a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <HAL_UART_IRQHandler+0x90>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <HAL_UART_IRQHandler+0xb0>
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004878:	f043 0202 	orr.w	r2, r3, #2
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <HAL_UART_IRQHandler+0xd0>
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d005      	beq.n	80048a0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	f043 0204 	orr.w	r2, r3, #4
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00f      	beq.n	80048ca <HAL_UART_IRQHandler+0xfa>
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d104      	bne.n	80048be <HAL_UART_IRQHandler+0xee>
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	f043 0208 	orr.w	r2, r3, #8
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d078      	beq.n	80049c4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f003 0320 	and.w	r3, r3, #32
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d007      	beq.n	80048ec <HAL_UART_IRQHandler+0x11c>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	f003 0320 	and.w	r3, r3, #32
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d002      	beq.n	80048ec <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f97a 	bl	8004be0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f6:	2b40      	cmp	r3, #64	; 0x40
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_UART_IRQHandler+0x144>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d031      	beq.n	8004978 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f8c3 	bl	8004aa0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004924:	2b40      	cmp	r3, #64	; 0x40
 8004926:	d123      	bne.n	8004970 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695a      	ldr	r2, [r3, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004936:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493c:	2b00      	cmp	r3, #0
 800493e:	d013      	beq.n	8004968 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004944:	4a21      	ldr	r2, [pc, #132]	; (80049cc <HAL_UART_IRQHandler+0x1fc>)
 8004946:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494c:	4618      	mov	r0, r3
 800494e:	f7fd ff50 	bl	80027f2 <HAL_DMA_Abort_IT>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d016      	beq.n	8004986 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800495c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004962:	4610      	mov	r0, r2
 8004964:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004966:	e00e      	b.n	8004986 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 f845 	bl	80049f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496e:	e00a      	b.n	8004986 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f841 	bl	80049f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004976:	e006      	b.n	8004986 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 f83d 	bl	80049f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004984:	e01e      	b.n	80049c4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004986:	bf00      	nop
    return;
 8004988:	e01c      	b.n	80049c4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_UART_IRQHandler+0x1d6>
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f8b0 	bl	8004b04 <UART_Transmit_IT>
    return;
 80049a4:	e00f      	b.n	80049c6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00a      	beq.n	80049c6 <HAL_UART_IRQHandler+0x1f6>
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8f8 	bl	8004bb0 <UART_EndTransmit_IT>
    return;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80049c4:	bf00      	nop
  }
}
 80049c6:	3720      	adds	r7, #32
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	08004add 	.word	0x08004add

080049d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b084      	sub	sp, #16
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	603b      	str	r3, [r7, #0]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a1c:	e02c      	b.n	8004a78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a24:	d028      	beq.n	8004a78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004a2c:	f7fd fda2 	bl	8002574 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d21d      	bcs.n	8004a78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695a      	ldr	r2, [r3, #20]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0201 	bic.w	r2, r2, #1
 8004a5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e00f      	b.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4013      	ands	r3, r2
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	bf0c      	ite	eq
 8004a88:	2301      	moveq	r3, #1
 8004a8a:	2300      	movne	r3, #0
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	461a      	mov	r2, r3
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d0c3      	beq.n	8004a1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004ab6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b084      	sub	sp, #16
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7ff ff7e 	bl	80049f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b21      	cmp	r3, #33	; 0x21
 8004b16:	d144      	bne.n	8004ba2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b20:	d11a      	bne.n	8004b58 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a1b      	ldr	r3, [r3, #32]
 8004b26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	881b      	ldrh	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b36:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d105      	bne.n	8004b4c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	1c9a      	adds	r2, r3, #2
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	621a      	str	r2, [r3, #32]
 8004b4a:	e00e      	b.n	8004b6a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6a1b      	ldr	r3, [r3, #32]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	621a      	str	r2, [r3, #32]
 8004b56:	e008      	b.n	8004b6a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	1c59      	adds	r1, r3, #1
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6211      	str	r1, [r2, #32]
 8004b62:	781a      	ldrb	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	3b01      	subs	r3, #1
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	4619      	mov	r1, r3
 8004b78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10f      	bne.n	8004b9e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68da      	ldr	r2, [r3, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3714      	adds	r7, #20
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr

08004bb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68da      	ldr	r2, [r3, #12]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f7ff fefd 	bl	80049d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3708      	adds	r7, #8
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b22      	cmp	r3, #34	; 0x22
 8004bf2:	d171      	bne.n	8004cd8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bfc:	d123      	bne.n	8004c46 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d10e      	bne.n	8004c2a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	1c9a      	adds	r2, r3, #2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	629a      	str	r2, [r3, #40]	; 0x28
 8004c28:	e029      	b.n	8004c7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
 8004c44:	e01b      	b.n	8004c7e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	6858      	ldr	r0, [r3, #4]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	1c59      	adds	r1, r3, #1
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6291      	str	r1, [r2, #40]	; 0x28
 8004c5e:	b2c2      	uxtb	r2, r0
 8004c60:	701a      	strb	r2, [r3, #0]
 8004c62:	e00c      	b.n	8004c7e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	b2da      	uxtb	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	1c58      	adds	r0, r3, #1
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	6288      	str	r0, [r1, #40]	; 0x28
 8004c76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c7a:	b2d2      	uxtb	r2, r2
 8004c7c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	3b01      	subs	r3, #1
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d120      	bne.n	8004cd4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 0220 	bic.w	r2, r2, #32
 8004ca0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	695a      	ldr	r2, [r3, #20]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 0201 	bic.w	r2, r2, #1
 8004cc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7ff fe8a 	bl	80049e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	e002      	b.n	8004cda <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	e000      	b.n	8004cda <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004cd8:	2302      	movs	r3, #2
  }
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	b085      	sub	sp, #20
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	431a      	orrs	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	69db      	ldr	r3, [r3, #28]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004d26:	f023 030c 	bic.w	r3, r3, #12
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6812      	ldr	r2, [r2, #0]
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	430b      	orrs	r3, r1
 8004d32:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	430a      	orrs	r2, r1
 8004d48:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69db      	ldr	r3, [r3, #28]
 8004d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d52:	f040 818b 	bne.w	800506c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4ac1      	ldr	r2, [pc, #772]	; (8005060 <UART_SetConfig+0x37c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d005      	beq.n	8004d6c <UART_SetConfig+0x88>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4abf      	ldr	r2, [pc, #764]	; (8005064 <UART_SetConfig+0x380>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	f040 80bd 	bne.w	8004ee6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7ff faf6 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 8004d70:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	461d      	mov	r5, r3
 8004d76:	f04f 0600 	mov.w	r6, #0
 8004d7a:	46a8      	mov	r8, r5
 8004d7c:	46b1      	mov	r9, r6
 8004d7e:	eb18 0308 	adds.w	r3, r8, r8
 8004d82:	eb49 0409 	adc.w	r4, r9, r9
 8004d86:	4698      	mov	r8, r3
 8004d88:	46a1      	mov	r9, r4
 8004d8a:	eb18 0805 	adds.w	r8, r8, r5
 8004d8e:	eb49 0906 	adc.w	r9, r9, r6
 8004d92:	f04f 0100 	mov.w	r1, #0
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d9e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004da2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004da6:	4688      	mov	r8, r1
 8004da8:	4691      	mov	r9, r2
 8004daa:	eb18 0005 	adds.w	r0, r8, r5
 8004dae:	eb49 0106 	adc.w	r1, r9, r6
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	461d      	mov	r5, r3
 8004db8:	f04f 0600 	mov.w	r6, #0
 8004dbc:	196b      	adds	r3, r5, r5
 8004dbe:	eb46 0406 	adc.w	r4, r6, r6
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	f7fb fef7 	bl	8000bb8 <__aeabi_uldivmod>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	460c      	mov	r4, r1
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4ba5      	ldr	r3, [pc, #660]	; (8005068 <UART_SetConfig+0x384>)
 8004dd2:	fba3 2302 	umull	r2, r3, r3, r2
 8004dd6:	095b      	lsrs	r3, r3, #5
 8004dd8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	461d      	mov	r5, r3
 8004de0:	f04f 0600 	mov.w	r6, #0
 8004de4:	46a9      	mov	r9, r5
 8004de6:	46b2      	mov	sl, r6
 8004de8:	eb19 0309 	adds.w	r3, r9, r9
 8004dec:	eb4a 040a 	adc.w	r4, sl, sl
 8004df0:	4699      	mov	r9, r3
 8004df2:	46a2      	mov	sl, r4
 8004df4:	eb19 0905 	adds.w	r9, r9, r5
 8004df8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dfc:	f04f 0100 	mov.w	r1, #0
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e08:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e0c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e10:	4689      	mov	r9, r1
 8004e12:	4692      	mov	sl, r2
 8004e14:	eb19 0005 	adds.w	r0, r9, r5
 8004e18:	eb4a 0106 	adc.w	r1, sl, r6
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	461d      	mov	r5, r3
 8004e22:	f04f 0600 	mov.w	r6, #0
 8004e26:	196b      	adds	r3, r5, r5
 8004e28:	eb46 0406 	adc.w	r4, r6, r6
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4623      	mov	r3, r4
 8004e30:	f7fb fec2 	bl	8000bb8 <__aeabi_uldivmod>
 8004e34:	4603      	mov	r3, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4b8b      	ldr	r3, [pc, #556]	; (8005068 <UART_SetConfig+0x384>)
 8004e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	2164      	movs	r1, #100	; 0x64
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	3332      	adds	r3, #50	; 0x32
 8004e4e:	4a86      	ldr	r2, [pc, #536]	; (8005068 <UART_SetConfig+0x384>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	005b      	lsls	r3, r3, #1
 8004e58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e5c:	4498      	add	r8, r3
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	461d      	mov	r5, r3
 8004e62:	f04f 0600 	mov.w	r6, #0
 8004e66:	46a9      	mov	r9, r5
 8004e68:	46b2      	mov	sl, r6
 8004e6a:	eb19 0309 	adds.w	r3, r9, r9
 8004e6e:	eb4a 040a 	adc.w	r4, sl, sl
 8004e72:	4699      	mov	r9, r3
 8004e74:	46a2      	mov	sl, r4
 8004e76:	eb19 0905 	adds.w	r9, r9, r5
 8004e7a:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e7e:	f04f 0100 	mov.w	r1, #0
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e8a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e8e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e92:	4689      	mov	r9, r1
 8004e94:	4692      	mov	sl, r2
 8004e96:	eb19 0005 	adds.w	r0, r9, r5
 8004e9a:	eb4a 0106 	adc.w	r1, sl, r6
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	461d      	mov	r5, r3
 8004ea4:	f04f 0600 	mov.w	r6, #0
 8004ea8:	196b      	adds	r3, r5, r5
 8004eaa:	eb46 0406 	adc.w	r4, r6, r6
 8004eae:	461a      	mov	r2, r3
 8004eb0:	4623      	mov	r3, r4
 8004eb2:	f7fb fe81 	bl	8000bb8 <__aeabi_uldivmod>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	460c      	mov	r4, r1
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4b6a      	ldr	r3, [pc, #424]	; (8005068 <UART_SetConfig+0x384>)
 8004ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	2164      	movs	r1, #100	; 0x64
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	00db      	lsls	r3, r3, #3
 8004ece:	3332      	adds	r3, #50	; 0x32
 8004ed0:	4a65      	ldr	r2, [pc, #404]	; (8005068 <UART_SetConfig+0x384>)
 8004ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed6:	095b      	lsrs	r3, r3, #5
 8004ed8:	f003 0207 	and.w	r2, r3, #7
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4442      	add	r2, r8
 8004ee2:	609a      	str	r2, [r3, #8]
 8004ee4:	e26f      	b.n	80053c6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ee6:	f7ff fa25 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8004eea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	461d      	mov	r5, r3
 8004ef0:	f04f 0600 	mov.w	r6, #0
 8004ef4:	46a8      	mov	r8, r5
 8004ef6:	46b1      	mov	r9, r6
 8004ef8:	eb18 0308 	adds.w	r3, r8, r8
 8004efc:	eb49 0409 	adc.w	r4, r9, r9
 8004f00:	4698      	mov	r8, r3
 8004f02:	46a1      	mov	r9, r4
 8004f04:	eb18 0805 	adds.w	r8, r8, r5
 8004f08:	eb49 0906 	adc.w	r9, r9, r6
 8004f0c:	f04f 0100 	mov.w	r1, #0
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f18:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f1c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f20:	4688      	mov	r8, r1
 8004f22:	4691      	mov	r9, r2
 8004f24:	eb18 0005 	adds.w	r0, r8, r5
 8004f28:	eb49 0106 	adc.w	r1, r9, r6
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	461d      	mov	r5, r3
 8004f32:	f04f 0600 	mov.w	r6, #0
 8004f36:	196b      	adds	r3, r5, r5
 8004f38:	eb46 0406 	adc.w	r4, r6, r6
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	4623      	mov	r3, r4
 8004f40:	f7fb fe3a 	bl	8000bb8 <__aeabi_uldivmod>
 8004f44:	4603      	mov	r3, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4b47      	ldr	r3, [pc, #284]	; (8005068 <UART_SetConfig+0x384>)
 8004f4c:	fba3 2302 	umull	r2, r3, r3, r2
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	461d      	mov	r5, r3
 8004f5a:	f04f 0600 	mov.w	r6, #0
 8004f5e:	46a9      	mov	r9, r5
 8004f60:	46b2      	mov	sl, r6
 8004f62:	eb19 0309 	adds.w	r3, r9, r9
 8004f66:	eb4a 040a 	adc.w	r4, sl, sl
 8004f6a:	4699      	mov	r9, r3
 8004f6c:	46a2      	mov	sl, r4
 8004f6e:	eb19 0905 	adds.w	r9, r9, r5
 8004f72:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f76:	f04f 0100 	mov.w	r1, #0
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f8a:	4689      	mov	r9, r1
 8004f8c:	4692      	mov	sl, r2
 8004f8e:	eb19 0005 	adds.w	r0, r9, r5
 8004f92:	eb4a 0106 	adc.w	r1, sl, r6
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	461d      	mov	r5, r3
 8004f9c:	f04f 0600 	mov.w	r6, #0
 8004fa0:	196b      	adds	r3, r5, r5
 8004fa2:	eb46 0406 	adc.w	r4, r6, r6
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4623      	mov	r3, r4
 8004faa:	f7fb fe05 	bl	8000bb8 <__aeabi_uldivmod>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	4b2c      	ldr	r3, [pc, #176]	; (8005068 <UART_SetConfig+0x384>)
 8004fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2164      	movs	r1, #100	; 0x64
 8004fbe:	fb01 f303 	mul.w	r3, r1, r3
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	3332      	adds	r3, #50	; 0x32
 8004fc8:	4a27      	ldr	r2, [pc, #156]	; (8005068 <UART_SetConfig+0x384>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	005b      	lsls	r3, r3, #1
 8004fd2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fd6:	4498      	add	r8, r3
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	461d      	mov	r5, r3
 8004fdc:	f04f 0600 	mov.w	r6, #0
 8004fe0:	46a9      	mov	r9, r5
 8004fe2:	46b2      	mov	sl, r6
 8004fe4:	eb19 0309 	adds.w	r3, r9, r9
 8004fe8:	eb4a 040a 	adc.w	r4, sl, sl
 8004fec:	4699      	mov	r9, r3
 8004fee:	46a2      	mov	sl, r4
 8004ff0:	eb19 0905 	adds.w	r9, r9, r5
 8004ff4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ff8:	f04f 0100 	mov.w	r1, #0
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005004:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005008:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800500c:	4689      	mov	r9, r1
 800500e:	4692      	mov	sl, r2
 8005010:	eb19 0005 	adds.w	r0, r9, r5
 8005014:	eb4a 0106 	adc.w	r1, sl, r6
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	461d      	mov	r5, r3
 800501e:	f04f 0600 	mov.w	r6, #0
 8005022:	196b      	adds	r3, r5, r5
 8005024:	eb46 0406 	adc.w	r4, r6, r6
 8005028:	461a      	mov	r2, r3
 800502a:	4623      	mov	r3, r4
 800502c:	f7fb fdc4 	bl	8000bb8 <__aeabi_uldivmod>
 8005030:	4603      	mov	r3, r0
 8005032:	460c      	mov	r4, r1
 8005034:	461a      	mov	r2, r3
 8005036:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <UART_SetConfig+0x384>)
 8005038:	fba3 1302 	umull	r1, r3, r3, r2
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	2164      	movs	r1, #100	; 0x64
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	3332      	adds	r3, #50	; 0x32
 800504a:	4a07      	ldr	r2, [pc, #28]	; (8005068 <UART_SetConfig+0x384>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	f003 0207 	and.w	r2, r3, #7
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4442      	add	r2, r8
 800505c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800505e:	e1b2      	b.n	80053c6 <UART_SetConfig+0x6e2>
 8005060:	40011000 	.word	0x40011000
 8005064:	40011400 	.word	0x40011400
 8005068:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4ad7      	ldr	r2, [pc, #860]	; (80053d0 <UART_SetConfig+0x6ec>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d005      	beq.n	8005082 <UART_SetConfig+0x39e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4ad6      	ldr	r2, [pc, #856]	; (80053d4 <UART_SetConfig+0x6f0>)
 800507c:	4293      	cmp	r3, r2
 800507e:	f040 80d1 	bne.w	8005224 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005082:	f7ff f96b 	bl	800435c <HAL_RCC_GetPCLK2Freq>
 8005086:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	469a      	mov	sl, r3
 800508c:	f04f 0b00 	mov.w	fp, #0
 8005090:	46d0      	mov	r8, sl
 8005092:	46d9      	mov	r9, fp
 8005094:	eb18 0308 	adds.w	r3, r8, r8
 8005098:	eb49 0409 	adc.w	r4, r9, r9
 800509c:	4698      	mov	r8, r3
 800509e:	46a1      	mov	r9, r4
 80050a0:	eb18 080a 	adds.w	r8, r8, sl
 80050a4:	eb49 090b 	adc.w	r9, r9, fp
 80050a8:	f04f 0100 	mov.w	r1, #0
 80050ac:	f04f 0200 	mov.w	r2, #0
 80050b0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80050b4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80050b8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80050bc:	4688      	mov	r8, r1
 80050be:	4691      	mov	r9, r2
 80050c0:	eb1a 0508 	adds.w	r5, sl, r8
 80050c4:	eb4b 0609 	adc.w	r6, fp, r9
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4619      	mov	r1, r3
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	0094      	lsls	r4, r2, #2
 80050dc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050e0:	008b      	lsls	r3, r1, #2
 80050e2:	461a      	mov	r2, r3
 80050e4:	4623      	mov	r3, r4
 80050e6:	4628      	mov	r0, r5
 80050e8:	4631      	mov	r1, r6
 80050ea:	f7fb fd65 	bl	8000bb8 <__aeabi_uldivmod>
 80050ee:	4603      	mov	r3, r0
 80050f0:	460c      	mov	r4, r1
 80050f2:	461a      	mov	r2, r3
 80050f4:	4bb8      	ldr	r3, [pc, #736]	; (80053d8 <UART_SetConfig+0x6f4>)
 80050f6:	fba3 2302 	umull	r2, r3, r3, r2
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	469b      	mov	fp, r3
 8005104:	f04f 0c00 	mov.w	ip, #0
 8005108:	46d9      	mov	r9, fp
 800510a:	46e2      	mov	sl, ip
 800510c:	eb19 0309 	adds.w	r3, r9, r9
 8005110:	eb4a 040a 	adc.w	r4, sl, sl
 8005114:	4699      	mov	r9, r3
 8005116:	46a2      	mov	sl, r4
 8005118:	eb19 090b 	adds.w	r9, r9, fp
 800511c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005120:	f04f 0100 	mov.w	r1, #0
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800512c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005130:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005134:	4689      	mov	r9, r1
 8005136:	4692      	mov	sl, r2
 8005138:	eb1b 0509 	adds.w	r5, fp, r9
 800513c:	eb4c 060a 	adc.w	r6, ip, sl
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	4619      	mov	r1, r3
 8005146:	f04f 0200 	mov.w	r2, #0
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	f04f 0400 	mov.w	r4, #0
 8005152:	0094      	lsls	r4, r2, #2
 8005154:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005158:	008b      	lsls	r3, r1, #2
 800515a:	461a      	mov	r2, r3
 800515c:	4623      	mov	r3, r4
 800515e:	4628      	mov	r0, r5
 8005160:	4631      	mov	r1, r6
 8005162:	f7fb fd29 	bl	8000bb8 <__aeabi_uldivmod>
 8005166:	4603      	mov	r3, r0
 8005168:	460c      	mov	r4, r1
 800516a:	461a      	mov	r2, r3
 800516c:	4b9a      	ldr	r3, [pc, #616]	; (80053d8 <UART_SetConfig+0x6f4>)
 800516e:	fba3 1302 	umull	r1, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2164      	movs	r1, #100	; 0x64
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	011b      	lsls	r3, r3, #4
 800517e:	3332      	adds	r3, #50	; 0x32
 8005180:	4a95      	ldr	r2, [pc, #596]	; (80053d8 <UART_SetConfig+0x6f4>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518c:	4498      	add	r8, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	469b      	mov	fp, r3
 8005192:	f04f 0c00 	mov.w	ip, #0
 8005196:	46d9      	mov	r9, fp
 8005198:	46e2      	mov	sl, ip
 800519a:	eb19 0309 	adds.w	r3, r9, r9
 800519e:	eb4a 040a 	adc.w	r4, sl, sl
 80051a2:	4699      	mov	r9, r3
 80051a4:	46a2      	mov	sl, r4
 80051a6:	eb19 090b 	adds.w	r9, r9, fp
 80051aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051ae:	f04f 0100 	mov.w	r1, #0
 80051b2:	f04f 0200 	mov.w	r2, #0
 80051b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051c2:	4689      	mov	r9, r1
 80051c4:	4692      	mov	sl, r2
 80051c6:	eb1b 0509 	adds.w	r5, fp, r9
 80051ca:	eb4c 060a 	adc.w	r6, ip, sl
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4619      	mov	r1, r3
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	f04f 0400 	mov.w	r4, #0
 80051e0:	0094      	lsls	r4, r2, #2
 80051e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051e6:	008b      	lsls	r3, r1, #2
 80051e8:	461a      	mov	r2, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	4628      	mov	r0, r5
 80051ee:	4631      	mov	r1, r6
 80051f0:	f7fb fce2 	bl	8000bb8 <__aeabi_uldivmod>
 80051f4:	4603      	mov	r3, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	461a      	mov	r2, r3
 80051fa:	4b77      	ldr	r3, [pc, #476]	; (80053d8 <UART_SetConfig+0x6f4>)
 80051fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	2164      	movs	r1, #100	; 0x64
 8005204:	fb01 f303 	mul.w	r3, r1, r3
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	011b      	lsls	r3, r3, #4
 800520c:	3332      	adds	r3, #50	; 0x32
 800520e:	4a72      	ldr	r2, [pc, #456]	; (80053d8 <UART_SetConfig+0x6f4>)
 8005210:	fba2 2303 	umull	r2, r3, r2, r3
 8005214:	095b      	lsrs	r3, r3, #5
 8005216:	f003 020f 	and.w	r2, r3, #15
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4442      	add	r2, r8
 8005220:	609a      	str	r2, [r3, #8]
 8005222:	e0d0      	b.n	80053c6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005224:	f7ff f886 	bl	8004334 <HAL_RCC_GetPCLK1Freq>
 8005228:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	469a      	mov	sl, r3
 800522e:	f04f 0b00 	mov.w	fp, #0
 8005232:	46d0      	mov	r8, sl
 8005234:	46d9      	mov	r9, fp
 8005236:	eb18 0308 	adds.w	r3, r8, r8
 800523a:	eb49 0409 	adc.w	r4, r9, r9
 800523e:	4698      	mov	r8, r3
 8005240:	46a1      	mov	r9, r4
 8005242:	eb18 080a 	adds.w	r8, r8, sl
 8005246:	eb49 090b 	adc.w	r9, r9, fp
 800524a:	f04f 0100 	mov.w	r1, #0
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005256:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800525a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800525e:	4688      	mov	r8, r1
 8005260:	4691      	mov	r9, r2
 8005262:	eb1a 0508 	adds.w	r5, sl, r8
 8005266:	eb4b 0609 	adc.w	r6, fp, r9
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	4619      	mov	r1, r3
 8005270:	f04f 0200 	mov.w	r2, #0
 8005274:	f04f 0300 	mov.w	r3, #0
 8005278:	f04f 0400 	mov.w	r4, #0
 800527c:	0094      	lsls	r4, r2, #2
 800527e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005282:	008b      	lsls	r3, r1, #2
 8005284:	461a      	mov	r2, r3
 8005286:	4623      	mov	r3, r4
 8005288:	4628      	mov	r0, r5
 800528a:	4631      	mov	r1, r6
 800528c:	f7fb fc94 	bl	8000bb8 <__aeabi_uldivmod>
 8005290:	4603      	mov	r3, r0
 8005292:	460c      	mov	r4, r1
 8005294:	461a      	mov	r2, r3
 8005296:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <UART_SetConfig+0x6f4>)
 8005298:	fba3 2302 	umull	r2, r3, r3, r2
 800529c:	095b      	lsrs	r3, r3, #5
 800529e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	469b      	mov	fp, r3
 80052a6:	f04f 0c00 	mov.w	ip, #0
 80052aa:	46d9      	mov	r9, fp
 80052ac:	46e2      	mov	sl, ip
 80052ae:	eb19 0309 	adds.w	r3, r9, r9
 80052b2:	eb4a 040a 	adc.w	r4, sl, sl
 80052b6:	4699      	mov	r9, r3
 80052b8:	46a2      	mov	sl, r4
 80052ba:	eb19 090b 	adds.w	r9, r9, fp
 80052be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052d6:	4689      	mov	r9, r1
 80052d8:	4692      	mov	sl, r2
 80052da:	eb1b 0509 	adds.w	r5, fp, r9
 80052de:	eb4c 060a 	adc.w	r6, ip, sl
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	4619      	mov	r1, r3
 80052e8:	f04f 0200 	mov.w	r2, #0
 80052ec:	f04f 0300 	mov.w	r3, #0
 80052f0:	f04f 0400 	mov.w	r4, #0
 80052f4:	0094      	lsls	r4, r2, #2
 80052f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052fa:	008b      	lsls	r3, r1, #2
 80052fc:	461a      	mov	r2, r3
 80052fe:	4623      	mov	r3, r4
 8005300:	4628      	mov	r0, r5
 8005302:	4631      	mov	r1, r6
 8005304:	f7fb fc58 	bl	8000bb8 <__aeabi_uldivmod>
 8005308:	4603      	mov	r3, r0
 800530a:	460c      	mov	r4, r1
 800530c:	461a      	mov	r2, r3
 800530e:	4b32      	ldr	r3, [pc, #200]	; (80053d8 <UART_SetConfig+0x6f4>)
 8005310:	fba3 1302 	umull	r1, r3, r3, r2
 8005314:	095b      	lsrs	r3, r3, #5
 8005316:	2164      	movs	r1, #100	; 0x64
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	3332      	adds	r3, #50	; 0x32
 8005322:	4a2d      	ldr	r2, [pc, #180]	; (80053d8 <UART_SetConfig+0x6f4>)
 8005324:	fba2 2303 	umull	r2, r3, r2, r3
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800532e:	4498      	add	r8, r3
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	469b      	mov	fp, r3
 8005334:	f04f 0c00 	mov.w	ip, #0
 8005338:	46d9      	mov	r9, fp
 800533a:	46e2      	mov	sl, ip
 800533c:	eb19 0309 	adds.w	r3, r9, r9
 8005340:	eb4a 040a 	adc.w	r4, sl, sl
 8005344:	4699      	mov	r9, r3
 8005346:	46a2      	mov	sl, r4
 8005348:	eb19 090b 	adds.w	r9, r9, fp
 800534c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005350:	f04f 0100 	mov.w	r1, #0
 8005354:	f04f 0200 	mov.w	r2, #0
 8005358:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800535c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005360:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005364:	4689      	mov	r9, r1
 8005366:	4692      	mov	sl, r2
 8005368:	eb1b 0509 	adds.w	r5, fp, r9
 800536c:	eb4c 060a 	adc.w	r6, ip, sl
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4619      	mov	r1, r3
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	f04f 0400 	mov.w	r4, #0
 8005382:	0094      	lsls	r4, r2, #2
 8005384:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005388:	008b      	lsls	r3, r1, #2
 800538a:	461a      	mov	r2, r3
 800538c:	4623      	mov	r3, r4
 800538e:	4628      	mov	r0, r5
 8005390:	4631      	mov	r1, r6
 8005392:	f7fb fc11 	bl	8000bb8 <__aeabi_uldivmod>
 8005396:	4603      	mov	r3, r0
 8005398:	460c      	mov	r4, r1
 800539a:	461a      	mov	r2, r3
 800539c:	4b0e      	ldr	r3, [pc, #56]	; (80053d8 <UART_SetConfig+0x6f4>)
 800539e:	fba3 1302 	umull	r1, r3, r3, r2
 80053a2:	095b      	lsrs	r3, r3, #5
 80053a4:	2164      	movs	r1, #100	; 0x64
 80053a6:	fb01 f303 	mul.w	r3, r1, r3
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	3332      	adds	r3, #50	; 0x32
 80053b0:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <UART_SetConfig+0x6f4>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	095b      	lsrs	r3, r3, #5
 80053b8:	f003 020f 	and.w	r2, r3, #15
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4442      	add	r2, r8
 80053c2:	609a      	str	r2, [r3, #8]
}
 80053c4:	e7ff      	b.n	80053c6 <UART_SetConfig+0x6e2>
 80053c6:	bf00      	nop
 80053c8:	3714      	adds	r7, #20
 80053ca:	46bd      	mov	sp, r7
 80053cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d0:	40011000 	.word	0x40011000
 80053d4:	40011400 	.word	0x40011400
 80053d8:	51eb851f 	.word	0x51eb851f

080053dc <__errno>:
 80053dc:	4b01      	ldr	r3, [pc, #4]	; (80053e4 <__errno+0x8>)
 80053de:	6818      	ldr	r0, [r3, #0]
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000020 	.word	0x20000020

080053e8 <__libc_init_array>:
 80053e8:	b570      	push	{r4, r5, r6, lr}
 80053ea:	4e0d      	ldr	r6, [pc, #52]	; (8005420 <__libc_init_array+0x38>)
 80053ec:	4c0d      	ldr	r4, [pc, #52]	; (8005424 <__libc_init_array+0x3c>)
 80053ee:	1ba4      	subs	r4, r4, r6
 80053f0:	10a4      	asrs	r4, r4, #2
 80053f2:	2500      	movs	r5, #0
 80053f4:	42a5      	cmp	r5, r4
 80053f6:	d109      	bne.n	800540c <__libc_init_array+0x24>
 80053f8:	4e0b      	ldr	r6, [pc, #44]	; (8005428 <__libc_init_array+0x40>)
 80053fa:	4c0c      	ldr	r4, [pc, #48]	; (800542c <__libc_init_array+0x44>)
 80053fc:	f002 fd92 	bl	8007f24 <_init>
 8005400:	1ba4      	subs	r4, r4, r6
 8005402:	10a4      	asrs	r4, r4, #2
 8005404:	2500      	movs	r5, #0
 8005406:	42a5      	cmp	r5, r4
 8005408:	d105      	bne.n	8005416 <__libc_init_array+0x2e>
 800540a:	bd70      	pop	{r4, r5, r6, pc}
 800540c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005410:	4798      	blx	r3
 8005412:	3501      	adds	r5, #1
 8005414:	e7ee      	b.n	80053f4 <__libc_init_array+0xc>
 8005416:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800541a:	4798      	blx	r3
 800541c:	3501      	adds	r5, #1
 800541e:	e7f2      	b.n	8005406 <__libc_init_array+0x1e>
 8005420:	08008428 	.word	0x08008428
 8005424:	08008428 	.word	0x08008428
 8005428:	08008428 	.word	0x08008428
 800542c:	0800842c 	.word	0x0800842c

08005430 <memcpy>:
 8005430:	b510      	push	{r4, lr}
 8005432:	1e43      	subs	r3, r0, #1
 8005434:	440a      	add	r2, r1
 8005436:	4291      	cmp	r1, r2
 8005438:	d100      	bne.n	800543c <memcpy+0xc>
 800543a:	bd10      	pop	{r4, pc}
 800543c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005440:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005444:	e7f7      	b.n	8005436 <memcpy+0x6>

08005446 <memset>:
 8005446:	4402      	add	r2, r0
 8005448:	4603      	mov	r3, r0
 800544a:	4293      	cmp	r3, r2
 800544c:	d100      	bne.n	8005450 <memset+0xa>
 800544e:	4770      	bx	lr
 8005450:	f803 1b01 	strb.w	r1, [r3], #1
 8005454:	e7f9      	b.n	800544a <memset+0x4>

08005456 <__cvt>:
 8005456:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800545a:	ec55 4b10 	vmov	r4, r5, d0
 800545e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005460:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005464:	2d00      	cmp	r5, #0
 8005466:	460e      	mov	r6, r1
 8005468:	4691      	mov	r9, r2
 800546a:	4619      	mov	r1, r3
 800546c:	bfb8      	it	lt
 800546e:	4622      	movlt	r2, r4
 8005470:	462b      	mov	r3, r5
 8005472:	f027 0720 	bic.w	r7, r7, #32
 8005476:	bfbb      	ittet	lt
 8005478:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800547c:	461d      	movlt	r5, r3
 800547e:	2300      	movge	r3, #0
 8005480:	232d      	movlt	r3, #45	; 0x2d
 8005482:	bfb8      	it	lt
 8005484:	4614      	movlt	r4, r2
 8005486:	2f46      	cmp	r7, #70	; 0x46
 8005488:	700b      	strb	r3, [r1, #0]
 800548a:	d004      	beq.n	8005496 <__cvt+0x40>
 800548c:	2f45      	cmp	r7, #69	; 0x45
 800548e:	d100      	bne.n	8005492 <__cvt+0x3c>
 8005490:	3601      	adds	r6, #1
 8005492:	2102      	movs	r1, #2
 8005494:	e000      	b.n	8005498 <__cvt+0x42>
 8005496:	2103      	movs	r1, #3
 8005498:	ab03      	add	r3, sp, #12
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	ab02      	add	r3, sp, #8
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	4632      	mov	r2, r6
 80054a2:	4653      	mov	r3, sl
 80054a4:	ec45 4b10 	vmov	d0, r4, r5
 80054a8:	f000 fe46 	bl	8006138 <_dtoa_r>
 80054ac:	2f47      	cmp	r7, #71	; 0x47
 80054ae:	4680      	mov	r8, r0
 80054b0:	d102      	bne.n	80054b8 <__cvt+0x62>
 80054b2:	f019 0f01 	tst.w	r9, #1
 80054b6:	d026      	beq.n	8005506 <__cvt+0xb0>
 80054b8:	2f46      	cmp	r7, #70	; 0x46
 80054ba:	eb08 0906 	add.w	r9, r8, r6
 80054be:	d111      	bne.n	80054e4 <__cvt+0x8e>
 80054c0:	f898 3000 	ldrb.w	r3, [r8]
 80054c4:	2b30      	cmp	r3, #48	; 0x30
 80054c6:	d10a      	bne.n	80054de <__cvt+0x88>
 80054c8:	2200      	movs	r2, #0
 80054ca:	2300      	movs	r3, #0
 80054cc:	4620      	mov	r0, r4
 80054ce:	4629      	mov	r1, r5
 80054d0:	f7fb fb02 	bl	8000ad8 <__aeabi_dcmpeq>
 80054d4:	b918      	cbnz	r0, 80054de <__cvt+0x88>
 80054d6:	f1c6 0601 	rsb	r6, r6, #1
 80054da:	f8ca 6000 	str.w	r6, [sl]
 80054de:	f8da 3000 	ldr.w	r3, [sl]
 80054e2:	4499      	add	r9, r3
 80054e4:	2200      	movs	r2, #0
 80054e6:	2300      	movs	r3, #0
 80054e8:	4620      	mov	r0, r4
 80054ea:	4629      	mov	r1, r5
 80054ec:	f7fb faf4 	bl	8000ad8 <__aeabi_dcmpeq>
 80054f0:	b938      	cbnz	r0, 8005502 <__cvt+0xac>
 80054f2:	2230      	movs	r2, #48	; 0x30
 80054f4:	9b03      	ldr	r3, [sp, #12]
 80054f6:	454b      	cmp	r3, r9
 80054f8:	d205      	bcs.n	8005506 <__cvt+0xb0>
 80054fa:	1c59      	adds	r1, r3, #1
 80054fc:	9103      	str	r1, [sp, #12]
 80054fe:	701a      	strb	r2, [r3, #0]
 8005500:	e7f8      	b.n	80054f4 <__cvt+0x9e>
 8005502:	f8cd 900c 	str.w	r9, [sp, #12]
 8005506:	9b03      	ldr	r3, [sp, #12]
 8005508:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800550a:	eba3 0308 	sub.w	r3, r3, r8
 800550e:	4640      	mov	r0, r8
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	b004      	add	sp, #16
 8005514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005518 <__exponent>:
 8005518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800551a:	2900      	cmp	r1, #0
 800551c:	4604      	mov	r4, r0
 800551e:	bfba      	itte	lt
 8005520:	4249      	neglt	r1, r1
 8005522:	232d      	movlt	r3, #45	; 0x2d
 8005524:	232b      	movge	r3, #43	; 0x2b
 8005526:	2909      	cmp	r1, #9
 8005528:	f804 2b02 	strb.w	r2, [r4], #2
 800552c:	7043      	strb	r3, [r0, #1]
 800552e:	dd20      	ble.n	8005572 <__exponent+0x5a>
 8005530:	f10d 0307 	add.w	r3, sp, #7
 8005534:	461f      	mov	r7, r3
 8005536:	260a      	movs	r6, #10
 8005538:	fb91 f5f6 	sdiv	r5, r1, r6
 800553c:	fb06 1115 	mls	r1, r6, r5, r1
 8005540:	3130      	adds	r1, #48	; 0x30
 8005542:	2d09      	cmp	r5, #9
 8005544:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005548:	f103 32ff 	add.w	r2, r3, #4294967295
 800554c:	4629      	mov	r1, r5
 800554e:	dc09      	bgt.n	8005564 <__exponent+0x4c>
 8005550:	3130      	adds	r1, #48	; 0x30
 8005552:	3b02      	subs	r3, #2
 8005554:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005558:	42bb      	cmp	r3, r7
 800555a:	4622      	mov	r2, r4
 800555c:	d304      	bcc.n	8005568 <__exponent+0x50>
 800555e:	1a10      	subs	r0, r2, r0
 8005560:	b003      	add	sp, #12
 8005562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005564:	4613      	mov	r3, r2
 8005566:	e7e7      	b.n	8005538 <__exponent+0x20>
 8005568:	f813 2b01 	ldrb.w	r2, [r3], #1
 800556c:	f804 2b01 	strb.w	r2, [r4], #1
 8005570:	e7f2      	b.n	8005558 <__exponent+0x40>
 8005572:	2330      	movs	r3, #48	; 0x30
 8005574:	4419      	add	r1, r3
 8005576:	7083      	strb	r3, [r0, #2]
 8005578:	1d02      	adds	r2, r0, #4
 800557a:	70c1      	strb	r1, [r0, #3]
 800557c:	e7ef      	b.n	800555e <__exponent+0x46>
	...

08005580 <_printf_float>:
 8005580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	b08d      	sub	sp, #52	; 0x34
 8005586:	460c      	mov	r4, r1
 8005588:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800558c:	4616      	mov	r6, r2
 800558e:	461f      	mov	r7, r3
 8005590:	4605      	mov	r5, r0
 8005592:	f001 fd03 	bl	8006f9c <_localeconv_r>
 8005596:	6803      	ldr	r3, [r0, #0]
 8005598:	9304      	str	r3, [sp, #16]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fa fe20 	bl	80001e0 <strlen>
 80055a0:	2300      	movs	r3, #0
 80055a2:	930a      	str	r3, [sp, #40]	; 0x28
 80055a4:	f8d8 3000 	ldr.w	r3, [r8]
 80055a8:	9005      	str	r0, [sp, #20]
 80055aa:	3307      	adds	r3, #7
 80055ac:	f023 0307 	bic.w	r3, r3, #7
 80055b0:	f103 0208 	add.w	r2, r3, #8
 80055b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80055b8:	f8d4 b000 	ldr.w	fp, [r4]
 80055bc:	f8c8 2000 	str.w	r2, [r8]
 80055c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055c8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055cc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055d0:	9307      	str	r3, [sp, #28]
 80055d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80055d6:	f04f 32ff 	mov.w	r2, #4294967295
 80055da:	4ba7      	ldr	r3, [pc, #668]	; (8005878 <_printf_float+0x2f8>)
 80055dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055e0:	f7fb faac 	bl	8000b3c <__aeabi_dcmpun>
 80055e4:	bb70      	cbnz	r0, 8005644 <_printf_float+0xc4>
 80055e6:	f04f 32ff 	mov.w	r2, #4294967295
 80055ea:	4ba3      	ldr	r3, [pc, #652]	; (8005878 <_printf_float+0x2f8>)
 80055ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055f0:	f7fb fa86 	bl	8000b00 <__aeabi_dcmple>
 80055f4:	bb30      	cbnz	r0, 8005644 <_printf_float+0xc4>
 80055f6:	2200      	movs	r2, #0
 80055f8:	2300      	movs	r3, #0
 80055fa:	4640      	mov	r0, r8
 80055fc:	4649      	mov	r1, r9
 80055fe:	f7fb fa75 	bl	8000aec <__aeabi_dcmplt>
 8005602:	b110      	cbz	r0, 800560a <_printf_float+0x8a>
 8005604:	232d      	movs	r3, #45	; 0x2d
 8005606:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800560a:	4a9c      	ldr	r2, [pc, #624]	; (800587c <_printf_float+0x2fc>)
 800560c:	4b9c      	ldr	r3, [pc, #624]	; (8005880 <_printf_float+0x300>)
 800560e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005612:	bf8c      	ite	hi
 8005614:	4690      	movhi	r8, r2
 8005616:	4698      	movls	r8, r3
 8005618:	2303      	movs	r3, #3
 800561a:	f02b 0204 	bic.w	r2, fp, #4
 800561e:	6123      	str	r3, [r4, #16]
 8005620:	6022      	str	r2, [r4, #0]
 8005622:	f04f 0900 	mov.w	r9, #0
 8005626:	9700      	str	r7, [sp, #0]
 8005628:	4633      	mov	r3, r6
 800562a:	aa0b      	add	r2, sp, #44	; 0x2c
 800562c:	4621      	mov	r1, r4
 800562e:	4628      	mov	r0, r5
 8005630:	f000 f9e6 	bl	8005a00 <_printf_common>
 8005634:	3001      	adds	r0, #1
 8005636:	f040 808d 	bne.w	8005754 <_printf_float+0x1d4>
 800563a:	f04f 30ff 	mov.w	r0, #4294967295
 800563e:	b00d      	add	sp, #52	; 0x34
 8005640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	4640      	mov	r0, r8
 800564a:	4649      	mov	r1, r9
 800564c:	f7fb fa76 	bl	8000b3c <__aeabi_dcmpun>
 8005650:	b110      	cbz	r0, 8005658 <_printf_float+0xd8>
 8005652:	4a8c      	ldr	r2, [pc, #560]	; (8005884 <_printf_float+0x304>)
 8005654:	4b8c      	ldr	r3, [pc, #560]	; (8005888 <_printf_float+0x308>)
 8005656:	e7da      	b.n	800560e <_printf_float+0x8e>
 8005658:	6861      	ldr	r1, [r4, #4]
 800565a:	1c4b      	adds	r3, r1, #1
 800565c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005660:	a80a      	add	r0, sp, #40	; 0x28
 8005662:	d13e      	bne.n	80056e2 <_printf_float+0x162>
 8005664:	2306      	movs	r3, #6
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	2300      	movs	r3, #0
 800566a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800566e:	ab09      	add	r3, sp, #36	; 0x24
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	ec49 8b10 	vmov	d0, r8, r9
 8005676:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800567a:	6022      	str	r2, [r4, #0]
 800567c:	f8cd a004 	str.w	sl, [sp, #4]
 8005680:	6861      	ldr	r1, [r4, #4]
 8005682:	4628      	mov	r0, r5
 8005684:	f7ff fee7 	bl	8005456 <__cvt>
 8005688:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800568c:	2b47      	cmp	r3, #71	; 0x47
 800568e:	4680      	mov	r8, r0
 8005690:	d109      	bne.n	80056a6 <_printf_float+0x126>
 8005692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005694:	1cd8      	adds	r0, r3, #3
 8005696:	db02      	blt.n	800569e <_printf_float+0x11e>
 8005698:	6862      	ldr	r2, [r4, #4]
 800569a:	4293      	cmp	r3, r2
 800569c:	dd47      	ble.n	800572e <_printf_float+0x1ae>
 800569e:	f1aa 0a02 	sub.w	sl, sl, #2
 80056a2:	fa5f fa8a 	uxtb.w	sl, sl
 80056a6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80056aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056ac:	d824      	bhi.n	80056f8 <_printf_float+0x178>
 80056ae:	3901      	subs	r1, #1
 80056b0:	4652      	mov	r2, sl
 80056b2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056b6:	9109      	str	r1, [sp, #36]	; 0x24
 80056b8:	f7ff ff2e 	bl	8005518 <__exponent>
 80056bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056be:	1813      	adds	r3, r2, r0
 80056c0:	2a01      	cmp	r2, #1
 80056c2:	4681      	mov	r9, r0
 80056c4:	6123      	str	r3, [r4, #16]
 80056c6:	dc02      	bgt.n	80056ce <_printf_float+0x14e>
 80056c8:	6822      	ldr	r2, [r4, #0]
 80056ca:	07d1      	lsls	r1, r2, #31
 80056cc:	d501      	bpl.n	80056d2 <_printf_float+0x152>
 80056ce:	3301      	adds	r3, #1
 80056d0:	6123      	str	r3, [r4, #16]
 80056d2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0a5      	beq.n	8005626 <_printf_float+0xa6>
 80056da:	232d      	movs	r3, #45	; 0x2d
 80056dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056e0:	e7a1      	b.n	8005626 <_printf_float+0xa6>
 80056e2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80056e6:	f000 8177 	beq.w	80059d8 <_printf_float+0x458>
 80056ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80056ee:	d1bb      	bne.n	8005668 <_printf_float+0xe8>
 80056f0:	2900      	cmp	r1, #0
 80056f2:	d1b9      	bne.n	8005668 <_printf_float+0xe8>
 80056f4:	2301      	movs	r3, #1
 80056f6:	e7b6      	b.n	8005666 <_printf_float+0xe6>
 80056f8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80056fc:	d119      	bne.n	8005732 <_printf_float+0x1b2>
 80056fe:	2900      	cmp	r1, #0
 8005700:	6863      	ldr	r3, [r4, #4]
 8005702:	dd0c      	ble.n	800571e <_printf_float+0x19e>
 8005704:	6121      	str	r1, [r4, #16]
 8005706:	b913      	cbnz	r3, 800570e <_printf_float+0x18e>
 8005708:	6822      	ldr	r2, [r4, #0]
 800570a:	07d2      	lsls	r2, r2, #31
 800570c:	d502      	bpl.n	8005714 <_printf_float+0x194>
 800570e:	3301      	adds	r3, #1
 8005710:	440b      	add	r3, r1
 8005712:	6123      	str	r3, [r4, #16]
 8005714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005716:	65a3      	str	r3, [r4, #88]	; 0x58
 8005718:	f04f 0900 	mov.w	r9, #0
 800571c:	e7d9      	b.n	80056d2 <_printf_float+0x152>
 800571e:	b913      	cbnz	r3, 8005726 <_printf_float+0x1a6>
 8005720:	6822      	ldr	r2, [r4, #0]
 8005722:	07d0      	lsls	r0, r2, #31
 8005724:	d501      	bpl.n	800572a <_printf_float+0x1aa>
 8005726:	3302      	adds	r3, #2
 8005728:	e7f3      	b.n	8005712 <_printf_float+0x192>
 800572a:	2301      	movs	r3, #1
 800572c:	e7f1      	b.n	8005712 <_printf_float+0x192>
 800572e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005732:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005736:	4293      	cmp	r3, r2
 8005738:	db05      	blt.n	8005746 <_printf_float+0x1c6>
 800573a:	6822      	ldr	r2, [r4, #0]
 800573c:	6123      	str	r3, [r4, #16]
 800573e:	07d1      	lsls	r1, r2, #31
 8005740:	d5e8      	bpl.n	8005714 <_printf_float+0x194>
 8005742:	3301      	adds	r3, #1
 8005744:	e7e5      	b.n	8005712 <_printf_float+0x192>
 8005746:	2b00      	cmp	r3, #0
 8005748:	bfd4      	ite	le
 800574a:	f1c3 0302 	rsble	r3, r3, #2
 800574e:	2301      	movgt	r3, #1
 8005750:	4413      	add	r3, r2
 8005752:	e7de      	b.n	8005712 <_printf_float+0x192>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	055a      	lsls	r2, r3, #21
 8005758:	d407      	bmi.n	800576a <_printf_float+0x1ea>
 800575a:	6923      	ldr	r3, [r4, #16]
 800575c:	4642      	mov	r2, r8
 800575e:	4631      	mov	r1, r6
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	d12b      	bne.n	80057c0 <_printf_float+0x240>
 8005768:	e767      	b.n	800563a <_printf_float+0xba>
 800576a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800576e:	f240 80dc 	bls.w	800592a <_printf_float+0x3aa>
 8005772:	2200      	movs	r2, #0
 8005774:	2300      	movs	r3, #0
 8005776:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800577a:	f7fb f9ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800577e:	2800      	cmp	r0, #0
 8005780:	d033      	beq.n	80057ea <_printf_float+0x26a>
 8005782:	2301      	movs	r3, #1
 8005784:	4a41      	ldr	r2, [pc, #260]	; (800588c <_printf_float+0x30c>)
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	f43f af54 	beq.w	800563a <_printf_float+0xba>
 8005792:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005796:	429a      	cmp	r2, r3
 8005798:	db02      	blt.n	80057a0 <_printf_float+0x220>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	07d8      	lsls	r0, r3, #31
 800579e:	d50f      	bpl.n	80057c0 <_printf_float+0x240>
 80057a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057a4:	4631      	mov	r1, r6
 80057a6:	4628      	mov	r0, r5
 80057a8:	47b8      	blx	r7
 80057aa:	3001      	adds	r0, #1
 80057ac:	f43f af45 	beq.w	800563a <_printf_float+0xba>
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	f104 091a 	add.w	r9, r4, #26
 80057b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057ba:	3b01      	subs	r3, #1
 80057bc:	4543      	cmp	r3, r8
 80057be:	dc09      	bgt.n	80057d4 <_printf_float+0x254>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	079b      	lsls	r3, r3, #30
 80057c4:	f100 8103 	bmi.w	80059ce <_printf_float+0x44e>
 80057c8:	68e0      	ldr	r0, [r4, #12]
 80057ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057cc:	4298      	cmp	r0, r3
 80057ce:	bfb8      	it	lt
 80057d0:	4618      	movlt	r0, r3
 80057d2:	e734      	b.n	800563e <_printf_float+0xbe>
 80057d4:	2301      	movs	r3, #1
 80057d6:	464a      	mov	r2, r9
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	f43f af2b 	beq.w	800563a <_printf_float+0xba>
 80057e4:	f108 0801 	add.w	r8, r8, #1
 80057e8:	e7e6      	b.n	80057b8 <_printf_float+0x238>
 80057ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	dc2b      	bgt.n	8005848 <_printf_float+0x2c8>
 80057f0:	2301      	movs	r3, #1
 80057f2:	4a26      	ldr	r2, [pc, #152]	; (800588c <_printf_float+0x30c>)
 80057f4:	4631      	mov	r1, r6
 80057f6:	4628      	mov	r0, r5
 80057f8:	47b8      	blx	r7
 80057fa:	3001      	adds	r0, #1
 80057fc:	f43f af1d 	beq.w	800563a <_printf_float+0xba>
 8005800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005802:	b923      	cbnz	r3, 800580e <_printf_float+0x28e>
 8005804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005806:	b913      	cbnz	r3, 800580e <_printf_float+0x28e>
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	07d9      	lsls	r1, r3, #31
 800580c:	d5d8      	bpl.n	80057c0 <_printf_float+0x240>
 800580e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005812:	4631      	mov	r1, r6
 8005814:	4628      	mov	r0, r5
 8005816:	47b8      	blx	r7
 8005818:	3001      	adds	r0, #1
 800581a:	f43f af0e 	beq.w	800563a <_printf_float+0xba>
 800581e:	f04f 0900 	mov.w	r9, #0
 8005822:	f104 0a1a 	add.w	sl, r4, #26
 8005826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005828:	425b      	negs	r3, r3
 800582a:	454b      	cmp	r3, r9
 800582c:	dc01      	bgt.n	8005832 <_printf_float+0x2b2>
 800582e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005830:	e794      	b.n	800575c <_printf_float+0x1dc>
 8005832:	2301      	movs	r3, #1
 8005834:	4652      	mov	r2, sl
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	f43f aefc 	beq.w	800563a <_printf_float+0xba>
 8005842:	f109 0901 	add.w	r9, r9, #1
 8005846:	e7ee      	b.n	8005826 <_printf_float+0x2a6>
 8005848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800584a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800584c:	429a      	cmp	r2, r3
 800584e:	bfa8      	it	ge
 8005850:	461a      	movge	r2, r3
 8005852:	2a00      	cmp	r2, #0
 8005854:	4691      	mov	r9, r2
 8005856:	dd07      	ble.n	8005868 <_printf_float+0x2e8>
 8005858:	4613      	mov	r3, r2
 800585a:	4631      	mov	r1, r6
 800585c:	4642      	mov	r2, r8
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	f43f aee9 	beq.w	800563a <_printf_float+0xba>
 8005868:	f104 031a 	add.w	r3, r4, #26
 800586c:	f04f 0b00 	mov.w	fp, #0
 8005870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005874:	9306      	str	r3, [sp, #24]
 8005876:	e015      	b.n	80058a4 <_printf_float+0x324>
 8005878:	7fefffff 	.word	0x7fefffff
 800587c:	08008164 	.word	0x08008164
 8005880:	08008160 	.word	0x08008160
 8005884:	0800816c 	.word	0x0800816c
 8005888:	08008168 	.word	0x08008168
 800588c:	08008170 	.word	0x08008170
 8005890:	2301      	movs	r3, #1
 8005892:	9a06      	ldr	r2, [sp, #24]
 8005894:	4631      	mov	r1, r6
 8005896:	4628      	mov	r0, r5
 8005898:	47b8      	blx	r7
 800589a:	3001      	adds	r0, #1
 800589c:	f43f aecd 	beq.w	800563a <_printf_float+0xba>
 80058a0:	f10b 0b01 	add.w	fp, fp, #1
 80058a4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80058a8:	ebaa 0309 	sub.w	r3, sl, r9
 80058ac:	455b      	cmp	r3, fp
 80058ae:	dcef      	bgt.n	8005890 <_printf_float+0x310>
 80058b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058b4:	429a      	cmp	r2, r3
 80058b6:	44d0      	add	r8, sl
 80058b8:	db15      	blt.n	80058e6 <_printf_float+0x366>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	07da      	lsls	r2, r3, #31
 80058be:	d412      	bmi.n	80058e6 <_printf_float+0x366>
 80058c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c4:	eba3 020a 	sub.w	r2, r3, sl
 80058c8:	eba3 0a01 	sub.w	sl, r3, r1
 80058cc:	4592      	cmp	sl, r2
 80058ce:	bfa8      	it	ge
 80058d0:	4692      	movge	sl, r2
 80058d2:	f1ba 0f00 	cmp.w	sl, #0
 80058d6:	dc0e      	bgt.n	80058f6 <_printf_float+0x376>
 80058d8:	f04f 0800 	mov.w	r8, #0
 80058dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80058e0:	f104 091a 	add.w	r9, r4, #26
 80058e4:	e019      	b.n	800591a <_printf_float+0x39a>
 80058e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058ea:	4631      	mov	r1, r6
 80058ec:	4628      	mov	r0, r5
 80058ee:	47b8      	blx	r7
 80058f0:	3001      	adds	r0, #1
 80058f2:	d1e5      	bne.n	80058c0 <_printf_float+0x340>
 80058f4:	e6a1      	b.n	800563a <_printf_float+0xba>
 80058f6:	4653      	mov	r3, sl
 80058f8:	4642      	mov	r2, r8
 80058fa:	4631      	mov	r1, r6
 80058fc:	4628      	mov	r0, r5
 80058fe:	47b8      	blx	r7
 8005900:	3001      	adds	r0, #1
 8005902:	d1e9      	bne.n	80058d8 <_printf_float+0x358>
 8005904:	e699      	b.n	800563a <_printf_float+0xba>
 8005906:	2301      	movs	r3, #1
 8005908:	464a      	mov	r2, r9
 800590a:	4631      	mov	r1, r6
 800590c:	4628      	mov	r0, r5
 800590e:	47b8      	blx	r7
 8005910:	3001      	adds	r0, #1
 8005912:	f43f ae92 	beq.w	800563a <_printf_float+0xba>
 8005916:	f108 0801 	add.w	r8, r8, #1
 800591a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800591e:	1a9b      	subs	r3, r3, r2
 8005920:	eba3 030a 	sub.w	r3, r3, sl
 8005924:	4543      	cmp	r3, r8
 8005926:	dcee      	bgt.n	8005906 <_printf_float+0x386>
 8005928:	e74a      	b.n	80057c0 <_printf_float+0x240>
 800592a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800592c:	2a01      	cmp	r2, #1
 800592e:	dc01      	bgt.n	8005934 <_printf_float+0x3b4>
 8005930:	07db      	lsls	r3, r3, #31
 8005932:	d53a      	bpl.n	80059aa <_printf_float+0x42a>
 8005934:	2301      	movs	r3, #1
 8005936:	4642      	mov	r2, r8
 8005938:	4631      	mov	r1, r6
 800593a:	4628      	mov	r0, r5
 800593c:	47b8      	blx	r7
 800593e:	3001      	adds	r0, #1
 8005940:	f43f ae7b 	beq.w	800563a <_printf_float+0xba>
 8005944:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	f108 0801 	add.w	r8, r8, #1
 8005954:	f43f ae71 	beq.w	800563a <_printf_float+0xba>
 8005958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800595a:	2200      	movs	r2, #0
 800595c:	f103 3aff 	add.w	sl, r3, #4294967295
 8005960:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005964:	2300      	movs	r3, #0
 8005966:	f7fb f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800596a:	b9c8      	cbnz	r0, 80059a0 <_printf_float+0x420>
 800596c:	4653      	mov	r3, sl
 800596e:	4642      	mov	r2, r8
 8005970:	4631      	mov	r1, r6
 8005972:	4628      	mov	r0, r5
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	d10e      	bne.n	8005998 <_printf_float+0x418>
 800597a:	e65e      	b.n	800563a <_printf_float+0xba>
 800597c:	2301      	movs	r3, #1
 800597e:	4652      	mov	r2, sl
 8005980:	4631      	mov	r1, r6
 8005982:	4628      	mov	r0, r5
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f ae57 	beq.w	800563a <_printf_float+0xba>
 800598c:	f108 0801 	add.w	r8, r8, #1
 8005990:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005992:	3b01      	subs	r3, #1
 8005994:	4543      	cmp	r3, r8
 8005996:	dcf1      	bgt.n	800597c <_printf_float+0x3fc>
 8005998:	464b      	mov	r3, r9
 800599a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800599e:	e6de      	b.n	800575e <_printf_float+0x1de>
 80059a0:	f04f 0800 	mov.w	r8, #0
 80059a4:	f104 0a1a 	add.w	sl, r4, #26
 80059a8:	e7f2      	b.n	8005990 <_printf_float+0x410>
 80059aa:	2301      	movs	r3, #1
 80059ac:	e7df      	b.n	800596e <_printf_float+0x3ee>
 80059ae:	2301      	movs	r3, #1
 80059b0:	464a      	mov	r2, r9
 80059b2:	4631      	mov	r1, r6
 80059b4:	4628      	mov	r0, r5
 80059b6:	47b8      	blx	r7
 80059b8:	3001      	adds	r0, #1
 80059ba:	f43f ae3e 	beq.w	800563a <_printf_float+0xba>
 80059be:	f108 0801 	add.w	r8, r8, #1
 80059c2:	68e3      	ldr	r3, [r4, #12]
 80059c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80059c6:	1a9b      	subs	r3, r3, r2
 80059c8:	4543      	cmp	r3, r8
 80059ca:	dcf0      	bgt.n	80059ae <_printf_float+0x42e>
 80059cc:	e6fc      	b.n	80057c8 <_printf_float+0x248>
 80059ce:	f04f 0800 	mov.w	r8, #0
 80059d2:	f104 0919 	add.w	r9, r4, #25
 80059d6:	e7f4      	b.n	80059c2 <_printf_float+0x442>
 80059d8:	2900      	cmp	r1, #0
 80059da:	f43f ae8b 	beq.w	80056f4 <_printf_float+0x174>
 80059de:	2300      	movs	r3, #0
 80059e0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80059e4:	ab09      	add	r3, sp, #36	; 0x24
 80059e6:	9300      	str	r3, [sp, #0]
 80059e8:	ec49 8b10 	vmov	d0, r8, r9
 80059ec:	6022      	str	r2, [r4, #0]
 80059ee:	f8cd a004 	str.w	sl, [sp, #4]
 80059f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80059f6:	4628      	mov	r0, r5
 80059f8:	f7ff fd2d 	bl	8005456 <__cvt>
 80059fc:	4680      	mov	r8, r0
 80059fe:	e648      	b.n	8005692 <_printf_float+0x112>

08005a00 <_printf_common>:
 8005a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	4691      	mov	r9, r2
 8005a06:	461f      	mov	r7, r3
 8005a08:	688a      	ldr	r2, [r1, #8]
 8005a0a:	690b      	ldr	r3, [r1, #16]
 8005a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	bfb8      	it	lt
 8005a14:	4613      	movlt	r3, r2
 8005a16:	f8c9 3000 	str.w	r3, [r9]
 8005a1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a1e:	4606      	mov	r6, r0
 8005a20:	460c      	mov	r4, r1
 8005a22:	b112      	cbz	r2, 8005a2a <_printf_common+0x2a>
 8005a24:	3301      	adds	r3, #1
 8005a26:	f8c9 3000 	str.w	r3, [r9]
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	0699      	lsls	r1, r3, #26
 8005a2e:	bf42      	ittt	mi
 8005a30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005a34:	3302      	addmi	r3, #2
 8005a36:	f8c9 3000 	strmi.w	r3, [r9]
 8005a3a:	6825      	ldr	r5, [r4, #0]
 8005a3c:	f015 0506 	ands.w	r5, r5, #6
 8005a40:	d107      	bne.n	8005a52 <_printf_common+0x52>
 8005a42:	f104 0a19 	add.w	sl, r4, #25
 8005a46:	68e3      	ldr	r3, [r4, #12]
 8005a48:	f8d9 2000 	ldr.w	r2, [r9]
 8005a4c:	1a9b      	subs	r3, r3, r2
 8005a4e:	42ab      	cmp	r3, r5
 8005a50:	dc28      	bgt.n	8005aa4 <_printf_common+0xa4>
 8005a52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005a56:	6822      	ldr	r2, [r4, #0]
 8005a58:	3300      	adds	r3, #0
 8005a5a:	bf18      	it	ne
 8005a5c:	2301      	movne	r3, #1
 8005a5e:	0692      	lsls	r2, r2, #26
 8005a60:	d42d      	bmi.n	8005abe <_printf_common+0xbe>
 8005a62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a66:	4639      	mov	r1, r7
 8005a68:	4630      	mov	r0, r6
 8005a6a:	47c0      	blx	r8
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d020      	beq.n	8005ab2 <_printf_common+0xb2>
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	68e5      	ldr	r5, [r4, #12]
 8005a74:	f8d9 2000 	ldr.w	r2, [r9]
 8005a78:	f003 0306 	and.w	r3, r3, #6
 8005a7c:	2b04      	cmp	r3, #4
 8005a7e:	bf08      	it	eq
 8005a80:	1aad      	subeq	r5, r5, r2
 8005a82:	68a3      	ldr	r3, [r4, #8]
 8005a84:	6922      	ldr	r2, [r4, #16]
 8005a86:	bf0c      	ite	eq
 8005a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a8c:	2500      	movne	r5, #0
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	bfc4      	itt	gt
 8005a92:	1a9b      	subgt	r3, r3, r2
 8005a94:	18ed      	addgt	r5, r5, r3
 8005a96:	f04f 0900 	mov.w	r9, #0
 8005a9a:	341a      	adds	r4, #26
 8005a9c:	454d      	cmp	r5, r9
 8005a9e:	d11a      	bne.n	8005ad6 <_printf_common+0xd6>
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	e008      	b.n	8005ab6 <_printf_common+0xb6>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	4652      	mov	r2, sl
 8005aa8:	4639      	mov	r1, r7
 8005aaa:	4630      	mov	r0, r6
 8005aac:	47c0      	blx	r8
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d103      	bne.n	8005aba <_printf_common+0xba>
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aba:	3501      	adds	r5, #1
 8005abc:	e7c3      	b.n	8005a46 <_printf_common+0x46>
 8005abe:	18e1      	adds	r1, r4, r3
 8005ac0:	1c5a      	adds	r2, r3, #1
 8005ac2:	2030      	movs	r0, #48	; 0x30
 8005ac4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005ac8:	4422      	add	r2, r4
 8005aca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ace:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ad2:	3302      	adds	r3, #2
 8005ad4:	e7c5      	b.n	8005a62 <_printf_common+0x62>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	4622      	mov	r2, r4
 8005ada:	4639      	mov	r1, r7
 8005adc:	4630      	mov	r0, r6
 8005ade:	47c0      	blx	r8
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d0e6      	beq.n	8005ab2 <_printf_common+0xb2>
 8005ae4:	f109 0901 	add.w	r9, r9, #1
 8005ae8:	e7d8      	b.n	8005a9c <_printf_common+0x9c>
	...

08005aec <_printf_i>:
 8005aec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005af0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005af4:	460c      	mov	r4, r1
 8005af6:	7e09      	ldrb	r1, [r1, #24]
 8005af8:	b085      	sub	sp, #20
 8005afa:	296e      	cmp	r1, #110	; 0x6e
 8005afc:	4617      	mov	r7, r2
 8005afe:	4606      	mov	r6, r0
 8005b00:	4698      	mov	r8, r3
 8005b02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b04:	f000 80b3 	beq.w	8005c6e <_printf_i+0x182>
 8005b08:	d822      	bhi.n	8005b50 <_printf_i+0x64>
 8005b0a:	2963      	cmp	r1, #99	; 0x63
 8005b0c:	d036      	beq.n	8005b7c <_printf_i+0x90>
 8005b0e:	d80a      	bhi.n	8005b26 <_printf_i+0x3a>
 8005b10:	2900      	cmp	r1, #0
 8005b12:	f000 80b9 	beq.w	8005c88 <_printf_i+0x19c>
 8005b16:	2958      	cmp	r1, #88	; 0x58
 8005b18:	f000 8083 	beq.w	8005c22 <_printf_i+0x136>
 8005b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005b24:	e032      	b.n	8005b8c <_printf_i+0xa0>
 8005b26:	2964      	cmp	r1, #100	; 0x64
 8005b28:	d001      	beq.n	8005b2e <_printf_i+0x42>
 8005b2a:	2969      	cmp	r1, #105	; 0x69
 8005b2c:	d1f6      	bne.n	8005b1c <_printf_i+0x30>
 8005b2e:	6820      	ldr	r0, [r4, #0]
 8005b30:	6813      	ldr	r3, [r2, #0]
 8005b32:	0605      	lsls	r5, r0, #24
 8005b34:	f103 0104 	add.w	r1, r3, #4
 8005b38:	d52a      	bpl.n	8005b90 <_printf_i+0xa4>
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6011      	str	r1, [r2, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da03      	bge.n	8005b4a <_printf_i+0x5e>
 8005b42:	222d      	movs	r2, #45	; 0x2d
 8005b44:	425b      	negs	r3, r3
 8005b46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005b4a:	486f      	ldr	r0, [pc, #444]	; (8005d08 <_printf_i+0x21c>)
 8005b4c:	220a      	movs	r2, #10
 8005b4e:	e039      	b.n	8005bc4 <_printf_i+0xd8>
 8005b50:	2973      	cmp	r1, #115	; 0x73
 8005b52:	f000 809d 	beq.w	8005c90 <_printf_i+0x1a4>
 8005b56:	d808      	bhi.n	8005b6a <_printf_i+0x7e>
 8005b58:	296f      	cmp	r1, #111	; 0x6f
 8005b5a:	d020      	beq.n	8005b9e <_printf_i+0xb2>
 8005b5c:	2970      	cmp	r1, #112	; 0x70
 8005b5e:	d1dd      	bne.n	8005b1c <_printf_i+0x30>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	f043 0320 	orr.w	r3, r3, #32
 8005b66:	6023      	str	r3, [r4, #0]
 8005b68:	e003      	b.n	8005b72 <_printf_i+0x86>
 8005b6a:	2975      	cmp	r1, #117	; 0x75
 8005b6c:	d017      	beq.n	8005b9e <_printf_i+0xb2>
 8005b6e:	2978      	cmp	r1, #120	; 0x78
 8005b70:	d1d4      	bne.n	8005b1c <_printf_i+0x30>
 8005b72:	2378      	movs	r3, #120	; 0x78
 8005b74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b78:	4864      	ldr	r0, [pc, #400]	; (8005d0c <_printf_i+0x220>)
 8005b7a:	e055      	b.n	8005c28 <_printf_i+0x13c>
 8005b7c:	6813      	ldr	r3, [r2, #0]
 8005b7e:	1d19      	adds	r1, r3, #4
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6011      	str	r1, [r2, #0]
 8005b84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e08c      	b.n	8005caa <_printf_i+0x1be>
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	6011      	str	r1, [r2, #0]
 8005b94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005b98:	bf18      	it	ne
 8005b9a:	b21b      	sxthne	r3, r3
 8005b9c:	e7cf      	b.n	8005b3e <_printf_i+0x52>
 8005b9e:	6813      	ldr	r3, [r2, #0]
 8005ba0:	6825      	ldr	r5, [r4, #0]
 8005ba2:	1d18      	adds	r0, r3, #4
 8005ba4:	6010      	str	r0, [r2, #0]
 8005ba6:	0628      	lsls	r0, r5, #24
 8005ba8:	d501      	bpl.n	8005bae <_printf_i+0xc2>
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	e002      	b.n	8005bb4 <_printf_i+0xc8>
 8005bae:	0668      	lsls	r0, r5, #25
 8005bb0:	d5fb      	bpl.n	8005baa <_printf_i+0xbe>
 8005bb2:	881b      	ldrh	r3, [r3, #0]
 8005bb4:	4854      	ldr	r0, [pc, #336]	; (8005d08 <_printf_i+0x21c>)
 8005bb6:	296f      	cmp	r1, #111	; 0x6f
 8005bb8:	bf14      	ite	ne
 8005bba:	220a      	movne	r2, #10
 8005bbc:	2208      	moveq	r2, #8
 8005bbe:	2100      	movs	r1, #0
 8005bc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bc4:	6865      	ldr	r5, [r4, #4]
 8005bc6:	60a5      	str	r5, [r4, #8]
 8005bc8:	2d00      	cmp	r5, #0
 8005bca:	f2c0 8095 	blt.w	8005cf8 <_printf_i+0x20c>
 8005bce:	6821      	ldr	r1, [r4, #0]
 8005bd0:	f021 0104 	bic.w	r1, r1, #4
 8005bd4:	6021      	str	r1, [r4, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d13d      	bne.n	8005c56 <_printf_i+0x16a>
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	f040 808e 	bne.w	8005cfc <_printf_i+0x210>
 8005be0:	4665      	mov	r5, ip
 8005be2:	2a08      	cmp	r2, #8
 8005be4:	d10b      	bne.n	8005bfe <_printf_i+0x112>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	07db      	lsls	r3, r3, #31
 8005bea:	d508      	bpl.n	8005bfe <_printf_i+0x112>
 8005bec:	6923      	ldr	r3, [r4, #16]
 8005bee:	6862      	ldr	r2, [r4, #4]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	bfde      	ittt	le
 8005bf4:	2330      	movle	r3, #48	; 0x30
 8005bf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005bfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005bfe:	ebac 0305 	sub.w	r3, ip, r5
 8005c02:	6123      	str	r3, [r4, #16]
 8005c04:	f8cd 8000 	str.w	r8, [sp]
 8005c08:	463b      	mov	r3, r7
 8005c0a:	aa03      	add	r2, sp, #12
 8005c0c:	4621      	mov	r1, r4
 8005c0e:	4630      	mov	r0, r6
 8005c10:	f7ff fef6 	bl	8005a00 <_printf_common>
 8005c14:	3001      	adds	r0, #1
 8005c16:	d14d      	bne.n	8005cb4 <_printf_i+0x1c8>
 8005c18:	f04f 30ff 	mov.w	r0, #4294967295
 8005c1c:	b005      	add	sp, #20
 8005c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c22:	4839      	ldr	r0, [pc, #228]	; (8005d08 <_printf_i+0x21c>)
 8005c24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005c28:	6813      	ldr	r3, [r2, #0]
 8005c2a:	6821      	ldr	r1, [r4, #0]
 8005c2c:	1d1d      	adds	r5, r3, #4
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6015      	str	r5, [r2, #0]
 8005c32:	060a      	lsls	r2, r1, #24
 8005c34:	d50b      	bpl.n	8005c4e <_printf_i+0x162>
 8005c36:	07ca      	lsls	r2, r1, #31
 8005c38:	bf44      	itt	mi
 8005c3a:	f041 0120 	orrmi.w	r1, r1, #32
 8005c3e:	6021      	strmi	r1, [r4, #0]
 8005c40:	b91b      	cbnz	r3, 8005c4a <_printf_i+0x15e>
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	f022 0220 	bic.w	r2, r2, #32
 8005c48:	6022      	str	r2, [r4, #0]
 8005c4a:	2210      	movs	r2, #16
 8005c4c:	e7b7      	b.n	8005bbe <_printf_i+0xd2>
 8005c4e:	064d      	lsls	r5, r1, #25
 8005c50:	bf48      	it	mi
 8005c52:	b29b      	uxthmi	r3, r3
 8005c54:	e7ef      	b.n	8005c36 <_printf_i+0x14a>
 8005c56:	4665      	mov	r5, ip
 8005c58:	fbb3 f1f2 	udiv	r1, r3, r2
 8005c5c:	fb02 3311 	mls	r3, r2, r1, r3
 8005c60:	5cc3      	ldrb	r3, [r0, r3]
 8005c62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005c66:	460b      	mov	r3, r1
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	d1f5      	bne.n	8005c58 <_printf_i+0x16c>
 8005c6c:	e7b9      	b.n	8005be2 <_printf_i+0xf6>
 8005c6e:	6813      	ldr	r3, [r2, #0]
 8005c70:	6825      	ldr	r5, [r4, #0]
 8005c72:	6961      	ldr	r1, [r4, #20]
 8005c74:	1d18      	adds	r0, r3, #4
 8005c76:	6010      	str	r0, [r2, #0]
 8005c78:	0628      	lsls	r0, r5, #24
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	d501      	bpl.n	8005c82 <_printf_i+0x196>
 8005c7e:	6019      	str	r1, [r3, #0]
 8005c80:	e002      	b.n	8005c88 <_printf_i+0x19c>
 8005c82:	066a      	lsls	r2, r5, #25
 8005c84:	d5fb      	bpl.n	8005c7e <_printf_i+0x192>
 8005c86:	8019      	strh	r1, [r3, #0]
 8005c88:	2300      	movs	r3, #0
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	4665      	mov	r5, ip
 8005c8e:	e7b9      	b.n	8005c04 <_printf_i+0x118>
 8005c90:	6813      	ldr	r3, [r2, #0]
 8005c92:	1d19      	adds	r1, r3, #4
 8005c94:	6011      	str	r1, [r2, #0]
 8005c96:	681d      	ldr	r5, [r3, #0]
 8005c98:	6862      	ldr	r2, [r4, #4]
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	f7fa faa7 	bl	80001f0 <memchr>
 8005ca2:	b108      	cbz	r0, 8005ca8 <_printf_i+0x1bc>
 8005ca4:	1b40      	subs	r0, r0, r5
 8005ca6:	6060      	str	r0, [r4, #4]
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	6123      	str	r3, [r4, #16]
 8005cac:	2300      	movs	r3, #0
 8005cae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cb2:	e7a7      	b.n	8005c04 <_printf_i+0x118>
 8005cb4:	6923      	ldr	r3, [r4, #16]
 8005cb6:	462a      	mov	r2, r5
 8005cb8:	4639      	mov	r1, r7
 8005cba:	4630      	mov	r0, r6
 8005cbc:	47c0      	blx	r8
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d0aa      	beq.n	8005c18 <_printf_i+0x12c>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	079b      	lsls	r3, r3, #30
 8005cc6:	d413      	bmi.n	8005cf0 <_printf_i+0x204>
 8005cc8:	68e0      	ldr	r0, [r4, #12]
 8005cca:	9b03      	ldr	r3, [sp, #12]
 8005ccc:	4298      	cmp	r0, r3
 8005cce:	bfb8      	it	lt
 8005cd0:	4618      	movlt	r0, r3
 8005cd2:	e7a3      	b.n	8005c1c <_printf_i+0x130>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	464a      	mov	r2, r9
 8005cd8:	4639      	mov	r1, r7
 8005cda:	4630      	mov	r0, r6
 8005cdc:	47c0      	blx	r8
 8005cde:	3001      	adds	r0, #1
 8005ce0:	d09a      	beq.n	8005c18 <_printf_i+0x12c>
 8005ce2:	3501      	adds	r5, #1
 8005ce4:	68e3      	ldr	r3, [r4, #12]
 8005ce6:	9a03      	ldr	r2, [sp, #12]
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	42ab      	cmp	r3, r5
 8005cec:	dcf2      	bgt.n	8005cd4 <_printf_i+0x1e8>
 8005cee:	e7eb      	b.n	8005cc8 <_printf_i+0x1dc>
 8005cf0:	2500      	movs	r5, #0
 8005cf2:	f104 0919 	add.w	r9, r4, #25
 8005cf6:	e7f5      	b.n	8005ce4 <_printf_i+0x1f8>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1ac      	bne.n	8005c56 <_printf_i+0x16a>
 8005cfc:	7803      	ldrb	r3, [r0, #0]
 8005cfe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d06:	e76c      	b.n	8005be2 <_printf_i+0xf6>
 8005d08:	08008172 	.word	0x08008172
 8005d0c:	08008183 	.word	0x08008183

08005d10 <iprintf>:
 8005d10:	b40f      	push	{r0, r1, r2, r3}
 8005d12:	4b0a      	ldr	r3, [pc, #40]	; (8005d3c <iprintf+0x2c>)
 8005d14:	b513      	push	{r0, r1, r4, lr}
 8005d16:	681c      	ldr	r4, [r3, #0]
 8005d18:	b124      	cbz	r4, 8005d24 <iprintf+0x14>
 8005d1a:	69a3      	ldr	r3, [r4, #24]
 8005d1c:	b913      	cbnz	r3, 8005d24 <iprintf+0x14>
 8005d1e:	4620      	mov	r0, r4
 8005d20:	f001 f8b2 	bl	8006e88 <__sinit>
 8005d24:	ab05      	add	r3, sp, #20
 8005d26:	9a04      	ldr	r2, [sp, #16]
 8005d28:	68a1      	ldr	r1, [r4, #8]
 8005d2a:	9301      	str	r3, [sp, #4]
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f001 febd 	bl	8007aac <_vfiprintf_r>
 8005d32:	b002      	add	sp, #8
 8005d34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d38:	b004      	add	sp, #16
 8005d3a:	4770      	bx	lr
 8005d3c:	20000020 	.word	0x20000020

08005d40 <_puts_r>:
 8005d40:	b570      	push	{r4, r5, r6, lr}
 8005d42:	460e      	mov	r6, r1
 8005d44:	4605      	mov	r5, r0
 8005d46:	b118      	cbz	r0, 8005d50 <_puts_r+0x10>
 8005d48:	6983      	ldr	r3, [r0, #24]
 8005d4a:	b90b      	cbnz	r3, 8005d50 <_puts_r+0x10>
 8005d4c:	f001 f89c 	bl	8006e88 <__sinit>
 8005d50:	69ab      	ldr	r3, [r5, #24]
 8005d52:	68ac      	ldr	r4, [r5, #8]
 8005d54:	b913      	cbnz	r3, 8005d5c <_puts_r+0x1c>
 8005d56:	4628      	mov	r0, r5
 8005d58:	f001 f896 	bl	8006e88 <__sinit>
 8005d5c:	4b23      	ldr	r3, [pc, #140]	; (8005dec <_puts_r+0xac>)
 8005d5e:	429c      	cmp	r4, r3
 8005d60:	d117      	bne.n	8005d92 <_puts_r+0x52>
 8005d62:	686c      	ldr	r4, [r5, #4]
 8005d64:	89a3      	ldrh	r3, [r4, #12]
 8005d66:	071b      	lsls	r3, r3, #28
 8005d68:	d51d      	bpl.n	8005da6 <_puts_r+0x66>
 8005d6a:	6923      	ldr	r3, [r4, #16]
 8005d6c:	b1db      	cbz	r3, 8005da6 <_puts_r+0x66>
 8005d6e:	3e01      	subs	r6, #1
 8005d70:	68a3      	ldr	r3, [r4, #8]
 8005d72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d76:	3b01      	subs	r3, #1
 8005d78:	60a3      	str	r3, [r4, #8]
 8005d7a:	b9e9      	cbnz	r1, 8005db8 <_puts_r+0x78>
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	da2e      	bge.n	8005dde <_puts_r+0x9e>
 8005d80:	4622      	mov	r2, r4
 8005d82:	210a      	movs	r1, #10
 8005d84:	4628      	mov	r0, r5
 8005d86:	f000 f889 	bl	8005e9c <__swbuf_r>
 8005d8a:	3001      	adds	r0, #1
 8005d8c:	d011      	beq.n	8005db2 <_puts_r+0x72>
 8005d8e:	200a      	movs	r0, #10
 8005d90:	e011      	b.n	8005db6 <_puts_r+0x76>
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <_puts_r+0xb0>)
 8005d94:	429c      	cmp	r4, r3
 8005d96:	d101      	bne.n	8005d9c <_puts_r+0x5c>
 8005d98:	68ac      	ldr	r4, [r5, #8]
 8005d9a:	e7e3      	b.n	8005d64 <_puts_r+0x24>
 8005d9c:	4b15      	ldr	r3, [pc, #84]	; (8005df4 <_puts_r+0xb4>)
 8005d9e:	429c      	cmp	r4, r3
 8005da0:	bf08      	it	eq
 8005da2:	68ec      	ldreq	r4, [r5, #12]
 8005da4:	e7de      	b.n	8005d64 <_puts_r+0x24>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4628      	mov	r0, r5
 8005daa:	f000 f8c9 	bl	8005f40 <__swsetup_r>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d0dd      	beq.n	8005d6e <_puts_r+0x2e>
 8005db2:	f04f 30ff 	mov.w	r0, #4294967295
 8005db6:	bd70      	pop	{r4, r5, r6, pc}
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	da04      	bge.n	8005dc6 <_puts_r+0x86>
 8005dbc:	69a2      	ldr	r2, [r4, #24]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	dc06      	bgt.n	8005dd0 <_puts_r+0x90>
 8005dc2:	290a      	cmp	r1, #10
 8005dc4:	d004      	beq.n	8005dd0 <_puts_r+0x90>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	7019      	strb	r1, [r3, #0]
 8005dce:	e7cf      	b.n	8005d70 <_puts_r+0x30>
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f000 f862 	bl	8005e9c <__swbuf_r>
 8005dd8:	3001      	adds	r0, #1
 8005dda:	d1c9      	bne.n	8005d70 <_puts_r+0x30>
 8005ddc:	e7e9      	b.n	8005db2 <_puts_r+0x72>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	200a      	movs	r0, #10
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	6022      	str	r2, [r4, #0]
 8005de6:	7018      	strb	r0, [r3, #0]
 8005de8:	e7e5      	b.n	8005db6 <_puts_r+0x76>
 8005dea:	bf00      	nop
 8005dec:	080081c4 	.word	0x080081c4
 8005df0:	080081e4 	.word	0x080081e4
 8005df4:	080081a4 	.word	0x080081a4

08005df8 <puts>:
 8005df8:	4b02      	ldr	r3, [pc, #8]	; (8005e04 <puts+0xc>)
 8005dfa:	4601      	mov	r1, r0
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	f7ff bf9f 	b.w	8005d40 <_puts_r>
 8005e02:	bf00      	nop
 8005e04:	20000020 	.word	0x20000020

08005e08 <siprintf>:
 8005e08:	b40e      	push	{r1, r2, r3}
 8005e0a:	b500      	push	{lr}
 8005e0c:	b09c      	sub	sp, #112	; 0x70
 8005e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8005e10:	9002      	str	r0, [sp, #8]
 8005e12:	9006      	str	r0, [sp, #24]
 8005e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e18:	4809      	ldr	r0, [pc, #36]	; (8005e40 <siprintf+0x38>)
 8005e1a:	9107      	str	r1, [sp, #28]
 8005e1c:	9104      	str	r1, [sp, #16]
 8005e1e:	4909      	ldr	r1, [pc, #36]	; (8005e44 <siprintf+0x3c>)
 8005e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e24:	9105      	str	r1, [sp, #20]
 8005e26:	6800      	ldr	r0, [r0, #0]
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	a902      	add	r1, sp, #8
 8005e2c:	f001 fd1c 	bl	8007868 <_svfiprintf_r>
 8005e30:	9b02      	ldr	r3, [sp, #8]
 8005e32:	2200      	movs	r2, #0
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	b01c      	add	sp, #112	; 0x70
 8005e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e3c:	b003      	add	sp, #12
 8005e3e:	4770      	bx	lr
 8005e40:	20000020 	.word	0x20000020
 8005e44:	ffff0208 	.word	0xffff0208

08005e48 <strcat>:
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	781a      	ldrb	r2, [r3, #0]
 8005e4e:	1c5c      	adds	r4, r3, #1
 8005e50:	b93a      	cbnz	r2, 8005e62 <strcat+0x1a>
 8005e52:	3b01      	subs	r3, #1
 8005e54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e5c:	2a00      	cmp	r2, #0
 8005e5e:	d1f9      	bne.n	8005e54 <strcat+0xc>
 8005e60:	bd10      	pop	{r4, pc}
 8005e62:	4623      	mov	r3, r4
 8005e64:	e7f2      	b.n	8005e4c <strcat+0x4>

08005e66 <strstr>:
 8005e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e68:	7803      	ldrb	r3, [r0, #0]
 8005e6a:	b17b      	cbz	r3, 8005e8c <strstr+0x26>
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	7823      	ldrb	r3, [r4, #0]
 8005e70:	4620      	mov	r0, r4
 8005e72:	1c66      	adds	r6, r4, #1
 8005e74:	b17b      	cbz	r3, 8005e96 <strstr+0x30>
 8005e76:	1e4a      	subs	r2, r1, #1
 8005e78:	1e63      	subs	r3, r4, #1
 8005e7a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8005e7e:	b14d      	cbz	r5, 8005e94 <strstr+0x2e>
 8005e80:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005e84:	42af      	cmp	r7, r5
 8005e86:	4634      	mov	r4, r6
 8005e88:	d0f7      	beq.n	8005e7a <strstr+0x14>
 8005e8a:	e7f0      	b.n	8005e6e <strstr+0x8>
 8005e8c:	780b      	ldrb	r3, [r1, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	bf18      	it	ne
 8005e92:	2000      	movne	r0, #0
 8005e94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e96:	4618      	mov	r0, r3
 8005e98:	e7fc      	b.n	8005e94 <strstr+0x2e>
	...

08005e9c <__swbuf_r>:
 8005e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9e:	460e      	mov	r6, r1
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	b118      	cbz	r0, 8005eae <__swbuf_r+0x12>
 8005ea6:	6983      	ldr	r3, [r0, #24]
 8005ea8:	b90b      	cbnz	r3, 8005eae <__swbuf_r+0x12>
 8005eaa:	f000 ffed 	bl	8006e88 <__sinit>
 8005eae:	4b21      	ldr	r3, [pc, #132]	; (8005f34 <__swbuf_r+0x98>)
 8005eb0:	429c      	cmp	r4, r3
 8005eb2:	d12a      	bne.n	8005f0a <__swbuf_r+0x6e>
 8005eb4:	686c      	ldr	r4, [r5, #4]
 8005eb6:	69a3      	ldr	r3, [r4, #24]
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	89a3      	ldrh	r3, [r4, #12]
 8005ebc:	071a      	lsls	r2, r3, #28
 8005ebe:	d52e      	bpl.n	8005f1e <__swbuf_r+0x82>
 8005ec0:	6923      	ldr	r3, [r4, #16]
 8005ec2:	b363      	cbz	r3, 8005f1e <__swbuf_r+0x82>
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	6820      	ldr	r0, [r4, #0]
 8005ec8:	1ac0      	subs	r0, r0, r3
 8005eca:	6963      	ldr	r3, [r4, #20]
 8005ecc:	b2f6      	uxtb	r6, r6
 8005ece:	4283      	cmp	r3, r0
 8005ed0:	4637      	mov	r7, r6
 8005ed2:	dc04      	bgt.n	8005ede <__swbuf_r+0x42>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 ff6c 	bl	8006db4 <_fflush_r>
 8005edc:	bb28      	cbnz	r0, 8005f2a <__swbuf_r+0x8e>
 8005ede:	68a3      	ldr	r3, [r4, #8]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	60a3      	str	r3, [r4, #8]
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	6022      	str	r2, [r4, #0]
 8005eea:	701e      	strb	r6, [r3, #0]
 8005eec:	6963      	ldr	r3, [r4, #20]
 8005eee:	3001      	adds	r0, #1
 8005ef0:	4283      	cmp	r3, r0
 8005ef2:	d004      	beq.n	8005efe <__swbuf_r+0x62>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	07db      	lsls	r3, r3, #31
 8005ef8:	d519      	bpl.n	8005f2e <__swbuf_r+0x92>
 8005efa:	2e0a      	cmp	r6, #10
 8005efc:	d117      	bne.n	8005f2e <__swbuf_r+0x92>
 8005efe:	4621      	mov	r1, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	f000 ff57 	bl	8006db4 <_fflush_r>
 8005f06:	b190      	cbz	r0, 8005f2e <__swbuf_r+0x92>
 8005f08:	e00f      	b.n	8005f2a <__swbuf_r+0x8e>
 8005f0a:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <__swbuf_r+0x9c>)
 8005f0c:	429c      	cmp	r4, r3
 8005f0e:	d101      	bne.n	8005f14 <__swbuf_r+0x78>
 8005f10:	68ac      	ldr	r4, [r5, #8]
 8005f12:	e7d0      	b.n	8005eb6 <__swbuf_r+0x1a>
 8005f14:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <__swbuf_r+0xa0>)
 8005f16:	429c      	cmp	r4, r3
 8005f18:	bf08      	it	eq
 8005f1a:	68ec      	ldreq	r4, [r5, #12]
 8005f1c:	e7cb      	b.n	8005eb6 <__swbuf_r+0x1a>
 8005f1e:	4621      	mov	r1, r4
 8005f20:	4628      	mov	r0, r5
 8005f22:	f000 f80d 	bl	8005f40 <__swsetup_r>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d0cc      	beq.n	8005ec4 <__swbuf_r+0x28>
 8005f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8005f2e:	4638      	mov	r0, r7
 8005f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f32:	bf00      	nop
 8005f34:	080081c4 	.word	0x080081c4
 8005f38:	080081e4 	.word	0x080081e4
 8005f3c:	080081a4 	.word	0x080081a4

08005f40 <__swsetup_r>:
 8005f40:	4b32      	ldr	r3, [pc, #200]	; (800600c <__swsetup_r+0xcc>)
 8005f42:	b570      	push	{r4, r5, r6, lr}
 8005f44:	681d      	ldr	r5, [r3, #0]
 8005f46:	4606      	mov	r6, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	b125      	cbz	r5, 8005f56 <__swsetup_r+0x16>
 8005f4c:	69ab      	ldr	r3, [r5, #24]
 8005f4e:	b913      	cbnz	r3, 8005f56 <__swsetup_r+0x16>
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 ff99 	bl	8006e88 <__sinit>
 8005f56:	4b2e      	ldr	r3, [pc, #184]	; (8006010 <__swsetup_r+0xd0>)
 8005f58:	429c      	cmp	r4, r3
 8005f5a:	d10f      	bne.n	8005f7c <__swsetup_r+0x3c>
 8005f5c:	686c      	ldr	r4, [r5, #4]
 8005f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	0715      	lsls	r5, r2, #28
 8005f66:	d42c      	bmi.n	8005fc2 <__swsetup_r+0x82>
 8005f68:	06d0      	lsls	r0, r2, #27
 8005f6a:	d411      	bmi.n	8005f90 <__swsetup_r+0x50>
 8005f6c:	2209      	movs	r2, #9
 8005f6e:	6032      	str	r2, [r6, #0]
 8005f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f74:	81a3      	strh	r3, [r4, #12]
 8005f76:	f04f 30ff 	mov.w	r0, #4294967295
 8005f7a:	e03e      	b.n	8005ffa <__swsetup_r+0xba>
 8005f7c:	4b25      	ldr	r3, [pc, #148]	; (8006014 <__swsetup_r+0xd4>)
 8005f7e:	429c      	cmp	r4, r3
 8005f80:	d101      	bne.n	8005f86 <__swsetup_r+0x46>
 8005f82:	68ac      	ldr	r4, [r5, #8]
 8005f84:	e7eb      	b.n	8005f5e <__swsetup_r+0x1e>
 8005f86:	4b24      	ldr	r3, [pc, #144]	; (8006018 <__swsetup_r+0xd8>)
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	bf08      	it	eq
 8005f8c:	68ec      	ldreq	r4, [r5, #12]
 8005f8e:	e7e6      	b.n	8005f5e <__swsetup_r+0x1e>
 8005f90:	0751      	lsls	r1, r2, #29
 8005f92:	d512      	bpl.n	8005fba <__swsetup_r+0x7a>
 8005f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f96:	b141      	cbz	r1, 8005faa <__swsetup_r+0x6a>
 8005f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f9c:	4299      	cmp	r1, r3
 8005f9e:	d002      	beq.n	8005fa6 <__swsetup_r+0x66>
 8005fa0:	4630      	mov	r0, r6
 8005fa2:	f001 fb5f 	bl	8007664 <_free_r>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8005faa:	89a3      	ldrh	r3, [r4, #12]
 8005fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fb0:	81a3      	strh	r3, [r4, #12]
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6063      	str	r3, [r4, #4]
 8005fb6:	6923      	ldr	r3, [r4, #16]
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	f043 0308 	orr.w	r3, r3, #8
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	b94b      	cbnz	r3, 8005fda <__swsetup_r+0x9a>
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd0:	d003      	beq.n	8005fda <__swsetup_r+0x9a>
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f001 f813 	bl	8007000 <__smakebuf_r>
 8005fda:	89a2      	ldrh	r2, [r4, #12]
 8005fdc:	f012 0301 	ands.w	r3, r2, #1
 8005fe0:	d00c      	beq.n	8005ffc <__swsetup_r+0xbc>
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	60a3      	str	r3, [r4, #8]
 8005fe6:	6963      	ldr	r3, [r4, #20]
 8005fe8:	425b      	negs	r3, r3
 8005fea:	61a3      	str	r3, [r4, #24]
 8005fec:	6923      	ldr	r3, [r4, #16]
 8005fee:	b953      	cbnz	r3, 8006006 <__swsetup_r+0xc6>
 8005ff0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ff4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ff8:	d1ba      	bne.n	8005f70 <__swsetup_r+0x30>
 8005ffa:	bd70      	pop	{r4, r5, r6, pc}
 8005ffc:	0792      	lsls	r2, r2, #30
 8005ffe:	bf58      	it	pl
 8006000:	6963      	ldrpl	r3, [r4, #20]
 8006002:	60a3      	str	r3, [r4, #8]
 8006004:	e7f2      	b.n	8005fec <__swsetup_r+0xac>
 8006006:	2000      	movs	r0, #0
 8006008:	e7f7      	b.n	8005ffa <__swsetup_r+0xba>
 800600a:	bf00      	nop
 800600c:	20000020 	.word	0x20000020
 8006010:	080081c4 	.word	0x080081c4
 8006014:	080081e4 	.word	0x080081e4
 8006018:	080081a4 	.word	0x080081a4

0800601c <quorem>:
 800601c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006020:	6903      	ldr	r3, [r0, #16]
 8006022:	690c      	ldr	r4, [r1, #16]
 8006024:	42a3      	cmp	r3, r4
 8006026:	4680      	mov	r8, r0
 8006028:	f2c0 8082 	blt.w	8006130 <quorem+0x114>
 800602c:	3c01      	subs	r4, #1
 800602e:	f101 0714 	add.w	r7, r1, #20
 8006032:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006036:	f100 0614 	add.w	r6, r0, #20
 800603a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800603e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006042:	eb06 030c 	add.w	r3, r6, ip
 8006046:	3501      	adds	r5, #1
 8006048:	eb07 090c 	add.w	r9, r7, ip
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	fbb0 f5f5 	udiv	r5, r0, r5
 8006052:	b395      	cbz	r5, 80060ba <quorem+0x9e>
 8006054:	f04f 0a00 	mov.w	sl, #0
 8006058:	4638      	mov	r0, r7
 800605a:	46b6      	mov	lr, r6
 800605c:	46d3      	mov	fp, sl
 800605e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006062:	b293      	uxth	r3, r2
 8006064:	fb05 a303 	mla	r3, r5, r3, sl
 8006068:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800606c:	b29b      	uxth	r3, r3
 800606e:	ebab 0303 	sub.w	r3, fp, r3
 8006072:	0c12      	lsrs	r2, r2, #16
 8006074:	f8de b000 	ldr.w	fp, [lr]
 8006078:	fb05 a202 	mla	r2, r5, r2, sl
 800607c:	fa13 f38b 	uxtah	r3, r3, fp
 8006080:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006084:	fa1f fb82 	uxth.w	fp, r2
 8006088:	f8de 2000 	ldr.w	r2, [lr]
 800608c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006090:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006094:	b29b      	uxth	r3, r3
 8006096:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800609a:	4581      	cmp	r9, r0
 800609c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80060a0:	f84e 3b04 	str.w	r3, [lr], #4
 80060a4:	d2db      	bcs.n	800605e <quorem+0x42>
 80060a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80060aa:	b933      	cbnz	r3, 80060ba <quorem+0x9e>
 80060ac:	9b01      	ldr	r3, [sp, #4]
 80060ae:	3b04      	subs	r3, #4
 80060b0:	429e      	cmp	r6, r3
 80060b2:	461a      	mov	r2, r3
 80060b4:	d330      	bcc.n	8006118 <quorem+0xfc>
 80060b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80060ba:	4640      	mov	r0, r8
 80060bc:	f001 f9fe 	bl	80074bc <__mcmp>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	db25      	blt.n	8006110 <quorem+0xf4>
 80060c4:	3501      	adds	r5, #1
 80060c6:	4630      	mov	r0, r6
 80060c8:	f04f 0c00 	mov.w	ip, #0
 80060cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80060d0:	f8d0 e000 	ldr.w	lr, [r0]
 80060d4:	b293      	uxth	r3, r2
 80060d6:	ebac 0303 	sub.w	r3, ip, r3
 80060da:	0c12      	lsrs	r2, r2, #16
 80060dc:	fa13 f38e 	uxtah	r3, r3, lr
 80060e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ee:	45b9      	cmp	r9, r7
 80060f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80060f4:	f840 3b04 	str.w	r3, [r0], #4
 80060f8:	d2e8      	bcs.n	80060cc <quorem+0xb0>
 80060fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80060fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006102:	b92a      	cbnz	r2, 8006110 <quorem+0xf4>
 8006104:	3b04      	subs	r3, #4
 8006106:	429e      	cmp	r6, r3
 8006108:	461a      	mov	r2, r3
 800610a:	d30b      	bcc.n	8006124 <quorem+0x108>
 800610c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006110:	4628      	mov	r0, r5
 8006112:	b003      	add	sp, #12
 8006114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006118:	6812      	ldr	r2, [r2, #0]
 800611a:	3b04      	subs	r3, #4
 800611c:	2a00      	cmp	r2, #0
 800611e:	d1ca      	bne.n	80060b6 <quorem+0x9a>
 8006120:	3c01      	subs	r4, #1
 8006122:	e7c5      	b.n	80060b0 <quorem+0x94>
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	3b04      	subs	r3, #4
 8006128:	2a00      	cmp	r2, #0
 800612a:	d1ef      	bne.n	800610c <quorem+0xf0>
 800612c:	3c01      	subs	r4, #1
 800612e:	e7ea      	b.n	8006106 <quorem+0xea>
 8006130:	2000      	movs	r0, #0
 8006132:	e7ee      	b.n	8006112 <quorem+0xf6>
 8006134:	0000      	movs	r0, r0
	...

08006138 <_dtoa_r>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	ec57 6b10 	vmov	r6, r7, d0
 8006140:	b097      	sub	sp, #92	; 0x5c
 8006142:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006144:	9106      	str	r1, [sp, #24]
 8006146:	4604      	mov	r4, r0
 8006148:	920b      	str	r2, [sp, #44]	; 0x2c
 800614a:	9312      	str	r3, [sp, #72]	; 0x48
 800614c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006150:	e9cd 6700 	strd	r6, r7, [sp]
 8006154:	b93d      	cbnz	r5, 8006166 <_dtoa_r+0x2e>
 8006156:	2010      	movs	r0, #16
 8006158:	f000 ff92 	bl	8007080 <malloc>
 800615c:	6260      	str	r0, [r4, #36]	; 0x24
 800615e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006162:	6005      	str	r5, [r0, #0]
 8006164:	60c5      	str	r5, [r0, #12]
 8006166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006168:	6819      	ldr	r1, [r3, #0]
 800616a:	b151      	cbz	r1, 8006182 <_dtoa_r+0x4a>
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	604a      	str	r2, [r1, #4]
 8006170:	2301      	movs	r3, #1
 8006172:	4093      	lsls	r3, r2
 8006174:	608b      	str	r3, [r1, #8]
 8006176:	4620      	mov	r0, r4
 8006178:	f000 ffbe 	bl	80070f8 <_Bfree>
 800617c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	1e3b      	subs	r3, r7, #0
 8006184:	bfbb      	ittet	lt
 8006186:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800618a:	9301      	strlt	r3, [sp, #4]
 800618c:	2300      	movge	r3, #0
 800618e:	2201      	movlt	r2, #1
 8006190:	bfac      	ite	ge
 8006192:	f8c8 3000 	strge.w	r3, [r8]
 8006196:	f8c8 2000 	strlt.w	r2, [r8]
 800619a:	4baf      	ldr	r3, [pc, #700]	; (8006458 <_dtoa_r+0x320>)
 800619c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80061a0:	ea33 0308 	bics.w	r3, r3, r8
 80061a4:	d114      	bne.n	80061d0 <_dtoa_r+0x98>
 80061a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	9b00      	ldr	r3, [sp, #0]
 80061b0:	b923      	cbnz	r3, 80061bc <_dtoa_r+0x84>
 80061b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80061b6:	2800      	cmp	r0, #0
 80061b8:	f000 8542 	beq.w	8006c40 <_dtoa_r+0xb08>
 80061bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800646c <_dtoa_r+0x334>
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8544 	beq.w	8006c50 <_dtoa_r+0xb18>
 80061c8:	f10b 0303 	add.w	r3, fp, #3
 80061cc:	f000 bd3e 	b.w	8006c4c <_dtoa_r+0xb14>
 80061d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80061d4:	2200      	movs	r2, #0
 80061d6:	2300      	movs	r3, #0
 80061d8:	4630      	mov	r0, r6
 80061da:	4639      	mov	r1, r7
 80061dc:	f7fa fc7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80061e0:	4681      	mov	r9, r0
 80061e2:	b168      	cbz	r0, 8006200 <_dtoa_r+0xc8>
 80061e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80061e6:	2301      	movs	r3, #1
 80061e8:	6013      	str	r3, [r2, #0]
 80061ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	f000 8524 	beq.w	8006c3a <_dtoa_r+0xb02>
 80061f2:	4b9a      	ldr	r3, [pc, #616]	; (800645c <_dtoa_r+0x324>)
 80061f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	f000 bd28 	b.w	8006c50 <_dtoa_r+0xb18>
 8006200:	aa14      	add	r2, sp, #80	; 0x50
 8006202:	a915      	add	r1, sp, #84	; 0x54
 8006204:	ec47 6b10 	vmov	d0, r6, r7
 8006208:	4620      	mov	r0, r4
 800620a:	f001 f9ce 	bl	80075aa <__d2b>
 800620e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006212:	9004      	str	r0, [sp, #16]
 8006214:	2d00      	cmp	r5, #0
 8006216:	d07c      	beq.n	8006312 <_dtoa_r+0x1da>
 8006218:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800621c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006220:	46b2      	mov	sl, r6
 8006222:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800622a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800622e:	2200      	movs	r2, #0
 8006230:	4b8b      	ldr	r3, [pc, #556]	; (8006460 <_dtoa_r+0x328>)
 8006232:	4650      	mov	r0, sl
 8006234:	4659      	mov	r1, fp
 8006236:	f7fa f82f 	bl	8000298 <__aeabi_dsub>
 800623a:	a381      	add	r3, pc, #516	; (adr r3, 8006440 <_dtoa_r+0x308>)
 800623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006240:	f7fa f9e2 	bl	8000608 <__aeabi_dmul>
 8006244:	a380      	add	r3, pc, #512	; (adr r3, 8006448 <_dtoa_r+0x310>)
 8006246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624a:	f7fa f827 	bl	800029c <__adddf3>
 800624e:	4606      	mov	r6, r0
 8006250:	4628      	mov	r0, r5
 8006252:	460f      	mov	r7, r1
 8006254:	f7fa f96e 	bl	8000534 <__aeabi_i2d>
 8006258:	a37d      	add	r3, pc, #500	; (adr r3, 8006450 <_dtoa_r+0x318>)
 800625a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625e:	f7fa f9d3 	bl	8000608 <__aeabi_dmul>
 8006262:	4602      	mov	r2, r0
 8006264:	460b      	mov	r3, r1
 8006266:	4630      	mov	r0, r6
 8006268:	4639      	mov	r1, r7
 800626a:	f7fa f817 	bl	800029c <__adddf3>
 800626e:	4606      	mov	r6, r0
 8006270:	460f      	mov	r7, r1
 8006272:	f7fa fc79 	bl	8000b68 <__aeabi_d2iz>
 8006276:	2200      	movs	r2, #0
 8006278:	4682      	mov	sl, r0
 800627a:	2300      	movs	r3, #0
 800627c:	4630      	mov	r0, r6
 800627e:	4639      	mov	r1, r7
 8006280:	f7fa fc34 	bl	8000aec <__aeabi_dcmplt>
 8006284:	b148      	cbz	r0, 800629a <_dtoa_r+0x162>
 8006286:	4650      	mov	r0, sl
 8006288:	f7fa f954 	bl	8000534 <__aeabi_i2d>
 800628c:	4632      	mov	r2, r6
 800628e:	463b      	mov	r3, r7
 8006290:	f7fa fc22 	bl	8000ad8 <__aeabi_dcmpeq>
 8006294:	b908      	cbnz	r0, 800629a <_dtoa_r+0x162>
 8006296:	f10a 3aff 	add.w	sl, sl, #4294967295
 800629a:	f1ba 0f16 	cmp.w	sl, #22
 800629e:	d859      	bhi.n	8006354 <_dtoa_r+0x21c>
 80062a0:	4970      	ldr	r1, [pc, #448]	; (8006464 <_dtoa_r+0x32c>)
 80062a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80062a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80062ae:	f7fa fc3b 	bl	8000b28 <__aeabi_dcmpgt>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d050      	beq.n	8006358 <_dtoa_r+0x220>
 80062b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062ba:	2300      	movs	r3, #0
 80062bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80062be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062c0:	1b5d      	subs	r5, r3, r5
 80062c2:	f1b5 0801 	subs.w	r8, r5, #1
 80062c6:	bf49      	itett	mi
 80062c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80062cc:	2300      	movpl	r3, #0
 80062ce:	9305      	strmi	r3, [sp, #20]
 80062d0:	f04f 0800 	movmi.w	r8, #0
 80062d4:	bf58      	it	pl
 80062d6:	9305      	strpl	r3, [sp, #20]
 80062d8:	f1ba 0f00 	cmp.w	sl, #0
 80062dc:	db3e      	blt.n	800635c <_dtoa_r+0x224>
 80062de:	2300      	movs	r3, #0
 80062e0:	44d0      	add	r8, sl
 80062e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80062e6:	9307      	str	r3, [sp, #28]
 80062e8:	9b06      	ldr	r3, [sp, #24]
 80062ea:	2b09      	cmp	r3, #9
 80062ec:	f200 8090 	bhi.w	8006410 <_dtoa_r+0x2d8>
 80062f0:	2b05      	cmp	r3, #5
 80062f2:	bfc4      	itt	gt
 80062f4:	3b04      	subgt	r3, #4
 80062f6:	9306      	strgt	r3, [sp, #24]
 80062f8:	9b06      	ldr	r3, [sp, #24]
 80062fa:	f1a3 0302 	sub.w	r3, r3, #2
 80062fe:	bfcc      	ite	gt
 8006300:	2500      	movgt	r5, #0
 8006302:	2501      	movle	r5, #1
 8006304:	2b03      	cmp	r3, #3
 8006306:	f200 808f 	bhi.w	8006428 <_dtoa_r+0x2f0>
 800630a:	e8df f003 	tbb	[pc, r3]
 800630e:	7f7d      	.short	0x7f7d
 8006310:	7131      	.short	0x7131
 8006312:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006316:	441d      	add	r5, r3
 8006318:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800631c:	2820      	cmp	r0, #32
 800631e:	dd13      	ble.n	8006348 <_dtoa_r+0x210>
 8006320:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006324:	9b00      	ldr	r3, [sp, #0]
 8006326:	fa08 f800 	lsl.w	r8, r8, r0
 800632a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800632e:	fa23 f000 	lsr.w	r0, r3, r0
 8006332:	ea48 0000 	orr.w	r0, r8, r0
 8006336:	f7fa f8ed 	bl	8000514 <__aeabi_ui2d>
 800633a:	2301      	movs	r3, #1
 800633c:	4682      	mov	sl, r0
 800633e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006342:	3d01      	subs	r5, #1
 8006344:	9313      	str	r3, [sp, #76]	; 0x4c
 8006346:	e772      	b.n	800622e <_dtoa_r+0xf6>
 8006348:	9b00      	ldr	r3, [sp, #0]
 800634a:	f1c0 0020 	rsb	r0, r0, #32
 800634e:	fa03 f000 	lsl.w	r0, r3, r0
 8006352:	e7f0      	b.n	8006336 <_dtoa_r+0x1fe>
 8006354:	2301      	movs	r3, #1
 8006356:	e7b1      	b.n	80062bc <_dtoa_r+0x184>
 8006358:	900f      	str	r0, [sp, #60]	; 0x3c
 800635a:	e7b0      	b.n	80062be <_dtoa_r+0x186>
 800635c:	9b05      	ldr	r3, [sp, #20]
 800635e:	eba3 030a 	sub.w	r3, r3, sl
 8006362:	9305      	str	r3, [sp, #20]
 8006364:	f1ca 0300 	rsb	r3, sl, #0
 8006368:	9307      	str	r3, [sp, #28]
 800636a:	2300      	movs	r3, #0
 800636c:	930e      	str	r3, [sp, #56]	; 0x38
 800636e:	e7bb      	b.n	80062e8 <_dtoa_r+0x1b0>
 8006370:	2301      	movs	r3, #1
 8006372:	930a      	str	r3, [sp, #40]	; 0x28
 8006374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006376:	2b00      	cmp	r3, #0
 8006378:	dd59      	ble.n	800642e <_dtoa_r+0x2f6>
 800637a:	9302      	str	r3, [sp, #8]
 800637c:	4699      	mov	r9, r3
 800637e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006380:	2200      	movs	r2, #0
 8006382:	6072      	str	r2, [r6, #4]
 8006384:	2204      	movs	r2, #4
 8006386:	f102 0014 	add.w	r0, r2, #20
 800638a:	4298      	cmp	r0, r3
 800638c:	6871      	ldr	r1, [r6, #4]
 800638e:	d953      	bls.n	8006438 <_dtoa_r+0x300>
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fe7d 	bl	8007090 <_Balloc>
 8006396:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006398:	6030      	str	r0, [r6, #0]
 800639a:	f1b9 0f0e 	cmp.w	r9, #14
 800639e:	f8d3 b000 	ldr.w	fp, [r3]
 80063a2:	f200 80e6 	bhi.w	8006572 <_dtoa_r+0x43a>
 80063a6:	2d00      	cmp	r5, #0
 80063a8:	f000 80e3 	beq.w	8006572 <_dtoa_r+0x43a>
 80063ac:	ed9d 7b00 	vldr	d7, [sp]
 80063b0:	f1ba 0f00 	cmp.w	sl, #0
 80063b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80063b8:	dd74      	ble.n	80064a4 <_dtoa_r+0x36c>
 80063ba:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <_dtoa_r+0x32c>)
 80063bc:	f00a 030f 	and.w	r3, sl, #15
 80063c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063c4:	ed93 7b00 	vldr	d7, [r3]
 80063c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80063cc:	06f0      	lsls	r0, r6, #27
 80063ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80063d2:	d565      	bpl.n	80064a0 <_dtoa_r+0x368>
 80063d4:	4b24      	ldr	r3, [pc, #144]	; (8006468 <_dtoa_r+0x330>)
 80063d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80063da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063de:	f7fa fa3d 	bl	800085c <__aeabi_ddiv>
 80063e2:	e9cd 0100 	strd	r0, r1, [sp]
 80063e6:	f006 060f 	and.w	r6, r6, #15
 80063ea:	2503      	movs	r5, #3
 80063ec:	4f1e      	ldr	r7, [pc, #120]	; (8006468 <_dtoa_r+0x330>)
 80063ee:	e04c      	b.n	800648a <_dtoa_r+0x352>
 80063f0:	2301      	movs	r3, #1
 80063f2:	930a      	str	r3, [sp, #40]	; 0x28
 80063f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063f6:	4453      	add	r3, sl
 80063f8:	f103 0901 	add.w	r9, r3, #1
 80063fc:	9302      	str	r3, [sp, #8]
 80063fe:	464b      	mov	r3, r9
 8006400:	2b01      	cmp	r3, #1
 8006402:	bfb8      	it	lt
 8006404:	2301      	movlt	r3, #1
 8006406:	e7ba      	b.n	800637e <_dtoa_r+0x246>
 8006408:	2300      	movs	r3, #0
 800640a:	e7b2      	b.n	8006372 <_dtoa_r+0x23a>
 800640c:	2300      	movs	r3, #0
 800640e:	e7f0      	b.n	80063f2 <_dtoa_r+0x2ba>
 8006410:	2501      	movs	r5, #1
 8006412:	2300      	movs	r3, #0
 8006414:	9306      	str	r3, [sp, #24]
 8006416:	950a      	str	r5, [sp, #40]	; 0x28
 8006418:	f04f 33ff 	mov.w	r3, #4294967295
 800641c:	9302      	str	r3, [sp, #8]
 800641e:	4699      	mov	r9, r3
 8006420:	2200      	movs	r2, #0
 8006422:	2312      	movs	r3, #18
 8006424:	920b      	str	r2, [sp, #44]	; 0x2c
 8006426:	e7aa      	b.n	800637e <_dtoa_r+0x246>
 8006428:	2301      	movs	r3, #1
 800642a:	930a      	str	r3, [sp, #40]	; 0x28
 800642c:	e7f4      	b.n	8006418 <_dtoa_r+0x2e0>
 800642e:	2301      	movs	r3, #1
 8006430:	9302      	str	r3, [sp, #8]
 8006432:	4699      	mov	r9, r3
 8006434:	461a      	mov	r2, r3
 8006436:	e7f5      	b.n	8006424 <_dtoa_r+0x2ec>
 8006438:	3101      	adds	r1, #1
 800643a:	6071      	str	r1, [r6, #4]
 800643c:	0052      	lsls	r2, r2, #1
 800643e:	e7a2      	b.n	8006386 <_dtoa_r+0x24e>
 8006440:	636f4361 	.word	0x636f4361
 8006444:	3fd287a7 	.word	0x3fd287a7
 8006448:	8b60c8b3 	.word	0x8b60c8b3
 800644c:	3fc68a28 	.word	0x3fc68a28
 8006450:	509f79fb 	.word	0x509f79fb
 8006454:	3fd34413 	.word	0x3fd34413
 8006458:	7ff00000 	.word	0x7ff00000
 800645c:	08008171 	.word	0x08008171
 8006460:	3ff80000 	.word	0x3ff80000
 8006464:	08008230 	.word	0x08008230
 8006468:	08008208 	.word	0x08008208
 800646c:	0800819d 	.word	0x0800819d
 8006470:	07f1      	lsls	r1, r6, #31
 8006472:	d508      	bpl.n	8006486 <_dtoa_r+0x34e>
 8006474:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800647c:	f7fa f8c4 	bl	8000608 <__aeabi_dmul>
 8006480:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006484:	3501      	adds	r5, #1
 8006486:	1076      	asrs	r6, r6, #1
 8006488:	3708      	adds	r7, #8
 800648a:	2e00      	cmp	r6, #0
 800648c:	d1f0      	bne.n	8006470 <_dtoa_r+0x338>
 800648e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006492:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006496:	f7fa f9e1 	bl	800085c <__aeabi_ddiv>
 800649a:	e9cd 0100 	strd	r0, r1, [sp]
 800649e:	e01a      	b.n	80064d6 <_dtoa_r+0x39e>
 80064a0:	2502      	movs	r5, #2
 80064a2:	e7a3      	b.n	80063ec <_dtoa_r+0x2b4>
 80064a4:	f000 80a0 	beq.w	80065e8 <_dtoa_r+0x4b0>
 80064a8:	f1ca 0600 	rsb	r6, sl, #0
 80064ac:	4b9f      	ldr	r3, [pc, #636]	; (800672c <_dtoa_r+0x5f4>)
 80064ae:	4fa0      	ldr	r7, [pc, #640]	; (8006730 <_dtoa_r+0x5f8>)
 80064b0:	f006 020f 	and.w	r2, r6, #15
 80064b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80064c0:	f7fa f8a2 	bl	8000608 <__aeabi_dmul>
 80064c4:	e9cd 0100 	strd	r0, r1, [sp]
 80064c8:	1136      	asrs	r6, r6, #4
 80064ca:	2300      	movs	r3, #0
 80064cc:	2502      	movs	r5, #2
 80064ce:	2e00      	cmp	r6, #0
 80064d0:	d17f      	bne.n	80065d2 <_dtoa_r+0x49a>
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e1      	bne.n	800649a <_dtoa_r+0x362>
 80064d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 8087 	beq.w	80065ec <_dtoa_r+0x4b4>
 80064de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80064e2:	2200      	movs	r2, #0
 80064e4:	4b93      	ldr	r3, [pc, #588]	; (8006734 <_dtoa_r+0x5fc>)
 80064e6:	4630      	mov	r0, r6
 80064e8:	4639      	mov	r1, r7
 80064ea:	f7fa faff 	bl	8000aec <__aeabi_dcmplt>
 80064ee:	2800      	cmp	r0, #0
 80064f0:	d07c      	beq.n	80065ec <_dtoa_r+0x4b4>
 80064f2:	f1b9 0f00 	cmp.w	r9, #0
 80064f6:	d079      	beq.n	80065ec <_dtoa_r+0x4b4>
 80064f8:	9b02      	ldr	r3, [sp, #8]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	dd35      	ble.n	800656a <_dtoa_r+0x432>
 80064fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006502:	9308      	str	r3, [sp, #32]
 8006504:	4639      	mov	r1, r7
 8006506:	2200      	movs	r2, #0
 8006508:	4b8b      	ldr	r3, [pc, #556]	; (8006738 <_dtoa_r+0x600>)
 800650a:	4630      	mov	r0, r6
 800650c:	f7fa f87c 	bl	8000608 <__aeabi_dmul>
 8006510:	e9cd 0100 	strd	r0, r1, [sp]
 8006514:	9f02      	ldr	r7, [sp, #8]
 8006516:	3501      	adds	r5, #1
 8006518:	4628      	mov	r0, r5
 800651a:	f7fa f80b 	bl	8000534 <__aeabi_i2d>
 800651e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006522:	f7fa f871 	bl	8000608 <__aeabi_dmul>
 8006526:	2200      	movs	r2, #0
 8006528:	4b84      	ldr	r3, [pc, #528]	; (800673c <_dtoa_r+0x604>)
 800652a:	f7f9 feb7 	bl	800029c <__adddf3>
 800652e:	4605      	mov	r5, r0
 8006530:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006534:	2f00      	cmp	r7, #0
 8006536:	d15d      	bne.n	80065f4 <_dtoa_r+0x4bc>
 8006538:	2200      	movs	r2, #0
 800653a:	4b81      	ldr	r3, [pc, #516]	; (8006740 <_dtoa_r+0x608>)
 800653c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006540:	f7f9 feaa 	bl	8000298 <__aeabi_dsub>
 8006544:	462a      	mov	r2, r5
 8006546:	4633      	mov	r3, r6
 8006548:	e9cd 0100 	strd	r0, r1, [sp]
 800654c:	f7fa faec 	bl	8000b28 <__aeabi_dcmpgt>
 8006550:	2800      	cmp	r0, #0
 8006552:	f040 8288 	bne.w	8006a66 <_dtoa_r+0x92e>
 8006556:	462a      	mov	r2, r5
 8006558:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800655c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006560:	f7fa fac4 	bl	8000aec <__aeabi_dcmplt>
 8006564:	2800      	cmp	r0, #0
 8006566:	f040 827c 	bne.w	8006a62 <_dtoa_r+0x92a>
 800656a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800656e:	e9cd 2300 	strd	r2, r3, [sp]
 8006572:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006574:	2b00      	cmp	r3, #0
 8006576:	f2c0 8150 	blt.w	800681a <_dtoa_r+0x6e2>
 800657a:	f1ba 0f0e 	cmp.w	sl, #14
 800657e:	f300 814c 	bgt.w	800681a <_dtoa_r+0x6e2>
 8006582:	4b6a      	ldr	r3, [pc, #424]	; (800672c <_dtoa_r+0x5f4>)
 8006584:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006588:	ed93 7b00 	vldr	d7, [r3]
 800658c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800658e:	2b00      	cmp	r3, #0
 8006590:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006594:	f280 80d8 	bge.w	8006748 <_dtoa_r+0x610>
 8006598:	f1b9 0f00 	cmp.w	r9, #0
 800659c:	f300 80d4 	bgt.w	8006748 <_dtoa_r+0x610>
 80065a0:	f040 825e 	bne.w	8006a60 <_dtoa_r+0x928>
 80065a4:	2200      	movs	r2, #0
 80065a6:	4b66      	ldr	r3, [pc, #408]	; (8006740 <_dtoa_r+0x608>)
 80065a8:	ec51 0b17 	vmov	r0, r1, d7
 80065ac:	f7fa f82c 	bl	8000608 <__aeabi_dmul>
 80065b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065b4:	f7fa faae 	bl	8000b14 <__aeabi_dcmpge>
 80065b8:	464f      	mov	r7, r9
 80065ba:	464e      	mov	r6, r9
 80065bc:	2800      	cmp	r0, #0
 80065be:	f040 8234 	bne.w	8006a2a <_dtoa_r+0x8f2>
 80065c2:	2331      	movs	r3, #49	; 0x31
 80065c4:	f10b 0501 	add.w	r5, fp, #1
 80065c8:	f88b 3000 	strb.w	r3, [fp]
 80065cc:	f10a 0a01 	add.w	sl, sl, #1
 80065d0:	e22f      	b.n	8006a32 <_dtoa_r+0x8fa>
 80065d2:	07f2      	lsls	r2, r6, #31
 80065d4:	d505      	bpl.n	80065e2 <_dtoa_r+0x4aa>
 80065d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065da:	f7fa f815 	bl	8000608 <__aeabi_dmul>
 80065de:	3501      	adds	r5, #1
 80065e0:	2301      	movs	r3, #1
 80065e2:	1076      	asrs	r6, r6, #1
 80065e4:	3708      	adds	r7, #8
 80065e6:	e772      	b.n	80064ce <_dtoa_r+0x396>
 80065e8:	2502      	movs	r5, #2
 80065ea:	e774      	b.n	80064d6 <_dtoa_r+0x39e>
 80065ec:	f8cd a020 	str.w	sl, [sp, #32]
 80065f0:	464f      	mov	r7, r9
 80065f2:	e791      	b.n	8006518 <_dtoa_r+0x3e0>
 80065f4:	4b4d      	ldr	r3, [pc, #308]	; (800672c <_dtoa_r+0x5f4>)
 80065f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80065fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80065fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006600:	2b00      	cmp	r3, #0
 8006602:	d047      	beq.n	8006694 <_dtoa_r+0x55c>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	2000      	movs	r0, #0
 800660a:	494e      	ldr	r1, [pc, #312]	; (8006744 <_dtoa_r+0x60c>)
 800660c:	f7fa f926 	bl	800085c <__aeabi_ddiv>
 8006610:	462a      	mov	r2, r5
 8006612:	4633      	mov	r3, r6
 8006614:	f7f9 fe40 	bl	8000298 <__aeabi_dsub>
 8006618:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800661c:	465d      	mov	r5, fp
 800661e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006622:	f7fa faa1 	bl	8000b68 <__aeabi_d2iz>
 8006626:	4606      	mov	r6, r0
 8006628:	f7f9 ff84 	bl	8000534 <__aeabi_i2d>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006634:	f7f9 fe30 	bl	8000298 <__aeabi_dsub>
 8006638:	3630      	adds	r6, #48	; 0x30
 800663a:	f805 6b01 	strb.w	r6, [r5], #1
 800663e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006642:	e9cd 0100 	strd	r0, r1, [sp]
 8006646:	f7fa fa51 	bl	8000aec <__aeabi_dcmplt>
 800664a:	2800      	cmp	r0, #0
 800664c:	d163      	bne.n	8006716 <_dtoa_r+0x5de>
 800664e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006652:	2000      	movs	r0, #0
 8006654:	4937      	ldr	r1, [pc, #220]	; (8006734 <_dtoa_r+0x5fc>)
 8006656:	f7f9 fe1f 	bl	8000298 <__aeabi_dsub>
 800665a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800665e:	f7fa fa45 	bl	8000aec <__aeabi_dcmplt>
 8006662:	2800      	cmp	r0, #0
 8006664:	f040 80b7 	bne.w	80067d6 <_dtoa_r+0x69e>
 8006668:	eba5 030b 	sub.w	r3, r5, fp
 800666c:	429f      	cmp	r7, r3
 800666e:	f77f af7c 	ble.w	800656a <_dtoa_r+0x432>
 8006672:	2200      	movs	r2, #0
 8006674:	4b30      	ldr	r3, [pc, #192]	; (8006738 <_dtoa_r+0x600>)
 8006676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800667a:	f7f9 ffc5 	bl	8000608 <__aeabi_dmul>
 800667e:	2200      	movs	r2, #0
 8006680:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006684:	4b2c      	ldr	r3, [pc, #176]	; (8006738 <_dtoa_r+0x600>)
 8006686:	e9dd 0100 	ldrd	r0, r1, [sp]
 800668a:	f7f9 ffbd 	bl	8000608 <__aeabi_dmul>
 800668e:	e9cd 0100 	strd	r0, r1, [sp]
 8006692:	e7c4      	b.n	800661e <_dtoa_r+0x4e6>
 8006694:	462a      	mov	r2, r5
 8006696:	4633      	mov	r3, r6
 8006698:	f7f9 ffb6 	bl	8000608 <__aeabi_dmul>
 800669c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80066a0:	eb0b 0507 	add.w	r5, fp, r7
 80066a4:	465e      	mov	r6, fp
 80066a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066aa:	f7fa fa5d 	bl	8000b68 <__aeabi_d2iz>
 80066ae:	4607      	mov	r7, r0
 80066b0:	f7f9 ff40 	bl	8000534 <__aeabi_i2d>
 80066b4:	3730      	adds	r7, #48	; 0x30
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066be:	f7f9 fdeb 	bl	8000298 <__aeabi_dsub>
 80066c2:	f806 7b01 	strb.w	r7, [r6], #1
 80066c6:	42ae      	cmp	r6, r5
 80066c8:	e9cd 0100 	strd	r0, r1, [sp]
 80066cc:	f04f 0200 	mov.w	r2, #0
 80066d0:	d126      	bne.n	8006720 <_dtoa_r+0x5e8>
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <_dtoa_r+0x60c>)
 80066d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80066d8:	f7f9 fde0 	bl	800029c <__adddf3>
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80066e4:	f7fa fa20 	bl	8000b28 <__aeabi_dcmpgt>
 80066e8:	2800      	cmp	r0, #0
 80066ea:	d174      	bne.n	80067d6 <_dtoa_r+0x69e>
 80066ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80066f0:	2000      	movs	r0, #0
 80066f2:	4914      	ldr	r1, [pc, #80]	; (8006744 <_dtoa_r+0x60c>)
 80066f4:	f7f9 fdd0 	bl	8000298 <__aeabi_dsub>
 80066f8:	4602      	mov	r2, r0
 80066fa:	460b      	mov	r3, r1
 80066fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006700:	f7fa f9f4 	bl	8000aec <__aeabi_dcmplt>
 8006704:	2800      	cmp	r0, #0
 8006706:	f43f af30 	beq.w	800656a <_dtoa_r+0x432>
 800670a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800670e:	2b30      	cmp	r3, #48	; 0x30
 8006710:	f105 32ff 	add.w	r2, r5, #4294967295
 8006714:	d002      	beq.n	800671c <_dtoa_r+0x5e4>
 8006716:	f8dd a020 	ldr.w	sl, [sp, #32]
 800671a:	e04a      	b.n	80067b2 <_dtoa_r+0x67a>
 800671c:	4615      	mov	r5, r2
 800671e:	e7f4      	b.n	800670a <_dtoa_r+0x5d2>
 8006720:	4b05      	ldr	r3, [pc, #20]	; (8006738 <_dtoa_r+0x600>)
 8006722:	f7f9 ff71 	bl	8000608 <__aeabi_dmul>
 8006726:	e9cd 0100 	strd	r0, r1, [sp]
 800672a:	e7bc      	b.n	80066a6 <_dtoa_r+0x56e>
 800672c:	08008230 	.word	0x08008230
 8006730:	08008208 	.word	0x08008208
 8006734:	3ff00000 	.word	0x3ff00000
 8006738:	40240000 	.word	0x40240000
 800673c:	401c0000 	.word	0x401c0000
 8006740:	40140000 	.word	0x40140000
 8006744:	3fe00000 	.word	0x3fe00000
 8006748:	e9dd 6700 	ldrd	r6, r7, [sp]
 800674c:	465d      	mov	r5, fp
 800674e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006752:	4630      	mov	r0, r6
 8006754:	4639      	mov	r1, r7
 8006756:	f7fa f881 	bl	800085c <__aeabi_ddiv>
 800675a:	f7fa fa05 	bl	8000b68 <__aeabi_d2iz>
 800675e:	4680      	mov	r8, r0
 8006760:	f7f9 fee8 	bl	8000534 <__aeabi_i2d>
 8006764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006768:	f7f9 ff4e 	bl	8000608 <__aeabi_dmul>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4630      	mov	r0, r6
 8006772:	4639      	mov	r1, r7
 8006774:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006778:	f7f9 fd8e 	bl	8000298 <__aeabi_dsub>
 800677c:	f805 6b01 	strb.w	r6, [r5], #1
 8006780:	eba5 060b 	sub.w	r6, r5, fp
 8006784:	45b1      	cmp	r9, r6
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	d139      	bne.n	8006800 <_dtoa_r+0x6c8>
 800678c:	f7f9 fd86 	bl	800029c <__adddf3>
 8006790:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006794:	4606      	mov	r6, r0
 8006796:	460f      	mov	r7, r1
 8006798:	f7fa f9c6 	bl	8000b28 <__aeabi_dcmpgt>
 800679c:	b9c8      	cbnz	r0, 80067d2 <_dtoa_r+0x69a>
 800679e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067a2:	4630      	mov	r0, r6
 80067a4:	4639      	mov	r1, r7
 80067a6:	f7fa f997 	bl	8000ad8 <__aeabi_dcmpeq>
 80067aa:	b110      	cbz	r0, 80067b2 <_dtoa_r+0x67a>
 80067ac:	f018 0f01 	tst.w	r8, #1
 80067b0:	d10f      	bne.n	80067d2 <_dtoa_r+0x69a>
 80067b2:	9904      	ldr	r1, [sp, #16]
 80067b4:	4620      	mov	r0, r4
 80067b6:	f000 fc9f 	bl	80070f8 <_Bfree>
 80067ba:	2300      	movs	r3, #0
 80067bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80067be:	702b      	strb	r3, [r5, #0]
 80067c0:	f10a 0301 	add.w	r3, sl, #1
 80067c4:	6013      	str	r3, [r2, #0]
 80067c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8241 	beq.w	8006c50 <_dtoa_r+0xb18>
 80067ce:	601d      	str	r5, [r3, #0]
 80067d0:	e23e      	b.n	8006c50 <_dtoa_r+0xb18>
 80067d2:	f8cd a020 	str.w	sl, [sp, #32]
 80067d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067da:	2a39      	cmp	r2, #57	; 0x39
 80067dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80067e0:	d108      	bne.n	80067f4 <_dtoa_r+0x6bc>
 80067e2:	459b      	cmp	fp, r3
 80067e4:	d10a      	bne.n	80067fc <_dtoa_r+0x6c4>
 80067e6:	9b08      	ldr	r3, [sp, #32]
 80067e8:	3301      	adds	r3, #1
 80067ea:	9308      	str	r3, [sp, #32]
 80067ec:	2330      	movs	r3, #48	; 0x30
 80067ee:	f88b 3000 	strb.w	r3, [fp]
 80067f2:	465b      	mov	r3, fp
 80067f4:	781a      	ldrb	r2, [r3, #0]
 80067f6:	3201      	adds	r2, #1
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	e78c      	b.n	8006716 <_dtoa_r+0x5de>
 80067fc:	461d      	mov	r5, r3
 80067fe:	e7ea      	b.n	80067d6 <_dtoa_r+0x69e>
 8006800:	2200      	movs	r2, #0
 8006802:	4b9b      	ldr	r3, [pc, #620]	; (8006a70 <_dtoa_r+0x938>)
 8006804:	f7f9 ff00 	bl	8000608 <__aeabi_dmul>
 8006808:	2200      	movs	r2, #0
 800680a:	2300      	movs	r3, #0
 800680c:	4606      	mov	r6, r0
 800680e:	460f      	mov	r7, r1
 8006810:	f7fa f962 	bl	8000ad8 <__aeabi_dcmpeq>
 8006814:	2800      	cmp	r0, #0
 8006816:	d09a      	beq.n	800674e <_dtoa_r+0x616>
 8006818:	e7cb      	b.n	80067b2 <_dtoa_r+0x67a>
 800681a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800681c:	2a00      	cmp	r2, #0
 800681e:	f000 808b 	beq.w	8006938 <_dtoa_r+0x800>
 8006822:	9a06      	ldr	r2, [sp, #24]
 8006824:	2a01      	cmp	r2, #1
 8006826:	dc6e      	bgt.n	8006906 <_dtoa_r+0x7ce>
 8006828:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800682a:	2a00      	cmp	r2, #0
 800682c:	d067      	beq.n	80068fe <_dtoa_r+0x7c6>
 800682e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006832:	9f07      	ldr	r7, [sp, #28]
 8006834:	9d05      	ldr	r5, [sp, #20]
 8006836:	9a05      	ldr	r2, [sp, #20]
 8006838:	2101      	movs	r1, #1
 800683a:	441a      	add	r2, r3
 800683c:	4620      	mov	r0, r4
 800683e:	9205      	str	r2, [sp, #20]
 8006840:	4498      	add	r8, r3
 8006842:	f000 fcf9 	bl	8007238 <__i2b>
 8006846:	4606      	mov	r6, r0
 8006848:	2d00      	cmp	r5, #0
 800684a:	dd0c      	ble.n	8006866 <_dtoa_r+0x72e>
 800684c:	f1b8 0f00 	cmp.w	r8, #0
 8006850:	dd09      	ble.n	8006866 <_dtoa_r+0x72e>
 8006852:	4545      	cmp	r5, r8
 8006854:	9a05      	ldr	r2, [sp, #20]
 8006856:	462b      	mov	r3, r5
 8006858:	bfa8      	it	ge
 800685a:	4643      	movge	r3, r8
 800685c:	1ad2      	subs	r2, r2, r3
 800685e:	9205      	str	r2, [sp, #20]
 8006860:	1aed      	subs	r5, r5, r3
 8006862:	eba8 0803 	sub.w	r8, r8, r3
 8006866:	9b07      	ldr	r3, [sp, #28]
 8006868:	b1eb      	cbz	r3, 80068a6 <_dtoa_r+0x76e>
 800686a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800686c:	2b00      	cmp	r3, #0
 800686e:	d067      	beq.n	8006940 <_dtoa_r+0x808>
 8006870:	b18f      	cbz	r7, 8006896 <_dtoa_r+0x75e>
 8006872:	4631      	mov	r1, r6
 8006874:	463a      	mov	r2, r7
 8006876:	4620      	mov	r0, r4
 8006878:	f000 fd7e 	bl	8007378 <__pow5mult>
 800687c:	9a04      	ldr	r2, [sp, #16]
 800687e:	4601      	mov	r1, r0
 8006880:	4606      	mov	r6, r0
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fce1 	bl	800724a <__multiply>
 8006888:	9904      	ldr	r1, [sp, #16]
 800688a:	9008      	str	r0, [sp, #32]
 800688c:	4620      	mov	r0, r4
 800688e:	f000 fc33 	bl	80070f8 <_Bfree>
 8006892:	9b08      	ldr	r3, [sp, #32]
 8006894:	9304      	str	r3, [sp, #16]
 8006896:	9b07      	ldr	r3, [sp, #28]
 8006898:	1bda      	subs	r2, r3, r7
 800689a:	d004      	beq.n	80068a6 <_dtoa_r+0x76e>
 800689c:	9904      	ldr	r1, [sp, #16]
 800689e:	4620      	mov	r0, r4
 80068a0:	f000 fd6a 	bl	8007378 <__pow5mult>
 80068a4:	9004      	str	r0, [sp, #16]
 80068a6:	2101      	movs	r1, #1
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fcc5 	bl	8007238 <__i2b>
 80068ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068b0:	4607      	mov	r7, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 81d0 	beq.w	8006c58 <_dtoa_r+0xb20>
 80068b8:	461a      	mov	r2, r3
 80068ba:	4601      	mov	r1, r0
 80068bc:	4620      	mov	r0, r4
 80068be:	f000 fd5b 	bl	8007378 <__pow5mult>
 80068c2:	9b06      	ldr	r3, [sp, #24]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	4607      	mov	r7, r0
 80068c8:	dc40      	bgt.n	800694c <_dtoa_r+0x814>
 80068ca:	9b00      	ldr	r3, [sp, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d139      	bne.n	8006944 <_dtoa_r+0x80c>
 80068d0:	9b01      	ldr	r3, [sp, #4]
 80068d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d136      	bne.n	8006948 <_dtoa_r+0x810>
 80068da:	9b01      	ldr	r3, [sp, #4]
 80068dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068e0:	0d1b      	lsrs	r3, r3, #20
 80068e2:	051b      	lsls	r3, r3, #20
 80068e4:	b12b      	cbz	r3, 80068f2 <_dtoa_r+0x7ba>
 80068e6:	9b05      	ldr	r3, [sp, #20]
 80068e8:	3301      	adds	r3, #1
 80068ea:	9305      	str	r3, [sp, #20]
 80068ec:	f108 0801 	add.w	r8, r8, #1
 80068f0:	2301      	movs	r3, #1
 80068f2:	9307      	str	r3, [sp, #28]
 80068f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d12a      	bne.n	8006950 <_dtoa_r+0x818>
 80068fa:	2001      	movs	r0, #1
 80068fc:	e030      	b.n	8006960 <_dtoa_r+0x828>
 80068fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006900:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006904:	e795      	b.n	8006832 <_dtoa_r+0x6fa>
 8006906:	9b07      	ldr	r3, [sp, #28]
 8006908:	f109 37ff 	add.w	r7, r9, #4294967295
 800690c:	42bb      	cmp	r3, r7
 800690e:	bfbf      	itttt	lt
 8006910:	9b07      	ldrlt	r3, [sp, #28]
 8006912:	9707      	strlt	r7, [sp, #28]
 8006914:	1afa      	sublt	r2, r7, r3
 8006916:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006918:	bfbb      	ittet	lt
 800691a:	189b      	addlt	r3, r3, r2
 800691c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800691e:	1bdf      	subge	r7, r3, r7
 8006920:	2700      	movlt	r7, #0
 8006922:	f1b9 0f00 	cmp.w	r9, #0
 8006926:	bfb5      	itete	lt
 8006928:	9b05      	ldrlt	r3, [sp, #20]
 800692a:	9d05      	ldrge	r5, [sp, #20]
 800692c:	eba3 0509 	sublt.w	r5, r3, r9
 8006930:	464b      	movge	r3, r9
 8006932:	bfb8      	it	lt
 8006934:	2300      	movlt	r3, #0
 8006936:	e77e      	b.n	8006836 <_dtoa_r+0x6fe>
 8006938:	9f07      	ldr	r7, [sp, #28]
 800693a:	9d05      	ldr	r5, [sp, #20]
 800693c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800693e:	e783      	b.n	8006848 <_dtoa_r+0x710>
 8006940:	9a07      	ldr	r2, [sp, #28]
 8006942:	e7ab      	b.n	800689c <_dtoa_r+0x764>
 8006944:	2300      	movs	r3, #0
 8006946:	e7d4      	b.n	80068f2 <_dtoa_r+0x7ba>
 8006948:	9b00      	ldr	r3, [sp, #0]
 800694a:	e7d2      	b.n	80068f2 <_dtoa_r+0x7ba>
 800694c:	2300      	movs	r3, #0
 800694e:	9307      	str	r3, [sp, #28]
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006956:	6918      	ldr	r0, [r3, #16]
 8006958:	f000 fc20 	bl	800719c <__hi0bits>
 800695c:	f1c0 0020 	rsb	r0, r0, #32
 8006960:	4440      	add	r0, r8
 8006962:	f010 001f 	ands.w	r0, r0, #31
 8006966:	d047      	beq.n	80069f8 <_dtoa_r+0x8c0>
 8006968:	f1c0 0320 	rsb	r3, r0, #32
 800696c:	2b04      	cmp	r3, #4
 800696e:	dd3b      	ble.n	80069e8 <_dtoa_r+0x8b0>
 8006970:	9b05      	ldr	r3, [sp, #20]
 8006972:	f1c0 001c 	rsb	r0, r0, #28
 8006976:	4403      	add	r3, r0
 8006978:	9305      	str	r3, [sp, #20]
 800697a:	4405      	add	r5, r0
 800697c:	4480      	add	r8, r0
 800697e:	9b05      	ldr	r3, [sp, #20]
 8006980:	2b00      	cmp	r3, #0
 8006982:	dd05      	ble.n	8006990 <_dtoa_r+0x858>
 8006984:	461a      	mov	r2, r3
 8006986:	9904      	ldr	r1, [sp, #16]
 8006988:	4620      	mov	r0, r4
 800698a:	f000 fd43 	bl	8007414 <__lshift>
 800698e:	9004      	str	r0, [sp, #16]
 8006990:	f1b8 0f00 	cmp.w	r8, #0
 8006994:	dd05      	ble.n	80069a2 <_dtoa_r+0x86a>
 8006996:	4639      	mov	r1, r7
 8006998:	4642      	mov	r2, r8
 800699a:	4620      	mov	r0, r4
 800699c:	f000 fd3a 	bl	8007414 <__lshift>
 80069a0:	4607      	mov	r7, r0
 80069a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069a4:	b353      	cbz	r3, 80069fc <_dtoa_r+0x8c4>
 80069a6:	4639      	mov	r1, r7
 80069a8:	9804      	ldr	r0, [sp, #16]
 80069aa:	f000 fd87 	bl	80074bc <__mcmp>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	da24      	bge.n	80069fc <_dtoa_r+0x8c4>
 80069b2:	2300      	movs	r3, #0
 80069b4:	220a      	movs	r2, #10
 80069b6:	9904      	ldr	r1, [sp, #16]
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 fbb4 	bl	8007126 <__multadd>
 80069be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069c0:	9004      	str	r0, [sp, #16]
 80069c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 814d 	beq.w	8006c66 <_dtoa_r+0xb2e>
 80069cc:	2300      	movs	r3, #0
 80069ce:	4631      	mov	r1, r6
 80069d0:	220a      	movs	r2, #10
 80069d2:	4620      	mov	r0, r4
 80069d4:	f000 fba7 	bl	8007126 <__multadd>
 80069d8:	9b02      	ldr	r3, [sp, #8]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	4606      	mov	r6, r0
 80069de:	dc4f      	bgt.n	8006a80 <_dtoa_r+0x948>
 80069e0:	9b06      	ldr	r3, [sp, #24]
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	dd4c      	ble.n	8006a80 <_dtoa_r+0x948>
 80069e6:	e011      	b.n	8006a0c <_dtoa_r+0x8d4>
 80069e8:	d0c9      	beq.n	800697e <_dtoa_r+0x846>
 80069ea:	9a05      	ldr	r2, [sp, #20]
 80069ec:	331c      	adds	r3, #28
 80069ee:	441a      	add	r2, r3
 80069f0:	9205      	str	r2, [sp, #20]
 80069f2:	441d      	add	r5, r3
 80069f4:	4498      	add	r8, r3
 80069f6:	e7c2      	b.n	800697e <_dtoa_r+0x846>
 80069f8:	4603      	mov	r3, r0
 80069fa:	e7f6      	b.n	80069ea <_dtoa_r+0x8b2>
 80069fc:	f1b9 0f00 	cmp.w	r9, #0
 8006a00:	dc38      	bgt.n	8006a74 <_dtoa_r+0x93c>
 8006a02:	9b06      	ldr	r3, [sp, #24]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	dd35      	ble.n	8006a74 <_dtoa_r+0x93c>
 8006a08:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a0c:	9b02      	ldr	r3, [sp, #8]
 8006a0e:	b963      	cbnz	r3, 8006a2a <_dtoa_r+0x8f2>
 8006a10:	4639      	mov	r1, r7
 8006a12:	2205      	movs	r2, #5
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 fb86 	bl	8007126 <__multadd>
 8006a1a:	4601      	mov	r1, r0
 8006a1c:	4607      	mov	r7, r0
 8006a1e:	9804      	ldr	r0, [sp, #16]
 8006a20:	f000 fd4c 	bl	80074bc <__mcmp>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	f73f adcc 	bgt.w	80065c2 <_dtoa_r+0x48a>
 8006a2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a2c:	465d      	mov	r5, fp
 8006a2e:	ea6f 0a03 	mvn.w	sl, r3
 8006a32:	f04f 0900 	mov.w	r9, #0
 8006a36:	4639      	mov	r1, r7
 8006a38:	4620      	mov	r0, r4
 8006a3a:	f000 fb5d 	bl	80070f8 <_Bfree>
 8006a3e:	2e00      	cmp	r6, #0
 8006a40:	f43f aeb7 	beq.w	80067b2 <_dtoa_r+0x67a>
 8006a44:	f1b9 0f00 	cmp.w	r9, #0
 8006a48:	d005      	beq.n	8006a56 <_dtoa_r+0x91e>
 8006a4a:	45b1      	cmp	r9, r6
 8006a4c:	d003      	beq.n	8006a56 <_dtoa_r+0x91e>
 8006a4e:	4649      	mov	r1, r9
 8006a50:	4620      	mov	r0, r4
 8006a52:	f000 fb51 	bl	80070f8 <_Bfree>
 8006a56:	4631      	mov	r1, r6
 8006a58:	4620      	mov	r0, r4
 8006a5a:	f000 fb4d 	bl	80070f8 <_Bfree>
 8006a5e:	e6a8      	b.n	80067b2 <_dtoa_r+0x67a>
 8006a60:	2700      	movs	r7, #0
 8006a62:	463e      	mov	r6, r7
 8006a64:	e7e1      	b.n	8006a2a <_dtoa_r+0x8f2>
 8006a66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006a6a:	463e      	mov	r6, r7
 8006a6c:	e5a9      	b.n	80065c2 <_dtoa_r+0x48a>
 8006a6e:	bf00      	nop
 8006a70:	40240000 	.word	0x40240000
 8006a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a76:	f8cd 9008 	str.w	r9, [sp, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 80fa 	beq.w	8006c74 <_dtoa_r+0xb3c>
 8006a80:	2d00      	cmp	r5, #0
 8006a82:	dd05      	ble.n	8006a90 <_dtoa_r+0x958>
 8006a84:	4631      	mov	r1, r6
 8006a86:	462a      	mov	r2, r5
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f000 fcc3 	bl	8007414 <__lshift>
 8006a8e:	4606      	mov	r6, r0
 8006a90:	9b07      	ldr	r3, [sp, #28]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d04c      	beq.n	8006b30 <_dtoa_r+0x9f8>
 8006a96:	6871      	ldr	r1, [r6, #4]
 8006a98:	4620      	mov	r0, r4
 8006a9a:	f000 faf9 	bl	8007090 <_Balloc>
 8006a9e:	6932      	ldr	r2, [r6, #16]
 8006aa0:	3202      	adds	r2, #2
 8006aa2:	4605      	mov	r5, r0
 8006aa4:	0092      	lsls	r2, r2, #2
 8006aa6:	f106 010c 	add.w	r1, r6, #12
 8006aaa:	300c      	adds	r0, #12
 8006aac:	f7fe fcc0 	bl	8005430 <memcpy>
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 fcad 	bl	8007414 <__lshift>
 8006aba:	9b00      	ldr	r3, [sp, #0]
 8006abc:	f8cd b014 	str.w	fp, [sp, #20]
 8006ac0:	f003 0301 	and.w	r3, r3, #1
 8006ac4:	46b1      	mov	r9, r6
 8006ac6:	9307      	str	r3, [sp, #28]
 8006ac8:	4606      	mov	r6, r0
 8006aca:	4639      	mov	r1, r7
 8006acc:	9804      	ldr	r0, [sp, #16]
 8006ace:	f7ff faa5 	bl	800601c <quorem>
 8006ad2:	4649      	mov	r1, r9
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006ada:	9804      	ldr	r0, [sp, #16]
 8006adc:	f000 fcee 	bl	80074bc <__mcmp>
 8006ae0:	4632      	mov	r2, r6
 8006ae2:	9000      	str	r0, [sp, #0]
 8006ae4:	4639      	mov	r1, r7
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f000 fd02 	bl	80074f0 <__mdiff>
 8006aec:	68c3      	ldr	r3, [r0, #12]
 8006aee:	4602      	mov	r2, r0
 8006af0:	bb03      	cbnz	r3, 8006b34 <_dtoa_r+0x9fc>
 8006af2:	4601      	mov	r1, r0
 8006af4:	9008      	str	r0, [sp, #32]
 8006af6:	9804      	ldr	r0, [sp, #16]
 8006af8:	f000 fce0 	bl	80074bc <__mcmp>
 8006afc:	9a08      	ldr	r2, [sp, #32]
 8006afe:	4603      	mov	r3, r0
 8006b00:	4611      	mov	r1, r2
 8006b02:	4620      	mov	r0, r4
 8006b04:	9308      	str	r3, [sp, #32]
 8006b06:	f000 faf7 	bl	80070f8 <_Bfree>
 8006b0a:	9b08      	ldr	r3, [sp, #32]
 8006b0c:	b9a3      	cbnz	r3, 8006b38 <_dtoa_r+0xa00>
 8006b0e:	9a06      	ldr	r2, [sp, #24]
 8006b10:	b992      	cbnz	r2, 8006b38 <_dtoa_r+0xa00>
 8006b12:	9a07      	ldr	r2, [sp, #28]
 8006b14:	b982      	cbnz	r2, 8006b38 <_dtoa_r+0xa00>
 8006b16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b1a:	d029      	beq.n	8006b70 <_dtoa_r+0xa38>
 8006b1c:	9b00      	ldr	r3, [sp, #0]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dd01      	ble.n	8006b26 <_dtoa_r+0x9ee>
 8006b22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006b26:	9b05      	ldr	r3, [sp, #20]
 8006b28:	1c5d      	adds	r5, r3, #1
 8006b2a:	f883 8000 	strb.w	r8, [r3]
 8006b2e:	e782      	b.n	8006a36 <_dtoa_r+0x8fe>
 8006b30:	4630      	mov	r0, r6
 8006b32:	e7c2      	b.n	8006aba <_dtoa_r+0x982>
 8006b34:	2301      	movs	r3, #1
 8006b36:	e7e3      	b.n	8006b00 <_dtoa_r+0x9c8>
 8006b38:	9a00      	ldr	r2, [sp, #0]
 8006b3a:	2a00      	cmp	r2, #0
 8006b3c:	db04      	blt.n	8006b48 <_dtoa_r+0xa10>
 8006b3e:	d125      	bne.n	8006b8c <_dtoa_r+0xa54>
 8006b40:	9a06      	ldr	r2, [sp, #24]
 8006b42:	bb1a      	cbnz	r2, 8006b8c <_dtoa_r+0xa54>
 8006b44:	9a07      	ldr	r2, [sp, #28]
 8006b46:	bb0a      	cbnz	r2, 8006b8c <_dtoa_r+0xa54>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	ddec      	ble.n	8006b26 <_dtoa_r+0x9ee>
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	9904      	ldr	r1, [sp, #16]
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 fc5f 	bl	8007414 <__lshift>
 8006b56:	4639      	mov	r1, r7
 8006b58:	9004      	str	r0, [sp, #16]
 8006b5a:	f000 fcaf 	bl	80074bc <__mcmp>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	dc03      	bgt.n	8006b6a <_dtoa_r+0xa32>
 8006b62:	d1e0      	bne.n	8006b26 <_dtoa_r+0x9ee>
 8006b64:	f018 0f01 	tst.w	r8, #1
 8006b68:	d0dd      	beq.n	8006b26 <_dtoa_r+0x9ee>
 8006b6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b6e:	d1d8      	bne.n	8006b22 <_dtoa_r+0x9ea>
 8006b70:	9b05      	ldr	r3, [sp, #20]
 8006b72:	9a05      	ldr	r2, [sp, #20]
 8006b74:	1c5d      	adds	r5, r3, #1
 8006b76:	2339      	movs	r3, #57	; 0x39
 8006b78:	7013      	strb	r3, [r2, #0]
 8006b7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b7e:	2b39      	cmp	r3, #57	; 0x39
 8006b80:	f105 32ff 	add.w	r2, r5, #4294967295
 8006b84:	d04f      	beq.n	8006c26 <_dtoa_r+0xaee>
 8006b86:	3301      	adds	r3, #1
 8006b88:	7013      	strb	r3, [r2, #0]
 8006b8a:	e754      	b.n	8006a36 <_dtoa_r+0x8fe>
 8006b8c:	9a05      	ldr	r2, [sp, #20]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f102 0501 	add.w	r5, r2, #1
 8006b94:	dd06      	ble.n	8006ba4 <_dtoa_r+0xa6c>
 8006b96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b9a:	d0e9      	beq.n	8006b70 <_dtoa_r+0xa38>
 8006b9c:	f108 0801 	add.w	r8, r8, #1
 8006ba0:	9b05      	ldr	r3, [sp, #20]
 8006ba2:	e7c2      	b.n	8006b2a <_dtoa_r+0x9f2>
 8006ba4:	9a02      	ldr	r2, [sp, #8]
 8006ba6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006baa:	eba5 030b 	sub.w	r3, r5, fp
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d021      	beq.n	8006bf6 <_dtoa_r+0xabe>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	220a      	movs	r2, #10
 8006bb6:	9904      	ldr	r1, [sp, #16]
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fab4 	bl	8007126 <__multadd>
 8006bbe:	45b1      	cmp	r9, r6
 8006bc0:	9004      	str	r0, [sp, #16]
 8006bc2:	f04f 0300 	mov.w	r3, #0
 8006bc6:	f04f 020a 	mov.w	r2, #10
 8006bca:	4649      	mov	r1, r9
 8006bcc:	4620      	mov	r0, r4
 8006bce:	d105      	bne.n	8006bdc <_dtoa_r+0xaa4>
 8006bd0:	f000 faa9 	bl	8007126 <__multadd>
 8006bd4:	4681      	mov	r9, r0
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	9505      	str	r5, [sp, #20]
 8006bda:	e776      	b.n	8006aca <_dtoa_r+0x992>
 8006bdc:	f000 faa3 	bl	8007126 <__multadd>
 8006be0:	4631      	mov	r1, r6
 8006be2:	4681      	mov	r9, r0
 8006be4:	2300      	movs	r3, #0
 8006be6:	220a      	movs	r2, #10
 8006be8:	4620      	mov	r0, r4
 8006bea:	f000 fa9c 	bl	8007126 <__multadd>
 8006bee:	4606      	mov	r6, r0
 8006bf0:	e7f2      	b.n	8006bd8 <_dtoa_r+0xaa0>
 8006bf2:	f04f 0900 	mov.w	r9, #0
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	9904      	ldr	r1, [sp, #16]
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 fc0a 	bl	8007414 <__lshift>
 8006c00:	4639      	mov	r1, r7
 8006c02:	9004      	str	r0, [sp, #16]
 8006c04:	f000 fc5a 	bl	80074bc <__mcmp>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	dcb6      	bgt.n	8006b7a <_dtoa_r+0xa42>
 8006c0c:	d102      	bne.n	8006c14 <_dtoa_r+0xadc>
 8006c0e:	f018 0f01 	tst.w	r8, #1
 8006c12:	d1b2      	bne.n	8006b7a <_dtoa_r+0xa42>
 8006c14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c18:	2b30      	cmp	r3, #48	; 0x30
 8006c1a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006c1e:	f47f af0a 	bne.w	8006a36 <_dtoa_r+0x8fe>
 8006c22:	4615      	mov	r5, r2
 8006c24:	e7f6      	b.n	8006c14 <_dtoa_r+0xadc>
 8006c26:	4593      	cmp	fp, r2
 8006c28:	d105      	bne.n	8006c36 <_dtoa_r+0xafe>
 8006c2a:	2331      	movs	r3, #49	; 0x31
 8006c2c:	f10a 0a01 	add.w	sl, sl, #1
 8006c30:	f88b 3000 	strb.w	r3, [fp]
 8006c34:	e6ff      	b.n	8006a36 <_dtoa_r+0x8fe>
 8006c36:	4615      	mov	r5, r2
 8006c38:	e79f      	b.n	8006b7a <_dtoa_r+0xa42>
 8006c3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006ca0 <_dtoa_r+0xb68>
 8006c3e:	e007      	b.n	8006c50 <_dtoa_r+0xb18>
 8006c40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c42:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006ca4 <_dtoa_r+0xb6c>
 8006c46:	b11b      	cbz	r3, 8006c50 <_dtoa_r+0xb18>
 8006c48:	f10b 0308 	add.w	r3, fp, #8
 8006c4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006c4e:	6013      	str	r3, [r2, #0]
 8006c50:	4658      	mov	r0, fp
 8006c52:	b017      	add	sp, #92	; 0x5c
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	9b06      	ldr	r3, [sp, #24]
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	f77f ae35 	ble.w	80068ca <_dtoa_r+0x792>
 8006c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c62:	9307      	str	r3, [sp, #28]
 8006c64:	e649      	b.n	80068fa <_dtoa_r+0x7c2>
 8006c66:	9b02      	ldr	r3, [sp, #8]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	dc03      	bgt.n	8006c74 <_dtoa_r+0xb3c>
 8006c6c:	9b06      	ldr	r3, [sp, #24]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	f73f aecc 	bgt.w	8006a0c <_dtoa_r+0x8d4>
 8006c74:	465d      	mov	r5, fp
 8006c76:	4639      	mov	r1, r7
 8006c78:	9804      	ldr	r0, [sp, #16]
 8006c7a:	f7ff f9cf 	bl	800601c <quorem>
 8006c7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006c82:	f805 8b01 	strb.w	r8, [r5], #1
 8006c86:	9a02      	ldr	r2, [sp, #8]
 8006c88:	eba5 030b 	sub.w	r3, r5, fp
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	ddb0      	ble.n	8006bf2 <_dtoa_r+0xaba>
 8006c90:	2300      	movs	r3, #0
 8006c92:	220a      	movs	r2, #10
 8006c94:	9904      	ldr	r1, [sp, #16]
 8006c96:	4620      	mov	r0, r4
 8006c98:	f000 fa45 	bl	8007126 <__multadd>
 8006c9c:	9004      	str	r0, [sp, #16]
 8006c9e:	e7ea      	b.n	8006c76 <_dtoa_r+0xb3e>
 8006ca0:	08008170 	.word	0x08008170
 8006ca4:	08008194 	.word	0x08008194

08006ca8 <__sflush_r>:
 8006ca8:	898a      	ldrh	r2, [r1, #12]
 8006caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cae:	4605      	mov	r5, r0
 8006cb0:	0710      	lsls	r0, r2, #28
 8006cb2:	460c      	mov	r4, r1
 8006cb4:	d458      	bmi.n	8006d68 <__sflush_r+0xc0>
 8006cb6:	684b      	ldr	r3, [r1, #4]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	dc05      	bgt.n	8006cc8 <__sflush_r+0x20>
 8006cbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	dc02      	bgt.n	8006cc8 <__sflush_r+0x20>
 8006cc2:	2000      	movs	r0, #0
 8006cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cca:	2e00      	cmp	r6, #0
 8006ccc:	d0f9      	beq.n	8006cc2 <__sflush_r+0x1a>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006cd4:	682f      	ldr	r7, [r5, #0]
 8006cd6:	6a21      	ldr	r1, [r4, #32]
 8006cd8:	602b      	str	r3, [r5, #0]
 8006cda:	d032      	beq.n	8006d42 <__sflush_r+0x9a>
 8006cdc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	075a      	lsls	r2, r3, #29
 8006ce2:	d505      	bpl.n	8006cf0 <__sflush_r+0x48>
 8006ce4:	6863      	ldr	r3, [r4, #4]
 8006ce6:	1ac0      	subs	r0, r0, r3
 8006ce8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006cea:	b10b      	cbz	r3, 8006cf0 <__sflush_r+0x48>
 8006cec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006cee:	1ac0      	subs	r0, r0, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006cf6:	6a21      	ldr	r1, [r4, #32]
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	47b0      	blx	r6
 8006cfc:	1c43      	adds	r3, r0, #1
 8006cfe:	89a3      	ldrh	r3, [r4, #12]
 8006d00:	d106      	bne.n	8006d10 <__sflush_r+0x68>
 8006d02:	6829      	ldr	r1, [r5, #0]
 8006d04:	291d      	cmp	r1, #29
 8006d06:	d848      	bhi.n	8006d9a <__sflush_r+0xf2>
 8006d08:	4a29      	ldr	r2, [pc, #164]	; (8006db0 <__sflush_r+0x108>)
 8006d0a:	40ca      	lsrs	r2, r1
 8006d0c:	07d6      	lsls	r6, r2, #31
 8006d0e:	d544      	bpl.n	8006d9a <__sflush_r+0xf2>
 8006d10:	2200      	movs	r2, #0
 8006d12:	6062      	str	r2, [r4, #4]
 8006d14:	04d9      	lsls	r1, r3, #19
 8006d16:	6922      	ldr	r2, [r4, #16]
 8006d18:	6022      	str	r2, [r4, #0]
 8006d1a:	d504      	bpl.n	8006d26 <__sflush_r+0x7e>
 8006d1c:	1c42      	adds	r2, r0, #1
 8006d1e:	d101      	bne.n	8006d24 <__sflush_r+0x7c>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b903      	cbnz	r3, 8006d26 <__sflush_r+0x7e>
 8006d24:	6560      	str	r0, [r4, #84]	; 0x54
 8006d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d28:	602f      	str	r7, [r5, #0]
 8006d2a:	2900      	cmp	r1, #0
 8006d2c:	d0c9      	beq.n	8006cc2 <__sflush_r+0x1a>
 8006d2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d32:	4299      	cmp	r1, r3
 8006d34:	d002      	beq.n	8006d3c <__sflush_r+0x94>
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 fc94 	bl	8007664 <_free_r>
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	6360      	str	r0, [r4, #52]	; 0x34
 8006d40:	e7c0      	b.n	8006cc4 <__sflush_r+0x1c>
 8006d42:	2301      	movs	r3, #1
 8006d44:	4628      	mov	r0, r5
 8006d46:	47b0      	blx	r6
 8006d48:	1c41      	adds	r1, r0, #1
 8006d4a:	d1c8      	bne.n	8006cde <__sflush_r+0x36>
 8006d4c:	682b      	ldr	r3, [r5, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d0c5      	beq.n	8006cde <__sflush_r+0x36>
 8006d52:	2b1d      	cmp	r3, #29
 8006d54:	d001      	beq.n	8006d5a <__sflush_r+0xb2>
 8006d56:	2b16      	cmp	r3, #22
 8006d58:	d101      	bne.n	8006d5e <__sflush_r+0xb6>
 8006d5a:	602f      	str	r7, [r5, #0]
 8006d5c:	e7b1      	b.n	8006cc2 <__sflush_r+0x1a>
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d64:	81a3      	strh	r3, [r4, #12]
 8006d66:	e7ad      	b.n	8006cc4 <__sflush_r+0x1c>
 8006d68:	690f      	ldr	r7, [r1, #16]
 8006d6a:	2f00      	cmp	r7, #0
 8006d6c:	d0a9      	beq.n	8006cc2 <__sflush_r+0x1a>
 8006d6e:	0793      	lsls	r3, r2, #30
 8006d70:	680e      	ldr	r6, [r1, #0]
 8006d72:	bf08      	it	eq
 8006d74:	694b      	ldreq	r3, [r1, #20]
 8006d76:	600f      	str	r7, [r1, #0]
 8006d78:	bf18      	it	ne
 8006d7a:	2300      	movne	r3, #0
 8006d7c:	eba6 0807 	sub.w	r8, r6, r7
 8006d80:	608b      	str	r3, [r1, #8]
 8006d82:	f1b8 0f00 	cmp.w	r8, #0
 8006d86:	dd9c      	ble.n	8006cc2 <__sflush_r+0x1a>
 8006d88:	4643      	mov	r3, r8
 8006d8a:	463a      	mov	r2, r7
 8006d8c:	6a21      	ldr	r1, [r4, #32]
 8006d8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006d90:	4628      	mov	r0, r5
 8006d92:	47b0      	blx	r6
 8006d94:	2800      	cmp	r0, #0
 8006d96:	dc06      	bgt.n	8006da6 <__sflush_r+0xfe>
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d9e:	81a3      	strh	r3, [r4, #12]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295
 8006da4:	e78e      	b.n	8006cc4 <__sflush_r+0x1c>
 8006da6:	4407      	add	r7, r0
 8006da8:	eba8 0800 	sub.w	r8, r8, r0
 8006dac:	e7e9      	b.n	8006d82 <__sflush_r+0xda>
 8006dae:	bf00      	nop
 8006db0:	20400001 	.word	0x20400001

08006db4 <_fflush_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	690b      	ldr	r3, [r1, #16]
 8006db8:	4605      	mov	r5, r0
 8006dba:	460c      	mov	r4, r1
 8006dbc:	b1db      	cbz	r3, 8006df6 <_fflush_r+0x42>
 8006dbe:	b118      	cbz	r0, 8006dc8 <_fflush_r+0x14>
 8006dc0:	6983      	ldr	r3, [r0, #24]
 8006dc2:	b90b      	cbnz	r3, 8006dc8 <_fflush_r+0x14>
 8006dc4:	f000 f860 	bl	8006e88 <__sinit>
 8006dc8:	4b0c      	ldr	r3, [pc, #48]	; (8006dfc <_fflush_r+0x48>)
 8006dca:	429c      	cmp	r4, r3
 8006dcc:	d109      	bne.n	8006de2 <_fflush_r+0x2e>
 8006dce:	686c      	ldr	r4, [r5, #4]
 8006dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dd4:	b17b      	cbz	r3, 8006df6 <_fflush_r+0x42>
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	4628      	mov	r0, r5
 8006dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dde:	f7ff bf63 	b.w	8006ca8 <__sflush_r>
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <_fflush_r+0x4c>)
 8006de4:	429c      	cmp	r4, r3
 8006de6:	d101      	bne.n	8006dec <_fflush_r+0x38>
 8006de8:	68ac      	ldr	r4, [r5, #8]
 8006dea:	e7f1      	b.n	8006dd0 <_fflush_r+0x1c>
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <_fflush_r+0x50>)
 8006dee:	429c      	cmp	r4, r3
 8006df0:	bf08      	it	eq
 8006df2:	68ec      	ldreq	r4, [r5, #12]
 8006df4:	e7ec      	b.n	8006dd0 <_fflush_r+0x1c>
 8006df6:	2000      	movs	r0, #0
 8006df8:	bd38      	pop	{r3, r4, r5, pc}
 8006dfa:	bf00      	nop
 8006dfc:	080081c4 	.word	0x080081c4
 8006e00:	080081e4 	.word	0x080081e4
 8006e04:	080081a4 	.word	0x080081a4

08006e08 <std>:
 8006e08:	2300      	movs	r3, #0
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e12:	6083      	str	r3, [r0, #8]
 8006e14:	8181      	strh	r1, [r0, #12]
 8006e16:	6643      	str	r3, [r0, #100]	; 0x64
 8006e18:	81c2      	strh	r2, [r0, #14]
 8006e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e1e:	6183      	str	r3, [r0, #24]
 8006e20:	4619      	mov	r1, r3
 8006e22:	2208      	movs	r2, #8
 8006e24:	305c      	adds	r0, #92	; 0x5c
 8006e26:	f7fe fb0e 	bl	8005446 <memset>
 8006e2a:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <std+0x38>)
 8006e2c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e2e:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <std+0x3c>)
 8006e30:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e32:	4b05      	ldr	r3, [pc, #20]	; (8006e48 <std+0x40>)
 8006e34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e36:	4b05      	ldr	r3, [pc, #20]	; (8006e4c <std+0x44>)
 8006e38:	6224      	str	r4, [r4, #32]
 8006e3a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e3c:	bd10      	pop	{r4, pc}
 8006e3e:	bf00      	nop
 8006e40:	08007cf9 	.word	0x08007cf9
 8006e44:	08007d1b 	.word	0x08007d1b
 8006e48:	08007d53 	.word	0x08007d53
 8006e4c:	08007d77 	.word	0x08007d77

08006e50 <_cleanup_r>:
 8006e50:	4901      	ldr	r1, [pc, #4]	; (8006e58 <_cleanup_r+0x8>)
 8006e52:	f000 b885 	b.w	8006f60 <_fwalk_reent>
 8006e56:	bf00      	nop
 8006e58:	08006db5 	.word	0x08006db5

08006e5c <__sfmoreglue>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	1e4a      	subs	r2, r1, #1
 8006e60:	2568      	movs	r5, #104	; 0x68
 8006e62:	4355      	muls	r5, r2
 8006e64:	460e      	mov	r6, r1
 8006e66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e6a:	f000 fc49 	bl	8007700 <_malloc_r>
 8006e6e:	4604      	mov	r4, r0
 8006e70:	b140      	cbz	r0, 8006e84 <__sfmoreglue+0x28>
 8006e72:	2100      	movs	r1, #0
 8006e74:	e9c0 1600 	strd	r1, r6, [r0]
 8006e78:	300c      	adds	r0, #12
 8006e7a:	60a0      	str	r0, [r4, #8]
 8006e7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e80:	f7fe fae1 	bl	8005446 <memset>
 8006e84:	4620      	mov	r0, r4
 8006e86:	bd70      	pop	{r4, r5, r6, pc}

08006e88 <__sinit>:
 8006e88:	6983      	ldr	r3, [r0, #24]
 8006e8a:	b510      	push	{r4, lr}
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	bb33      	cbnz	r3, 8006ede <__sinit+0x56>
 8006e90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006e94:	6503      	str	r3, [r0, #80]	; 0x50
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <__sinit+0x58>)
 8006e98:	4a12      	ldr	r2, [pc, #72]	; (8006ee4 <__sinit+0x5c>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6282      	str	r2, [r0, #40]	; 0x28
 8006e9e:	4298      	cmp	r0, r3
 8006ea0:	bf04      	itt	eq
 8006ea2:	2301      	moveq	r3, #1
 8006ea4:	6183      	streq	r3, [r0, #24]
 8006ea6:	f000 f81f 	bl	8006ee8 <__sfp>
 8006eaa:	6060      	str	r0, [r4, #4]
 8006eac:	4620      	mov	r0, r4
 8006eae:	f000 f81b 	bl	8006ee8 <__sfp>
 8006eb2:	60a0      	str	r0, [r4, #8]
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	f000 f817 	bl	8006ee8 <__sfp>
 8006eba:	2200      	movs	r2, #0
 8006ebc:	60e0      	str	r0, [r4, #12]
 8006ebe:	2104      	movs	r1, #4
 8006ec0:	6860      	ldr	r0, [r4, #4]
 8006ec2:	f7ff ffa1 	bl	8006e08 <std>
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	2109      	movs	r1, #9
 8006eca:	68a0      	ldr	r0, [r4, #8]
 8006ecc:	f7ff ff9c 	bl	8006e08 <std>
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	2112      	movs	r1, #18
 8006ed4:	68e0      	ldr	r0, [r4, #12]
 8006ed6:	f7ff ff97 	bl	8006e08 <std>
 8006eda:	2301      	movs	r3, #1
 8006edc:	61a3      	str	r3, [r4, #24]
 8006ede:	bd10      	pop	{r4, pc}
 8006ee0:	0800815c 	.word	0x0800815c
 8006ee4:	08006e51 	.word	0x08006e51

08006ee8 <__sfp>:
 8006ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eea:	4b1b      	ldr	r3, [pc, #108]	; (8006f58 <__sfp+0x70>)
 8006eec:	681e      	ldr	r6, [r3, #0]
 8006eee:	69b3      	ldr	r3, [r6, #24]
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	b913      	cbnz	r3, 8006efa <__sfp+0x12>
 8006ef4:	4630      	mov	r0, r6
 8006ef6:	f7ff ffc7 	bl	8006e88 <__sinit>
 8006efa:	3648      	adds	r6, #72	; 0x48
 8006efc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	d503      	bpl.n	8006f0c <__sfp+0x24>
 8006f04:	6833      	ldr	r3, [r6, #0]
 8006f06:	b133      	cbz	r3, 8006f16 <__sfp+0x2e>
 8006f08:	6836      	ldr	r6, [r6, #0]
 8006f0a:	e7f7      	b.n	8006efc <__sfp+0x14>
 8006f0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f10:	b16d      	cbz	r5, 8006f2e <__sfp+0x46>
 8006f12:	3468      	adds	r4, #104	; 0x68
 8006f14:	e7f4      	b.n	8006f00 <__sfp+0x18>
 8006f16:	2104      	movs	r1, #4
 8006f18:	4638      	mov	r0, r7
 8006f1a:	f7ff ff9f 	bl	8006e5c <__sfmoreglue>
 8006f1e:	6030      	str	r0, [r6, #0]
 8006f20:	2800      	cmp	r0, #0
 8006f22:	d1f1      	bne.n	8006f08 <__sfp+0x20>
 8006f24:	230c      	movs	r3, #12
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	4604      	mov	r4, r0
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <__sfp+0x74>)
 8006f30:	6665      	str	r5, [r4, #100]	; 0x64
 8006f32:	e9c4 5500 	strd	r5, r5, [r4]
 8006f36:	60a5      	str	r5, [r4, #8]
 8006f38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006f3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006f40:	2208      	movs	r2, #8
 8006f42:	4629      	mov	r1, r5
 8006f44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006f48:	f7fe fa7d 	bl	8005446 <memset>
 8006f4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006f50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006f54:	e7e9      	b.n	8006f2a <__sfp+0x42>
 8006f56:	bf00      	nop
 8006f58:	0800815c 	.word	0x0800815c
 8006f5c:	ffff0001 	.word	0xffff0001

08006f60 <_fwalk_reent>:
 8006f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f64:	4680      	mov	r8, r0
 8006f66:	4689      	mov	r9, r1
 8006f68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	b914      	cbnz	r4, 8006f76 <_fwalk_reent+0x16>
 8006f70:	4630      	mov	r0, r6
 8006f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006f7a:	3f01      	subs	r7, #1
 8006f7c:	d501      	bpl.n	8006f82 <_fwalk_reent+0x22>
 8006f7e:	6824      	ldr	r4, [r4, #0]
 8006f80:	e7f5      	b.n	8006f6e <_fwalk_reent+0xe>
 8006f82:	89ab      	ldrh	r3, [r5, #12]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d907      	bls.n	8006f98 <_fwalk_reent+0x38>
 8006f88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	d003      	beq.n	8006f98 <_fwalk_reent+0x38>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4640      	mov	r0, r8
 8006f94:	47c8      	blx	r9
 8006f96:	4306      	orrs	r6, r0
 8006f98:	3568      	adds	r5, #104	; 0x68
 8006f9a:	e7ee      	b.n	8006f7a <_fwalk_reent+0x1a>

08006f9c <_localeconv_r>:
 8006f9c:	4b04      	ldr	r3, [pc, #16]	; (8006fb0 <_localeconv_r+0x14>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6a18      	ldr	r0, [r3, #32]
 8006fa2:	4b04      	ldr	r3, [pc, #16]	; (8006fb4 <_localeconv_r+0x18>)
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	bf08      	it	eq
 8006fa8:	4618      	moveq	r0, r3
 8006faa:	30f0      	adds	r0, #240	; 0xf0
 8006fac:	4770      	bx	lr
 8006fae:	bf00      	nop
 8006fb0:	20000020 	.word	0x20000020
 8006fb4:	20000084 	.word	0x20000084

08006fb8 <__swhatbuf_r>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	460e      	mov	r6, r1
 8006fbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fc0:	2900      	cmp	r1, #0
 8006fc2:	b096      	sub	sp, #88	; 0x58
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	461d      	mov	r5, r3
 8006fc8:	da07      	bge.n	8006fda <__swhatbuf_r+0x22>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	602b      	str	r3, [r5, #0]
 8006fce:	89b3      	ldrh	r3, [r6, #12]
 8006fd0:	061a      	lsls	r2, r3, #24
 8006fd2:	d410      	bmi.n	8006ff6 <__swhatbuf_r+0x3e>
 8006fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fd8:	e00e      	b.n	8006ff8 <__swhatbuf_r+0x40>
 8006fda:	466a      	mov	r2, sp
 8006fdc:	f000 fef2 	bl	8007dc4 <_fstat_r>
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	dbf2      	blt.n	8006fca <__swhatbuf_r+0x12>
 8006fe4:	9a01      	ldr	r2, [sp, #4]
 8006fe6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006fea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006fee:	425a      	negs	r2, r3
 8006ff0:	415a      	adcs	r2, r3
 8006ff2:	602a      	str	r2, [r5, #0]
 8006ff4:	e7ee      	b.n	8006fd4 <__swhatbuf_r+0x1c>
 8006ff6:	2340      	movs	r3, #64	; 0x40
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	6023      	str	r3, [r4, #0]
 8006ffc:	b016      	add	sp, #88	; 0x58
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}

08007000 <__smakebuf_r>:
 8007000:	898b      	ldrh	r3, [r1, #12]
 8007002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007004:	079d      	lsls	r5, r3, #30
 8007006:	4606      	mov	r6, r0
 8007008:	460c      	mov	r4, r1
 800700a:	d507      	bpl.n	800701c <__smakebuf_r+0x1c>
 800700c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007010:	6023      	str	r3, [r4, #0]
 8007012:	6123      	str	r3, [r4, #16]
 8007014:	2301      	movs	r3, #1
 8007016:	6163      	str	r3, [r4, #20]
 8007018:	b002      	add	sp, #8
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	ab01      	add	r3, sp, #4
 800701e:	466a      	mov	r2, sp
 8007020:	f7ff ffca 	bl	8006fb8 <__swhatbuf_r>
 8007024:	9900      	ldr	r1, [sp, #0]
 8007026:	4605      	mov	r5, r0
 8007028:	4630      	mov	r0, r6
 800702a:	f000 fb69 	bl	8007700 <_malloc_r>
 800702e:	b948      	cbnz	r0, 8007044 <__smakebuf_r+0x44>
 8007030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007034:	059a      	lsls	r2, r3, #22
 8007036:	d4ef      	bmi.n	8007018 <__smakebuf_r+0x18>
 8007038:	f023 0303 	bic.w	r3, r3, #3
 800703c:	f043 0302 	orr.w	r3, r3, #2
 8007040:	81a3      	strh	r3, [r4, #12]
 8007042:	e7e3      	b.n	800700c <__smakebuf_r+0xc>
 8007044:	4b0d      	ldr	r3, [pc, #52]	; (800707c <__smakebuf_r+0x7c>)
 8007046:	62b3      	str	r3, [r6, #40]	; 0x28
 8007048:	89a3      	ldrh	r3, [r4, #12]
 800704a:	6020      	str	r0, [r4, #0]
 800704c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007050:	81a3      	strh	r3, [r4, #12]
 8007052:	9b00      	ldr	r3, [sp, #0]
 8007054:	6163      	str	r3, [r4, #20]
 8007056:	9b01      	ldr	r3, [sp, #4]
 8007058:	6120      	str	r0, [r4, #16]
 800705a:	b15b      	cbz	r3, 8007074 <__smakebuf_r+0x74>
 800705c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007060:	4630      	mov	r0, r6
 8007062:	f000 fec1 	bl	8007de8 <_isatty_r>
 8007066:	b128      	cbz	r0, 8007074 <__smakebuf_r+0x74>
 8007068:	89a3      	ldrh	r3, [r4, #12]
 800706a:	f023 0303 	bic.w	r3, r3, #3
 800706e:	f043 0301 	orr.w	r3, r3, #1
 8007072:	81a3      	strh	r3, [r4, #12]
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	431d      	orrs	r5, r3
 8007078:	81a5      	strh	r5, [r4, #12]
 800707a:	e7cd      	b.n	8007018 <__smakebuf_r+0x18>
 800707c:	08006e51 	.word	0x08006e51

08007080 <malloc>:
 8007080:	4b02      	ldr	r3, [pc, #8]	; (800708c <malloc+0xc>)
 8007082:	4601      	mov	r1, r0
 8007084:	6818      	ldr	r0, [r3, #0]
 8007086:	f000 bb3b 	b.w	8007700 <_malloc_r>
 800708a:	bf00      	nop
 800708c:	20000020 	.word	0x20000020

08007090 <_Balloc>:
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007094:	4604      	mov	r4, r0
 8007096:	460e      	mov	r6, r1
 8007098:	b93d      	cbnz	r5, 80070aa <_Balloc+0x1a>
 800709a:	2010      	movs	r0, #16
 800709c:	f7ff fff0 	bl	8007080 <malloc>
 80070a0:	6260      	str	r0, [r4, #36]	; 0x24
 80070a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070a6:	6005      	str	r5, [r0, #0]
 80070a8:	60c5      	str	r5, [r0, #12]
 80070aa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80070ac:	68eb      	ldr	r3, [r5, #12]
 80070ae:	b183      	cbz	r3, 80070d2 <_Balloc+0x42>
 80070b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80070b8:	b9b8      	cbnz	r0, 80070ea <_Balloc+0x5a>
 80070ba:	2101      	movs	r1, #1
 80070bc:	fa01 f506 	lsl.w	r5, r1, r6
 80070c0:	1d6a      	adds	r2, r5, #5
 80070c2:	0092      	lsls	r2, r2, #2
 80070c4:	4620      	mov	r0, r4
 80070c6:	f000 fabf 	bl	8007648 <_calloc_r>
 80070ca:	b160      	cbz	r0, 80070e6 <_Balloc+0x56>
 80070cc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80070d0:	e00e      	b.n	80070f0 <_Balloc+0x60>
 80070d2:	2221      	movs	r2, #33	; 0x21
 80070d4:	2104      	movs	r1, #4
 80070d6:	4620      	mov	r0, r4
 80070d8:	f000 fab6 	bl	8007648 <_calloc_r>
 80070dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070de:	60e8      	str	r0, [r5, #12]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e4      	bne.n	80070b0 <_Balloc+0x20>
 80070e6:	2000      	movs	r0, #0
 80070e8:	bd70      	pop	{r4, r5, r6, pc}
 80070ea:	6802      	ldr	r2, [r0, #0]
 80070ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80070f0:	2300      	movs	r3, #0
 80070f2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80070f6:	e7f7      	b.n	80070e8 <_Balloc+0x58>

080070f8 <_Bfree>:
 80070f8:	b570      	push	{r4, r5, r6, lr}
 80070fa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80070fc:	4606      	mov	r6, r0
 80070fe:	460d      	mov	r5, r1
 8007100:	b93c      	cbnz	r4, 8007112 <_Bfree+0x1a>
 8007102:	2010      	movs	r0, #16
 8007104:	f7ff ffbc 	bl	8007080 <malloc>
 8007108:	6270      	str	r0, [r6, #36]	; 0x24
 800710a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800710e:	6004      	str	r4, [r0, #0]
 8007110:	60c4      	str	r4, [r0, #12]
 8007112:	b13d      	cbz	r5, 8007124 <_Bfree+0x2c>
 8007114:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007116:	686a      	ldr	r2, [r5, #4]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800711e:	6029      	str	r1, [r5, #0]
 8007120:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007124:	bd70      	pop	{r4, r5, r6, pc}

08007126 <__multadd>:
 8007126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800712a:	690d      	ldr	r5, [r1, #16]
 800712c:	461f      	mov	r7, r3
 800712e:	4606      	mov	r6, r0
 8007130:	460c      	mov	r4, r1
 8007132:	f101 0c14 	add.w	ip, r1, #20
 8007136:	2300      	movs	r3, #0
 8007138:	f8dc 0000 	ldr.w	r0, [ip]
 800713c:	b281      	uxth	r1, r0
 800713e:	fb02 7101 	mla	r1, r2, r1, r7
 8007142:	0c0f      	lsrs	r7, r1, #16
 8007144:	0c00      	lsrs	r0, r0, #16
 8007146:	fb02 7000 	mla	r0, r2, r0, r7
 800714a:	b289      	uxth	r1, r1
 800714c:	3301      	adds	r3, #1
 800714e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007152:	429d      	cmp	r5, r3
 8007154:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007158:	f84c 1b04 	str.w	r1, [ip], #4
 800715c:	dcec      	bgt.n	8007138 <__multadd+0x12>
 800715e:	b1d7      	cbz	r7, 8007196 <__multadd+0x70>
 8007160:	68a3      	ldr	r3, [r4, #8]
 8007162:	42ab      	cmp	r3, r5
 8007164:	dc12      	bgt.n	800718c <__multadd+0x66>
 8007166:	6861      	ldr	r1, [r4, #4]
 8007168:	4630      	mov	r0, r6
 800716a:	3101      	adds	r1, #1
 800716c:	f7ff ff90 	bl	8007090 <_Balloc>
 8007170:	6922      	ldr	r2, [r4, #16]
 8007172:	3202      	adds	r2, #2
 8007174:	f104 010c 	add.w	r1, r4, #12
 8007178:	4680      	mov	r8, r0
 800717a:	0092      	lsls	r2, r2, #2
 800717c:	300c      	adds	r0, #12
 800717e:	f7fe f957 	bl	8005430 <memcpy>
 8007182:	4621      	mov	r1, r4
 8007184:	4630      	mov	r0, r6
 8007186:	f7ff ffb7 	bl	80070f8 <_Bfree>
 800718a:	4644      	mov	r4, r8
 800718c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007190:	3501      	adds	r5, #1
 8007192:	615f      	str	r7, [r3, #20]
 8007194:	6125      	str	r5, [r4, #16]
 8007196:	4620      	mov	r0, r4
 8007198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800719c <__hi0bits>:
 800719c:	0c02      	lsrs	r2, r0, #16
 800719e:	0412      	lsls	r2, r2, #16
 80071a0:	4603      	mov	r3, r0
 80071a2:	b9b2      	cbnz	r2, 80071d2 <__hi0bits+0x36>
 80071a4:	0403      	lsls	r3, r0, #16
 80071a6:	2010      	movs	r0, #16
 80071a8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80071ac:	bf04      	itt	eq
 80071ae:	021b      	lsleq	r3, r3, #8
 80071b0:	3008      	addeq	r0, #8
 80071b2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80071b6:	bf04      	itt	eq
 80071b8:	011b      	lsleq	r3, r3, #4
 80071ba:	3004      	addeq	r0, #4
 80071bc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80071c0:	bf04      	itt	eq
 80071c2:	009b      	lsleq	r3, r3, #2
 80071c4:	3002      	addeq	r0, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	db06      	blt.n	80071d8 <__hi0bits+0x3c>
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	d503      	bpl.n	80071d6 <__hi0bits+0x3a>
 80071ce:	3001      	adds	r0, #1
 80071d0:	4770      	bx	lr
 80071d2:	2000      	movs	r0, #0
 80071d4:	e7e8      	b.n	80071a8 <__hi0bits+0xc>
 80071d6:	2020      	movs	r0, #32
 80071d8:	4770      	bx	lr

080071da <__lo0bits>:
 80071da:	6803      	ldr	r3, [r0, #0]
 80071dc:	f013 0207 	ands.w	r2, r3, #7
 80071e0:	4601      	mov	r1, r0
 80071e2:	d00b      	beq.n	80071fc <__lo0bits+0x22>
 80071e4:	07da      	lsls	r2, r3, #31
 80071e6:	d423      	bmi.n	8007230 <__lo0bits+0x56>
 80071e8:	0798      	lsls	r0, r3, #30
 80071ea:	bf49      	itett	mi
 80071ec:	085b      	lsrmi	r3, r3, #1
 80071ee:	089b      	lsrpl	r3, r3, #2
 80071f0:	2001      	movmi	r0, #1
 80071f2:	600b      	strmi	r3, [r1, #0]
 80071f4:	bf5c      	itt	pl
 80071f6:	600b      	strpl	r3, [r1, #0]
 80071f8:	2002      	movpl	r0, #2
 80071fa:	4770      	bx	lr
 80071fc:	b298      	uxth	r0, r3
 80071fe:	b9a8      	cbnz	r0, 800722c <__lo0bits+0x52>
 8007200:	0c1b      	lsrs	r3, r3, #16
 8007202:	2010      	movs	r0, #16
 8007204:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007208:	bf04      	itt	eq
 800720a:	0a1b      	lsreq	r3, r3, #8
 800720c:	3008      	addeq	r0, #8
 800720e:	071a      	lsls	r2, r3, #28
 8007210:	bf04      	itt	eq
 8007212:	091b      	lsreq	r3, r3, #4
 8007214:	3004      	addeq	r0, #4
 8007216:	079a      	lsls	r2, r3, #30
 8007218:	bf04      	itt	eq
 800721a:	089b      	lsreq	r3, r3, #2
 800721c:	3002      	addeq	r0, #2
 800721e:	07da      	lsls	r2, r3, #31
 8007220:	d402      	bmi.n	8007228 <__lo0bits+0x4e>
 8007222:	085b      	lsrs	r3, r3, #1
 8007224:	d006      	beq.n	8007234 <__lo0bits+0x5a>
 8007226:	3001      	adds	r0, #1
 8007228:	600b      	str	r3, [r1, #0]
 800722a:	4770      	bx	lr
 800722c:	4610      	mov	r0, r2
 800722e:	e7e9      	b.n	8007204 <__lo0bits+0x2a>
 8007230:	2000      	movs	r0, #0
 8007232:	4770      	bx	lr
 8007234:	2020      	movs	r0, #32
 8007236:	4770      	bx	lr

08007238 <__i2b>:
 8007238:	b510      	push	{r4, lr}
 800723a:	460c      	mov	r4, r1
 800723c:	2101      	movs	r1, #1
 800723e:	f7ff ff27 	bl	8007090 <_Balloc>
 8007242:	2201      	movs	r2, #1
 8007244:	6144      	str	r4, [r0, #20]
 8007246:	6102      	str	r2, [r0, #16]
 8007248:	bd10      	pop	{r4, pc}

0800724a <__multiply>:
 800724a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800724e:	4614      	mov	r4, r2
 8007250:	690a      	ldr	r2, [r1, #16]
 8007252:	6923      	ldr	r3, [r4, #16]
 8007254:	429a      	cmp	r2, r3
 8007256:	bfb8      	it	lt
 8007258:	460b      	movlt	r3, r1
 800725a:	4688      	mov	r8, r1
 800725c:	bfbc      	itt	lt
 800725e:	46a0      	movlt	r8, r4
 8007260:	461c      	movlt	r4, r3
 8007262:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007266:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800726a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800726e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007272:	eb07 0609 	add.w	r6, r7, r9
 8007276:	42b3      	cmp	r3, r6
 8007278:	bfb8      	it	lt
 800727a:	3101      	addlt	r1, #1
 800727c:	f7ff ff08 	bl	8007090 <_Balloc>
 8007280:	f100 0514 	add.w	r5, r0, #20
 8007284:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007288:	462b      	mov	r3, r5
 800728a:	2200      	movs	r2, #0
 800728c:	4573      	cmp	r3, lr
 800728e:	d316      	bcc.n	80072be <__multiply+0x74>
 8007290:	f104 0214 	add.w	r2, r4, #20
 8007294:	f108 0114 	add.w	r1, r8, #20
 8007298:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800729c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80072a0:	9300      	str	r3, [sp, #0]
 80072a2:	9b00      	ldr	r3, [sp, #0]
 80072a4:	9201      	str	r2, [sp, #4]
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d80c      	bhi.n	80072c4 <__multiply+0x7a>
 80072aa:	2e00      	cmp	r6, #0
 80072ac:	dd03      	ble.n	80072b6 <__multiply+0x6c>
 80072ae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d05d      	beq.n	8007372 <__multiply+0x128>
 80072b6:	6106      	str	r6, [r0, #16]
 80072b8:	b003      	add	sp, #12
 80072ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072be:	f843 2b04 	str.w	r2, [r3], #4
 80072c2:	e7e3      	b.n	800728c <__multiply+0x42>
 80072c4:	f8b2 b000 	ldrh.w	fp, [r2]
 80072c8:	f1bb 0f00 	cmp.w	fp, #0
 80072cc:	d023      	beq.n	8007316 <__multiply+0xcc>
 80072ce:	4689      	mov	r9, r1
 80072d0:	46ac      	mov	ip, r5
 80072d2:	f04f 0800 	mov.w	r8, #0
 80072d6:	f859 4b04 	ldr.w	r4, [r9], #4
 80072da:	f8dc a000 	ldr.w	sl, [ip]
 80072de:	b2a3      	uxth	r3, r4
 80072e0:	fa1f fa8a 	uxth.w	sl, sl
 80072e4:	fb0b a303 	mla	r3, fp, r3, sl
 80072e8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80072ec:	f8dc 4000 	ldr.w	r4, [ip]
 80072f0:	4443      	add	r3, r8
 80072f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80072f6:	fb0b 840a 	mla	r4, fp, sl, r8
 80072fa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80072fe:	46e2      	mov	sl, ip
 8007300:	b29b      	uxth	r3, r3
 8007302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007306:	454f      	cmp	r7, r9
 8007308:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800730c:	f84a 3b04 	str.w	r3, [sl], #4
 8007310:	d82b      	bhi.n	800736a <__multiply+0x120>
 8007312:	f8cc 8004 	str.w	r8, [ip, #4]
 8007316:	9b01      	ldr	r3, [sp, #4]
 8007318:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800731c:	3204      	adds	r2, #4
 800731e:	f1ba 0f00 	cmp.w	sl, #0
 8007322:	d020      	beq.n	8007366 <__multiply+0x11c>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	4689      	mov	r9, r1
 8007328:	46a8      	mov	r8, r5
 800732a:	f04f 0b00 	mov.w	fp, #0
 800732e:	f8b9 c000 	ldrh.w	ip, [r9]
 8007332:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007336:	fb0a 440c 	mla	r4, sl, ip, r4
 800733a:	445c      	add	r4, fp
 800733c:	46c4      	mov	ip, r8
 800733e:	b29b      	uxth	r3, r3
 8007340:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007344:	f84c 3b04 	str.w	r3, [ip], #4
 8007348:	f859 3b04 	ldr.w	r3, [r9], #4
 800734c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007350:	0c1b      	lsrs	r3, r3, #16
 8007352:	fb0a b303 	mla	r3, sl, r3, fp
 8007356:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800735a:	454f      	cmp	r7, r9
 800735c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007360:	d805      	bhi.n	800736e <__multiply+0x124>
 8007362:	f8c8 3004 	str.w	r3, [r8, #4]
 8007366:	3504      	adds	r5, #4
 8007368:	e79b      	b.n	80072a2 <__multiply+0x58>
 800736a:	46d4      	mov	ip, sl
 800736c:	e7b3      	b.n	80072d6 <__multiply+0x8c>
 800736e:	46e0      	mov	r8, ip
 8007370:	e7dd      	b.n	800732e <__multiply+0xe4>
 8007372:	3e01      	subs	r6, #1
 8007374:	e799      	b.n	80072aa <__multiply+0x60>
	...

08007378 <__pow5mult>:
 8007378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800737c:	4615      	mov	r5, r2
 800737e:	f012 0203 	ands.w	r2, r2, #3
 8007382:	4606      	mov	r6, r0
 8007384:	460f      	mov	r7, r1
 8007386:	d007      	beq.n	8007398 <__pow5mult+0x20>
 8007388:	3a01      	subs	r2, #1
 800738a:	4c21      	ldr	r4, [pc, #132]	; (8007410 <__pow5mult+0x98>)
 800738c:	2300      	movs	r3, #0
 800738e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007392:	f7ff fec8 	bl	8007126 <__multadd>
 8007396:	4607      	mov	r7, r0
 8007398:	10ad      	asrs	r5, r5, #2
 800739a:	d035      	beq.n	8007408 <__pow5mult+0x90>
 800739c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800739e:	b93c      	cbnz	r4, 80073b0 <__pow5mult+0x38>
 80073a0:	2010      	movs	r0, #16
 80073a2:	f7ff fe6d 	bl	8007080 <malloc>
 80073a6:	6270      	str	r0, [r6, #36]	; 0x24
 80073a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073ac:	6004      	str	r4, [r0, #0]
 80073ae:	60c4      	str	r4, [r0, #12]
 80073b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073b8:	b94c      	cbnz	r4, 80073ce <__pow5mult+0x56>
 80073ba:	f240 2171 	movw	r1, #625	; 0x271
 80073be:	4630      	mov	r0, r6
 80073c0:	f7ff ff3a 	bl	8007238 <__i2b>
 80073c4:	2300      	movs	r3, #0
 80073c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80073ca:	4604      	mov	r4, r0
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	f04f 0800 	mov.w	r8, #0
 80073d2:	07eb      	lsls	r3, r5, #31
 80073d4:	d50a      	bpl.n	80073ec <__pow5mult+0x74>
 80073d6:	4639      	mov	r1, r7
 80073d8:	4622      	mov	r2, r4
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff ff35 	bl	800724a <__multiply>
 80073e0:	4639      	mov	r1, r7
 80073e2:	4681      	mov	r9, r0
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff fe87 	bl	80070f8 <_Bfree>
 80073ea:	464f      	mov	r7, r9
 80073ec:	106d      	asrs	r5, r5, #1
 80073ee:	d00b      	beq.n	8007408 <__pow5mult+0x90>
 80073f0:	6820      	ldr	r0, [r4, #0]
 80073f2:	b938      	cbnz	r0, 8007404 <__pow5mult+0x8c>
 80073f4:	4622      	mov	r2, r4
 80073f6:	4621      	mov	r1, r4
 80073f8:	4630      	mov	r0, r6
 80073fa:	f7ff ff26 	bl	800724a <__multiply>
 80073fe:	6020      	str	r0, [r4, #0]
 8007400:	f8c0 8000 	str.w	r8, [r0]
 8007404:	4604      	mov	r4, r0
 8007406:	e7e4      	b.n	80073d2 <__pow5mult+0x5a>
 8007408:	4638      	mov	r0, r7
 800740a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800740e:	bf00      	nop
 8007410:	080082f8 	.word	0x080082f8

08007414 <__lshift>:
 8007414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	460c      	mov	r4, r1
 800741a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800741e:	6923      	ldr	r3, [r4, #16]
 8007420:	6849      	ldr	r1, [r1, #4]
 8007422:	eb0a 0903 	add.w	r9, sl, r3
 8007426:	68a3      	ldr	r3, [r4, #8]
 8007428:	4607      	mov	r7, r0
 800742a:	4616      	mov	r6, r2
 800742c:	f109 0501 	add.w	r5, r9, #1
 8007430:	42ab      	cmp	r3, r5
 8007432:	db32      	blt.n	800749a <__lshift+0x86>
 8007434:	4638      	mov	r0, r7
 8007436:	f7ff fe2b 	bl	8007090 <_Balloc>
 800743a:	2300      	movs	r3, #0
 800743c:	4680      	mov	r8, r0
 800743e:	f100 0114 	add.w	r1, r0, #20
 8007442:	461a      	mov	r2, r3
 8007444:	4553      	cmp	r3, sl
 8007446:	db2b      	blt.n	80074a0 <__lshift+0x8c>
 8007448:	6920      	ldr	r0, [r4, #16]
 800744a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800744e:	f104 0314 	add.w	r3, r4, #20
 8007452:	f016 021f 	ands.w	r2, r6, #31
 8007456:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800745a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800745e:	d025      	beq.n	80074ac <__lshift+0x98>
 8007460:	f1c2 0e20 	rsb	lr, r2, #32
 8007464:	2000      	movs	r0, #0
 8007466:	681e      	ldr	r6, [r3, #0]
 8007468:	468a      	mov	sl, r1
 800746a:	4096      	lsls	r6, r2
 800746c:	4330      	orrs	r0, r6
 800746e:	f84a 0b04 	str.w	r0, [sl], #4
 8007472:	f853 0b04 	ldr.w	r0, [r3], #4
 8007476:	459c      	cmp	ip, r3
 8007478:	fa20 f00e 	lsr.w	r0, r0, lr
 800747c:	d814      	bhi.n	80074a8 <__lshift+0x94>
 800747e:	6048      	str	r0, [r1, #4]
 8007480:	b108      	cbz	r0, 8007486 <__lshift+0x72>
 8007482:	f109 0502 	add.w	r5, r9, #2
 8007486:	3d01      	subs	r5, #1
 8007488:	4638      	mov	r0, r7
 800748a:	f8c8 5010 	str.w	r5, [r8, #16]
 800748e:	4621      	mov	r1, r4
 8007490:	f7ff fe32 	bl	80070f8 <_Bfree>
 8007494:	4640      	mov	r0, r8
 8007496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749a:	3101      	adds	r1, #1
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	e7c7      	b.n	8007430 <__lshift+0x1c>
 80074a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80074a4:	3301      	adds	r3, #1
 80074a6:	e7cd      	b.n	8007444 <__lshift+0x30>
 80074a8:	4651      	mov	r1, sl
 80074aa:	e7dc      	b.n	8007466 <__lshift+0x52>
 80074ac:	3904      	subs	r1, #4
 80074ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80074b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80074b6:	459c      	cmp	ip, r3
 80074b8:	d8f9      	bhi.n	80074ae <__lshift+0x9a>
 80074ba:	e7e4      	b.n	8007486 <__lshift+0x72>

080074bc <__mcmp>:
 80074bc:	6903      	ldr	r3, [r0, #16]
 80074be:	690a      	ldr	r2, [r1, #16]
 80074c0:	1a9b      	subs	r3, r3, r2
 80074c2:	b530      	push	{r4, r5, lr}
 80074c4:	d10c      	bne.n	80074e0 <__mcmp+0x24>
 80074c6:	0092      	lsls	r2, r2, #2
 80074c8:	3014      	adds	r0, #20
 80074ca:	3114      	adds	r1, #20
 80074cc:	1884      	adds	r4, r0, r2
 80074ce:	4411      	add	r1, r2
 80074d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074d8:	4295      	cmp	r5, r2
 80074da:	d003      	beq.n	80074e4 <__mcmp+0x28>
 80074dc:	d305      	bcc.n	80074ea <__mcmp+0x2e>
 80074de:	2301      	movs	r3, #1
 80074e0:	4618      	mov	r0, r3
 80074e2:	bd30      	pop	{r4, r5, pc}
 80074e4:	42a0      	cmp	r0, r4
 80074e6:	d3f3      	bcc.n	80074d0 <__mcmp+0x14>
 80074e8:	e7fa      	b.n	80074e0 <__mcmp+0x24>
 80074ea:	f04f 33ff 	mov.w	r3, #4294967295
 80074ee:	e7f7      	b.n	80074e0 <__mcmp+0x24>

080074f0 <__mdiff>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	460d      	mov	r5, r1
 80074f6:	4607      	mov	r7, r0
 80074f8:	4611      	mov	r1, r2
 80074fa:	4628      	mov	r0, r5
 80074fc:	4614      	mov	r4, r2
 80074fe:	f7ff ffdd 	bl	80074bc <__mcmp>
 8007502:	1e06      	subs	r6, r0, #0
 8007504:	d108      	bne.n	8007518 <__mdiff+0x28>
 8007506:	4631      	mov	r1, r6
 8007508:	4638      	mov	r0, r7
 800750a:	f7ff fdc1 	bl	8007090 <_Balloc>
 800750e:	2301      	movs	r3, #1
 8007510:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007518:	bfa4      	itt	ge
 800751a:	4623      	movge	r3, r4
 800751c:	462c      	movge	r4, r5
 800751e:	4638      	mov	r0, r7
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	bfa6      	itte	ge
 8007524:	461d      	movge	r5, r3
 8007526:	2600      	movge	r6, #0
 8007528:	2601      	movlt	r6, #1
 800752a:	f7ff fdb1 	bl	8007090 <_Balloc>
 800752e:	692b      	ldr	r3, [r5, #16]
 8007530:	60c6      	str	r6, [r0, #12]
 8007532:	6926      	ldr	r6, [r4, #16]
 8007534:	f105 0914 	add.w	r9, r5, #20
 8007538:	f104 0214 	add.w	r2, r4, #20
 800753c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007540:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007544:	f100 0514 	add.w	r5, r0, #20
 8007548:	f04f 0e00 	mov.w	lr, #0
 800754c:	f852 ab04 	ldr.w	sl, [r2], #4
 8007550:	f859 4b04 	ldr.w	r4, [r9], #4
 8007554:	fa1e f18a 	uxtah	r1, lr, sl
 8007558:	b2a3      	uxth	r3, r4
 800755a:	1ac9      	subs	r1, r1, r3
 800755c:	0c23      	lsrs	r3, r4, #16
 800755e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007562:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007566:	b289      	uxth	r1, r1
 8007568:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800756c:	45c8      	cmp	r8, r9
 800756e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007572:	4694      	mov	ip, r2
 8007574:	f845 3b04 	str.w	r3, [r5], #4
 8007578:	d8e8      	bhi.n	800754c <__mdiff+0x5c>
 800757a:	45bc      	cmp	ip, r7
 800757c:	d304      	bcc.n	8007588 <__mdiff+0x98>
 800757e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007582:	b183      	cbz	r3, 80075a6 <__mdiff+0xb6>
 8007584:	6106      	str	r6, [r0, #16]
 8007586:	e7c5      	b.n	8007514 <__mdiff+0x24>
 8007588:	f85c 1b04 	ldr.w	r1, [ip], #4
 800758c:	fa1e f381 	uxtah	r3, lr, r1
 8007590:	141a      	asrs	r2, r3, #16
 8007592:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007596:	b29b      	uxth	r3, r3
 8007598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800759c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80075a0:	f845 3b04 	str.w	r3, [r5], #4
 80075a4:	e7e9      	b.n	800757a <__mdiff+0x8a>
 80075a6:	3e01      	subs	r6, #1
 80075a8:	e7e9      	b.n	800757e <__mdiff+0x8e>

080075aa <__d2b>:
 80075aa:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80075ae:	460e      	mov	r6, r1
 80075b0:	2101      	movs	r1, #1
 80075b2:	ec59 8b10 	vmov	r8, r9, d0
 80075b6:	4615      	mov	r5, r2
 80075b8:	f7ff fd6a 	bl	8007090 <_Balloc>
 80075bc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80075c0:	4607      	mov	r7, r0
 80075c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80075c6:	bb34      	cbnz	r4, 8007616 <__d2b+0x6c>
 80075c8:	9301      	str	r3, [sp, #4]
 80075ca:	f1b8 0300 	subs.w	r3, r8, #0
 80075ce:	d027      	beq.n	8007620 <__d2b+0x76>
 80075d0:	a802      	add	r0, sp, #8
 80075d2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80075d6:	f7ff fe00 	bl	80071da <__lo0bits>
 80075da:	9900      	ldr	r1, [sp, #0]
 80075dc:	b1f0      	cbz	r0, 800761c <__d2b+0x72>
 80075de:	9a01      	ldr	r2, [sp, #4]
 80075e0:	f1c0 0320 	rsb	r3, r0, #32
 80075e4:	fa02 f303 	lsl.w	r3, r2, r3
 80075e8:	430b      	orrs	r3, r1
 80075ea:	40c2      	lsrs	r2, r0
 80075ec:	617b      	str	r3, [r7, #20]
 80075ee:	9201      	str	r2, [sp, #4]
 80075f0:	9b01      	ldr	r3, [sp, #4]
 80075f2:	61bb      	str	r3, [r7, #24]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	bf14      	ite	ne
 80075f8:	2102      	movne	r1, #2
 80075fa:	2101      	moveq	r1, #1
 80075fc:	6139      	str	r1, [r7, #16]
 80075fe:	b1c4      	cbz	r4, 8007632 <__d2b+0x88>
 8007600:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007604:	4404      	add	r4, r0
 8007606:	6034      	str	r4, [r6, #0]
 8007608:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800760c:	6028      	str	r0, [r5, #0]
 800760e:	4638      	mov	r0, r7
 8007610:	b003      	add	sp, #12
 8007612:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800761a:	e7d5      	b.n	80075c8 <__d2b+0x1e>
 800761c:	6179      	str	r1, [r7, #20]
 800761e:	e7e7      	b.n	80075f0 <__d2b+0x46>
 8007620:	a801      	add	r0, sp, #4
 8007622:	f7ff fdda 	bl	80071da <__lo0bits>
 8007626:	9b01      	ldr	r3, [sp, #4]
 8007628:	617b      	str	r3, [r7, #20]
 800762a:	2101      	movs	r1, #1
 800762c:	6139      	str	r1, [r7, #16]
 800762e:	3020      	adds	r0, #32
 8007630:	e7e5      	b.n	80075fe <__d2b+0x54>
 8007632:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007636:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800763a:	6030      	str	r0, [r6, #0]
 800763c:	6918      	ldr	r0, [r3, #16]
 800763e:	f7ff fdad 	bl	800719c <__hi0bits>
 8007642:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007646:	e7e1      	b.n	800760c <__d2b+0x62>

08007648 <_calloc_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	fb02 f401 	mul.w	r4, r2, r1
 800764e:	4621      	mov	r1, r4
 8007650:	f000 f856 	bl	8007700 <_malloc_r>
 8007654:	4605      	mov	r5, r0
 8007656:	b118      	cbz	r0, 8007660 <_calloc_r+0x18>
 8007658:	4622      	mov	r2, r4
 800765a:	2100      	movs	r1, #0
 800765c:	f7fd fef3 	bl	8005446 <memset>
 8007660:	4628      	mov	r0, r5
 8007662:	bd38      	pop	{r3, r4, r5, pc}

08007664 <_free_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4605      	mov	r5, r0
 8007668:	2900      	cmp	r1, #0
 800766a:	d045      	beq.n	80076f8 <_free_r+0x94>
 800766c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007670:	1f0c      	subs	r4, r1, #4
 8007672:	2b00      	cmp	r3, #0
 8007674:	bfb8      	it	lt
 8007676:	18e4      	addlt	r4, r4, r3
 8007678:	f000 fc03 	bl	8007e82 <__malloc_lock>
 800767c:	4a1f      	ldr	r2, [pc, #124]	; (80076fc <_free_r+0x98>)
 800767e:	6813      	ldr	r3, [r2, #0]
 8007680:	4610      	mov	r0, r2
 8007682:	b933      	cbnz	r3, 8007692 <_free_r+0x2e>
 8007684:	6063      	str	r3, [r4, #4]
 8007686:	6014      	str	r4, [r2, #0]
 8007688:	4628      	mov	r0, r5
 800768a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800768e:	f000 bbf9 	b.w	8007e84 <__malloc_unlock>
 8007692:	42a3      	cmp	r3, r4
 8007694:	d90c      	bls.n	80076b0 <_free_r+0x4c>
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	1862      	adds	r2, r4, r1
 800769a:	4293      	cmp	r3, r2
 800769c:	bf04      	itt	eq
 800769e:	681a      	ldreq	r2, [r3, #0]
 80076a0:	685b      	ldreq	r3, [r3, #4]
 80076a2:	6063      	str	r3, [r4, #4]
 80076a4:	bf04      	itt	eq
 80076a6:	1852      	addeq	r2, r2, r1
 80076a8:	6022      	streq	r2, [r4, #0]
 80076aa:	6004      	str	r4, [r0, #0]
 80076ac:	e7ec      	b.n	8007688 <_free_r+0x24>
 80076ae:	4613      	mov	r3, r2
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	b10a      	cbz	r2, 80076b8 <_free_r+0x54>
 80076b4:	42a2      	cmp	r2, r4
 80076b6:	d9fa      	bls.n	80076ae <_free_r+0x4a>
 80076b8:	6819      	ldr	r1, [r3, #0]
 80076ba:	1858      	adds	r0, r3, r1
 80076bc:	42a0      	cmp	r0, r4
 80076be:	d10b      	bne.n	80076d8 <_free_r+0x74>
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	4401      	add	r1, r0
 80076c4:	1858      	adds	r0, r3, r1
 80076c6:	4282      	cmp	r2, r0
 80076c8:	6019      	str	r1, [r3, #0]
 80076ca:	d1dd      	bne.n	8007688 <_free_r+0x24>
 80076cc:	6810      	ldr	r0, [r2, #0]
 80076ce:	6852      	ldr	r2, [r2, #4]
 80076d0:	605a      	str	r2, [r3, #4]
 80076d2:	4401      	add	r1, r0
 80076d4:	6019      	str	r1, [r3, #0]
 80076d6:	e7d7      	b.n	8007688 <_free_r+0x24>
 80076d8:	d902      	bls.n	80076e0 <_free_r+0x7c>
 80076da:	230c      	movs	r3, #12
 80076dc:	602b      	str	r3, [r5, #0]
 80076de:	e7d3      	b.n	8007688 <_free_r+0x24>
 80076e0:	6820      	ldr	r0, [r4, #0]
 80076e2:	1821      	adds	r1, r4, r0
 80076e4:	428a      	cmp	r2, r1
 80076e6:	bf04      	itt	eq
 80076e8:	6811      	ldreq	r1, [r2, #0]
 80076ea:	6852      	ldreq	r2, [r2, #4]
 80076ec:	6062      	str	r2, [r4, #4]
 80076ee:	bf04      	itt	eq
 80076f0:	1809      	addeq	r1, r1, r0
 80076f2:	6021      	streq	r1, [r4, #0]
 80076f4:	605c      	str	r4, [r3, #4]
 80076f6:	e7c7      	b.n	8007688 <_free_r+0x24>
 80076f8:	bd38      	pop	{r3, r4, r5, pc}
 80076fa:	bf00      	nop
 80076fc:	20000324 	.word	0x20000324

08007700 <_malloc_r>:
 8007700:	b570      	push	{r4, r5, r6, lr}
 8007702:	1ccd      	adds	r5, r1, #3
 8007704:	f025 0503 	bic.w	r5, r5, #3
 8007708:	3508      	adds	r5, #8
 800770a:	2d0c      	cmp	r5, #12
 800770c:	bf38      	it	cc
 800770e:	250c      	movcc	r5, #12
 8007710:	2d00      	cmp	r5, #0
 8007712:	4606      	mov	r6, r0
 8007714:	db01      	blt.n	800771a <_malloc_r+0x1a>
 8007716:	42a9      	cmp	r1, r5
 8007718:	d903      	bls.n	8007722 <_malloc_r+0x22>
 800771a:	230c      	movs	r3, #12
 800771c:	6033      	str	r3, [r6, #0]
 800771e:	2000      	movs	r0, #0
 8007720:	bd70      	pop	{r4, r5, r6, pc}
 8007722:	f000 fbae 	bl	8007e82 <__malloc_lock>
 8007726:	4a21      	ldr	r2, [pc, #132]	; (80077ac <_malloc_r+0xac>)
 8007728:	6814      	ldr	r4, [r2, #0]
 800772a:	4621      	mov	r1, r4
 800772c:	b991      	cbnz	r1, 8007754 <_malloc_r+0x54>
 800772e:	4c20      	ldr	r4, [pc, #128]	; (80077b0 <_malloc_r+0xb0>)
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	b91b      	cbnz	r3, 800773c <_malloc_r+0x3c>
 8007734:	4630      	mov	r0, r6
 8007736:	f000 facf 	bl	8007cd8 <_sbrk_r>
 800773a:	6020      	str	r0, [r4, #0]
 800773c:	4629      	mov	r1, r5
 800773e:	4630      	mov	r0, r6
 8007740:	f000 faca 	bl	8007cd8 <_sbrk_r>
 8007744:	1c43      	adds	r3, r0, #1
 8007746:	d124      	bne.n	8007792 <_malloc_r+0x92>
 8007748:	230c      	movs	r3, #12
 800774a:	6033      	str	r3, [r6, #0]
 800774c:	4630      	mov	r0, r6
 800774e:	f000 fb99 	bl	8007e84 <__malloc_unlock>
 8007752:	e7e4      	b.n	800771e <_malloc_r+0x1e>
 8007754:	680b      	ldr	r3, [r1, #0]
 8007756:	1b5b      	subs	r3, r3, r5
 8007758:	d418      	bmi.n	800778c <_malloc_r+0x8c>
 800775a:	2b0b      	cmp	r3, #11
 800775c:	d90f      	bls.n	800777e <_malloc_r+0x7e>
 800775e:	600b      	str	r3, [r1, #0]
 8007760:	50cd      	str	r5, [r1, r3]
 8007762:	18cc      	adds	r4, r1, r3
 8007764:	4630      	mov	r0, r6
 8007766:	f000 fb8d 	bl	8007e84 <__malloc_unlock>
 800776a:	f104 000b 	add.w	r0, r4, #11
 800776e:	1d23      	adds	r3, r4, #4
 8007770:	f020 0007 	bic.w	r0, r0, #7
 8007774:	1ac3      	subs	r3, r0, r3
 8007776:	d0d3      	beq.n	8007720 <_malloc_r+0x20>
 8007778:	425a      	negs	r2, r3
 800777a:	50e2      	str	r2, [r4, r3]
 800777c:	e7d0      	b.n	8007720 <_malloc_r+0x20>
 800777e:	428c      	cmp	r4, r1
 8007780:	684b      	ldr	r3, [r1, #4]
 8007782:	bf16      	itet	ne
 8007784:	6063      	strne	r3, [r4, #4]
 8007786:	6013      	streq	r3, [r2, #0]
 8007788:	460c      	movne	r4, r1
 800778a:	e7eb      	b.n	8007764 <_malloc_r+0x64>
 800778c:	460c      	mov	r4, r1
 800778e:	6849      	ldr	r1, [r1, #4]
 8007790:	e7cc      	b.n	800772c <_malloc_r+0x2c>
 8007792:	1cc4      	adds	r4, r0, #3
 8007794:	f024 0403 	bic.w	r4, r4, #3
 8007798:	42a0      	cmp	r0, r4
 800779a:	d005      	beq.n	80077a8 <_malloc_r+0xa8>
 800779c:	1a21      	subs	r1, r4, r0
 800779e:	4630      	mov	r0, r6
 80077a0:	f000 fa9a 	bl	8007cd8 <_sbrk_r>
 80077a4:	3001      	adds	r0, #1
 80077a6:	d0cf      	beq.n	8007748 <_malloc_r+0x48>
 80077a8:	6025      	str	r5, [r4, #0]
 80077aa:	e7db      	b.n	8007764 <_malloc_r+0x64>
 80077ac:	20000324 	.word	0x20000324
 80077b0:	20000328 	.word	0x20000328

080077b4 <__ssputs_r>:
 80077b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	688e      	ldr	r6, [r1, #8]
 80077ba:	429e      	cmp	r6, r3
 80077bc:	4682      	mov	sl, r0
 80077be:	460c      	mov	r4, r1
 80077c0:	4690      	mov	r8, r2
 80077c2:	4699      	mov	r9, r3
 80077c4:	d837      	bhi.n	8007836 <__ssputs_r+0x82>
 80077c6:	898a      	ldrh	r2, [r1, #12]
 80077c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80077cc:	d031      	beq.n	8007832 <__ssputs_r+0x7e>
 80077ce:	6825      	ldr	r5, [r4, #0]
 80077d0:	6909      	ldr	r1, [r1, #16]
 80077d2:	1a6f      	subs	r7, r5, r1
 80077d4:	6965      	ldr	r5, [r4, #20]
 80077d6:	2302      	movs	r3, #2
 80077d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077dc:	fb95 f5f3 	sdiv	r5, r5, r3
 80077e0:	f109 0301 	add.w	r3, r9, #1
 80077e4:	443b      	add	r3, r7
 80077e6:	429d      	cmp	r5, r3
 80077e8:	bf38      	it	cc
 80077ea:	461d      	movcc	r5, r3
 80077ec:	0553      	lsls	r3, r2, #21
 80077ee:	d530      	bpl.n	8007852 <__ssputs_r+0x9e>
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7ff ff85 	bl	8007700 <_malloc_r>
 80077f6:	4606      	mov	r6, r0
 80077f8:	b950      	cbnz	r0, 8007810 <__ssputs_r+0x5c>
 80077fa:	230c      	movs	r3, #12
 80077fc:	f8ca 3000 	str.w	r3, [sl]
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007810:	463a      	mov	r2, r7
 8007812:	6921      	ldr	r1, [r4, #16]
 8007814:	f7fd fe0c 	bl	8005430 <memcpy>
 8007818:	89a3      	ldrh	r3, [r4, #12]
 800781a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800781e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007822:	81a3      	strh	r3, [r4, #12]
 8007824:	6126      	str	r6, [r4, #16]
 8007826:	6165      	str	r5, [r4, #20]
 8007828:	443e      	add	r6, r7
 800782a:	1bed      	subs	r5, r5, r7
 800782c:	6026      	str	r6, [r4, #0]
 800782e:	60a5      	str	r5, [r4, #8]
 8007830:	464e      	mov	r6, r9
 8007832:	454e      	cmp	r6, r9
 8007834:	d900      	bls.n	8007838 <__ssputs_r+0x84>
 8007836:	464e      	mov	r6, r9
 8007838:	4632      	mov	r2, r6
 800783a:	4641      	mov	r1, r8
 800783c:	6820      	ldr	r0, [r4, #0]
 800783e:	f000 fb07 	bl	8007e50 <memmove>
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	1b9b      	subs	r3, r3, r6
 8007846:	60a3      	str	r3, [r4, #8]
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	441e      	add	r6, r3
 800784c:	6026      	str	r6, [r4, #0]
 800784e:	2000      	movs	r0, #0
 8007850:	e7dc      	b.n	800780c <__ssputs_r+0x58>
 8007852:	462a      	mov	r2, r5
 8007854:	f000 fb17 	bl	8007e86 <_realloc_r>
 8007858:	4606      	mov	r6, r0
 800785a:	2800      	cmp	r0, #0
 800785c:	d1e2      	bne.n	8007824 <__ssputs_r+0x70>
 800785e:	6921      	ldr	r1, [r4, #16]
 8007860:	4650      	mov	r0, sl
 8007862:	f7ff feff 	bl	8007664 <_free_r>
 8007866:	e7c8      	b.n	80077fa <__ssputs_r+0x46>

08007868 <_svfiprintf_r>:
 8007868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786c:	461d      	mov	r5, r3
 800786e:	898b      	ldrh	r3, [r1, #12]
 8007870:	061f      	lsls	r7, r3, #24
 8007872:	b09d      	sub	sp, #116	; 0x74
 8007874:	4680      	mov	r8, r0
 8007876:	460c      	mov	r4, r1
 8007878:	4616      	mov	r6, r2
 800787a:	d50f      	bpl.n	800789c <_svfiprintf_r+0x34>
 800787c:	690b      	ldr	r3, [r1, #16]
 800787e:	b96b      	cbnz	r3, 800789c <_svfiprintf_r+0x34>
 8007880:	2140      	movs	r1, #64	; 0x40
 8007882:	f7ff ff3d 	bl	8007700 <_malloc_r>
 8007886:	6020      	str	r0, [r4, #0]
 8007888:	6120      	str	r0, [r4, #16]
 800788a:	b928      	cbnz	r0, 8007898 <_svfiprintf_r+0x30>
 800788c:	230c      	movs	r3, #12
 800788e:	f8c8 3000 	str.w	r3, [r8]
 8007892:	f04f 30ff 	mov.w	r0, #4294967295
 8007896:	e0c8      	b.n	8007a2a <_svfiprintf_r+0x1c2>
 8007898:	2340      	movs	r3, #64	; 0x40
 800789a:	6163      	str	r3, [r4, #20]
 800789c:	2300      	movs	r3, #0
 800789e:	9309      	str	r3, [sp, #36]	; 0x24
 80078a0:	2320      	movs	r3, #32
 80078a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078a6:	2330      	movs	r3, #48	; 0x30
 80078a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078ac:	9503      	str	r5, [sp, #12]
 80078ae:	f04f 0b01 	mov.w	fp, #1
 80078b2:	4637      	mov	r7, r6
 80078b4:	463d      	mov	r5, r7
 80078b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078ba:	b10b      	cbz	r3, 80078c0 <_svfiprintf_r+0x58>
 80078bc:	2b25      	cmp	r3, #37	; 0x25
 80078be:	d13e      	bne.n	800793e <_svfiprintf_r+0xd6>
 80078c0:	ebb7 0a06 	subs.w	sl, r7, r6
 80078c4:	d00b      	beq.n	80078de <_svfiprintf_r+0x76>
 80078c6:	4653      	mov	r3, sl
 80078c8:	4632      	mov	r2, r6
 80078ca:	4621      	mov	r1, r4
 80078cc:	4640      	mov	r0, r8
 80078ce:	f7ff ff71 	bl	80077b4 <__ssputs_r>
 80078d2:	3001      	adds	r0, #1
 80078d4:	f000 80a4 	beq.w	8007a20 <_svfiprintf_r+0x1b8>
 80078d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078da:	4453      	add	r3, sl
 80078dc:	9309      	str	r3, [sp, #36]	; 0x24
 80078de:	783b      	ldrb	r3, [r7, #0]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 809d 	beq.w	8007a20 <_svfiprintf_r+0x1b8>
 80078e6:	2300      	movs	r3, #0
 80078e8:	f04f 32ff 	mov.w	r2, #4294967295
 80078ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f0:	9304      	str	r3, [sp, #16]
 80078f2:	9307      	str	r3, [sp, #28]
 80078f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078f8:	931a      	str	r3, [sp, #104]	; 0x68
 80078fa:	462f      	mov	r7, r5
 80078fc:	2205      	movs	r2, #5
 80078fe:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007902:	4850      	ldr	r0, [pc, #320]	; (8007a44 <_svfiprintf_r+0x1dc>)
 8007904:	f7f8 fc74 	bl	80001f0 <memchr>
 8007908:	9b04      	ldr	r3, [sp, #16]
 800790a:	b9d0      	cbnz	r0, 8007942 <_svfiprintf_r+0xda>
 800790c:	06d9      	lsls	r1, r3, #27
 800790e:	bf44      	itt	mi
 8007910:	2220      	movmi	r2, #32
 8007912:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007916:	071a      	lsls	r2, r3, #28
 8007918:	bf44      	itt	mi
 800791a:	222b      	movmi	r2, #43	; 0x2b
 800791c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007920:	782a      	ldrb	r2, [r5, #0]
 8007922:	2a2a      	cmp	r2, #42	; 0x2a
 8007924:	d015      	beq.n	8007952 <_svfiprintf_r+0xea>
 8007926:	9a07      	ldr	r2, [sp, #28]
 8007928:	462f      	mov	r7, r5
 800792a:	2000      	movs	r0, #0
 800792c:	250a      	movs	r5, #10
 800792e:	4639      	mov	r1, r7
 8007930:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007934:	3b30      	subs	r3, #48	; 0x30
 8007936:	2b09      	cmp	r3, #9
 8007938:	d94d      	bls.n	80079d6 <_svfiprintf_r+0x16e>
 800793a:	b1b8      	cbz	r0, 800796c <_svfiprintf_r+0x104>
 800793c:	e00f      	b.n	800795e <_svfiprintf_r+0xf6>
 800793e:	462f      	mov	r7, r5
 8007940:	e7b8      	b.n	80078b4 <_svfiprintf_r+0x4c>
 8007942:	4a40      	ldr	r2, [pc, #256]	; (8007a44 <_svfiprintf_r+0x1dc>)
 8007944:	1a80      	subs	r0, r0, r2
 8007946:	fa0b f000 	lsl.w	r0, fp, r0
 800794a:	4318      	orrs	r0, r3
 800794c:	9004      	str	r0, [sp, #16]
 800794e:	463d      	mov	r5, r7
 8007950:	e7d3      	b.n	80078fa <_svfiprintf_r+0x92>
 8007952:	9a03      	ldr	r2, [sp, #12]
 8007954:	1d11      	adds	r1, r2, #4
 8007956:	6812      	ldr	r2, [r2, #0]
 8007958:	9103      	str	r1, [sp, #12]
 800795a:	2a00      	cmp	r2, #0
 800795c:	db01      	blt.n	8007962 <_svfiprintf_r+0xfa>
 800795e:	9207      	str	r2, [sp, #28]
 8007960:	e004      	b.n	800796c <_svfiprintf_r+0x104>
 8007962:	4252      	negs	r2, r2
 8007964:	f043 0302 	orr.w	r3, r3, #2
 8007968:	9207      	str	r2, [sp, #28]
 800796a:	9304      	str	r3, [sp, #16]
 800796c:	783b      	ldrb	r3, [r7, #0]
 800796e:	2b2e      	cmp	r3, #46	; 0x2e
 8007970:	d10c      	bne.n	800798c <_svfiprintf_r+0x124>
 8007972:	787b      	ldrb	r3, [r7, #1]
 8007974:	2b2a      	cmp	r3, #42	; 0x2a
 8007976:	d133      	bne.n	80079e0 <_svfiprintf_r+0x178>
 8007978:	9b03      	ldr	r3, [sp, #12]
 800797a:	1d1a      	adds	r2, r3, #4
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	9203      	str	r2, [sp, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	bfb8      	it	lt
 8007984:	f04f 33ff 	movlt.w	r3, #4294967295
 8007988:	3702      	adds	r7, #2
 800798a:	9305      	str	r3, [sp, #20]
 800798c:	4d2e      	ldr	r5, [pc, #184]	; (8007a48 <_svfiprintf_r+0x1e0>)
 800798e:	7839      	ldrb	r1, [r7, #0]
 8007990:	2203      	movs	r2, #3
 8007992:	4628      	mov	r0, r5
 8007994:	f7f8 fc2c 	bl	80001f0 <memchr>
 8007998:	b138      	cbz	r0, 80079aa <_svfiprintf_r+0x142>
 800799a:	2340      	movs	r3, #64	; 0x40
 800799c:	1b40      	subs	r0, r0, r5
 800799e:	fa03 f000 	lsl.w	r0, r3, r0
 80079a2:	9b04      	ldr	r3, [sp, #16]
 80079a4:	4303      	orrs	r3, r0
 80079a6:	3701      	adds	r7, #1
 80079a8:	9304      	str	r3, [sp, #16]
 80079aa:	7839      	ldrb	r1, [r7, #0]
 80079ac:	4827      	ldr	r0, [pc, #156]	; (8007a4c <_svfiprintf_r+0x1e4>)
 80079ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079b2:	2206      	movs	r2, #6
 80079b4:	1c7e      	adds	r6, r7, #1
 80079b6:	f7f8 fc1b 	bl	80001f0 <memchr>
 80079ba:	2800      	cmp	r0, #0
 80079bc:	d038      	beq.n	8007a30 <_svfiprintf_r+0x1c8>
 80079be:	4b24      	ldr	r3, [pc, #144]	; (8007a50 <_svfiprintf_r+0x1e8>)
 80079c0:	bb13      	cbnz	r3, 8007a08 <_svfiprintf_r+0x1a0>
 80079c2:	9b03      	ldr	r3, [sp, #12]
 80079c4:	3307      	adds	r3, #7
 80079c6:	f023 0307 	bic.w	r3, r3, #7
 80079ca:	3308      	adds	r3, #8
 80079cc:	9303      	str	r3, [sp, #12]
 80079ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d0:	444b      	add	r3, r9
 80079d2:	9309      	str	r3, [sp, #36]	; 0x24
 80079d4:	e76d      	b.n	80078b2 <_svfiprintf_r+0x4a>
 80079d6:	fb05 3202 	mla	r2, r5, r2, r3
 80079da:	2001      	movs	r0, #1
 80079dc:	460f      	mov	r7, r1
 80079de:	e7a6      	b.n	800792e <_svfiprintf_r+0xc6>
 80079e0:	2300      	movs	r3, #0
 80079e2:	3701      	adds	r7, #1
 80079e4:	9305      	str	r3, [sp, #20]
 80079e6:	4619      	mov	r1, r3
 80079e8:	250a      	movs	r5, #10
 80079ea:	4638      	mov	r0, r7
 80079ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079f0:	3a30      	subs	r2, #48	; 0x30
 80079f2:	2a09      	cmp	r2, #9
 80079f4:	d903      	bls.n	80079fe <_svfiprintf_r+0x196>
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d0c8      	beq.n	800798c <_svfiprintf_r+0x124>
 80079fa:	9105      	str	r1, [sp, #20]
 80079fc:	e7c6      	b.n	800798c <_svfiprintf_r+0x124>
 80079fe:	fb05 2101 	mla	r1, r5, r1, r2
 8007a02:	2301      	movs	r3, #1
 8007a04:	4607      	mov	r7, r0
 8007a06:	e7f0      	b.n	80079ea <_svfiprintf_r+0x182>
 8007a08:	ab03      	add	r3, sp, #12
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4622      	mov	r2, r4
 8007a0e:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <_svfiprintf_r+0x1ec>)
 8007a10:	a904      	add	r1, sp, #16
 8007a12:	4640      	mov	r0, r8
 8007a14:	f7fd fdb4 	bl	8005580 <_printf_float>
 8007a18:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a1c:	4681      	mov	r9, r0
 8007a1e:	d1d6      	bne.n	80079ce <_svfiprintf_r+0x166>
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	065b      	lsls	r3, r3, #25
 8007a24:	f53f af35 	bmi.w	8007892 <_svfiprintf_r+0x2a>
 8007a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a2a:	b01d      	add	sp, #116	; 0x74
 8007a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a30:	ab03      	add	r3, sp, #12
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	4622      	mov	r2, r4
 8007a36:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <_svfiprintf_r+0x1ec>)
 8007a38:	a904      	add	r1, sp, #16
 8007a3a:	4640      	mov	r0, r8
 8007a3c:	f7fe f856 	bl	8005aec <_printf_i>
 8007a40:	e7ea      	b.n	8007a18 <_svfiprintf_r+0x1b0>
 8007a42:	bf00      	nop
 8007a44:	08008304 	.word	0x08008304
 8007a48:	0800830a 	.word	0x0800830a
 8007a4c:	0800830e 	.word	0x0800830e
 8007a50:	08005581 	.word	0x08005581
 8007a54:	080077b5 	.word	0x080077b5

08007a58 <__sfputc_r>:
 8007a58:	6893      	ldr	r3, [r2, #8]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	b410      	push	{r4}
 8007a60:	6093      	str	r3, [r2, #8]
 8007a62:	da08      	bge.n	8007a76 <__sfputc_r+0x1e>
 8007a64:	6994      	ldr	r4, [r2, #24]
 8007a66:	42a3      	cmp	r3, r4
 8007a68:	db01      	blt.n	8007a6e <__sfputc_r+0x16>
 8007a6a:	290a      	cmp	r1, #10
 8007a6c:	d103      	bne.n	8007a76 <__sfputc_r+0x1e>
 8007a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a72:	f7fe ba13 	b.w	8005e9c <__swbuf_r>
 8007a76:	6813      	ldr	r3, [r2, #0]
 8007a78:	1c58      	adds	r0, r3, #1
 8007a7a:	6010      	str	r0, [r2, #0]
 8007a7c:	7019      	strb	r1, [r3, #0]
 8007a7e:	4608      	mov	r0, r1
 8007a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <__sfputs_r>:
 8007a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a88:	4606      	mov	r6, r0
 8007a8a:	460f      	mov	r7, r1
 8007a8c:	4614      	mov	r4, r2
 8007a8e:	18d5      	adds	r5, r2, r3
 8007a90:	42ac      	cmp	r4, r5
 8007a92:	d101      	bne.n	8007a98 <__sfputs_r+0x12>
 8007a94:	2000      	movs	r0, #0
 8007a96:	e007      	b.n	8007aa8 <__sfputs_r+0x22>
 8007a98:	463a      	mov	r2, r7
 8007a9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a9e:	4630      	mov	r0, r6
 8007aa0:	f7ff ffda 	bl	8007a58 <__sfputc_r>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d1f3      	bne.n	8007a90 <__sfputs_r+0xa>
 8007aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007aac <_vfiprintf_r>:
 8007aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab0:	460c      	mov	r4, r1
 8007ab2:	b09d      	sub	sp, #116	; 0x74
 8007ab4:	4617      	mov	r7, r2
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	4606      	mov	r6, r0
 8007aba:	b118      	cbz	r0, 8007ac4 <_vfiprintf_r+0x18>
 8007abc:	6983      	ldr	r3, [r0, #24]
 8007abe:	b90b      	cbnz	r3, 8007ac4 <_vfiprintf_r+0x18>
 8007ac0:	f7ff f9e2 	bl	8006e88 <__sinit>
 8007ac4:	4b7c      	ldr	r3, [pc, #496]	; (8007cb8 <_vfiprintf_r+0x20c>)
 8007ac6:	429c      	cmp	r4, r3
 8007ac8:	d158      	bne.n	8007b7c <_vfiprintf_r+0xd0>
 8007aca:	6874      	ldr	r4, [r6, #4]
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	0718      	lsls	r0, r3, #28
 8007ad0:	d55e      	bpl.n	8007b90 <_vfiprintf_r+0xe4>
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d05b      	beq.n	8007b90 <_vfiprintf_r+0xe4>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	2320      	movs	r3, #32
 8007ade:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ae2:	2330      	movs	r3, #48	; 0x30
 8007ae4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ae8:	9503      	str	r5, [sp, #12]
 8007aea:	f04f 0b01 	mov.w	fp, #1
 8007aee:	46b8      	mov	r8, r7
 8007af0:	4645      	mov	r5, r8
 8007af2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007af6:	b10b      	cbz	r3, 8007afc <_vfiprintf_r+0x50>
 8007af8:	2b25      	cmp	r3, #37	; 0x25
 8007afa:	d154      	bne.n	8007ba6 <_vfiprintf_r+0xfa>
 8007afc:	ebb8 0a07 	subs.w	sl, r8, r7
 8007b00:	d00b      	beq.n	8007b1a <_vfiprintf_r+0x6e>
 8007b02:	4653      	mov	r3, sl
 8007b04:	463a      	mov	r2, r7
 8007b06:	4621      	mov	r1, r4
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7ff ffbc 	bl	8007a86 <__sfputs_r>
 8007b0e:	3001      	adds	r0, #1
 8007b10:	f000 80c2 	beq.w	8007c98 <_vfiprintf_r+0x1ec>
 8007b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b16:	4453      	add	r3, sl
 8007b18:	9309      	str	r3, [sp, #36]	; 0x24
 8007b1a:	f898 3000 	ldrb.w	r3, [r8]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80ba 	beq.w	8007c98 <_vfiprintf_r+0x1ec>
 8007b24:	2300      	movs	r3, #0
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295
 8007b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b2e:	9304      	str	r3, [sp, #16]
 8007b30:	9307      	str	r3, [sp, #28]
 8007b32:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b36:	931a      	str	r3, [sp, #104]	; 0x68
 8007b38:	46a8      	mov	r8, r5
 8007b3a:	2205      	movs	r2, #5
 8007b3c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007b40:	485e      	ldr	r0, [pc, #376]	; (8007cbc <_vfiprintf_r+0x210>)
 8007b42:	f7f8 fb55 	bl	80001f0 <memchr>
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	bb78      	cbnz	r0, 8007baa <_vfiprintf_r+0xfe>
 8007b4a:	06d9      	lsls	r1, r3, #27
 8007b4c:	bf44      	itt	mi
 8007b4e:	2220      	movmi	r2, #32
 8007b50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b54:	071a      	lsls	r2, r3, #28
 8007b56:	bf44      	itt	mi
 8007b58:	222b      	movmi	r2, #43	; 0x2b
 8007b5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007b5e:	782a      	ldrb	r2, [r5, #0]
 8007b60:	2a2a      	cmp	r2, #42	; 0x2a
 8007b62:	d02a      	beq.n	8007bba <_vfiprintf_r+0x10e>
 8007b64:	9a07      	ldr	r2, [sp, #28]
 8007b66:	46a8      	mov	r8, r5
 8007b68:	2000      	movs	r0, #0
 8007b6a:	250a      	movs	r5, #10
 8007b6c:	4641      	mov	r1, r8
 8007b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b72:	3b30      	subs	r3, #48	; 0x30
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	d969      	bls.n	8007c4c <_vfiprintf_r+0x1a0>
 8007b78:	b360      	cbz	r0, 8007bd4 <_vfiprintf_r+0x128>
 8007b7a:	e024      	b.n	8007bc6 <_vfiprintf_r+0x11a>
 8007b7c:	4b50      	ldr	r3, [pc, #320]	; (8007cc0 <_vfiprintf_r+0x214>)
 8007b7e:	429c      	cmp	r4, r3
 8007b80:	d101      	bne.n	8007b86 <_vfiprintf_r+0xda>
 8007b82:	68b4      	ldr	r4, [r6, #8]
 8007b84:	e7a2      	b.n	8007acc <_vfiprintf_r+0x20>
 8007b86:	4b4f      	ldr	r3, [pc, #316]	; (8007cc4 <_vfiprintf_r+0x218>)
 8007b88:	429c      	cmp	r4, r3
 8007b8a:	bf08      	it	eq
 8007b8c:	68f4      	ldreq	r4, [r6, #12]
 8007b8e:	e79d      	b.n	8007acc <_vfiprintf_r+0x20>
 8007b90:	4621      	mov	r1, r4
 8007b92:	4630      	mov	r0, r6
 8007b94:	f7fe f9d4 	bl	8005f40 <__swsetup_r>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d09d      	beq.n	8007ad8 <_vfiprintf_r+0x2c>
 8007b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba0:	b01d      	add	sp, #116	; 0x74
 8007ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba6:	46a8      	mov	r8, r5
 8007ba8:	e7a2      	b.n	8007af0 <_vfiprintf_r+0x44>
 8007baa:	4a44      	ldr	r2, [pc, #272]	; (8007cbc <_vfiprintf_r+0x210>)
 8007bac:	1a80      	subs	r0, r0, r2
 8007bae:	fa0b f000 	lsl.w	r0, fp, r0
 8007bb2:	4318      	orrs	r0, r3
 8007bb4:	9004      	str	r0, [sp, #16]
 8007bb6:	4645      	mov	r5, r8
 8007bb8:	e7be      	b.n	8007b38 <_vfiprintf_r+0x8c>
 8007bba:	9a03      	ldr	r2, [sp, #12]
 8007bbc:	1d11      	adds	r1, r2, #4
 8007bbe:	6812      	ldr	r2, [r2, #0]
 8007bc0:	9103      	str	r1, [sp, #12]
 8007bc2:	2a00      	cmp	r2, #0
 8007bc4:	db01      	blt.n	8007bca <_vfiprintf_r+0x11e>
 8007bc6:	9207      	str	r2, [sp, #28]
 8007bc8:	e004      	b.n	8007bd4 <_vfiprintf_r+0x128>
 8007bca:	4252      	negs	r2, r2
 8007bcc:	f043 0302 	orr.w	r3, r3, #2
 8007bd0:	9207      	str	r2, [sp, #28]
 8007bd2:	9304      	str	r3, [sp, #16]
 8007bd4:	f898 3000 	ldrb.w	r3, [r8]
 8007bd8:	2b2e      	cmp	r3, #46	; 0x2e
 8007bda:	d10e      	bne.n	8007bfa <_vfiprintf_r+0x14e>
 8007bdc:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007be0:	2b2a      	cmp	r3, #42	; 0x2a
 8007be2:	d138      	bne.n	8007c56 <_vfiprintf_r+0x1aa>
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	1d1a      	adds	r2, r3, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	9203      	str	r2, [sp, #12]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	bfb8      	it	lt
 8007bf0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007bf4:	f108 0802 	add.w	r8, r8, #2
 8007bf8:	9305      	str	r3, [sp, #20]
 8007bfa:	4d33      	ldr	r5, [pc, #204]	; (8007cc8 <_vfiprintf_r+0x21c>)
 8007bfc:	f898 1000 	ldrb.w	r1, [r8]
 8007c00:	2203      	movs	r2, #3
 8007c02:	4628      	mov	r0, r5
 8007c04:	f7f8 faf4 	bl	80001f0 <memchr>
 8007c08:	b140      	cbz	r0, 8007c1c <_vfiprintf_r+0x170>
 8007c0a:	2340      	movs	r3, #64	; 0x40
 8007c0c:	1b40      	subs	r0, r0, r5
 8007c0e:	fa03 f000 	lsl.w	r0, r3, r0
 8007c12:	9b04      	ldr	r3, [sp, #16]
 8007c14:	4303      	orrs	r3, r0
 8007c16:	f108 0801 	add.w	r8, r8, #1
 8007c1a:	9304      	str	r3, [sp, #16]
 8007c1c:	f898 1000 	ldrb.w	r1, [r8]
 8007c20:	482a      	ldr	r0, [pc, #168]	; (8007ccc <_vfiprintf_r+0x220>)
 8007c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c26:	2206      	movs	r2, #6
 8007c28:	f108 0701 	add.w	r7, r8, #1
 8007c2c:	f7f8 fae0 	bl	80001f0 <memchr>
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d037      	beq.n	8007ca4 <_vfiprintf_r+0x1f8>
 8007c34:	4b26      	ldr	r3, [pc, #152]	; (8007cd0 <_vfiprintf_r+0x224>)
 8007c36:	bb1b      	cbnz	r3, 8007c80 <_vfiprintf_r+0x1d4>
 8007c38:	9b03      	ldr	r3, [sp, #12]
 8007c3a:	3307      	adds	r3, #7
 8007c3c:	f023 0307 	bic.w	r3, r3, #7
 8007c40:	3308      	adds	r3, #8
 8007c42:	9303      	str	r3, [sp, #12]
 8007c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c46:	444b      	add	r3, r9
 8007c48:	9309      	str	r3, [sp, #36]	; 0x24
 8007c4a:	e750      	b.n	8007aee <_vfiprintf_r+0x42>
 8007c4c:	fb05 3202 	mla	r2, r5, r2, r3
 8007c50:	2001      	movs	r0, #1
 8007c52:	4688      	mov	r8, r1
 8007c54:	e78a      	b.n	8007b6c <_vfiprintf_r+0xc0>
 8007c56:	2300      	movs	r3, #0
 8007c58:	f108 0801 	add.w	r8, r8, #1
 8007c5c:	9305      	str	r3, [sp, #20]
 8007c5e:	4619      	mov	r1, r3
 8007c60:	250a      	movs	r5, #10
 8007c62:	4640      	mov	r0, r8
 8007c64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c68:	3a30      	subs	r2, #48	; 0x30
 8007c6a:	2a09      	cmp	r2, #9
 8007c6c:	d903      	bls.n	8007c76 <_vfiprintf_r+0x1ca>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0c3      	beq.n	8007bfa <_vfiprintf_r+0x14e>
 8007c72:	9105      	str	r1, [sp, #20]
 8007c74:	e7c1      	b.n	8007bfa <_vfiprintf_r+0x14e>
 8007c76:	fb05 2101 	mla	r1, r5, r1, r2
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	e7f0      	b.n	8007c62 <_vfiprintf_r+0x1b6>
 8007c80:	ab03      	add	r3, sp, #12
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	4622      	mov	r2, r4
 8007c86:	4b13      	ldr	r3, [pc, #76]	; (8007cd4 <_vfiprintf_r+0x228>)
 8007c88:	a904      	add	r1, sp, #16
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f7fd fc78 	bl	8005580 <_printf_float>
 8007c90:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c94:	4681      	mov	r9, r0
 8007c96:	d1d5      	bne.n	8007c44 <_vfiprintf_r+0x198>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	065b      	lsls	r3, r3, #25
 8007c9c:	f53f af7e 	bmi.w	8007b9c <_vfiprintf_r+0xf0>
 8007ca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ca2:	e77d      	b.n	8007ba0 <_vfiprintf_r+0xf4>
 8007ca4:	ab03      	add	r3, sp, #12
 8007ca6:	9300      	str	r3, [sp, #0]
 8007ca8:	4622      	mov	r2, r4
 8007caa:	4b0a      	ldr	r3, [pc, #40]	; (8007cd4 <_vfiprintf_r+0x228>)
 8007cac:	a904      	add	r1, sp, #16
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f7fd ff1c 	bl	8005aec <_printf_i>
 8007cb4:	e7ec      	b.n	8007c90 <_vfiprintf_r+0x1e4>
 8007cb6:	bf00      	nop
 8007cb8:	080081c4 	.word	0x080081c4
 8007cbc:	08008304 	.word	0x08008304
 8007cc0:	080081e4 	.word	0x080081e4
 8007cc4:	080081a4 	.word	0x080081a4
 8007cc8:	0800830a 	.word	0x0800830a
 8007ccc:	0800830e 	.word	0x0800830e
 8007cd0:	08005581 	.word	0x08005581
 8007cd4:	08007a87 	.word	0x08007a87

08007cd8 <_sbrk_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4c06      	ldr	r4, [pc, #24]	; (8007cf4 <_sbrk_r+0x1c>)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4605      	mov	r5, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	f7fa fb6a 	bl	80023bc <_sbrk>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_sbrk_r+0x1a>
 8007cec:	6823      	ldr	r3, [r4, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_sbrk_r+0x1a>
 8007cf0:	602b      	str	r3, [r5, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	20004f44 	.word	0x20004f44

08007cf8 <__sread>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d00:	f000 f8e8 	bl	8007ed4 <_read_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	bfab      	itete	ge
 8007d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d0c:	181b      	addge	r3, r3, r0
 8007d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d12:	bfac      	ite	ge
 8007d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d16:	81a3      	strhlt	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__swrite>:
 8007d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1e:	461f      	mov	r7, r3
 8007d20:	898b      	ldrh	r3, [r1, #12]
 8007d22:	05db      	lsls	r3, r3, #23
 8007d24:	4605      	mov	r5, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	4616      	mov	r6, r2
 8007d2a:	d505      	bpl.n	8007d38 <__swrite+0x1e>
 8007d2c:	2302      	movs	r3, #2
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d34:	f000 f868 	bl	8007e08 <_lseek_r>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	4632      	mov	r2, r6
 8007d46:	463b      	mov	r3, r7
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4e:	f000 b817 	b.w	8007d80 <_write_r>

08007d52 <__sseek>:
 8007d52:	b510      	push	{r4, lr}
 8007d54:	460c      	mov	r4, r1
 8007d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5a:	f000 f855 	bl	8007e08 <_lseek_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	bf15      	itete	ne
 8007d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d6e:	81a3      	strheq	r3, [r4, #12]
 8007d70:	bf18      	it	ne
 8007d72:	81a3      	strhne	r3, [r4, #12]
 8007d74:	bd10      	pop	{r4, pc}

08007d76 <__sclose>:
 8007d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7a:	f000 b813 	b.w	8007da4 <_close_r>
	...

08007d80 <_write_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4c07      	ldr	r4, [pc, #28]	; (8007da0 <_write_r+0x20>)
 8007d84:	4605      	mov	r5, r0
 8007d86:	4608      	mov	r0, r1
 8007d88:	4611      	mov	r1, r2
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	6022      	str	r2, [r4, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	f7fa fac3 	bl	800231a <_write>
 8007d94:	1c43      	adds	r3, r0, #1
 8007d96:	d102      	bne.n	8007d9e <_write_r+0x1e>
 8007d98:	6823      	ldr	r3, [r4, #0]
 8007d9a:	b103      	cbz	r3, 8007d9e <_write_r+0x1e>
 8007d9c:	602b      	str	r3, [r5, #0]
 8007d9e:	bd38      	pop	{r3, r4, r5, pc}
 8007da0:	20004f44 	.word	0x20004f44

08007da4 <_close_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4c06      	ldr	r4, [pc, #24]	; (8007dc0 <_close_r+0x1c>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	4605      	mov	r5, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	6023      	str	r3, [r4, #0]
 8007db0:	f7fa facf 	bl	8002352 <_close>
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d102      	bne.n	8007dbe <_close_r+0x1a>
 8007db8:	6823      	ldr	r3, [r4, #0]
 8007dba:	b103      	cbz	r3, 8007dbe <_close_r+0x1a>
 8007dbc:	602b      	str	r3, [r5, #0]
 8007dbe:	bd38      	pop	{r3, r4, r5, pc}
 8007dc0:	20004f44 	.word	0x20004f44

08007dc4 <_fstat_r>:
 8007dc4:	b538      	push	{r3, r4, r5, lr}
 8007dc6:	4c07      	ldr	r4, [pc, #28]	; (8007de4 <_fstat_r+0x20>)
 8007dc8:	2300      	movs	r3, #0
 8007dca:	4605      	mov	r5, r0
 8007dcc:	4608      	mov	r0, r1
 8007dce:	4611      	mov	r1, r2
 8007dd0:	6023      	str	r3, [r4, #0]
 8007dd2:	f7fa faca 	bl	800236a <_fstat>
 8007dd6:	1c43      	adds	r3, r0, #1
 8007dd8:	d102      	bne.n	8007de0 <_fstat_r+0x1c>
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	b103      	cbz	r3, 8007de0 <_fstat_r+0x1c>
 8007dde:	602b      	str	r3, [r5, #0]
 8007de0:	bd38      	pop	{r3, r4, r5, pc}
 8007de2:	bf00      	nop
 8007de4:	20004f44 	.word	0x20004f44

08007de8 <_isatty_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4c06      	ldr	r4, [pc, #24]	; (8007e04 <_isatty_r+0x1c>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4605      	mov	r5, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	f7fa fac9 	bl	800238a <_isatty>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_isatty_r+0x1a>
 8007dfc:	6823      	ldr	r3, [r4, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_isatty_r+0x1a>
 8007e00:	602b      	str	r3, [r5, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	20004f44 	.word	0x20004f44

08007e08 <_lseek_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	4c07      	ldr	r4, [pc, #28]	; (8007e28 <_lseek_r+0x20>)
 8007e0c:	4605      	mov	r5, r0
 8007e0e:	4608      	mov	r0, r1
 8007e10:	4611      	mov	r1, r2
 8007e12:	2200      	movs	r2, #0
 8007e14:	6022      	str	r2, [r4, #0]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f7fa fac2 	bl	80023a0 <_lseek>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_lseek_r+0x1e>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_lseek_r+0x1e>
 8007e24:	602b      	str	r3, [r5, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20004f44 	.word	0x20004f44

08007e2c <__ascii_mbtowc>:
 8007e2c:	b082      	sub	sp, #8
 8007e2e:	b901      	cbnz	r1, 8007e32 <__ascii_mbtowc+0x6>
 8007e30:	a901      	add	r1, sp, #4
 8007e32:	b142      	cbz	r2, 8007e46 <__ascii_mbtowc+0x1a>
 8007e34:	b14b      	cbz	r3, 8007e4a <__ascii_mbtowc+0x1e>
 8007e36:	7813      	ldrb	r3, [r2, #0]
 8007e38:	600b      	str	r3, [r1, #0]
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	1c10      	adds	r0, r2, #0
 8007e3e:	bf18      	it	ne
 8007e40:	2001      	movne	r0, #1
 8007e42:	b002      	add	sp, #8
 8007e44:	4770      	bx	lr
 8007e46:	4610      	mov	r0, r2
 8007e48:	e7fb      	b.n	8007e42 <__ascii_mbtowc+0x16>
 8007e4a:	f06f 0001 	mvn.w	r0, #1
 8007e4e:	e7f8      	b.n	8007e42 <__ascii_mbtowc+0x16>

08007e50 <memmove>:
 8007e50:	4288      	cmp	r0, r1
 8007e52:	b510      	push	{r4, lr}
 8007e54:	eb01 0302 	add.w	r3, r1, r2
 8007e58:	d807      	bhi.n	8007e6a <memmove+0x1a>
 8007e5a:	1e42      	subs	r2, r0, #1
 8007e5c:	4299      	cmp	r1, r3
 8007e5e:	d00a      	beq.n	8007e76 <memmove+0x26>
 8007e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e64:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007e68:	e7f8      	b.n	8007e5c <memmove+0xc>
 8007e6a:	4283      	cmp	r3, r0
 8007e6c:	d9f5      	bls.n	8007e5a <memmove+0xa>
 8007e6e:	1881      	adds	r1, r0, r2
 8007e70:	1ad2      	subs	r2, r2, r3
 8007e72:	42d3      	cmn	r3, r2
 8007e74:	d100      	bne.n	8007e78 <memmove+0x28>
 8007e76:	bd10      	pop	{r4, pc}
 8007e78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007e80:	e7f7      	b.n	8007e72 <memmove+0x22>

08007e82 <__malloc_lock>:
 8007e82:	4770      	bx	lr

08007e84 <__malloc_unlock>:
 8007e84:	4770      	bx	lr

08007e86 <_realloc_r>:
 8007e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e88:	4607      	mov	r7, r0
 8007e8a:	4614      	mov	r4, r2
 8007e8c:	460e      	mov	r6, r1
 8007e8e:	b921      	cbnz	r1, 8007e9a <_realloc_r+0x14>
 8007e90:	4611      	mov	r1, r2
 8007e92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007e96:	f7ff bc33 	b.w	8007700 <_malloc_r>
 8007e9a:	b922      	cbnz	r2, 8007ea6 <_realloc_r+0x20>
 8007e9c:	f7ff fbe2 	bl	8007664 <_free_r>
 8007ea0:	4625      	mov	r5, r4
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ea6:	f000 f834 	bl	8007f12 <_malloc_usable_size_r>
 8007eaa:	42a0      	cmp	r0, r4
 8007eac:	d20f      	bcs.n	8007ece <_realloc_r+0x48>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f7ff fc25 	bl	8007700 <_malloc_r>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d0f2      	beq.n	8007ea2 <_realloc_r+0x1c>
 8007ebc:	4631      	mov	r1, r6
 8007ebe:	4622      	mov	r2, r4
 8007ec0:	f7fd fab6 	bl	8005430 <memcpy>
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	f7ff fbcc 	bl	8007664 <_free_r>
 8007ecc:	e7e9      	b.n	8007ea2 <_realloc_r+0x1c>
 8007ece:	4635      	mov	r5, r6
 8007ed0:	e7e7      	b.n	8007ea2 <_realloc_r+0x1c>
	...

08007ed4 <_read_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	4c07      	ldr	r4, [pc, #28]	; (8007ef4 <_read_r+0x20>)
 8007ed8:	4605      	mov	r5, r0
 8007eda:	4608      	mov	r0, r1
 8007edc:	4611      	mov	r1, r2
 8007ede:	2200      	movs	r2, #0
 8007ee0:	6022      	str	r2, [r4, #0]
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f7fa f9fc 	bl	80022e0 <_read>
 8007ee8:	1c43      	adds	r3, r0, #1
 8007eea:	d102      	bne.n	8007ef2 <_read_r+0x1e>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	b103      	cbz	r3, 8007ef2 <_read_r+0x1e>
 8007ef0:	602b      	str	r3, [r5, #0]
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	20004f44 	.word	0x20004f44

08007ef8 <__ascii_wctomb>:
 8007ef8:	b149      	cbz	r1, 8007f0e <__ascii_wctomb+0x16>
 8007efa:	2aff      	cmp	r2, #255	; 0xff
 8007efc:	bf85      	ittet	hi
 8007efe:	238a      	movhi	r3, #138	; 0x8a
 8007f00:	6003      	strhi	r3, [r0, #0]
 8007f02:	700a      	strbls	r2, [r1, #0]
 8007f04:	f04f 30ff 	movhi.w	r0, #4294967295
 8007f08:	bf98      	it	ls
 8007f0a:	2001      	movls	r0, #1
 8007f0c:	4770      	bx	lr
 8007f0e:	4608      	mov	r0, r1
 8007f10:	4770      	bx	lr

08007f12 <_malloc_usable_size_r>:
 8007f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f16:	1f18      	subs	r0, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	bfbc      	itt	lt
 8007f1c:	580b      	ldrlt	r3, [r1, r0]
 8007f1e:	18c0      	addlt	r0, r0, r3
 8007f20:	4770      	bx	lr
	...

08007f24 <_init>:
 8007f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f26:	bf00      	nop
 8007f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f2a:	bc08      	pop	{r3}
 8007f2c:	469e      	mov	lr, r3
 8007f2e:	4770      	bx	lr

08007f30 <_fini>:
 8007f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f32:	bf00      	nop
 8007f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f36:	bc08      	pop	{r3}
 8007f38:	469e      	mov	lr, r3
 8007f3a:	4770      	bx	lr
